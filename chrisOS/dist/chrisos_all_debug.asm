
Debug/cross-Linux/chrisos:     file format elf32-i386


Disassembly of section .text:

00001000 <tos>:
tos():
/home/yogi/src/os/chrisOS/asm/boot.s:15
.att_syntax noprefix
.code16
.globl tos
.type tos, @function
tos:
    ljmp $0,$tos3
    1000:	ea 05 10 00 00 e9 d2 	jmp    0xd2e9:0x1005

00001005 <tos3>:
tos3():
/home/yogi/src/os/chrisOS/asm/boot.s:18
tos3:
.code32
        jmp	initAP	# initialize awakened AP
    1005:	e9 d2 06 00 00       	jmp    16dc <initAP>
    100a:	66 90                	xchg   ax,ax
    100c:	02 b0 ad 1b 03 00    	add    dh,BYTE PTR [eax+0x31bad]
    1012:	00 00                	add    BYTE PTR [eax],al
    1014:	fb                   	sti    
    1015:	4f                   	dec    edi
    1016:	52                   	push   edx
    1017:	e4 e8                	in     al,0xe8

00001018 <_start>:
_start():
/home/yogi/src/os/chrisOS/asm/boot.s:84
        //mov %esp, stack_top

	# We are now ready to actually execute C code. We cannot embed that in an
	# assembly file, so we'll create a kernel.c file in a moment. In that file,
	# we'll create a C entry point called kernel_main and call it here.
	call kernel_main
    1018:	e8 f3 3a 02 00       	call   24b10 <kernel_main>
/home/yogi/src/os/chrisOS/asm/boot.s:92
	# infinite loop. To do that, we use the clear interrupt ('cli') instruction
	# to disable interrupts, the halt instruction ('hlt') to stop the CPU until
	# the next interrupt arrives, and jumping to the halt instruction if it ever
	# continues execution, just to be safe. We will create a local label rather
	# than real symbol and jump to there endlessly.
	cli
    101d:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/boot.s:93
	hlt
    101e:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/boot.s:95
.Lhang:
	jmp .Lhang
    101f:	eb fe                	jmp    101f <_start+0x7>
    1021:	66 90                	xchg   ax,ax
    1023:	66 90                	xchg   ax,ax
    1025:	66 90                	xchg   ax,ax
    1027:	90                   	nop

00001028 <isE820Available>:
isE820Available():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:11

.globl isE820Available
.type isE820Available, @function
isE820Available:
.code32
mov eax,0x10
    1028:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:12
mov ds,eax
    102d:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:13
mov saveESP, esp
    102f:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:14
mov sp, 0xfffc
    1035:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/src/os/chrisOS/asm/bootCPU.s:15
call leaveProtMode
    1039:	e8 67 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:17
.code16
mov ax, 0x8000
    103e:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:19
mov ss, ax
pusha
    1043:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:20
mov eax,0x0000E820
    1044:	66 b8 20 e8          	mov    ax,0xe820
    1048:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:21
mov edx, 0x534D4150
    104a:	66 ba 50 41          	mov    dx,0x4150
    104e:	4d                   	dec    ebp
    104f:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:22
mov ebx, 0
    1050:	66 bb 00 00          	mov    bx,0x0
    1054:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:23
mov ecx, 100
    1056:	66 b9 64 00          	mov    cx,0x64
    105a:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:24
lea di, e820data
    105c:	8d 3e                	lea    edi,[esi]
    105e:	dd 12                	fst    QWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:25
int 0x15
    1060:	cd 15                	int    0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:26
mov savedValue, eax
    1062:	66 a3 c5 12 61 e8    	mov    ds:0xe86112c5,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:29
popa
.code32
call reenterProtMode
    1068:	83 00 00             	add    DWORD PTR [eax],0x0
    106b:	00 c3                	add    bl,al

0000106d <getInt12Memory>:
getInt12Memory():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:37

.globl getInt12Memory
.type getInt12Memory, @function
getInt12Memory:
.code32
mov eax,0x10
    106d:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:38
mov ds,eax
    1072:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:39
mov saveESP, esp
    1074:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:40
mov sp, 0xfffc
    107a:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/src/os/chrisOS/asm/bootCPU.s:41
call leaveProtMode
    107e:	e8 22 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:43
.code16
mov ax, 0x8000
    1083:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:45
mov ss, ax
int 0x12
    1088:	cd 12                	int    0x12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:46
movzx edx,ax
    108a:	66 0f b7 d0          	movzx  dx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:47
mov savedValue, edx
    108e:	66 89 16             	mov    WORD PTR [esi],dx
    1091:	c5 12                	lds    edx,FWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:48
mov ax, 0x1112    
    1093:	b8 12 11 30 db       	mov    eax,0xdb301112
/home/yogi/src/os/chrisOS/asm/bootCPU.s:50
xor bl, bl    
int 0x10 
    1098:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:52
.code32
call reenterProtMode
    109a:	e8 50 00 00 00       	call   10ef <reenterProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:53
ret
    109f:	c3                   	ret    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:54
jmp hang
    10a0:	e9 b8 00 00 00       	jmp    115d <hang>

000010a5 <leaveProtMode>:
leaveProtMode():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:60
//background, do on team, etc.
.globl leaveProtMode
.type leaveProtMode, @function
leaveProtMode:
.code32
lgdt [rmGdtp]
    10a5:	0f 01 15 78 99 12 00 	lgdtd  ds:0x129978
/home/yogi/src/os/chrisOS/asm/bootCPU.s:61
jmp 0x8:Into16BitProt
    10ac:	ea b3 10 00 00 08 00 	jmp    0x8:0x10b3

000010b3 <Into16BitProt>:
Into16BitProt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:64
Into16BitProt:
.code16
mov ax,0x10
    10b3:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:66
mov ds, ax
mov gs, ax
    10b8:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:67
mov fs, ax
    10ba:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:68
mov es, ax
    10bc:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:70
.code32
mov eax, cr0
    10be:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:71
and al, 0xFe
    10c1:	24 fe                	and    al,0xfe
/home/yogi/src/os/chrisOS/asm/bootCPU.s:72
mov cr0, eax
    10c3:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:74
.code32
jmp 0:LeaveProtModeJmp
    10c6:	ea cd 10 00 00 00 00 	jmp    0x0:0x10cd

000010cd <LeaveProtModeJmp>:
LeaveProtModeJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:77
LeaveProtModeJmp:
.code16
mov ax, 0
    10cd:	b8 00 00 8e d8       	mov    eax,0xd88e0000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:79
mov ds, ax
mov es, ax
    10d2:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:80
mov fs, ax
    10d4:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:81
mov gs, ax
    10d6:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:82
sidt [saved_idt]
    10d8:	0f 01 0e             	sidtd  [esi]
    10db:	d7                   	xlat   BYTE PTR ds:[ebx]
    10dc:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:83
lidt [idt_real]
    10de:	01 1e                	add    DWORD PTR [esi],ebx
    10e0:	cf                   	iret   
    10e1:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:84
sgdt [saved_gdt16_lo]
    10e3:	01 06                	add    DWORD PTR [esi],eax
    10e5:	bb 12 b8 00 00       	mov    ebx,0xb812
/home/yogi/src/os/chrisOS/asm/bootCPU.s:87
.code16
mov ax,0
mov ss,ax
    10ea:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:88
mov ds, ax
    10ec:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:90
.code32
ret
    10ee:	c3                   	ret    

000010ef <reenterProtMode>:
reenterProtMode():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:96

.globl reenterProtMode
.type reenterProtMode, @function
reenterProtMode:
.code16
lgdt [saved_gdt16_lo]
    10ef:	0f 01 16             	lgdtd  [esi]
    10f2:	bb 12 0f 01 1e       	mov    ebx,0x1e010f12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:97
lidt [saved_idt]
    10f7:	d7                   	xlat   BYTE PTR ds:[ebx]
    10f8:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:99
.code32
mov eax, cr0
    10fa:	20 c0                	and    al,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:100
or  al, 0x1
    10fc:	0c 01                	or     al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:102
.code16
or  eax,0x10000   #clr 05/12/2016 - added wp bit
    10fe:	66 0d 00 00          	or     ax,0x0
    1102:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:104
.code32
mov cr0, eax
    1104:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:106
.code16
ljmp 0x18:reenterProtModeJmp
    1107:	ea 0c 11 18 00 66 b8 	jmp    0xb866:0x18110c

0000110c <reenterProtModeJmp>:
reenterProtModeJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:109
reenterProtModeJmp:
.code32
mov ax,0x10
    110c:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:110
mov ds,ax
    1110:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:111
mov es,ax
    1112:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:112
mov gs,ax
    1114:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:113
lgdt [kernelGDT]
    1116:	0f 01 15 88 99 12 00 	lgdtd  ds:0x129988
/home/yogi/src/os/chrisOS/asm/bootCPU.s:114
ljmp 0x8:reenterProtMode32Jmp
    111d:	ea 24 11 00 00 08 00 	jmp    0x8:0x1124

00001124 <reenterProtMode32Jmp>:
reenterProtMode32Jmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:117
reenterProtMode32Jmp:
.code16
mov ax,0x10
    1124:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:119
mov ds,ax
mov ss,ax
    1129:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:120
mov es,ax
    112b:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:121
mov fs,ax
    112d:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:122
mov gs,ax
    112f:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:124
.code32
mov eax,savedValue
    1131:	a1 c5 12 00 00       	mov    eax,ds:0x12c5
/home/yogi/src/os/chrisOS/asm/bootCPU.s:125
mov esp,saveESP
    1136:	8b 25 c1 12 00 00    	mov    esp,DWORD PTR ds:0x12c1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:126
ret
    113c:	c3                   	ret    

0000113d <set_gdt>:
set_gdt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:132

.globl set_gdt
.type set_gdt, @function
set_gdt:
.code32
push eax
    113d:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:133
    mov eax,[esp+8]
    113e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:134
    lgdt [eax]
    1142:	0f 01 10             	lgdtd  [eax]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:135
    jmp 0x08:.reload_CS
    1145:	ea 4c 11 00 00 08 00 	jmp    0x8:0x114c

0000114c <.reload_CS>:
.reload_CS():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:137
.reload_CS:
    mov eax, 0x10
    114c:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:138
    mov ds, ax
    1151:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:139
    mov es, ax
    1153:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:140
    mov fs, ax
    1155:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:141
    mov gs, ax
    1157:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:142
    mov ss, ax
    1159:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:143
    pop eax
    115b:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:144
    ret
    115c:	c3                   	ret    

0000115d <hang>:
hang():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:146
hang:
    hlt
    115d:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:147
    jmp hang
    115e:	eb fd                	jmp    115d <hang>

00001160 <idt_load>:
idt_load():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:154
// Loads the IDT defined in '_idtp' into the processor.
// This is declared in C as 'extern void idt_load();'
.globl idt_load
.type idt_load, @function
idt_load:
    push ebp
    1160:	55                   	push   ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:155
    mov ebp, esp
    1161:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:156
    push eax
    1163:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:157
    push ebx
    1164:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:158
    cli
    1165:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:159
    mov eax,[ebp+12]    #size + bottom of offset
    1166:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:160
    mov ebx,[ebp+8]     #top of offset
    1169:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:161
    ror eax,16          #mov the size out of the way
    116c:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:162
    mov ax,bx           #move the top of the address
    116f:	66 89 d8             	mov    ax,bx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:163
    ror eax,16
    1172:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:164
    shr ebx,16
    1175:	c1 eb 10             	shr    ebx,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:165
    mov idtPtrToLoad,eax
    1178:	a3 4e 15 00 00       	mov    ds:0x154e,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:166
    mov idtPtrToLoad+4,ebx
    117d:	89 1d 52 15 00 00    	mov    DWORD PTR ds:0x1552,ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:169
    //we always put our IDT in idtPtrToLoad before calling idt_load
//    mov eax, word ptr idtPtrToLoad
    lidt [idtPtrToLoad]
    1183:	0f 01 1d 4e 15 00 00 	lidtd  ds:0x154e
/home/yogi/src/os/chrisOS/asm/bootCPU.s:170
    pop ebx
    118a:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:171
    pop eax
    118b:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:172
    pop ebp
    118c:	5d                   	pop    ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:173
    ret
    118d:	c3                   	ret    

0000118e <init_PIT>:
init_PIT():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:179
 #Input
 # ebx   Desired PIT frequency in Hz
 .globl init_PIT
.type init_PIT, @function
init_PIT:
    push ebp
    118e:	55                   	push   ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:180
    mov ebp, esp
    118f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:182
    # Do some checking
    mov ebx,[ebp+8]
    1191:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:183
    pushad
    1194:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:184
    mov eax,0x10000                   #eax = reload value for slowest possible frequency (65536)
    1195:	b8 00 00 01 00       	mov    eax,0x10000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:185
    cmp ebx,18                        #Is the requested frequency too low?
    119a:	83 fb 12             	cmp    ebx,0x12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:186
    jbe .gotReloadValue               # yes, use slowest possible frequency
    119d:	76 34                	jbe    11d3 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:188
 
    mov eax,1                         #ax = reload value for fastest possible frequency (1)
    119f:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:189
    cmp ebx,1193181                   #Is the requested frequency too high?
    11a4:	81 fb dd 34 12 00    	cmp    ebx,0x1234dd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:190
    jae .gotReloadValue               # yes, use fastest possible frequency
    11aa:	73 27                	jae    11d3 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:194
 
    # Calculate the reload value
 
    mov eax,3579545
    11ac:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/src/os/chrisOS/asm/bootCPU.s:195
    mov edx,0                         #edx:eax = 3579545
    11b1:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:196
    div ebx                           #eax = 3579545 / frequency, edx = remainder
    11b6:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:197
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11b8:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:198
    jb .l1                            # no, round down
    11be:	72 01                	jb     11c1 <.l1>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:199
    inc eax                           # yes, round up
    11c0:	40                   	inc    eax

000011c1 <.l1>:
.l1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:201
 .l1:
    mov ebx,3
    11c1:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:202
    mov edx,0                         #edx:eax = 3579545 * 256 / frequency
    11c6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:203
    div ebx                           #eax = (3579545 * 256 / 3 * 256) / frequency
    11cb:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:204
    cmp edx,3 / 2                     #Is the remainder more than half?
    11cd:	83 fa 01             	cmp    edx,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:205
    jb .l2                            # no, round down
    11d0:	72 01                	jb     11d3 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:206
    inc eax                           # yes, round up
    11d2:	40                   	inc    eax

000011d3 <.gotReloadValue>:
.gotReloadValue():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:213
 
 
 # Store the reload value and calculate the actual frequency
 
 .gotReloadValue:
    push eax                          #Store reload_value for later
    11d3:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:214
    mov [PIT_reload_value],ax         #Store the reload value for later
    11d4:	66 a3 1f 13 00 00    	mov    ds:0x131f,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:215
    mov ebx,eax                       #ebx = reload value
    11da:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:217
 
    mov eax,3579545
    11dc:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/src/os/chrisOS/asm/bootCPU.s:218
    mov edx,0                         #edx:eax = 3579545
    11e1:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:219
    div ebx                           #eax = 3579545 / reload_value, edx = remainder
    11e6:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:220
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11e8:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:221
    jb .l3                            # no, round down
    11ee:	72 01                	jb     11f1 <.l3>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:222
    inc eax                           # yes, round up
    11f0:	40                   	inc    eax

000011f1 <.l3>:
.l3():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:224
 .l3:
    mov ebx,3
    11f1:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:225
    mov edx,0                         #edx:eax = 3579545 / reload_value
    11f6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:226
    div ebx                           #eax = (3579545 / 3) / frequency
    11fb:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:227
    cmp edx,3 / 2                     #Is the remainder more than half?
    11fd:	83 fa 01             	cmp    edx,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:228
    jb .l4                            # no, round down
    1200:	72 01                	jb     1203 <.l4>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:229
    inc eax                           # yes, round up
    1202:	40                   	inc    eax

00001203 <.l4>:
.l4():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:231
 .l4:
    mov [IRQ0_frequency],eax          #Store the actual frequency for displaying later
    1203:	a3 17 13 00 00       	mov    ds:0x1317,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:245
 #           time in ms = reload_value * 3000 / 3579545 * (2^42)/(2^42)
 #           time in ms = reload_value * 3000 * (2^42) / 3579545 / (2^42)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^42) * (2^32)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^10)
 
    pop ebx                           #ebx = reload_value
    1208:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:246
    mov eax,0xDBB3A062                #eax = 3000 * (2^42) / 3579545
    1209:	b8 62 a0 b3 db       	mov    eax,0xdbb3a062
/home/yogi/src/os/chrisOS/asm/bootCPU.s:247
    mul ebx                           #edx:eax = reload_value * 3000 * (2^42) / 3579545
    120e:	f7 e3                	mul    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:248
    shrd eax,edx,10
    1210:	0f ac d0 0a          	shrd   eax,edx,0xa
/home/yogi/src/os/chrisOS/asm/bootCPU.s:249
    shr edx,10                        #edx:eax = reload_value * 3000 * (2^42) / 3579545 / (2^10)
    1214:	c1 ea 0a             	shr    edx,0xa
/home/yogi/src/os/chrisOS/asm/bootCPU.s:251
 
    mov [IRQ0_ms],edx                 #Set whole ms between IRQs
    1217:	89 15 0f 13 00 00    	mov    DWORD PTR ds:0x130f,edx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:252
    mov [IRQ0_fractions],eax          #Set fractions of 1 ms between IRQs
    121d:	a3 07 13 00 00       	mov    ds:0x1307,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:257
 
 
 # Program the PIT channel
 
    pushfd
    1222:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:258
    cli                               #Disabled interrupts (just in case)
    1223:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:260
 
    mov al,0b00110100                  #channel 0, lobyte/hibyte, rate generator
    1224:	b0 34                	mov    al,0x34
/home/yogi/src/os/chrisOS/asm/bootCPU.s:261
    out 0x43, al
    1226:	e6 43                	out    0x43,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:263
 
    mov ax,[PIT_reload_value]         #ax = 16 bit reload value
    1228:	66 a1 1f 13 00 00    	mov    ax,ds:0x131f
/home/yogi/src/os/chrisOS/asm/bootCPU.s:264
    out 0x40,al                       #Set low byte of PIT reload value
    122e:	e6 40                	out    0x40,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:265
    mov al,ah                         #ax = high 8 bits of reload value
    1230:	88 e0                	mov    al,ah
/home/yogi/src/os/chrisOS/asm/bootCPU.s:266
    out 0x40,al                       #Set high byte of PIT reload value
    1232:	e6 40                	out    0x40,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:268
 
    popfd
    1234:	9d                   	popf   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:270
 
    popad
    1235:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:271
    pop ebp
    1236:	5d                   	pop    ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:272
    ret
    1237:	c3                   	ret    

00001238 <getE820Memory_asm>:
getE820Memory_asm():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:278

 .globl getE820Memory_asm
.type getE820Memory_asm, @function
getE820Memory_asm:
.code32
mov eax,0x10
    1238:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:279
mov ds,eax
    123d:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:280
mov saveESP, esp
    123f:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:281
mov sp, 0xfff7
    1245:	66 bc f7 ff          	mov    sp,0xfff7
/home/yogi/src/os/chrisOS/asm/bootCPU.s:282
call leaveProtMode
    1249:	e8 57 fe ff ff       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:283
pusha
    124e:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:285
.code16
lea eax, word ptr lowSmapTbl
    124f:	66 8d 06             	lea    ax,[esi]
    1252:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1253:	13 0f                	adc    ecx,DWORD PTR [edi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:287
.code32
movzx eax,ax
    1255:	b7 c0                	mov    bh,0xc0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:288
mov lowSmapTablePtr,eax
    1257:	a3 66 13 00 00       	mov    ds:0x1366,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:289
mov ax, 0
    125c:	66 b8 00 00          	mov    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:290
mov es, ax
    1260:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:291
mov ebx, 0
    1262:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:293
.code16
lea edi, word ptr [lowSmapTbl]
    1267:	66 8d 3e             	lea    di,[esi]
    126a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    126b:	13 66 b8             	adc    esp,DWORD PTR [esi-0x48]

0000126c <getE820Memory_asm_getNext>:
.code32():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:296
.code32:
getE820Memory_asm_getNext:
mov eax, 0xe820
    126c:	66 b8 20 e8          	mov    ax,0xe820
    1270:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:297
mov edx, 0x534D4150
    1272:	66 ba 50 41          	mov    dx,0x4150
    1276:	4d                   	dec    ebp
    1277:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:298
mov ecx, 0x24
    1278:	66 b9 24 00          	mov    cx,0x24
    127c:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:299
int 0x15
    127e:	cd 15                	int    0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:300
add edi,24
    1280:	66 83 c7 18          	add    di,0x18
/home/yogi/src/os/chrisOS/asm/bootCPU.s:301
cmp eax, 0x534D4150
    1284:	66 3d 50 41          	cmp    ax,0x4150
    1288:	4d                   	dec    ebp
    1289:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:302
jne getE820Memory_asm_exit
    128a:	75 1c                	jne    12a8 <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:303
cmp ecx,20
    128c:	66 83 f9 14          	cmp    cx,0x14
/home/yogi/src/os/chrisOS/asm/bootCPU.s:304
jl getE820Memory_asm_exit
    1290:	7c 16                	jl     12a8 <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:305
push eax
    1292:	66 50                	push   ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:306
mov eax,recCnt
    1294:	66 a1 cd 12 66 40    	mov    ax,ds:0x406612cd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:308
inc eax
mov recCnt, eax
    129a:	66 a3 cd 12 66 58    	mov    ds:0x586612cd,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:310
pop eax
cmp ebx,0
    12a0:	66 83 fb 00          	cmp    bx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:311
je  getE820Memory_asm_exit
    12a4:	74 02                	je     12a8 <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:312
jmp getE820Memory_asm_getNext
    12a6:	eb c4                	jmp    126c <getE820Memory_asm_getNext>

000012a8 <getE820Memory_asm_exit>:
getE820Memory_asm_exit():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:314
getE820Memory_asm_exit:
mov eax,recCnt
    12a8:	66 a1 cd 12 66 a3    	mov    ax,ds:0xa36612cd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:315
mov savedValue, eax
    12ae:	c5 12                	lds    edx,FWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:318


popa
    12b0:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:319
mov eax, savedValue
    12b1:	66 a1 c5 12 e8 35    	mov    ax,ds:0x35e812c5
/home/yogi/src/os/chrisOS/asm/bootCPU.s:321
.code32
call reenterProtMode
    12b7:	fe                   	(bad)  
    12b8:	ff                   	(bad)  
    12b9:	ff c3                	inc    ebx

000012bb <saved_gdt16_lo>:
	...

000012bd <saved_gdt16_hi>:
	...

000012bf <saved_gdt16_hi2>:
	...

000012c1 <saveESP>:
saveESP():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:322
ret
    12c1:	00 00                	add    BYTE PTR [eax],al
	...

000012c5 <savedValue>:
	...

000012cd <recCnt>:
	...

000012cf <idt_real>:
idt_real():
    12cf:	ff 03                	inc    DWORD PTR [ebx]
    12d1:	00 00                	add    BYTE PTR [eax],al
	...

000012d5 <retVal>:
	...

000012d7 <saved_idt>:
saved_idt():
    12d7:	00 00                	add    BYTE PTR [eax],al
    12d9:	00 00                	add    BYTE PTR [eax],al
	...

000012dd <e820data>:
	...

000012f7 <system_timer_fractions>:
	...

000012ff <system_timer_ms>:
	...

00001307 <IRQ0_fractions>:
	...

0000130f <IRQ0_ms>:
	...

00001317 <IRQ0_frequency>:
	...

0000131f <PIT_reload_value>:
PIT_reload_value():
    131f:	12 00                	adc    al,BYTE PTR [eax]
    1321:	00 00                	add    BYTE PTR [eax],al
    1323:	00 00                	add    BYTE PTR [eax],al
	...

00001327 <doPagingJump>:
doPagingJump():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:367
                         .word 0
 .globl doPagingJump
.type doPagingJump, @function
doPagingJump:
.code32
cli #turn off interrupts until we get the IDT fixed up
    1327:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:368
ljmp 0x20:pagingEnableJmp
    1328:	ea 2f 13 00 00 20 00 	jmp    0x20:0x132f

0000132f <pagingEnableJmp>:
pagingEnableJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:370
pagingEnableJmp:
push eax
    132f:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:371
mov ax, 0x10
    1330:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:372
mov ds, ax
    1334:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:373
mov es, ax
    1336:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:374
mov gs, ax
    1338:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:375
mov fs, ax
    133a:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:376
pop eax
    133c:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:377
ret
    133d:	c3                   	ret    

0000133e <doNonPagingJump>:
doNonPagingJump():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:381
 .globl doNonPagingJump
.type doNonPagingJump, @function
doNonPagingJump:
ljmp 0x28:pagingDisableJmp1
    133e:	ea 45 13 00 00 28 00 	jmp    0x28:0x1345

00001345 <pagingDisableJmp1>:
pagingDisableJmp1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:383
pagingDisableJmp1:
push eax
    1345:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:384
mov eax,cr0
    1346:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:385
and eax,0x7FFFFFFF
    1349:	25 ff ff ff 7f       	and    eax,0x7fffffff
/home/yogi/src/os/chrisOS/asm/bootCPU.s:386
mov cr0,eax
    134e:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:387
ljmp 0x28:pagingDisableJmp2
    1351:	ea 58 13 00 00 28 00 	jmp    0x28:0x1358

00001358 <pagingDisableJmp2>:
pagingDisableJmp2():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:389
pagingDisableJmp2:
mov ax, 0x18
    1358:	66 b8 18 00          	mov    ax,0x18
/home/yogi/src/os/chrisOS/asm/bootCPU.s:390
mov ds, ax
    135c:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:391
mov es, ax
    135e:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:392
mov gs, ax
    1360:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:393
mov fs, ax
    1362:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:394
pop eax
    1364:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:395
ret
    1365:	c3                   	ret    

00001366 <lowSmapTablePtr>:
	...

0000136e <lowSmapTbl>:
	...

0000154e <idtPtrToLoad>:
	...

00001556 <msg>:
msg():
    1556:	48                   	dec    eax
    1557:	65                   	gs
    1558:	6c                   	ins    BYTE PTR es:[edi],dx
    1559:	6c                   	ins    BYTE PTR es:[edi],dx
    155a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    155b:	20 66 72             	and    BYTE PTR [esi+0x72],ah
    155e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    155f:	6d                   	ins    DWORD PTR es:[edi],dx
    1560:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    1563:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1564:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    1567:	73 6f                	jae    15d8 <AP_startup+0x1a>
    1569:	72 20                	jb     158b <msg2+0xa>

0000156a <pid>:
pid():
    156a:	20 20                	and    BYTE PTR [eax],ah
    156c:	20 43 52             	and    BYTE PTR [ebx+0x52],al
    156f:	30 3d 78 78 78 78    	xor    BYTE PTR ds:0x78787878,bh

00001571 <msw>:
msw():
    1571:	78 78                	js     15eb <broadcast_AP_startup+0xa>
    1573:	78 78                	js     15ed <broadcast_AP_startup+0xc>
    1575:	78 78                	js     15ef <broadcast_AP_startup+0xe>
    1577:	78 78                	js     15f1 <broadcast_AP_startup+0x10>
    1579:	20 0a                	and    BYTE PTR [edx],cl
    157b:	0d 26 00 00 00       	or     eax,0x26

0000157c <len>:
len():
    157c:	26 00 00             	add    BYTE PTR es:[eax],al
	...

00001580 <att>:
att():
    1580:	0b 57 61             	or     edx,DWORD PTR [edi+0x61]

00001581 <msg2>:
msg2():
    1581:	57                   	push   edi
    1582:	61                   	popa   
    1583:	6b 69 6e 67          	imul   ebp,DWORD PTR [ecx+0x6e],0x67
    1587:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
    158a:	20 41 50             	and    BYTE PTR [ecx+0x50],al
    158d:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    1590:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1591:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    1594:	73 6f                	jae    1605 <.B0+0xb>
    1596:	72 73                	jb     160b <.B0+0x11>
    1598:	0a 0d 19 00 00 00    	or     cl,BYTE PTR ds:0x19

0000159a <len2>:
len2():
    159a:	19 00                	sbb    DWORD PTR [eax],eax
	...

0000159e <att2>:
att2():
    159e:	0c 01                	or     al,0x1

0000159f <mutex>:
mutex():
    159f:	01 00                	add    DWORD PTR [eax],eax

000015a1 <smpBootCPUCount>:
	...

000015a3 <smpBootCPUsStarted>:
	...

000015a5 <newSS>:
newSS():
    15a5:	00 20                	add    BYTE PTR [eax],ah
	...

000015a8 <theGDT>:
	...
theGDT():
    15b0:	ff                   	(bad)  
    15b1:	ff 00                	inc    DWORD PTR [eax]
    15b3:	00 00                	add    BYTE PTR [eax],al
    15b5:	92                   	xchg   edx,eax
    15b6:	8f 00                	pop    DWORD PTR [eax]

000015b8 <regGDT>:
regGDT():
    15b8:	0f 00 a8 15 00 00 89 	verw   WORD PTR [eax-0x76ffffeb]

000015be <AP_startup>:
AP_startup():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:444
#-----------------------------------------------------------------
#-----------------------------------------------------------------#-----------------------------------------------------------------

.global AP_startup
AP_startup:
movl     %esp, saveESP
    15be:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:446
//lea	tos, %esp		# and set up new stack
call    setup_timer_channel2
    15c4:	e8 7e 00 00 00       	call   1647 <setup_timer_channel2>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:448
//call	display_APIC_LocalID
call	broadcast_AP_startup
    15c9:	e8 13 00 00 00       	call   15e1 <broadcast_AP_startup>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:449
call	delay_until_APs_halt
    15ce:	e8 64 00 00 00       	call   1637 <delay_until_APs_halt>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:450
mov     $0x10, %eax
    15d3:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:451
mov     %eax, %ds
    15d8:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:452
mov     saveESP, %esp
    15da:	8b 25 c1 12 00 00    	mov    esp,DWORD PTR ds:0x12c1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:453
ret
    15e0:	c3                   	ret    

000015e1 <broadcast_AP_startup>:
broadcast_AP_startup():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:460
.global broadcast_AP_startup
broadcast_AP_startup:
#
# This procedure is called by the main CPU to awaken other CPUs.
#
	push	%ebx
    15e1:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:461
	push	%ds
    15e2:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:464

	# address the Local-APIC registers' page
	mov	$0x10, %ax
    15e3:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:465
	mov	%ax, %ds
    15e7:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:466
    	mov     kAPICRegisterRemapAddress, %ebx
    15e9:	8b 1d 70 98 12 00    	mov    ebx,DWORD PTR ds:0x129870
/home/yogi/src/os/chrisOS/asm/bootCPU.s:469

	# issue an 'INIT' Inter-Processor Interrupt command
	mov	$0x000C4500, %eax	# broadcase INIT-IPI
    15ef:	b8 00 45 0c 00       	mov    eax,0xc4500
/home/yogi/src/os/chrisOS/asm/bootCPU.s:470
	mov	%eax, 0x300(%ebx)	# to all-except-self
    15f4:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

000015fa <.B0>:
.B0():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:471
.B0:	bt	$12, 0x300(%ebx)	# command in progress?
    15fa:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    1601:	0c 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:472
	jc	.B0			# yes, spin till done
    1602:	72 f6                	jb     15fa <.B0>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:475

	# do ten-millisecond delay, allow time for APs to awaken
	mov	$10000, %eax		# number of microseconds
    1604:	b8 10 27 00 00       	mov    eax,0x2710
/home/yogi/src/os/chrisOS/asm/bootCPU.s:476
	call	delay_EAX_micro_secs	# for a programmed delay
    1609:	e8 f9 00 00 00       	call   1707 <delay_EAX_micro_secs>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:479
	
	# finish the Intel 'MP Initialization Protocol'
	mov	$5, %ecx		# issue 'Startup' twice
    160e:	b9 05 00 00 00       	mov    ecx,0x5

00001613 <nxIPI>:
nxIPI():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:481
#nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI #startup IPI for base address of 4096
nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI 
    1613:	b8 01 46 0c 00       	mov    eax,0xc4601
/home/yogi/src/os/chrisOS/asm/bootCPU.s:482
	mov	%eax, 0x300(%ebx)	# to all-except-self
    1618:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

0000161e <.B1>:
.B1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:483
.B1:	bt	$12, 0x300(%ebx)	# command in progress?
    161e:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    1625:	0c 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:484
	jc	.B1			# yes, spin till done
    1626:	72 f6                	jb     161e <.B1>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:487

	# delay for 200 microseconds	
	mov	$200, %eax		# number of microseconds
    1628:	b8 c8 00 00 00       	mov    eax,0xc8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:488
	call	delay_EAX_micro_secs	# for a programmed delay
    162d:	e8 d5 00 00 00       	call   1707 <delay_EAX_micro_secs>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:489
	loop	nxIPI	
    1632:	e2 df                	loop   1613 <nxIPI>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:491
		
	pop	%ds
    1634:	1f                   	pop    ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:492
	pop	%ebx
    1635:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:493
	ret
    1636:	c3                   	ret    

00001637 <delay_until_APs_halt>:
delay_until_APs_halt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:500
delay_until_APs_halt:
#
# This procedure is called by the main CPU so that it will not
# terminate our program until the other CPUs have been halted.
#
.W0:	mov	smpBootCPUCount, %ax		# number of APs awoken
    1637:	66 a1 a1 15 00 00    	mov    ax,ds:0x15a1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:501
	sub	smpBootCPUsStarted, %ax		# less number finished
    163d:	66 2b 05 a3 15 00 00 	sub    ax,WORD PTR ds:0x15a3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:502
	jnz	.W0			# spin unless all done
    1644:	75 f1                	jne    1637 <delay_until_APs_halt>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:503
	ret
    1646:	c3                   	ret    

00001647 <setup_timer_channel2>:
setup_timer_channel2():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:512
#
# This procedure initializes the 8254 Programmable Timer/Counter
# so Timer Channel 2 can be used in 'one-shot' timing durations.
#
	# enable the 8254 Channel-2 counter
	in	$0x61, %al		# get PORT_B settings
    1647:	e4 61                	in     al,0x61
/home/yogi/src/os/chrisOS/asm/bootCPU.s:513
	and	$0xFD, %al		# turn PC speaker off
    1649:	24 fd                	and    al,0xfd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:514
	or	$0x01, %al		# turn on Gate2 input
    164b:	0c 01                	or     al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:515
	out	%al, $0x61		# output new settings
    164d:	e6 61                	out    0x61,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:518

	# program channel-2 for one-shot countdown
	mov	$0xB0, %al		# chn2, r/w LSB/MSB
    164f:	b0 b0                	mov    al,0xb0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:519
	out	%al, $0x43		# issue PIT command
    1651:	e6 43                	out    0x43,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:520
	ret
    1653:	c3                   	ret    

00001654 <display_APIC_LocalID>:
display_APIC_LocalID():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:534
# video services.  Because ROM-BIOS routines are not 'reentrant'
# it is necessary to employ a 'spinlock' to insure that only one
# processor at a time will be executing these ROM-BIOS services. 
#
	# read the Local-APIC ID-register
	push	%ds
    1654:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:535
	xor	%ax, %ax
    1655:	31 c0                	xor    eax,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:536
	mov	%ax, %ds
    1657:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:537
	mov	$0xFEE00020, %ebx
    1659:	66 bb 20 00          	mov    bx,0x20
    165d:	e0 fe                	loopne 165d <display_APIC_LocalID+0x9>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:538
	mov	(%ebx), %eax
    165f:	67 66 8b 03          	mov    ax,WORD PTR [bp+di]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:539
	pop	%ds
    1663:	1f                   	pop    ds

00001664 <spin>:
spin():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:542

	# acquire the spinlock -- allow only one CPU at a time
spin:	bt	$0, mutex
    1664:	0f ba 26 9f          	bt     DWORD PTR [esi],0x9f
    1668:	15 00 73 f8 f0       	adc    eax,0xf0f87300
/home/yogi/src/os/chrisOS/asm/bootCPU.s:545
	jnc	spin
	lock	
	btr	$0, mutex
    166d:	0f ba 36 9f          	btr    DWORD PTR [esi],0x9f
    1671:	15 00 73 ef 66       	adc    eax,0x66ef7300
/home/yogi/src/os/chrisOS/asm/bootCPU.s:549
	jnc	spin

	# write CPU Local-APIC ID-number into shared buffer
	rol	$8, %eax		# get ID-number in AL
    1676:	c1 c0 08             	rol    eax,0x8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:550
	and	$0xF, %al		# isolate lowest nybble
    1679:	24 0f                	and    al,0xf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:553

#unremark to have the first CPu clear the screen
        pusha
    167b:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:554
        cmp $0x1,%al
    167c:	3c 01                	cmp    al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:555
        ja overClearScreen
    167e:	77 28                	ja     16a8 <overClearScreen>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:556
        call clearScreen
    1680:	e8 01 01 b4 0f       	call   fb41786 <_months_abbrev+0xfa17d66>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:559
#jmp overClearScreen
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    1685:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:561

	mov	$0x02, %ah		# set cursor position
    1687:	b4 02                	mov    ah,0x2
/home/yogi/src/os/chrisOS/asm/bootCPU.s:562
        mov     $0,%bh
    1689:	b7 00                	mov    bh,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:563
        mov     $0x2000,%dx
    168b:	ba 00 20 cd 10       	mov    edx,0x10cd2000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:565
	int	$0x10			# call video bios
        mov     $0x3,ah
    1690:	b4 03                	mov    ah,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:566
        int     $0x10
    1692:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:567
	mov	$0x1301, %ax		# write_string
    1694:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/src/os/chrisOS/asm/bootCPU.s:568
	lea	msg2, %bp		# point ES:BP to string
    1699:	81 15 8b 0e 9a 15 8a 	adc    DWORD PTR ds:0x159a0e8b,0x159e1e8a
    16a0:	1e 9e 15 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:571
	mov	len2, %cx		# number of characters
	mov	att2, %bl		# display attributes
	mov	$0x1301, %ax		# write_string
    16a3:	b8 01 13 cd 10       	mov    eax,0x10cd1301

000016a8 <overClearScreen>:
overClearScreen():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:575
	int	$0x10			# call video bios 

overClearScreen:
        popa
    16a8:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:576
        or	$'0', %al		# convert to numeral	
    16a9:	0c 30                	or     al,0x30
/home/yogi/src/os/chrisOS/asm/bootCPU.s:577
	movb	%al, pid		# write to shared buffer	
    16ab:	a2 6a 15 8d 3e       	mov    ds:0x3e8d156a,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:580
#jmp overPrinting
	# format the contents of register CR0 for display
	lea	msw, %di
    16b0:	71 15                	jno    16c7 <overClearScreen+0x1f>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:581
	mov	%cr0, %eax
    16b2:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:582
	call	eax2hex
    16b5:	e8 a4 00 b4 0f       	call   fb4175e <_months_abbrev+0xfa17d3e>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:585
	# display the information using ROM-BIOS routines
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    16ba:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:587

	mov	$0x03, %ah		# get cursor position
    16bc:	b4 03                	mov    ah,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:588
	int	$0x10			# call video bios
    16be:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:590

	mov	$0x1301, %ax		# write_string
    16c0:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/src/os/chrisOS/asm/bootCPU.s:591
	lea	msg, %bp		# point ES:BP to string
    16c5:	56                   	push   esi
    16c6:	15 8b 0e 7c 15       	adc    eax,0x157c0e8b
/home/yogi/src/os/chrisOS/asm/bootCPU.s:593
	mov	len, %cx		# number of characters
	mov	att, %bl		# display attributes
    16cb:	8a 1e                	mov    bl,BYTE PTR [esi]
    16cd:	80 15 b8 01 13 cd 10 	adc    BYTE PTR ds:0xcd1301b8,0x10

000016d4 <overPrinting>:
overPrinting():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:598
	mov	$0x1301, %ax		# write_string
	int	$0x10			# call video bios 
overPrinting:
	# release spinlock -- finished with 'non-reentrant' code
	lock 	
    16d4:	f0 0f ba 2e 9f       	lock bts DWORD PTR [esi],0x9f
/home/yogi/src/os/chrisOS/asm/bootCPU.s:599
	bts 	$0, mutex
    16d9:	15 00 c3 fa 8c       	adc    eax,0x8cfac300

000016dc <initAP>:
initAP():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:610
#=================================================================
#-----------------------------------------------------------------
.code16
.globl initAP
.type initAP, @function
initAP:	cli
    16dc:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:611
	mov	%cs, %ax		# address program's data
    16dd:	8c c8                	mov    eax,cs
/home/yogi/src/os/chrisOS/asm/bootCPU.s:612
	mov	%ax, %ds		#    with DS register
    16df:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:613
	mov	%ax, %es		#    also ES register
    16e1:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:614
	lock				# insure 'atomic' update
    16e3:	f0 ff 06             	lock inc DWORD PTR [esi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:615
	incw	smpBootCPUCount			# increment count of APs
    16e6:	a1 15 b8 00 10       	mov    eax,ds:0x1000b815
/home/yogi/src/os/chrisOS/asm/bootCPU.s:619

	# setup an exclusive stack-area for this processor
	mov	$0x1000, %ax		# paragraphs in segment
	xadd	%ax, newSS		# 'atomic' xchg-and-add
    16eb:	0f c1 06             	xadd   DWORD PTR [esi],eax
    16ee:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    16ef:	15 8e d0 66 31       	adc    eax,0x3166d08e
/home/yogi/src/os/chrisOS/asm/bootCPU.s:621
	mov	%ax, %ss		# segment-address in SS
	xor	%esp, %esp		# top-of-stack into ESP
    16f4:	e4 66                	in     al,0x66
/home/yogi/src/os/chrisOS/asm/bootCPU.s:622
        mov     $0,%esp
    16f6:	bc 00 00 00 00       	mov    esp,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:623
	call	allow_4GB_addressing	# adjust DS's seg-limit
    16fb:	e8 38 00 f0 ff       	call   fff01738 <CHECKSUM+0x1b9dc73d>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:628
#	call	display_APIC_LocalID	# display this CPU's ID

	# put this processor to sleep
	lock				# insure 'atomic' update
	incw	smpBootCPUsStarted			# increment count of APs
    1700:	06                   	push   es
    1701:	a3 15 fa f4 eb       	mov    ds:0xebf4fa15,eax

00001703 <freeze>:
freeze():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:630

freeze:	cli				# do not awaken this CPU
    1703:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:631
	hlt				# 'fetch-execute' ceases	
    1704:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:632
	jmp	freeze			# just-in-case of an NMI
    1705:	eb fc                	jmp    1703 <freeze>

00001707 <delay_EAX_micro_secs>:
delay_EAX_micro_secs():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:639
#-----------------------------------------------------------------
delay_EAX_micro_secs:
#
# This procedure creates a programmed delay for EAX microseconds.
#
	pushal
    1707:	66 60                	pushaw 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:641

	mov	%eax, %ecx		# number of microseconds
    1709:	66 89 c1             	mov    cx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:642
	mov	$100000, %eax		# microseconds-per-second
    170c:	66 b8 a0 86          	mov    ax,0x86a0
    1710:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:643
	xor	%edx, %edx		# is extended to quadword
    1712:	66 31 d2             	xor    dx,dx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:644
	div	%ecx			# division by double-word
    1715:	66 f7 f1             	div    cx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:646
	
	mov	%eax, %ecx		# input-frequency divisor
    1718:	66 89 c1             	mov    cx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:647
	mov	$1193182, %eax		# timer's input-frequency
    171b:	66 b8 de 34          	mov    ax,0x34de
    171f:	12 00                	adc    al,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:648
	xor	%edx, %edx		# is extended to quadword
    1721:	66 31 d2             	xor    dx,dx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:649
	div	%ecx			# division by double-word
    1724:	66 f7 f1             	div    cx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:651

	out	%al, $0x42		# transfer to Latch LSB
    1727:	e6 42                	out    0x42,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:652
	xchg	%al, %ah		# LSB swapped with MSB
    1729:	86 c4                	xchg   ah,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:653
	out	%al, $0x42		# transfer to Latch MSB
    172b:	e6 42                	out    0x42,al

0000172d <.T0>:
.T0():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:655

.T0:	in	$0x61, %al		# check PORT_B settings
    172d:	e4 61                	in     al,0x61
/home/yogi/src/os/chrisOS/asm/bootCPU.s:656
	test	$0x20, %al		# has counter2 expired?
    172f:	a8 20                	test   al,0x20
/home/yogi/src/os/chrisOS/asm/bootCPU.s:657
	jz	.T0			# no, continue polling
    1731:	74 fa                	je     172d <.T0>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:659
	
	popal
    1733:	66 61                	popaw  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:660
	ret
    1735:	c3                   	ret    

00001736 <allow_4GB_addressing>:
allow_4GB_addressing():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:669
#
# This procedure will be called by each processor in order to 
# raise the 'hidden' segment-limit in its DS segment-register
# which permits Local-APIC registers to be addressed with DS.   
#
	pushf				# preserve FLAGS settings
    1736:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:670
	push	%ds			# preserve DS contents
    1737:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:672

	cli				# no device interrupts
    1738:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:674

	mov	%cr0, %eax		# get machine status
    1739:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:675
	bts	$0, %eax		# set PE-bit to 1
    173c:	66 0f ba e8 00       	bts    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:676
	mov	%eax, %cr0		# enter protected mode
    1741:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:677
	lgdt	regGDT			# load GDTR register-image
    1744:	0f 01 16             	lgdtd  [esi]
    1747:	b8 15 b8 08 00       	mov    eax,0x8b815
/home/yogi/src/os/chrisOS/asm/bootCPU.s:679
	mov	$sel_FS, %ax		# address 4GB data-segment
	mov	%ax, %ds		#   with the DS register
    174c:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:681

	mov	%cr0, %eax		# get machine status
    174e:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:682
	btr	$0, %eax		# reset PE-bit to 0
    1751:	66 0f ba f0 00       	btr    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:683
	mov	%eax, %cr0		# leave protected mode
    1756:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:685
.code16		
	pop	%ds			# restore register DS
    1759:	1f                   	pop    ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:686
	popf				# restore FLAGS value
    175a:	9d                   	popf   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:687
	ret				
    175b:	c3                   	ret    

0000175c <eax2hex>:
eax2hex():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:690
#-----------------------------------------------------------------
eax2hex:  # converts value in EAX to hexadecimal string at DS:DI
	pusha	
    175c:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:692

	mov	$8, %cx
    175d:	b9 08 00 66 c1       	mov    ecx,0xc1660008

00001760 <nxnyb>:
nxnyb():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:694
nxnyb:
	rol	$4, %eax
    1760:	66 c1 c0 04          	rol    ax,0x4
/home/yogi/src/os/chrisOS/asm/bootCPU.s:695
	mov	%al, %bl
    1764:	88 c3                	mov    bl,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:696
	and	$0xF, %bx
    1766:	83 e3 0f             	and    ebx,0xf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:697
	mov	hex(%bx), %dl
    1769:	8a 97 74 17 88 15    	mov    dl,BYTE PTR [edi+0x15881774]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:699
	mov	%dl, (%di)
	inc	%di
    176f:	47                   	inc    edi
/home/yogi/src/os/chrisOS/asm/bootCPU.s:700
	loop	nxnyb	
    1770:	e2 ee                	loop   1760 <nxnyb>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:702

	popa
    1772:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:703
	ret
    1773:	c3                   	ret    

00001774 <hex>:
hex():
    1774:	30 31                	xor    BYTE PTR [ecx],dh
    1776:	32 33                	xor    dh,BYTE PTR [ebx]
    1778:	34 35                	xor    al,0x35
    177a:	36                   	ss
    177b:	37                   	aaa    
    177c:	38 39                	cmp    BYTE PTR [ecx],bh
    177e:	41                   	inc    ecx
    177f:	42                   	inc    edx
    1780:	43                   	inc    ebx
    1781:	44                   	inc    esp
    1782:	45                   	inc    ebp
    1783:	46                   	inc    esi

00001784 <clearScreen>:
clearScreen():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:709
#-----------------------------------------------------------------
hex:	.ascii	"0123456789ABCDEF"	# array of hex numerals

.intel_syntax noprefix
clearScreen:
    pusha
    1784:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:711

    mov ax, 0x0700  # function 07, AL=0 means scroll whole window
    1785:	b8 00 07 b7 07       	mov    eax,0x7b70700
/home/yogi/src/os/chrisOS/asm/bootCPU.s:713
    mov bh, 0x07    # character attribute = white on black
    mov cx, 0x0000  # row = 0, col = 0
    178a:	b9 00 00 ba 4f       	mov    ecx,0x4fba0000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:714
    mov dx, 0x184f  # row = 24 (0x18), col = 79 (0x4f)
    178f:	18 cd                	sbb    ch,cl
/home/yogi/src/os/chrisOS/asm/bootCPU.s:715
    int 0x10        # call BIOS video interrupt
    1791:	10 b4 02 b7 00 ba 00 	adc    BYTE PTR [edx+eax*1+0xba00b7],dh
/home/yogi/src/os/chrisOS/asm/bootCPU.s:718
    mov ah,02
    mov bh,0
    mov dx,0
    1798:	00 cd                	add    ch,cl
/home/yogi/src/os/chrisOS/asm/bootCPU.s:719
    int 0x10
    179a:	10 61 c3             	adc    BYTE PTR [ecx-0x3d],ah
	...

0000fec5 <stk>:
stk():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:721
    popa
    ret
    fec5:	fa                   	cli    
    fec6:	fa                   	cli    
    fec7:	fa                   	cli    
    fec8:	fa                   	cli    
    fec9:	fa                   	cli    
    feca:	fa                   	cli    
    fecb:	fa                   	cli    
    fecc:	fa                   	cli    
    fecd:	fa                   	cli    
    fece:	fa                   	cli    
    fecf:	fa                   	cli    
    fed0:	fa                   	cli    
    fed1:	fa                   	cli    
    fed2:	fa                   	cli    
    fed3:	fa                   	cli    
    fed4:	fa                   	cli    
    fed5:	fa                   	cli    
    fed6:	fa                   	cli    
    fed7:	fa                   	cli    
    fed8:	fa                   	cli    
    fed9:	fa                   	cli    
    feda:	fa                   	cli    
    fedb:	fa                   	cli    
    fedc:	fa                   	cli    
    fedd:	fa                   	cli    
    fede:	fa                   	cli    
    fedf:	fa                   	cli    
    fee0:	fa                   	cli    
    fee1:	fa                   	cli    
    fee2:	fa                   	cli    
    fee3:	fa                   	cli    
    fee4:	fa                   	cli    
    fee5:	fa                   	cli    
    fee6:	fa                   	cli    
    fee7:	fa                   	cli    
    fee8:	fa                   	cli    
    fee9:	fa                   	cli    
    feea:	fa                   	cli    
    feeb:	fa                   	cli    
    feec:	fa                   	cli    
    feed:	fa                   	cli    
    feee:	fa                   	cli    
    feef:	fa                   	cli    
    fef0:	fa                   	cli    
    fef1:	fa                   	cli    
    fef2:	fa                   	cli    
    fef3:	fa                   	cli    
    fef4:	fa                   	cli    
    fef5:	fa                   	cli    
    fef6:	fa                   	cli    
    fef7:	fa                   	cli    
    fef8:	fa                   	cli    
    fef9:	fa                   	cli    
    fefa:	fa                   	cli    
    fefb:	fa                   	cli    
    fefc:	fa                   	cli    
    fefd:	fa                   	cli    
    fefe:	fa                   	cli    
    feff:	fa                   	cli    
    ff00:	fa                   	cli    
    ff01:	fa                   	cli    
    ff02:	fa                   	cli    
    ff03:	fa                   	cli    
    ff04:	fa                   	cli    
    ff05:	fa                   	cli    
    ff06:	fa                   	cli    
    ff07:	fa                   	cli    
    ff08:	fa                   	cli    
    ff09:	fa                   	cli    
    ff0a:	fa                   	cli    
    ff0b:	fa                   	cli    
    ff0c:	fa                   	cli    
    ff0d:	fa                   	cli    
    ff0e:	fa                   	cli    
    ff0f:	fa                   	cli    
    ff10:	fa                   	cli    
    ff11:	fa                   	cli    
    ff12:	fa                   	cli    
    ff13:	fa                   	cli    
    ff14:	fa                   	cli    
    ff15:	fa                   	cli    
    ff16:	fa                   	cli    
    ff17:	fa                   	cli    
    ff18:	fa                   	cli    
    ff19:	fa                   	cli    
    ff1a:	fa                   	cli    
    ff1b:	fa                   	cli    
    ff1c:	fa                   	cli    
    ff1d:	fa                   	cli    
    ff1e:	fa                   	cli    
    ff1f:	fa                   	cli    
    ff20:	fa                   	cli    
    ff21:	fa                   	cli    
    ff22:	fa                   	cli    
    ff23:	fa                   	cli    
    ff24:	fa                   	cli    
    ff25:	fa                   	cli    
    ff26:	fa                   	cli    
    ff27:	fa                   	cli    
    ff28:	fa                   	cli    
    ff29:	fa                   	cli    
    ff2a:	fa                   	cli    
    ff2b:	fa                   	cli    
    ff2c:	fa                   	cli    
    ff2d:	fa                   	cli    
    ff2e:	fa                   	cli    
    ff2f:	fa                   	cli    
    ff30:	fa                   	cli    
    ff31:	fa                   	cli    
    ff32:	fa                   	cli    
    ff33:	fa                   	cli    
    ff34:	fa                   	cli    
    ff35:	fa                   	cli    
    ff36:	fa                   	cli    
    ff37:	fa                   	cli    
    ff38:	fa                   	cli    
    ff39:	fa                   	cli    
    ff3a:	fa                   	cli    
    ff3b:	fa                   	cli    
    ff3c:	fa                   	cli    
    ff3d:	fa                   	cli    
    ff3e:	fa                   	cli    
    ff3f:	fa                   	cli    
    ff40:	fa                   	cli    
    ff41:	fa                   	cli    
    ff42:	fa                   	cli    
    ff43:	fa                   	cli    
    ff44:	fa                   	cli    
    ff45:	fa                   	cli    
    ff46:	fa                   	cli    
    ff47:	fa                   	cli    
    ff48:	fa                   	cli    
    ff49:	fa                   	cli    
    ff4a:	fa                   	cli    
    ff4b:	fa                   	cli    
    ff4c:	fa                   	cli    
    ff4d:	fa                   	cli    
    ff4e:	fa                   	cli    
    ff4f:	fa                   	cli    
    ff50:	fa                   	cli    
    ff51:	fa                   	cli    
    ff52:	fa                   	cli    
    ff53:	fa                   	cli    
    ff54:	fa                   	cli    
    ff55:	fa                   	cli    
    ff56:	fa                   	cli    
    ff57:	fa                   	cli    
    ff58:	fa                   	cli    
    ff59:	fa                   	cli    
    ff5a:	fa                   	cli    
    ff5b:	fa                   	cli    
    ff5c:	fa                   	cli    
    ff5d:	fa                   	cli    
    ff5e:	fa                   	cli    
    ff5f:	fa                   	cli    
    ff60:	fa                   	cli    
    ff61:	fa                   	cli    
    ff62:	fa                   	cli    
    ff63:	fa                   	cli    
    ff64:	fa                   	cli    
    ff65:	fa                   	cli    
    ff66:	fa                   	cli    
    ff67:	fa                   	cli    
    ff68:	fa                   	cli    
    ff69:	fa                   	cli    
    ff6a:	fa                   	cli    
    ff6b:	fa                   	cli    
    ff6c:	fa                   	cli    
    ff6d:	fa                   	cli    
    ff6e:	fa                   	cli    
    ff6f:	fa                   	cli    
    ff70:	fa                   	cli    
    ff71:	fa                   	cli    
    ff72:	fa                   	cli    
    ff73:	fa                   	cli    
    ff74:	fa                   	cli    
    ff75:	fa                   	cli    
    ff76:	fa                   	cli    
    ff77:	fa                   	cli    
    ff78:	fa                   	cli    
    ff79:	fa                   	cli    
    ff7a:	fa                   	cli    
    ff7b:	fa                   	cli    
    ff7c:	fa                   	cli    
    ff7d:	fa                   	cli    
    ff7e:	fa                   	cli    
    ff7f:	fa                   	cli    
    ff80:	fa                   	cli    
    ff81:	fa                   	cli    
    ff82:	fa                   	cli    
    ff83:	fa                   	cli    
    ff84:	fa                   	cli    
    ff85:	fa                   	cli    
    ff86:	fa                   	cli    
    ff87:	fa                   	cli    
    ff88:	fa                   	cli    
    ff89:	fa                   	cli    
    ff8a:	fa                   	cli    
    ff8b:	fa                   	cli    
    ff8c:	fa                   	cli    
    ff8d:	fa                   	cli    
    ff8e:	fa                   	cli    
    ff8f:	fa                   	cli    
    ff90:	fa                   	cli    
    ff91:	fa                   	cli    
    ff92:	fa                   	cli    
    ff93:	fa                   	cli    
    ff94:	fa                   	cli    
    ff95:	fa                   	cli    
    ff96:	fa                   	cli    
    ff97:	fa                   	cli    
    ff98:	fa                   	cli    
    ff99:	fa                   	cli    
    ff9a:	fa                   	cli    
    ff9b:	fa                   	cli    
    ff9c:	fa                   	cli    
    ff9d:	fa                   	cli    
    ff9e:	fa                   	cli    
    ff9f:	fa                   	cli    
    ffa0:	fa                   	cli    
    ffa1:	fa                   	cli    
    ffa2:	fa                   	cli    
    ffa3:	fa                   	cli    
    ffa4:	fa                   	cli    
    ffa5:	fa                   	cli    
    ffa6:	fa                   	cli    
    ffa7:	fa                   	cli    
    ffa8:	fa                   	cli    
    ffa9:	fa                   	cli    
    ffaa:	fa                   	cli    
    ffab:	fa                   	cli    
    ffac:	fa                   	cli    
    ffad:	fa                   	cli    
    ffae:	fa                   	cli    
    ffaf:	fa                   	cli    
    ffb0:	fa                   	cli    
    ffb1:	fa                   	cli    
    ffb2:	fa                   	cli    
    ffb3:	fa                   	cli    
    ffb4:	fa                   	cli    
    ffb5:	fa                   	cli    
    ffb6:	fa                   	cli    
    ffb7:	fa                   	cli    
    ffb8:	fa                   	cli    
    ffb9:	fa                   	cli    
    ffba:	fa                   	cli    
    ffbb:	fa                   	cli    
    ffbc:	fa                   	cli    
    ffbd:	fa                   	cli    
    ffbe:	fa                   	cli    
    ffbf:	fa                   	cli    
    ffc0:	fa                   	cli    
    ffc1:	fa                   	cli    
    ffc2:	fa                   	cli    
    ffc3:	fa                   	cli    

0000ffc4 <irq13ESP>:
irq13ESP():
    ffc4:	00 00                	add    BYTE PTR [eax],al
    ffc6:	10 00                	adc    BYTE PTR [eax],al
    ffc8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffcc <irq13SavedESP>:
	...

0000ffd4 <irq14ESP>:
irq14ESP():
    ffd4:	00 00                	add    BYTE PTR [eax],al
    ffd6:	10 00                	adc    BYTE PTR [eax],al
    ffd8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffdc <irq14SavedESP>:
	...

0000ffe4 <espForFatalExceptions>:
espForFatalExceptions():
    ffe4:	00 00                	add    BYTE PTR [eax],al
    ffe6:	10 00                	adc    BYTE PTR [eax],al
    ffe8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffec <savedESP>:
	...

0000fff4 <bufr>:
	...

00010004 <savedESP_irq0>:
	...

00010014 <debugReturnFlags>:
	...

0001001c <debugESP>:
debugESP():
   1001c:	00 00                	add    BYTE PTR [eax],al
	...

00010020 <_isr_00_wrapper>:
_isr_00_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:38
debugESP: .WORD 0,0


.global _isr_00_wrapper        
_isr_00_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   10020:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:39
        mov exceptionAX,eax
   10026:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:40
        mov exceptionBP, ebp
   1002b:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:41
        mov     ebp, esp
   10031:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:42
        mov     ax, 0x0                  # save exception number
   10033:	66 b8 00 00          	mov    ax,0x0
/home/yogi/src/os//chrisOS/asm/isr.s:43
        jmp isr_My_Common
   10037:	e9 5e 01 00 00       	jmp    1019a <isr_My_Common>

0001003c <_isr_02_wrapper>:
_isr_02_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:46
.global _isr_02_wrapper        
_isr_02_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   1003c:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:47
        mov exceptionAX,eax
   10042:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:48
        mov exceptionBP, ebp
   10047:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:49
        mov     ebp, esp
   1004d:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:50
        mov     ax, 0x2                  # save exception number
   1004f:	66 b8 02 00          	mov    ax,0x2
/home/yogi/src/os//chrisOS/asm/isr.s:51
        jmp isr_My_Common
   10053:	e9 42 01 00 00       	jmp    1019a <isr_My_Common>

00010058 <_isr_03_wrapper>:
_isr_03_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:60
        mov exceptionAX,eax
        mov exceptionBP, ebp
        mov     ebp, esp
        mov     ax, 0x3                  # save exception number
*/
        orw [esp+8],0x100
   10058:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/src/os//chrisOS/asm/isr.s:61
        pusha
   1005f:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:62
        call activateDebugger
   10060:	e8 ab af 00 00       	call   1b010 <activateDebugger>
/home/yogi/src/os//chrisOS/asm/isr.s:65
 /*       jmp isr_My_Common
*/
        popa
   10065:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:66
        sti
   10066:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:67
        iretd
   10067:	cf                   	iret   

00010068 <_isr_04_wrapper>:
_isr_04_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:70
.global _isr_04_wrapper        
_isr_04_wrapper:                #remapped to 0x0c
        mov exceptionSavedESP, esp
   10068:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:71
        mov exceptionAX,eax
   1006e:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:72
        mov exceptionBP, ebp
   10073:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:73
        mov     ebp, esp
   10079:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:74
        mov     ax, 0x4                  # save exception number
   1007b:	66 b8 04 00          	mov    ax,0x4
/home/yogi/src/os//chrisOS/asm/isr.s:75
        jmp isr_My_Common
   1007f:	e9 16 01 00 00       	jmp    1019a <isr_My_Common>

00010084 <_isr_05_wrapper>:
_isr_05_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:78
.global _isr_05_wrapper        
_isr_05_wrapper:                #remapped to 0x0d
        mov exceptionSavedESP, esp
   10084:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:79
        mov exceptionAX,eax
   1008a:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:80
        mov exceptionBP, ebp
   1008f:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:81
        mov     ebp, esp
   10095:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:82
        mov     ax, 0x5                  # save exception number
   10097:	66 b8 05 00          	mov    ax,0x5
/home/yogi/src/os//chrisOS/asm/isr.s:83
        jmp isr_My_Common
   1009b:	e9 fa 00 00 00       	jmp    1019a <isr_My_Common>

000100a0 <_isr_06_wrapper>:
_isr_06_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:86
.global _isr_06_wrapper
_isr_06_wrapper:                #remapped to 0x0e
        mov exceptionSavedESP, esp
   100a0:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:87
        mov exceptionAX,eax
   100a6:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:88
        mov exceptionBP, ebp
   100ab:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:89
        mov     ebp, esp
   100b1:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:90
        mov     ax, 0x6                  # save exception number
   100b3:	66 b8 06 00          	mov    ax,0x6
/home/yogi/src/os//chrisOS/asm/isr.s:91
        jmp isr_My_Common
   100b7:	e9 de 00 00 00       	jmp    1019a <isr_My_Common>

000100bc <_isr_07_wrapper>:
_isr_07_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:94
.global _isr_07_wrapper        
_isr_07_wrapper:                #remapped to 0x0f
        mov exceptionSavedESP, esp
   100bc:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:95
        mov exceptionAX,eax
   100c2:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:96
        mov exceptionBP, ebp
   100c7:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:97
        mov     ebp, esp
   100cd:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:98
        mov     ax, 0x7                  # save exception number
   100cf:	66 b8 07 00          	mov    ax,0x7
/home/yogi/src/os//chrisOS/asm/isr.s:99
        jmp isr_My_Common
   100d3:	e9 c2 00 00 00       	jmp    1019a <isr_My_Common>

000100d8 <_isr_08_wrapper>:
_isr_08_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:102
.global _isr_08_wrapper                 #remapped to 0x10
_isr_08_wrapper:                
        mov exceptionSavedESP, esp
   100d8:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:103
        mov exceptionAX,eax
   100de:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:104
        mov exceptionBP, ebp
   100e3:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:105
        mov     ebp, esp
   100e9:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:106
        mov     ax, 0x8                  # save exception number
   100eb:	66 b8 08 00          	mov    ax,0x8
/home/yogi/src/os//chrisOS/asm/isr.s:107
        jmp isr_My_Common
   100ef:	e9 a6 00 00 00       	jmp    1019a <isr_My_Common>
/home/yogi/src/os//chrisOS/asm/isr.s:130
#        mov ebx, cr2
#        mov exceptionCR2, ebx
#        pop ebx
#        pop ebp
        //push bx                         #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        mov bx,10
   100f4:	66 bb 0a 00          	mov    bx,0xa
/home/yogi/src/os//chrisOS/asm/isr.s:131
        mov ds,bx
   100f8:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:132
        mov es,bx
   100fa:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:133
        mov fs,bx
   100fc:	8e e3                	mov    fs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:134
        mov gs,bx
   100fe:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:136
        //pop bx                        #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        call    doubleFaultHandler     # jump to the common code
   10100:	e8 66 9b 00 00       	call   19c6b <doubleFaultHandler>

00010105 <_isr_09_wrapper>:
_isr_09_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:139
.global _isr_09_wrapper                 #remapped to 0x11
_isr_09_wrapper:
        mov exceptionSavedESP, esp
   10105:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:140
        mov exceptionAX,eax
   1010b:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:141
        mov exceptionBP, ebp
   10110:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:142
        mov     ebp, esp
   10116:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:143
        mov     ax, 0x9                  # save exception number
   10118:	66 b8 09 00          	mov    ax,0x9
/home/yogi/src/os//chrisOS/asm/isr.s:144
        jmp isr_My_Common
   1011c:	eb 7c                	jmp    1019a <isr_My_Common>

0001011e <_isr_10_wrapper>:
_isr_10_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:147
.global _isr_10_wrapper                 #remapped to 0x12
_isr_10_wrapper:                        
        mov exceptionSavedESP, esp
   1011e:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:148
        mov exceptionAX,eax
   10124:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:149
        mov exceptionBP, ebp
   10129:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:150
        mov     ebp, esp
   1012f:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:151
        mov     ax, 0xa                  # save exception number
   10131:	66 b8 0a 00          	mov    ax,0xa
/home/yogi/src/os//chrisOS/asm/isr.s:152
        jmp isr_My_Common
   10135:	eb 63                	jmp    1019a <isr_My_Common>

00010137 <_isr_11_wrapper>:
_isr_11_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:155
.global _isr_11_wrapper                 #remapped to 0x13
_isr_11_wrapper:
        mov exceptionSavedESP, esp
   10137:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:156
        mov exceptionAX,eax
   1013d:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:157
        mov exceptionBP, ebp
   10142:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:158
        mov     ebp, esp
   10148:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:159
        mov     ax, 0xb                  # save exception number
   1014a:	66 b8 0b 00          	mov    ax,0xb
/home/yogi/src/os//chrisOS/asm/isr.s:160
        jmp isr_My_Common
   1014e:	eb 4a                	jmp    1019a <isr_My_Common>

00010150 <_isr_12_wrapper>:
_isr_12_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:163
.global _isr_12_wrapper        
_isr_12_wrapper:                        #remapped to 0x14
        mov exceptionSavedESP, esp
   10150:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:164
        mov exceptionAX,eax
   10156:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:165
        mov exceptionBP, ebp
   1015b:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:166
        mov     ebp, esp
   10161:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:167
        mov     ax, 0xc                  # save exception number
   10163:	66 b8 0c 00          	mov    ax,0xc
/home/yogi/src/os//chrisOS/asm/isr.s:168
        jmp isr_My_Common
   10167:	eb 31                	jmp    1019a <isr_My_Common>

00010169 <_isr_13_wrapper>:
_isr_13_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:171
.global _isr_13_wrapper                 #remapped to 0x15
_isr_13_wrapper:
cli;
   10169:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:172
        mov exceptionSavedESP, esp
   1016a:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:173
        mov exceptionAX,eax
   10170:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:174
        mov exceptionBP, ebp
   10175:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:175
        mov     ebp, esp
   1017b:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:176
        mov     ax, 0xd                  # save exception number
   1017d:	66 b8 0d 00          	mov    ax,0xd
/home/yogi/src/os//chrisOS/asm/isr.s:177
        jmp isr_My_Common
   10181:	eb 17                	jmp    1019a <isr_My_Common>

00010183 <_isr_14_wrapper>:
_isr_14_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:181
.global _isr_14_wrapper                 #remapped to 0x16
_isr_14_wrapper:
#cli;hlt;
mov exceptionSavedESP, esp
   10183:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:182
        mov exceptionAX,eax
   10189:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:183
        mov exceptionBP, ebp
   1018e:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:184
        mov     ebp, esp
   10194:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:185
        mov     ax, 0xe                  # save exception number
   10196:	66 b8 0e 00          	mov    ax,0xe

0001019a <isr_My_Common>:
isr_My_Common():
/home/yogi/src/os//chrisOS/asm/isr.s:187
isr_My_Common:
        mov exceptionNumber,ax
   1019a:	66 a3 e4 96 12 00    	mov    ds:0x1296e4,ax
/home/yogi/src/os//chrisOS/asm/isr.s:188
        pushad                          # other regs because its an ISR
   101a0:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:189
        mov eax,ds
   101a1:	8c d8                	mov    eax,ds
/home/yogi/src/os//chrisOS/asm/isr.s:190
        mov exceptionDS,eax
   101a3:	a3 18 97 12 00       	mov    ds:0x129718,eax
/home/yogi/src/os//chrisOS/asm/isr.s:191
        mov exceptionBX, ebx
   101a8:	89 1d f4 96 12 00    	mov    DWORD PTR ds:0x1296f4,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:192
        mov exceptionCX, ecx
   101ae:	89 0d f8 96 12 00    	mov    DWORD PTR ds:0x1296f8,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:193
        mov exceptionDX, edx
   101b4:	89 15 fc 96 12 00    	mov    DWORD PTR ds:0x1296fc,edx
/home/yogi/src/os//chrisOS/asm/isr.s:194
        mov exceptionSI, esi
   101ba:	89 35 00 97 12 00    	mov    DWORD PTR ds:0x129700,esi
/home/yogi/src/os//chrisOS/asm/isr.s:195
        mov exceptionDI, edi
   101c0:	89 3d 04 97 12 00    	mov    DWORD PTR ds:0x129704,edi
/home/yogi/src/os//chrisOS/asm/isr.s:196
        str exceptionTR
   101c6:	0f 00 0d 44 97 12 00 	str    WORD PTR ds:0x129744
/home/yogi/src/os//chrisOS/asm/isr.s:197
        mov eax, cr0
   101cd:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:198
        mov exceptionCR0, eax
   101d0:	a3 0c 97 12 00       	mov    ds:0x12970c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:199
        mov eax, cr3
   101d5:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:200
        mov exceptionCR3, eax
   101d8:	a3 10 97 12 00       	mov    ds:0x129710,eax
/home/yogi/src/os//chrisOS/asm/isr.s:201
        mov eax, cr4
   101dd:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:202
        mov exceptionCR4, eax
   101e0:	a3 14 97 12 00       	mov    ds:0x129714,eax
/home/yogi/src/os//chrisOS/asm/isr.s:203
        mov eax,es
   101e5:	8c c0                	mov    eax,es
/home/yogi/src/os//chrisOS/asm/isr.s:204
        mov exceptionES,eax
   101e7:	a3 1c 97 12 00       	mov    ds:0x12971c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:205
        mov eax,fs
   101ec:	8c e0                	mov    eax,fs
/home/yogi/src/os//chrisOS/asm/isr.s:206
        mov exceptionFS,eax
   101ee:	a3 20 97 12 00       	mov    ds:0x129720,eax
/home/yogi/src/os//chrisOS/asm/isr.s:207
        mov eax,gs
   101f3:	8c e8                	mov    eax,gs
/home/yogi/src/os//chrisOS/asm/isr.s:208
        mov exceptionGS,eax
   101f5:	a3 24 97 12 00       	mov    ds:0x129724,eax
/home/yogi/src/os//chrisOS/asm/isr.s:209
        mov eax,ss
   101fa:	8c d0                	mov    eax,ss
/home/yogi/src/os//chrisOS/asm/isr.s:210
        mov exceptionSS,eax
   101fc:	a3 28 97 12 00       	mov    ds:0x129728,eax
/home/yogi/src/os//chrisOS/asm/isr.s:211
        mov eax, exceptionAX
   10201:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
/home/yogi/src/os//chrisOS/asm/isr.s:212
        mov     bx, 0x10
   10206:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:213
        mov     ds, bx
   1020a:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:214
        mov     es, bx                  # load ds and es with valid selector
   1020c:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:215
	mov     gs, bx
   1020e:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:217
    
    mov ebx,exceptionNumber
   10210:	8b 1d e4 96 12 00    	mov    ebx,DWORD PTR ds:0x1296e4
/home/yogi/src/os//chrisOS/asm/isr.s:218
    mov bl,[_isr_has_errorCode+ebx]
   10216:	8a 9b 8c 06 01 00    	mov    bl,BYTE PTR [ebx+0x1068c]
/home/yogi/src/os//chrisOS/asm/isr.s:219
    cmp bl,1
   1021c:	80 fb 01             	cmp    bl,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:220
    je  getExceptionDetailsWithError
   1021f:	74 1f                	je     10240 <getExceptionDetailsWithError>
/home/yogi/src/os//chrisOS/asm/isr.s:221
    mov ebx, [ebp+8]
   10221:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:222
    mov exceptionFlags, ebx
   10224:	89 1d 30 97 12 00    	mov    DWORD PTR ds:0x129730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:223
    mov bx, [ebp+4]
   1022a:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:224
    mov exceptionCS, bx
   1022e:	66 89 1d 3c 97 12 00 	mov    WORD PTR ds:0x12973c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:225
    mov ebx, [ebp+0]
   10235:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:226
    mov exceptionEIP, ebx
   10238:	89 1d 38 97 12 00    	mov    DWORD PTR ds:0x129738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:227
    jmp saveTheStack
   1023e:	eb 33                	jmp    10273 <saveTheStack>

00010240 <getExceptionDetailsWithError>:
getExceptionDetailsWithError():
/home/yogi/src/os//chrisOS/asm/isr.s:230

getExceptionDetailsWithError:
     mov ebx, [ebp+12]
   10240:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/asm/isr.s:231
     mov exceptionFlags, ebx
   10243:	89 1d 30 97 12 00    	mov    DWORD PTR ds:0x129730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:232
     mov bx, [ebp+8]
   10249:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:233
     mov exceptionCS, bx
   1024d:	66 89 1d 3c 97 12 00 	mov    WORD PTR ds:0x12973c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:234
     mov ebx, [ebp+4]
   10254:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:235
     mov exceptionEIP, ebx
   10257:	89 1d 38 97 12 00    	mov    DWORD PTR ds:0x129738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:236
     mov ebx, cr2
   1025d:	0f 20 d3             	mov    ebx,cr2
/home/yogi/src/os//chrisOS/asm/isr.s:237
     mov exceptionCR2, ebx
   10260:	89 1d 40 97 12 00    	mov    DWORD PTR ds:0x129740,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:238
     mov ebx, [ebp]
   10266:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:239
     movzx ebx,bx
   10269:	0f b7 db             	movzx  ebx,bx
/home/yogi/src/os//chrisOS/asm/isr.s:240
     mov exceptionErrorCode, bx
   1026c:	66 89 1d 34 97 12 00 	mov    WORD PTR ds:0x129734,bx

00010273 <saveTheStack>:
saveTheStack():
/home/yogi/src/os//chrisOS/asm/isr.s:243

saveTheStack:
jmp overSaveTheStack
   10273:	eb 13                	jmp    10288 <overSaveTheStack>
/home/yogi/src/os//chrisOS/asm/isr.s:244
        mov esi, exceptionSavedESP
   10275:	8b 35 2c 97 12 00    	mov    esi,DWORD PTR ds:0x12972c
/home/yogi/src/os//chrisOS/asm/isr.s:246
//        add esi, 16 #drop the 4 dwords that are passed to the proc
        mov edi, exceptionSavedStack
   1027b:	8b 3d e8 96 12 00    	mov    edi,DWORD PTR ds:0x1296e8
/home/yogi/src/os//chrisOS/asm/isr.s:247
        mov cx, 30
   10281:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:248
        cld
   10285:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:249
        rep movsd
   10286:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]

00010288 <overSaveTheStack>:
overSaveTheStack():
/home/yogi/src/os//chrisOS/asm/isr.s:253

        #Figure out which exception handler to call
overSaveTheStack:
        mov ax,exceptionNumber
   10288:	66 a1 e4 96 12 00    	mov    ax,ds:0x1296e4
/home/yogi/src/os//chrisOS/asm/isr.s:254
        cmp ax,0xe
   1028e:	66 83 f8 0e          	cmp    ax,0xe
/home/yogi/src/os//chrisOS/asm/isr.s:255
        jne notPagingHandler
   10292:	75 07                	jne    1029b <notPagingHandler>
/home/yogi/src/os//chrisOS/asm/isr.s:256
        call pagingExceptionHandler
   10294:	e8 c4 97 00 00       	call   19a5d <pagingExceptionHandler>
/home/yogi/src/os//chrisOS/asm/isr.s:257
        jmp onTheWayOut
   10299:	eb 05                	jmp    102a0 <onTheWayOut>

0001029b <notPagingHandler>:
notPagingHandler():
/home/yogi/src/os//chrisOS/asm/isr.s:261

notPagingHandler:
toDefaultHandler:
        call defaultISRHandler
   1029b:	e8 75 99 00 00       	call   19c15 <defaultISRHandler>

000102a0 <onTheWayOut>:
onTheWayOut():
/home/yogi/src/os//chrisOS/asm/isr.s:263
onTheWayOut:
        popad                           # restoring the regs
   102a0:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:264
        mov esp, exceptionSavedESP
   102a1:	8b 25 2c 97 12 00    	mov    esp,DWORD PTR ds:0x12972c
/home/yogi/src/os//chrisOS/asm/isr.s:266
#        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
        mov ebx,exceptionNumber
   102a7:	8b 1d e4 96 12 00    	mov    ebx,DWORD PTR ds:0x1296e4
/home/yogi/src/os//chrisOS/asm/isr.s:267
        mov bl,[_isr_has_errorCode+ebx]
   102ad:	8a 9b 8c 06 01 00    	mov    bl,BYTE PTR [ebx+0x1068c]
/home/yogi/src/os//chrisOS/asm/isr.s:268
        cmp bl,1
   102b3:	80 fb 01             	cmp    bl,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:269
        jnz overCorrection
   102b6:	75 03                	jne    102bb <overCorrection>
/home/yogi/src/os//chrisOS/asm/isr.s:270
        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
   102b8:	83 c4 04             	add    esp,0x4

000102bb <overCorrection>:
overCorrection():
/home/yogi/src/os//chrisOS/asm/isr.s:272
overCorrection:
        mov     bx, exceptionDS
   102bb:	66 8b 1d 18 97 12 00 	mov    bx,WORD PTR ds:0x129718
/home/yogi/src/os//chrisOS/asm/isr.s:273
        mov     ds, bx
   102c2:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:274
        mov     bx, exceptionES
   102c4:	66 8b 1d 1c 97 12 00 	mov    bx,WORD PTR ds:0x12971c
/home/yogi/src/os//chrisOS/asm/isr.s:275
        mov     es, bx                  # load ds and es with valid selector
   102cb:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:276
        mov     bx, exceptionFS
   102cd:	66 8b 1d 20 97 12 00 	mov    bx,WORD PTR ds:0x129720
/home/yogi/src/os//chrisOS/asm/isr.s:277
        mov     fs,bx
   102d4:	8e e3                	mov    fs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:278
        mov     bx, exceptionGS
   102d6:	66 8b 1d 24 97 12 00 	mov    bx,WORD PTR ds:0x129724
/home/yogi/src/os//chrisOS/asm/isr.s:279
	mov     gs, bx
   102dd:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:280
        mov ebp,exceptionBP
   102df:	8b 2d 08 97 12 00    	mov    ebp,DWORD PTR ds:0x129708
/home/yogi/src/os//chrisOS/asm/isr.s:281
        mov ebx,exceptionBX
   102e5:	8b 1d f4 96 12 00    	mov    ebx,DWORD PTR ds:0x1296f4
/home/yogi/src/os//chrisOS/asm/isr.s:282
        mov eax, exceptionAX
   102eb:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
/home/yogi/src/os//chrisOS/asm/isr.s:283
        sti
   102f0:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:284
        iretd
   102f1:	cf                   	iret   

000102f2 <_isr_15_wrapper>:
_isr_15_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:288

.global _isr_15_wrapper        
_isr_15_wrapper:
        mov exceptionSavedESP, esp
   102f2:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:289
        mov exceptionAX,eax
   102f8:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:290
        mov exceptionBP, ebp
   102fd:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:291
        mov     ebp, esp
   10303:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:292
        mov     ax, 0xf                  # save exception number
   10305:	66 b8 0f 00          	mov    ax,0xf
/home/yogi/src/os//chrisOS/asm/isr.s:293
        jmp isr_My_Common
   10309:	e9 8c fe ff ff       	jmp    1019a <isr_My_Common>

0001030e <_isr_16_wrapper>:
_isr_16_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:296
.global _isr_16_wrapper        
_isr_16_wrapper:
        mov exceptionSavedESP, esp
   1030e:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:297
        mov exceptionAX,eax
   10314:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:298
        mov exceptionBP, ebp
   10319:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:299
        mov     ebp, esp
   1031f:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:300
        mov     ax, 0x10                  # save exception number
   10321:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:301
        jmp isr_My_Common
   10325:	e9 70 fe ff ff       	jmp    1019a <isr_My_Common>

0001032a <_isr_17_wrapper>:
_isr_17_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:304
.global _isr_17_wrapper        
_isr_17_wrapper:
        mov exceptionSavedESP, esp
   1032a:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:305
        mov exceptionAX,eax
   10330:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:306
        mov exceptionBP, ebp
   10335:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:307
        mov     ebp, esp
   1033b:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:308
        mov     ax, 0x11                  # save exception number
   1033d:	66 b8 11 00          	mov    ax,0x11
/home/yogi/src/os//chrisOS/asm/isr.s:309
        jmp isr_My_Common
   10341:	e9 54 fe ff ff       	jmp    1019a <isr_My_Common>

00010346 <_isr_18_wrapper>:
_isr_18_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:312
.global _isr_18_wrapper        
_isr_18_wrapper:
        mov exceptionSavedESP, esp
   10346:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:313
        mov exceptionAX,eax
   1034c:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:314
        mov exceptionBP, ebp
   10351:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:315
        mov     ebp, esp
   10357:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:316
        mov     ax, 0x12                  # save exception number
   10359:	66 b8 12 00          	mov    ax,0x12
/home/yogi/src/os//chrisOS/asm/isr.s:317
        jmp isr_My_Common
   1035d:	e9 38 fe ff ff       	jmp    1019a <isr_My_Common>

00010362 <_isr_19_wrapper>:
_isr_19_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:320
.global _isr_19_wrapper        
_isr_19_wrapper:
        mov exceptionSavedESP, esp
   10362:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:321
        mov exceptionAX,eax
   10368:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:322
        mov exceptionBP, ebp
   1036d:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:323
        mov     ebp, esp
   10373:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:324
        mov     ax, 0x13                  # save exception number
   10375:	66 b8 13 00          	mov    ax,0x13
/home/yogi/src/os//chrisOS/asm/isr.s:325
        jmp isr_My_Common
   10379:	e9 1c fe ff ff       	jmp    1019a <isr_My_Common>

0001037e <_isr_20_wrapper>:
_isr_20_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:328
.global _isr_20_wrapper        #8 based exception 0x14
_isr_20_wrapper:
        mov exceptionSavedESP, esp
   1037e:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:329
        mov exceptionAX,eax
   10384:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:330
        mov exceptionBP, ebp
   10389:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:331
        mov     ebp, esp
   1038f:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:332
        mov     ax, 0x14                  # save exception number
   10391:	66 b8 14 00          	mov    ax,0x14
/home/yogi/src/os//chrisOS/asm/isr.s:333
        jmp isr_My_Common
   10395:	e9 00 fe ff ff       	jmp    1019a <isr_My_Common>

0001039a <_isr_21_wrapper>:
_isr_21_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:336
.global _isr_21_wrapper        
_isr_21_wrapper:
        mov exceptionSavedESP, esp
   1039a:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:337
        mov exceptionAX,eax
   103a0:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:338
        mov exceptionBP, ebp
   103a5:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:339
        mov     ebp, esp
   103ab:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:340
        mov     ax, 0x15                  # save exception number
   103ad:	66 b8 15 00          	mov    ax,0x15
/home/yogi/src/os//chrisOS/asm/isr.s:341
        jmp isr_My_Common
   103b1:	e9 e4 fd ff ff       	jmp    1019a <isr_My_Common>

000103b6 <_isr_22_wrapper>:
_isr_22_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:344
.global _isr_22_wrapper        
_isr_22_wrapper:
        mov exceptionSavedESP, esp
   103b6:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:345
        mov exceptionAX,eax
   103bc:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:346
        mov exceptionBP, ebp
   103c1:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:347
        mov     ebp, esp
   103c7:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:348
        mov     ax, 0x16                  # save exception number
   103c9:	66 b8 16 00          	mov    ax,0x16
/home/yogi/src/os//chrisOS/asm/isr.s:349
        jmp isr_My_Common
   103cd:	e9 c8 fd ff ff       	jmp    1019a <isr_My_Common>

000103d2 <_isr_23_wrapper>:
_isr_23_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:352
.global _isr_23_wrapper        
_isr_23_wrapper:
        mov exceptionSavedESP, esp
   103d2:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:353
        mov exceptionAX,eax
   103d8:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:354
        mov exceptionBP, ebp
   103dd:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:355
        mov     ebp, esp
   103e3:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:356
        mov     ax, 0x17                  # save exception number
   103e5:	66 b8 17 00          	mov    ax,0x17
/home/yogi/src/os//chrisOS/asm/isr.s:357
        jmp isr_My_Common
   103e9:	e9 ac fd ff ff       	jmp    1019a <isr_My_Common>

000103ee <_isr_24_wrapper>:
_isr_24_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:360
.global _isr_24_wrapper        
_isr_24_wrapper:
        mov exceptionSavedESP, esp
   103ee:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:361
        mov exceptionAX,eax
   103f4:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:362
        mov exceptionBP, ebp
   103f9:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:363
        mov     ebp, esp
   103ff:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:364
        mov     ax, 0x18                  # save exception number
   10401:	66 b8 18 00          	mov    ax,0x18
/home/yogi/src/os//chrisOS/asm/isr.s:365
        jmp isr_My_Common
   10405:	e9 90 fd ff ff       	jmp    1019a <isr_My_Common>

0001040a <_isr_25_wrapper>:
_isr_25_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:368
.global _isr_25_wrapper        
_isr_25_wrapper:
        mov exceptionSavedESP, esp
   1040a:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:369
        mov exceptionAX,eax
   10410:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:370
        mov exceptionBP, ebp
   10415:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:371
        mov     ebp, esp
   1041b:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:372
        mov     ax, 0x19                  # save exception number
   1041d:	66 b8 19 00          	mov    ax,0x19
/home/yogi/src/os//chrisOS/asm/isr.s:373
        jmp isr_My_Common
   10421:	e9 74 fd ff ff       	jmp    1019a <isr_My_Common>

00010426 <_isr_26_wrapper>:
_isr_26_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:376
.global _isr_26_wrapper        
_isr_26_wrapper:
        mov exceptionSavedESP, esp
   10426:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:377
        mov exceptionAX,eax
   1042c:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:378
        mov exceptionBP, ebp
   10431:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:379
        mov     ebp, esp
   10437:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:380
        mov     ax, 0x1a                  # save exception number
   10439:	66 b8 1a 00          	mov    ax,0x1a
/home/yogi/src/os//chrisOS/asm/isr.s:381
        jmp isr_My_Common
   1043d:	e9 58 fd ff ff       	jmp    1019a <isr_My_Common>

00010442 <_isr_27_wrapper>:
_isr_27_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:384
.global _isr_27_wrapper        
_isr_27_wrapper:
        mov exceptionSavedESP, esp
   10442:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:385
        mov exceptionAX,eax
   10448:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:386
        mov exceptionBP, ebp
   1044d:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:387
        mov     ebp, esp
   10453:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:388
        mov     ax, 0x1b                  # save exception number
   10455:	66 b8 1b 00          	mov    ax,0x1b
/home/yogi/src/os//chrisOS/asm/isr.s:389
        jmp isr_My_Common
   10459:	e9 3c fd ff ff       	jmp    1019a <isr_My_Common>

0001045e <_isr_28_wrapper>:
_isr_28_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:392
.global _isr_28_wrapper        
_isr_28_wrapper:
        mov exceptionSavedESP, esp
   1045e:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:393
        mov exceptionAX,eax
   10464:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:394
        mov exceptionBP, ebp
   10469:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:395
        mov     ebp, esp
   1046f:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:396
        mov     ax, 0x1c                  # save exception number
   10471:	66 b8 1c 00          	mov    ax,0x1c
/home/yogi/src/os//chrisOS/asm/isr.s:397
        jmp isr_My_Common
   10475:	e9 20 fd ff ff       	jmp    1019a <isr_My_Common>

0001047a <_isr_29_wrapper>:
_isr_29_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:400
.global _isr_29_wrapper        
_isr_29_wrapper:
        mov exceptionSavedESP, esp
   1047a:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:401
        mov exceptionAX,eax
   10480:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:402
        mov exceptionBP, ebp
   10485:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:403
        mov     ebp, esp
   1048b:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:404
        mov     ax, 0x1d                  # save exception number
   1048d:	66 b8 1d 00          	mov    ax,0x1d
/home/yogi/src/os//chrisOS/asm/isr.s:405
        jmp isr_My_Common
   10491:	e9 04 fd ff ff       	jmp    1019a <isr_My_Common>

00010496 <_isr_30_wrapper>:
_isr_30_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:408
.global _isr_30_wrapper        
_isr_30_wrapper:
        mov exceptionSavedESP, esp
   10496:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:409
        mov exceptionAX,eax
   1049c:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:410
        mov exceptionBP, ebp
   104a1:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:411
        mov     ebp, esp
   104a7:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:412
        mov     ax, 0x1e                  # save exception number
   104a9:	66 b8 1e 00          	mov    ax,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:413
        jmp isr_My_Common
   104ad:	e9 e8 fc ff ff       	jmp    1019a <isr_My_Common>

000104b2 <_isr_31_wrapper>:
_isr_31_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:416
.global _isr_31_wrapper        
_isr_31_wrapper:                            #DEBUG EXCEPTION
cli
   104b2:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:417
    mov debugBP,ebp
   104b3:	89 2d 60 97 12 00    	mov    DWORD PTR ds:0x129760,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:418
    mov debugSavedESP, esp
   104b9:	89 25 84 97 12 00    	mov    DWORD PTR ds:0x129784,esp
/home/yogi/src/os//chrisOS/asm/isr.s:419
    mov debugESP,esp
   104bf:	89 25 1c 00 01 00    	mov    DWORD PTR ds:0x1001c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:420
    pushad
   104c5:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:421
    mov ebp, debugESP
   104c6:	8b 2d 1c 00 01 00    	mov    ebp,DWORD PTR ds:0x1001c
/home/yogi/src/os//chrisOS/asm/isr.s:423
    
    mov debugBX, ebx
   104cc:	89 1d 4c 97 12 00    	mov    DWORD PTR ds:0x12974c,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:424
    mov ebx,debugSavedESP
   104d2:	8b 1d 84 97 12 00    	mov    ebx,DWORD PTR ds:0x129784
/home/yogi/src/os//chrisOS/asm/isr.s:425
    add ebx,12
   104d8:	83 c3 0c             	add    ebx,0xc
/home/yogi/src/os//chrisOS/asm/isr.s:426
    mov debugSavedESP,ebx
   104db:	89 1d 84 97 12 00    	mov    DWORD PTR ds:0x129784,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:427
    mov ebx, [ebp+8]
   104e1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:428
    mov debugFlags, ebx
   104e4:	89 1d 88 97 12 00    	mov    DWORD PTR ds:0x129788,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:429
    mov debugReturnFlags,ebx
   104ea:	89 1d 14 00 01 00    	mov    DWORD PTR ds:0x10014,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:430
    movw bx, [ebp+4]
   104f0:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:431
    movw debugCS, bx
   104f4:	66 89 1d 90 97 12 00 	mov    WORD PTR ds:0x129790,bx
/home/yogi/src/os//chrisOS/asm/isr.s:432
    mov ebx, [ebp+0]
   104fb:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:433
    mov debugEIP, ebx
   104fe:	89 1d 94 97 12 00    	mov    DWORD PTR ds:0x129794,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:435

    mov debugCX, ecx
   10504:	89 0d 50 97 12 00    	mov    DWORD PTR ds:0x129750,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:436
    mov debugDX, edx
   1050a:	89 15 54 97 12 00    	mov    DWORD PTR ds:0x129754,edx
/home/yogi/src/os//chrisOS/asm/isr.s:437
    mov debugSI, esi
   10510:	89 35 58 97 12 00    	mov    DWORD PTR ds:0x129758,esi
/home/yogi/src/os//chrisOS/asm/isr.s:438
    mov debugDI, edi
   10516:	89 3d 5c 97 12 00    	mov    DWORD PTR ds:0x12975c,edi
/home/yogi/src/os//chrisOS/asm/isr.s:439
    mov debugAX,eax
   1051c:	a3 48 97 12 00       	mov    ds:0x129748,eax
/home/yogi/src/os//chrisOS/asm/isr.s:441

    mov ax,ds
   10521:	66 8c d8             	mov    ax,ds
/home/yogi/src/os//chrisOS/asm/isr.s:442
    mov debugDS,eax
   10524:	a3 70 97 12 00       	mov    ds:0x129770,eax
/home/yogi/src/os//chrisOS/asm/isr.s:443
    mov eax, cr0
   10529:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:444
    mov debugCR0, eax
   1052c:	a3 64 97 12 00       	mov    ds:0x129764,eax
/home/yogi/src/os//chrisOS/asm/isr.s:445
    mov eax, cr3
   10531:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:446
    mov debugCR3, eax
   10534:	a3 68 97 12 00       	mov    ds:0x129768,eax
/home/yogi/src/os//chrisOS/asm/isr.s:447
    mov eax, cr4
   10539:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:448
    mov debugCR4, eax
   1053c:	a3 6c 97 12 00       	mov    ds:0x12976c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:449
    mov eax,es
   10541:	8c c0                	mov    eax,es
/home/yogi/src/os//chrisOS/asm/isr.s:450
    mov debugES,eax
   10543:	a3 74 97 12 00       	mov    ds:0x129774,eax
/home/yogi/src/os//chrisOS/asm/isr.s:451
    mov eax,fs
   10548:	8c e0                	mov    eax,fs
/home/yogi/src/os//chrisOS/asm/isr.s:452
    mov debugFS,eax
   1054a:	a3 78 97 12 00       	mov    ds:0x129778,eax
/home/yogi/src/os//chrisOS/asm/isr.s:453
    mov eax,gs
   1054f:	8c e8                	mov    eax,gs
/home/yogi/src/os//chrisOS/asm/isr.s:454
    mov debugGS,eax
   10551:	a3 7c 97 12 00       	mov    ds:0x12977c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:455
    mov eax,ss
   10556:	8c d0                	mov    eax,ss
/home/yogi/src/os//chrisOS/asm/isr.s:456
    mov debugSS,eax
   10558:	a3 80 97 12 00       	mov    ds:0x129780,eax
/home/yogi/src/os//chrisOS/asm/isr.s:458

    mov esi, debugSavedESP
   1055d:	8b 35 84 97 12 00    	mov    esi,DWORD PTR ds:0x129784
/home/yogi/src/os//chrisOS/asm/isr.s:459
    mov edi, debugSavedStack
   10563:	8b 3d ec 96 12 00    	mov    edi,DWORD PTR ds:0x1296ec
/home/yogi/src/os//chrisOS/asm/isr.s:460
    mov cx, 30
   10569:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:461
    cld
   1056d:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:462
    rep movsd
   1056e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
/home/yogi/src/os//chrisOS/asm/isr.s:463
    call debugStep
   10570:	e8 8c ab 00 00       	call   1b101 <debugStep>
/home/yogi/src/os//chrisOS/asm/isr.s:464
    popa
   10575:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:465
    sti
   10576:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:466
    iretd
   10577:	cf                   	iret   

00010578 <_isr_32_wrapper>:
_isr_32_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:469
.global _isr_32_wrapper        
_isr_32_wrapper:
        mov exceptionSavedESP, esp
   10578:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:470
        mov exceptionAX,eax
   1057e:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:471
        mov exceptionBP, ebp
   10583:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:472
        mov     ebp, esp
   10589:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:473
        mov     ax, 0x20                  # save exception number
   1058b:	66 b8 20 00          	mov    ax,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:474
        jmp isr_My_Common
   1058f:	e9 06 fc ff ff       	jmp    1019a <isr_My_Common>

00010594 <_irq0_handler>:
_irq0_handler():
/home/yogi/src/os//chrisOS/asm/isr.s:479


.global _irq0_handler
_irq0_handler:                #remapped to 0x08
cli
   10594:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:481
#cli;hlt;
        push    ebp
   10595:	55                   	push   ebp
/home/yogi/src/os//chrisOS/asm/isr.s:482
        pushf
   10596:	9c                   	pushf  
/home/yogi/src/os//chrisOS/asm/isr.s:483
        mov     ebp, esp
   10597:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:484
        add ebp,4
   10599:	83 c5 04             	add    ebp,0x4
/home/yogi/src/os//chrisOS/asm/isr.s:485
        push eax
   1059c:	50                   	push   eax
/home/yogi/src/os//chrisOS/asm/isr.s:486
        mov ax,0xFFFF
   1059d:	66 b8 ff ff          	mov    ax,0xffff
/home/yogi/src/os//chrisOS/asm/isr.s:487
cld
   105a1:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:489
#cld #C code following the sysV ABI requires DF to be clear on function entry
        push    ebx
   105a2:	53                   	push   ebx
/home/yogi/src/os//chrisOS/asm/isr.s:490
        mov ebx, [ebp+12]
   105a3:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/asm/isr.s:491
        mov exceptionFlags, ebx
   105a6:	89 1d 30 97 12 00    	mov    DWORD PTR ds:0x129730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:492
        mov bx, [ebp+8]
   105ac:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:493
        mov exceptionCS, bx
   105b0:	66 89 1d 3c 97 12 00 	mov    WORD PTR ds:0x12973c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:494
        mov ebx, [ebp+4]
   105b7:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:495
        mov exceptionEIP, ebx
   105ba:	89 1d 38 97 12 00    	mov    DWORD PTR ds:0x129738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:496
        pop ebx
   105c0:	5b                   	pop    ebx
/home/yogi/src/os//chrisOS/asm/isr.s:497
        pushad                          # other regs because its an ISR
   105c1:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:498
         mov     bx, 0x10
   105c2:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:499
        mov     ds, bx
   105c6:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:500
        mov     es, bx                  # load ds and es with valid selector
   105c8:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:501
	mov     gs, bx
   105ca:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:502
        call    irq0_handler          # call actual ISR code
   105cc:	e8 83 8f 00 00       	call   19554 <irq0_handler>
/home/yogi/src/os//chrisOS/asm/isr.s:503
        popad  
   105d1:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:504
mov al,0x20
   105d2:	b0 20                	mov    al,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:505
out 0x20,al
   105d4:	e6 20                	out    0x20,al
/home/yogi/src/os//chrisOS/asm/isr.s:508
//mov eax,0
//mov [0xa000B0],eax
        pop eax
   105d6:	58                   	pop    eax
/home/yogi/src/os//chrisOS/asm/isr.s:509
        popf
   105d7:	9d                   	popf   
/home/yogi/src/os//chrisOS/asm/isr.s:510
        pop ebp                         # restoring the regs
   105d8:	5d                   	pop    ebp
/home/yogi/src/os//chrisOS/asm/isr.s:511
        sti
   105d9:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:512
        iretd
   105da:	cf                   	iret   

000105db <_isr_01_wrapper>:
_isr_01_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:515
.global _isr_01_wrapper        
_isr_01_wrapper:                #KEYBOARD HANDLER
cli
   105db:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:520
#cli;hlt;
        //clear the trap flag if it is set
        //we'll re-set it later if need be
        //andw [esp+8],0xFEFF
        mov exceptionAX, eax
   105dc:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:521
        mov exceptionBX, ebx
   105e1:	89 1d f4 96 12 00    	mov    DWORD PTR ds:0x1296f4,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:522
        mov exceptionCX, ecx
   105e7:	89 0d f8 96 12 00    	mov    DWORD PTR ds:0x1296f8,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:523
        mov exceptionDX, edx
   105ed:	89 15 fc 96 12 00    	mov    DWORD PTR ds:0x1296fc,edx
/home/yogi/src/os//chrisOS/asm/isr.s:524
        mov exceptionSI, esi
   105f3:	89 35 00 97 12 00    	mov    DWORD PTR ds:0x129700,esi
/home/yogi/src/os//chrisOS/asm/isr.s:525
        mov exceptionDI, edi
   105f9:	89 3d 04 97 12 00    	mov    DWORD PTR ds:0x129704,edi
/home/yogi/src/os//chrisOS/asm/isr.s:526
        str exceptionTR
   105ff:	0f 00 0d 44 97 12 00 	str    WORD PTR ds:0x129744
/home/yogi/src/os//chrisOS/asm/isr.s:527
        mov exceptionBP, ebp
   10606:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:528
        mov eax, cr0
   1060c:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:529
        mov exceptionCR0, eax
   1060f:	a3 0c 97 12 00       	mov    ds:0x12970c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:530
        mov eax, cr3
   10614:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:531
        mov exceptionCR3, eax
   10617:	a3 10 97 12 00       	mov    ds:0x129710,eax
/home/yogi/src/os//chrisOS/asm/isr.s:532
        mov eax, cr4
   1061c:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:533
        mov exceptionCR4, eax
   1061f:	a3 14 97 12 00       	mov    ds:0x129714,eax
/home/yogi/src/os//chrisOS/asm/isr.s:534
        mov eax, exceptionAX
   10624:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
/home/yogi/src/os//chrisOS/asm/isr.s:535
        pushad
   10629:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:536
        pushf
   1062a:	9c                   	pushf  
/home/yogi/src/os//chrisOS/asm/isr.s:537
        mov     ebp, esp
   1062b:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:538
        add ebp,36
   1062d:	83 c5 24             	add    ebp,0x24
/home/yogi/src/os//chrisOS/asm/isr.s:539
        mov ax,0x0001
   10630:	66 b8 01 00          	mov    ax,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:540
cld
   10634:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:542
#cld #C code following the sysV ABI requires DF to be clear on function entry
        mov ebx, [ebp+8]
   10635:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:543
        mov exceptionFlags, ebx
   10638:	89 1d 30 97 12 00    	mov    DWORD PTR ds:0x129730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:544
        mov bx, [ebp+4]
   1063e:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:545
        mov exceptionCS, bx
   10642:	66 89 1d 3c 97 12 00 	mov    WORD PTR ds:0x12973c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:546
        mov ebx, [ebp+0]
   10649:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:547
        mov exceptionEIP, ebx
   1064c:	89 1d 38 97 12 00    	mov    DWORD PTR ds:0x129738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:548
        mov     bx, 0x10
   10652:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:549
        mov     ds, bx
   10656:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:550
        mov     es, bx                  # load ds and es with valid selector
   10658:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:551
	mov     gs, bx
   1065a:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:552
        call    kbd_handler          # call actual ISR code
   1065c:	e8 3e 90 00 00       	call   1969f <kbd_handler>
/home/yogi/src/os//chrisOS/asm/isr.s:553
        popf
   10661:	9d                   	popf   
/home/yogi/src/os//chrisOS/asm/isr.s:554
        popad  
   10662:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:555
mov al,0x20
   10663:	b0 20                	mov    al,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:556
out 0x20,al
   10665:	e6 20                	out    0x20,al
/home/yogi/src/os//chrisOS/asm/isr.s:557
        mov     al,kKbdHandlerActivateDebugger
   10667:	a0 74 65 09 00       	mov    al,ds:0x96574
/home/yogi/src/os//chrisOS/asm/isr.s:558
        cmp     al,1
   1066c:	3c 01                	cmp    al,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:559
        jne done
   1066e:	75 13                	jne    10683 <done>
/home/yogi/src/os//chrisOS/asm/isr.s:560
        orw [esp+8],0x100
   10670:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/src/os//chrisOS/asm/isr.s:561
        mov al,0
   10677:	b0 00                	mov    al,0x0
/home/yogi/src/os//chrisOS/asm/isr.s:562
        mov kKbdHandlerActivateDebugger,al
   10679:	a2 74 65 09 00       	mov    ds:0x96574,al
/home/yogi/src/os//chrisOS/asm/isr.s:563
        mov eax,exceptionAX
   1067e:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0

00010683 <done>:
done():
/home/yogi/src/os//chrisOS/asm/isr.s:565
done:
        sti
   10683:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:566
        iretd
   10684:	cf                   	iret   

00010685 <_call_gate_wrapper>:
_call_gate_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:571


.global _call_gate_wrapper
_call_gate_wrapper:
        push    ds
   10685:	1e                   	push   ds
/home/yogi/src/os//chrisOS/asm/isr.s:572
        push    es                      # saving segment registers and
   10686:	06                   	push   es
/home/yogi/src/os//chrisOS/asm/isr.s:573
        pushad                          # other regs because its an ISR
   10687:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:575
 #       call    call_gate_proc
        popad                           # restoring the regs
   10688:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:576
        pop     es
   10689:	07                   	pop    es
/home/yogi/src/os//chrisOS/asm/isr.s:577
        pop     ds
   1068a:	1f                   	pop    ds
/home/yogi/src/os//chrisOS/asm/isr.s:578
        retf
   1068b:	cb                   	retf   

0001068c <_isr_has_errorCode>:
	...
_isr_has_errorCode():
   10694:	01 00                	add    DWORD PTR [eax],eax
   10696:	01 01                	add    DWORD PTR [ecx],eax
   10698:	01 01                	add    DWORD PTR [ecx],eax
   1069a:	01 00                	add    DWORD PTR [eax],eax
   1069c:	00 01                	add    BYTE PTR [ecx],al
	...

000106ac <_ltr>:
_ltr():
/home/yogi/src/os//chrisOS/asm/isr.s:584

        _isr_has_errorCode:  .byte      0,0,0,0,0,0,0,0, 1,0,1,1,1,1,1,0
                             .byte      0,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0
.global _ltr
_ltr:
		push ax
   106ac:	66 50                	push   ax
/home/yogi/src/os//chrisOS/asm/isr.s:585
		mov ax, 0x58
   106ae:	66 b8 58 00          	mov    ax,0x58
/home/yogi/src/os//chrisOS/asm/isr.s:586
        ltr     ax
   106b2:	0f 00 d8             	ltr    ax
/home/yogi/src/os//chrisOS/asm/isr.s:587
        pop ax
   106b5:	66 58                	pop    ax
/home/yogi/src/os//chrisOS/asm/isr.s:588
        ret
   106b7:	c3                   	ret    

000106b8 <strftime>:
strftime():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:58

static char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim);
static char *_conv(const int n, char *format, char *pt, const char *ptlim);
static char *_add(const char *str, char *pt, const char *ptlim);

size_t HIGH_CODE_SECTION strftime(char *s, size_t maxsize, const char *format, const struct tm *t) {
   106b8:	55                   	push   ebp
   106b9:	89 e5                	mov    ebp,esp
   106bb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61
  char *p;

  p = _fmt(((format == NULL) ? "%c" : format), t, s, s + maxsize);
   106be:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106c4:	01 c2                	add    edx,eax
   106c6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   106ca:	74 05                	je     106d1 <strftime+0x19>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 1)
   106cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   106cf:	eb 05                	jmp    106d6 <strftime+0x1e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 2)
   106d1:	b8 00 50 04 00       	mov    eax,0x45000
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 4)
   106d6:	52                   	push   edx
   106d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   106da:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   106dd:	50                   	push   eax
   106de:	e8 2c 00 00 00       	call   1070f <_fmt>
   106e3:	83 c4 10             	add    esp,0x10
   106e6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:62 (discriminator 4)
  if (p == s + maxsize) return 0;
   106e9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106ef:	01 d0                	add    eax,edx
   106f1:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   106f4:	75 07                	jne    106fd <strftime+0x45>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:62 (discriminator 1)
   106f6:	b8 00 00 00 00       	mov    eax,0x0
   106fb:	eb 10                	jmp    1070d <strftime+0x55>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:63
  *p = '\0';
   106fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10700:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:64
  return p - s;
   10703:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   10706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10709:	29 c2                	sub    edx,eax
   1070b:	89 d0                	mov    eax,edx
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:65
}
   1070d:	c9                   	leave  
   1070e:	c3                   	ret    

0001070f <_fmt>:
_fmt():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:67

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
   1070f:	55                   	push   ebp
   10710:	89 e5                	mov    ebp,esp
   10712:	53                   	push   ebx
   10713:	83 ec 74             	sub    esp,0x74
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68
  for ( ; *format; ++format) {
   10716:	e9 68 0a 00 00       	jmp    11183 <_fmt+0xa74>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:69
    if (*format == '%') {
   1071b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1071e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10721:	3c 25                	cmp    al,0x25
   10723:	0f 85 3d 0a 00 00    	jne    11166 <_fmt+0xa57>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:70
      if (*format == 'E') {
   10729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1072c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1072f:	3c 45                	cmp    al,0x45
   10731:	75 06                	jne    10739 <_fmt+0x2a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:71
        format++; // Alternate Era
   10733:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   10737:	eb 0e                	jmp    10747 <_fmt+0x38>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:72
      } else if (*format == 'O') {
   10739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1073c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1073f:	3c 4f                	cmp    al,0x4f
   10741:	75 04                	jne    10747 <_fmt+0x38>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:73
        format++; // Alternate numeric symbols
   10743:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:76
      }

      switch (*++format) {
   10747:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1074b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1074e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10751:	0f be c0             	movsx  eax,al
   10754:	83 f8 7a             	cmp    eax,0x7a
   10757:	0f 87 08 0a 00 00    	ja     11165 <_fmt+0xa56>
   1075d:	8b 04 85 94 50 04 00 	mov    eax,DWORD PTR [eax*4+0x45094]
   10764:	ff e0                	jmp    eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:78
        case '\0':
          --format;
   10766:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:79
          break;
   1076a:	e9 f7 09 00 00       	jmp    11166 <_fmt+0xa57>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82

        case 'A':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days[t->tm_wday], pt, ptlim);
   1076f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10772:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10775:	85 c0                	test   eax,eax
   10777:	78 1a                	js     10793 <_fmt+0x84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 1)
   10779:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1077c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1077f:	83 f8 06             	cmp    eax,0x6
   10782:	7f 0f                	jg     10793 <_fmt+0x84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 3)
   10784:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10787:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1078a:	8b 04 85 9c 99 12 00 	mov    eax,DWORD PTR [eax*4+0x12999c]
   10791:	eb 05                	jmp    10798 <_fmt+0x89>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 4)
   10793:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 6)
   10798:	83 ec 04             	sub    esp,0x4
   1079b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1079e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   107a1:	50                   	push   eax
   107a2:	e8 27 0a 00 00       	call   111ce <_add>
   107a7:	83 c4 10             	add    esp,0x10
   107aa:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:83 (discriminator 6)
          continue;
   107ad:	e9 cd 09 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86

        case 'a':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days_abbrev[t->tm_wday], pt, ptlim);
   107b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107b5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107b8:	85 c0                	test   eax,eax
   107ba:	78 1a                	js     107d6 <_fmt+0xc7>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 1)
   107bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107bf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107c2:	83 f8 06             	cmp    eax,0x6
   107c5:	7f 0f                	jg     107d6 <_fmt+0xc7>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 3)
   107c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107ca:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107cd:	8b 04 85 b8 99 12 00 	mov    eax,DWORD PTR [eax*4+0x1299b8]
   107d4:	eb 05                	jmp    107db <_fmt+0xcc>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 4)
   107d6:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 6)
   107db:	83 ec 04             	sub    esp,0x4
   107de:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   107e1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   107e4:	50                   	push   eax
   107e5:	e8 e4 09 00 00       	call   111ce <_add>
   107ea:	83 c4 10             	add    esp,0x10
   107ed:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:87 (discriminator 6)
          continue;
   107f0:	e9 8a 09 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90

        case 'B':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months[t->tm_mon], pt, ptlim);
   107f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   107fb:	85 c0                	test   eax,eax
   107fd:	78 1a                	js     10819 <_fmt+0x10a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 1)
   107ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10802:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10805:	83 f8 0b             	cmp    eax,0xb
   10808:	7f 0f                	jg     10819 <_fmt+0x10a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 3)
   1080a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1080d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10810:	8b 04 85 e0 99 12 00 	mov    eax,DWORD PTR [eax*4+0x1299e0]
   10817:	eb 05                	jmp    1081e <_fmt+0x10f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 4)
   10819:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 6)
   1081e:	83 ec 04             	sub    esp,0x4
   10821:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10824:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10827:	50                   	push   eax
   10828:	e8 a1 09 00 00       	call   111ce <_add>
   1082d:	83 c4 10             	add    esp,0x10
   10830:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:91 (discriminator 6)
          continue;
   10833:	e9 47 09 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95

        case 'b':
        case 'h':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months_abbrev[t->tm_mon], pt, ptlim);
   10838:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1083b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1083e:	85 c0                	test   eax,eax
   10840:	78 1a                	js     1085c <_fmt+0x14d>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 1)
   10842:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10845:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10848:	83 f8 0b             	cmp    eax,0xb
   1084b:	7f 0f                	jg     1085c <_fmt+0x14d>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 3)
   1084d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10850:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10853:	8b 04 85 20 9a 12 00 	mov    eax,DWORD PTR [eax*4+0x129a20]
   1085a:	eb 05                	jmp    10861 <_fmt+0x152>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 4)
   1085c:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 6)
   10861:	83 ec 04             	sub    esp,0x4
   10864:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10867:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1086a:	50                   	push   eax
   1086b:	e8 5e 09 00 00       	call   111ce <_add>
   10870:	83 c4 10             	add    esp,0x10
   10873:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:96 (discriminator 6)
          continue;
   10876:	e9 04 09 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:99

        case 'C':
          pt = _conv((t->tm_year + TM_YEAR_BASE) / 100, "%02d", pt, ptlim);
   1087b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1087e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10881:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   10887:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   1088c:	89 c8                	mov    eax,ecx
   1088e:	f7 ea                	imul   edx
   10890:	c1 fa 05             	sar    edx,0x5
   10893:	89 c8                	mov    eax,ecx
   10895:	c1 f8 1f             	sar    eax,0x1f
   10898:	29 c2                	sub    edx,eax
   1089a:	89 d0                	mov    eax,edx
   1089c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1089f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108a2:	68 05 50 04 00       	push   0x45005
   108a7:	50                   	push   eax
   108a8:	e8 ef 08 00 00       	call   1119c <_conv>
   108ad:	83 c4 10             	add    esp,0x10
   108b0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:100
          continue;
   108b3:	e9 c7 08 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:103

        case 'c':
          pt = _fmt("%a %b %e %H:%M:%S %Y", t, pt, ptlim);
   108b8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108bb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108be:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108c1:	68 0a 50 04 00       	push   0x4500a
   108c6:	e8 44 fe ff ff       	call   1070f <_fmt>
   108cb:	83 c4 10             	add    esp,0x10
   108ce:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:104
          continue;
   108d1:	e9 a9 08 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:107

        case 'D':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   108d6:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108d9:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108dc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108df:	68 1f 50 04 00       	push   0x4501f
   108e4:	e8 26 fe ff ff       	call   1070f <_fmt>
   108e9:	83 c4 10             	add    esp,0x10
   108ec:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:108
          continue;
   108ef:	e9 8b 08 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:111

        case 'd':
          pt = _conv(t->tm_mday, "%02d", pt, ptlim);
   108f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   108f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   108fa:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108fd:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10900:	68 05 50 04 00       	push   0x45005
   10905:	50                   	push   eax
   10906:	e8 91 08 00 00       	call   1119c <_conv>
   1090b:	83 c4 10             	add    esp,0x10
   1090e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:112
          continue;
   10911:	e9 69 08 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:115

        case 'e':
          pt = _conv(t->tm_mday, "%2d", pt, ptlim);
   10916:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10919:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1091c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1091f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10922:	68 28 50 04 00       	push   0x45028
   10927:	50                   	push   eax
   10928:	e8 6f 08 00 00       	call   1119c <_conv>
   1092d:	83 c4 10             	add    esp,0x10
   10930:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:116
          continue;
   10933:	e9 47 08 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:119

        case 'F':
          pt = _fmt("%Y-%m-%d", t, pt, ptlim);
   10938:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1093b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1093e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10941:	68 2c 50 04 00       	push   0x4502c
   10946:	e8 c4 fd ff ff       	call   1070f <_fmt>
   1094b:	83 c4 10             	add    esp,0x10
   1094e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:120
          continue;
   10951:	e9 29 08 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:123

        case 'H':
          pt = _conv(t->tm_hour, "%02d", pt, ptlim);
   10956:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10959:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1095c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1095f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10962:	68 05 50 04 00       	push   0x45005
   10967:	50                   	push   eax
   10968:	e8 2f 08 00 00       	call   1119c <_conv>
   1096d:	83 c4 10             	add    esp,0x10
   10970:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:124
          continue;
   10973:	e9 07 08 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127

        case 'I':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%02d", pt, ptlim);
   10978:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1097b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   1097e:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10983:	89 c8                	mov    eax,ecx
   10985:	f7 ea                	imul   edx
   10987:	d1 fa                	sar    edx,1
   10989:	89 c8                	mov    eax,ecx
   1098b:	c1 f8 1f             	sar    eax,0x1f
   1098e:	29 c2                	sub    edx,eax
   10990:	89 d0                	mov    eax,edx
   10992:	01 c0                	add    eax,eax
   10994:	01 d0                	add    eax,edx
   10996:	c1 e0 02             	shl    eax,0x2
   10999:	29 c1                	sub    ecx,eax
   1099b:	89 ca                	mov    edx,ecx
   1099d:	85 d2                	test   edx,edx
   1099f:	74 27                	je     109c8 <_fmt+0x2b9>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 1)
   109a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   109a4:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   109a7:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   109ac:	89 c8                	mov    eax,ecx
   109ae:	f7 ea                	imul   edx
   109b0:	d1 fa                	sar    edx,1
   109b2:	89 c8                	mov    eax,ecx
   109b4:	c1 f8 1f             	sar    eax,0x1f
   109b7:	29 c2                	sub    edx,eax
   109b9:	89 d0                	mov    eax,edx
   109bb:	01 c0                	add    eax,eax
   109bd:	01 d0                	add    eax,edx
   109bf:	c1 e0 02             	shl    eax,0x2
   109c2:	29 c1                	sub    ecx,eax
   109c4:	89 ca                	mov    edx,ecx
   109c6:	eb 05                	jmp    109cd <_fmt+0x2be>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 2)
   109c8:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 4)
   109cd:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109d0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   109d3:	68 05 50 04 00       	push   0x45005
   109d8:	52                   	push   edx
   109d9:	e8 be 07 00 00       	call   1119c <_conv>
   109de:	83 c4 10             	add    esp,0x10
   109e1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:128 (discriminator 4)
          continue;
   109e4:	e9 96 07 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:131

        case 'j':
          pt = _conv(t->tm_yday + 1, "%03d", pt, ptlim);
   109e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   109ec:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   109ef:	83 c0 01             	add    eax,0x1
   109f2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109f5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   109f8:	68 35 50 04 00       	push   0x45035
   109fd:	50                   	push   eax
   109fe:	e8 99 07 00 00       	call   1119c <_conv>
   10a03:	83 c4 10             	add    esp,0x10
   10a06:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:132
          continue;
   10a09:	e9 71 07 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:135

        case 'k':
          pt = _conv(t->tm_hour, "%2d", pt, ptlim);
   10a0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10a14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a17:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a1a:	68 28 50 04 00       	push   0x45028
   10a1f:	50                   	push   eax
   10a20:	e8 77 07 00 00       	call   1119c <_conv>
   10a25:	83 c4 10             	add    esp,0x10
   10a28:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:136
          continue;
   10a2b:	e9 4f 07 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139

        case 'l':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%2d", pt, ptlim);
   10a30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a33:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a36:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a3b:	89 c8                	mov    eax,ecx
   10a3d:	f7 ea                	imul   edx
   10a3f:	d1 fa                	sar    edx,1
   10a41:	89 c8                	mov    eax,ecx
   10a43:	c1 f8 1f             	sar    eax,0x1f
   10a46:	29 c2                	sub    edx,eax
   10a48:	89 d0                	mov    eax,edx
   10a4a:	01 c0                	add    eax,eax
   10a4c:	01 d0                	add    eax,edx
   10a4e:	c1 e0 02             	shl    eax,0x2
   10a51:	29 c1                	sub    ecx,eax
   10a53:	89 ca                	mov    edx,ecx
   10a55:	85 d2                	test   edx,edx
   10a57:	74 27                	je     10a80 <_fmt+0x371>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 1)
   10a59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a5c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a5f:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a64:	89 c8                	mov    eax,ecx
   10a66:	f7 ea                	imul   edx
   10a68:	d1 fa                	sar    edx,1
   10a6a:	89 c8                	mov    eax,ecx
   10a6c:	c1 f8 1f             	sar    eax,0x1f
   10a6f:	29 c2                	sub    edx,eax
   10a71:	89 d0                	mov    eax,edx
   10a73:	01 c0                	add    eax,eax
   10a75:	01 d0                	add    eax,edx
   10a77:	c1 e0 02             	shl    eax,0x2
   10a7a:	29 c1                	sub    ecx,eax
   10a7c:	89 ca                	mov    edx,ecx
   10a7e:	eb 05                	jmp    10a85 <_fmt+0x376>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 2)
   10a80:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 4)
   10a85:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a88:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a8b:	68 28 50 04 00       	push   0x45028
   10a90:	52                   	push   edx
   10a91:	e8 06 07 00 00       	call   1119c <_conv>
   10a96:	83 c4 10             	add    esp,0x10
   10a99:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:140 (discriminator 4)
          continue;
   10a9c:	e9 de 06 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:143

        case 'M':
          pt = _conv(t->tm_min, "%02d", pt, ptlim);
   10aa1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10aa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   10aa7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10aaa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10aad:	68 05 50 04 00       	push   0x45005
   10ab2:	50                   	push   eax
   10ab3:	e8 e4 06 00 00       	call   1119c <_conv>
   10ab8:	83 c4 10             	add    esp,0x10
   10abb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:144
          continue;
   10abe:	e9 bc 06 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:148

        case 'm':
          //CLR 05/02/2016 - removed odd +1 after tm_mon
          pt = _conv(t->tm_mon, "%02d", pt, ptlim);
   10ac3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ac6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10ac9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10acc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10acf:	68 05 50 04 00       	push   0x45005
   10ad4:	50                   	push   eax
   10ad5:	e8 c2 06 00 00       	call   1119c <_conv>
   10ada:	83 c4 10             	add    esp,0x10
   10add:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:149
          continue;
   10ae0:	e9 9a 06 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:152

        case 'n':
          pt = _add("\n", pt, ptlim);
   10ae5:	83 ec 04             	sub    esp,0x4
   10ae8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10aeb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10aee:	68 3a 50 04 00       	push   0x4503a
   10af3:	e8 d6 06 00 00       	call   111ce <_add>
   10af8:	83 c4 10             	add    esp,0x10
   10afb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:153
          continue;
   10afe:	e9 7c 06 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156

        case 'p':
          pt = _add((t->tm_hour >= 12) ? "pm" : "am", pt, ptlim);
   10b03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b06:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10b09:	83 f8 0b             	cmp    eax,0xb
   10b0c:	7e 07                	jle    10b15 <_fmt+0x406>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 1)
   10b0e:	b8 3c 50 04 00       	mov    eax,0x4503c
   10b13:	eb 05                	jmp    10b1a <_fmt+0x40b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 2)
   10b15:	b8 3f 50 04 00       	mov    eax,0x4503f
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 4)
   10b1a:	83 ec 04             	sub    esp,0x4
   10b1d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b20:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b23:	50                   	push   eax
   10b24:	e8 a5 06 00 00       	call   111ce <_add>
   10b29:	83 c4 10             	add    esp,0x10
   10b2c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:157 (discriminator 4)
          continue;
   10b2f:	e9 4b 06 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:160

        case 'R':
          pt = _fmt("%H:%M", t, pt, ptlim);
   10b34:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b37:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b3a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b3d:	68 42 50 04 00       	push   0x45042
   10b42:	e8 c8 fb ff ff       	call   1070f <_fmt>
   10b47:	83 c4 10             	add    esp,0x10
   10b4a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:161
          continue;
   10b4d:	e9 2d 06 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:164

        case 'r':
          pt = _fmt("%I:%M:%S %p", t, pt, ptlim);
   10b52:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b55:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b58:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b5b:	68 48 50 04 00       	push   0x45048
   10b60:	e8 aa fb ff ff       	call   1070f <_fmt>
   10b65:	83 c4 10             	add    esp,0x10
   10b68:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:165
          continue;
   10b6b:	e9 0f 06 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:168

        case 'S':
          pt = _conv(t->tm_sec, "%02d", pt, ptlim);
   10b70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b73:	8b 00                	mov    eax,DWORD PTR [eax]
   10b75:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b78:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b7b:	68 05 50 04 00       	push   0x45005
   10b80:	50                   	push   eax
   10b81:	e8 16 06 00 00       	call   1119c <_conv>
   10b86:	83 c4 10             	add    esp,0x10
   10b89:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:169
          continue;
   10b8c:	e9 ee 05 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:176
        case 's': {
          struct tm  tm;
          char buf[32];
          time_t mkt;

          tm = *t;
   10b91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b94:	8b 10                	mov    edx,DWORD PTR [eax]
   10b96:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   10b99:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   10b9c:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
   10b9f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   10ba2:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
   10ba5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   10ba8:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
   10bab:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   10bae:	89 55 b8             	mov    DWORD PTR [ebp-0x48],edx
   10bb1:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   10bb4:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
   10bb7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   10bba:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
   10bbd:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   10bc0:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
   10bc3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   10bc6:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
   10bc9:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   10bcc:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
   10bcf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   10bd2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:177
          mkt = mktime(&tm);
   10bd5:	83 ec 0c             	sub    esp,0xc
   10bd8:	8d 45 a8             	lea    eax,[ebp-0x58]
   10bdb:	50                   	push   eax
   10bdc:	e8 7e 76 01 00       	call   2825f <mktime>
   10be1:	83 c4 10             	add    esp,0x10
   10be4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:178
          sprintf(buf, "%lu", mkt);
   10be7:	83 ec 04             	sub    esp,0x4
   10bea:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   10bed:	68 54 50 04 00       	push   0x45054
   10bf2:	8d 45 88             	lea    eax,[ebp-0x78]
   10bf5:	50                   	push   eax
   10bf6:	e8 fc 6c 01 00       	call   278f7 <sprintf>
   10bfb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:179
          pt = _add(buf, pt, ptlim);
   10bfe:	83 ec 04             	sub    esp,0x4
   10c01:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c04:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c07:	8d 45 88             	lea    eax,[ebp-0x78]
   10c0a:	50                   	push   eax
   10c0b:	e8 be 05 00 00       	call   111ce <_add>
   10c10:	83 c4 10             	add    esp,0x10
   10c13:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   10c16:	e9 64 05 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:184
          continue;
        }

        case 'T':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10c1b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c1e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c21:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10c24:	68 58 50 04 00       	push   0x45058
   10c29:	e8 e1 fa ff ff       	call   1070f <_fmt>
   10c2e:	83 c4 10             	add    esp,0x10
   10c31:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:185
          continue;
   10c34:	e9 46 05 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:188

        case 't':
          pt = _add("\t", pt, ptlim);
   10c39:	83 ec 04             	sub    esp,0x4
   10c3c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c3f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c42:	68 61 50 04 00       	push   0x45061
   10c47:	e8 82 05 00 00       	call   111ce <_add>
   10c4c:	83 c4 10             	add    esp,0x10
   10c4f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:189
          continue;
   10c52:	e9 28 05 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:192

        case 'U':
          pt = _conv((t->tm_yday + 7 - t->tm_wday) / 7, "%02d", pt, ptlim);
   10c57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c5a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10c5d:	8d 50 07             	lea    edx,[eax+0x7]
   10c60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c63:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10c66:	89 d1                	mov    ecx,edx
   10c68:	29 c1                	sub    ecx,eax
   10c6a:	ba 93 24 49 92       	mov    edx,0x92492493
   10c6f:	89 c8                	mov    eax,ecx
   10c71:	f7 ea                	imul   edx
   10c73:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10c76:	c1 f8 02             	sar    eax,0x2
   10c79:	89 c2                	mov    edx,eax
   10c7b:	89 c8                	mov    eax,ecx
   10c7d:	c1 f8 1f             	sar    eax,0x1f
   10c80:	29 c2                	sub    edx,eax
   10c82:	89 d0                	mov    eax,edx
   10c84:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c87:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c8a:	68 05 50 04 00       	push   0x45005
   10c8f:	50                   	push   eax
   10c90:	e8 07 05 00 00       	call   1119c <_conv>
   10c95:	83 c4 10             	add    esp,0x10
   10c98:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:193
          continue;
   10c9b:	e9 df 04 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196

        case 'u':
          pt = _conv((t->tm_wday == 0) ? 7 : t->tm_wday, "%d", pt, ptlim);
   10ca0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ca3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10ca6:	85 c0                	test   eax,eax
   10ca8:	74 08                	je     10cb2 <_fmt+0x5a3>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 1)
   10caa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cad:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10cb0:	eb 05                	jmp    10cb7 <_fmt+0x5a8>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 2)
   10cb2:	b8 07 00 00 00       	mov    eax,0x7
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 4)
   10cb7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10cba:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10cbd:	68 63 50 04 00       	push   0x45063
   10cc2:	50                   	push   eax
   10cc3:	e8 d4 04 00 00       	call   1119c <_conv>
   10cc8:	83 c4 10             	add    esp,0x10
   10ccb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:197 (discriminator 4)
          continue;
   10cce:	e9 ac 04 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:207
          int  year;
          int  yday;
          int  wday;
          int  w;

          year = t->tm_year + TM_YEAR_BASE;
   10cd3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cd6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10cd9:	05 6c 07 00 00       	add    eax,0x76c
   10cde:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:208
          yday = t->tm_yday;
   10ce1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ce4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10ce7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:209
          wday = t->tm_wday;
   10cea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ced:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10cf0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215
          while (1) {
            int  len;
            int  bot;
            int  top;

            len = LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10cf3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10cf6:	83 e0 03             	and    eax,0x3
   10cf9:	85 c0                	test   eax,eax
   10cfb:	75 50                	jne    10d4d <_fmt+0x63e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 1)
   10cfd:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10d00:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10d05:	89 c8                	mov    eax,ecx
   10d07:	f7 ea                	imul   edx
   10d09:	c1 fa 05             	sar    edx,0x5
   10d0c:	89 c8                	mov    eax,ecx
   10d0e:	c1 f8 1f             	sar    eax,0x1f
   10d11:	29 c2                	sub    edx,eax
   10d13:	89 d0                	mov    eax,edx
   10d15:	6b c0 64             	imul   eax,eax,0x64
   10d18:	29 c1                	sub    ecx,eax
   10d1a:	89 c8                	mov    eax,ecx
   10d1c:	85 c0                	test   eax,eax
   10d1e:	75 26                	jne    10d46 <_fmt+0x637>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 4)
   10d20:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10d23:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10d28:	89 c8                	mov    eax,ecx
   10d2a:	f7 ea                	imul   edx
   10d2c:	c1 fa 07             	sar    edx,0x7
   10d2f:	89 c8                	mov    eax,ecx
   10d31:	c1 f8 1f             	sar    eax,0x1f
   10d34:	29 c2                	sub    edx,eax
   10d36:	89 d0                	mov    eax,edx
   10d38:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10d3e:	29 c1                	sub    ecx,eax
   10d40:	89 c8                	mov    eax,ecx
   10d42:	85 c0                	test   eax,eax
   10d44:	75 07                	jne    10d4d <_fmt+0x63e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 5)
   10d46:	b8 6e 01 00 00       	mov    eax,0x16e
   10d4b:	eb 05                	jmp    10d52 <_fmt+0x643>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 6)
   10d4d:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 8)
   10d52:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:216 (discriminator 8)
            bot = ((yday + 11 - wday) % DAYSPERWEEK) - 3;
   10d55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10d58:	83 c0 0b             	add    eax,0xb
   10d5b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   10d5e:	89 c1                	mov    ecx,eax
   10d60:	ba 93 24 49 92       	mov    edx,0x92492493
   10d65:	89 c8                	mov    eax,ecx
   10d67:	f7 ea                	imul   edx
   10d69:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10d6c:	c1 f8 02             	sar    eax,0x2
   10d6f:	89 c2                	mov    edx,eax
   10d71:	89 c8                	mov    eax,ecx
   10d73:	c1 f8 1f             	sar    eax,0x1f
   10d76:	29 c2                	sub    edx,eax
   10d78:	89 d0                	mov    eax,edx
   10d7a:	89 c2                	mov    edx,eax
   10d7c:	c1 e2 03             	shl    edx,0x3
   10d7f:	29 c2                	sub    edx,eax
   10d81:	89 c8                	mov    eax,ecx
   10d83:	29 d0                	sub    eax,edx
   10d85:	83 e8 03             	sub    eax,0x3
   10d88:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:217 (discriminator 8)
            top = bot - (len % DAYSPERWEEK);
   10d8b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   10d8e:	ba 93 24 49 92       	mov    edx,0x92492493
   10d93:	89 c8                	mov    eax,ecx
   10d95:	f7 ea                	imul   edx
   10d97:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10d9a:	c1 f8 02             	sar    eax,0x2
   10d9d:	89 c2                	mov    edx,eax
   10d9f:	89 c8                	mov    eax,ecx
   10da1:	c1 f8 1f             	sar    eax,0x1f
   10da4:	29 c2                	sub    edx,eax
   10da6:	89 d0                	mov    eax,edx
   10da8:	89 c2                	mov    edx,eax
   10daa:	c1 e2 03             	shl    edx,0x3
   10dad:	29 c2                	sub    edx,eax
   10daf:	89 c8                	mov    eax,ecx
   10db1:	29 d0                	sub    eax,edx
   10db3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   10db6:	29 c2                	sub    edx,eax
   10db8:	89 d0                	mov    eax,edx
   10dba:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:218 (discriminator 8)
            if (top < -3) top += DAYSPERWEEK;
   10dbd:	83 7d e8 fd          	cmp    DWORD PTR [ebp-0x18],0xfffffffd
   10dc1:	7d 04                	jge    10dc7 <_fmt+0x6b8>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:218 (discriminator 1)
   10dc3:	83 45 e8 07          	add    DWORD PTR [ebp-0x18],0x7
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:219
            top += len;
   10dc7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   10dca:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:220
            if (yday >= top) {
   10dcd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10dd0:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   10dd3:	7c 10                	jl     10de5 <_fmt+0x6d6>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:221
              ++year;
   10dd5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:222
              w = 1;
   10dd9:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:223
              break;
   10de0:	e9 9d 00 00 00       	jmp    10e82 <_fmt+0x773>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:225
            }
            if (yday >= bot) {
   10de5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10de8:	3b 45 d4             	cmp    eax,DWORD PTR [ebp-0x2c]
   10deb:	7c 2a                	jl     10e17 <_fmt+0x708>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:226
              w = 1 + ((yday - bot) / DAYSPERWEEK);
   10ded:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10df0:	2b 45 d4             	sub    eax,DWORD PTR [ebp-0x2c]
   10df3:	89 c1                	mov    ecx,eax
   10df5:	ba 93 24 49 92       	mov    edx,0x92492493
   10dfa:	89 c8                	mov    eax,ecx
   10dfc:	f7 ea                	imul   edx
   10dfe:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10e01:	c1 f8 02             	sar    eax,0x2
   10e04:	89 c2                	mov    edx,eax
   10e06:	89 c8                	mov    eax,ecx
   10e08:	c1 f8 1f             	sar    eax,0x1f
   10e0b:	29 c2                	sub    edx,eax
   10e0d:	89 d0                	mov    eax,edx
   10e0f:	83 c0 01             	add    eax,0x1
   10e12:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:227
              break;
   10e15:	eb 6b                	jmp    10e82 <_fmt+0x773>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:229
            }
            --year;
   10e17:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10e1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10e1e:	83 e0 03             	and    eax,0x3
   10e21:	85 c0                	test   eax,eax
   10e23:	75 50                	jne    10e75 <_fmt+0x766>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 1)
   10e25:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e28:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e2d:	89 c8                	mov    eax,ecx
   10e2f:	f7 ea                	imul   edx
   10e31:	c1 fa 05             	sar    edx,0x5
   10e34:	89 c8                	mov    eax,ecx
   10e36:	c1 f8 1f             	sar    eax,0x1f
   10e39:	29 c2                	sub    edx,eax
   10e3b:	89 d0                	mov    eax,edx
   10e3d:	6b c0 64             	imul   eax,eax,0x64
   10e40:	29 c1                	sub    ecx,eax
   10e42:	89 c8                	mov    eax,ecx
   10e44:	85 c0                	test   eax,eax
   10e46:	75 26                	jne    10e6e <_fmt+0x75f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 4)
   10e48:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e4b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e50:	89 c8                	mov    eax,ecx
   10e52:	f7 ea                	imul   edx
   10e54:	c1 fa 07             	sar    edx,0x7
   10e57:	89 c8                	mov    eax,ecx
   10e59:	c1 f8 1f             	sar    eax,0x1f
   10e5c:	29 c2                	sub    edx,eax
   10e5e:	89 d0                	mov    eax,edx
   10e60:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10e66:	29 c1                	sub    ecx,eax
   10e68:	89 c8                	mov    eax,ecx
   10e6a:	85 c0                	test   eax,eax
   10e6c:	75 07                	jne    10e75 <_fmt+0x766>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 5)
   10e6e:	b8 6e 01 00 00       	mov    eax,0x16e
   10e73:	eb 05                	jmp    10e7a <_fmt+0x76b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 6)
   10e75:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 8)
   10e7a:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:231 (discriminator 8)
          }
   10e7d:	e9 71 fe ff ff       	jmp    10cf3 <_fmt+0x5e4>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:232
          if (*format == 'V') {
   10e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10e85:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10e88:	3c 56                	cmp    al,0x56
   10e8a:	75 1e                	jne    10eaa <_fmt+0x79b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:233
            pt = _conv(w, "%02d", pt, ptlim);
   10e8c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10e8f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10e92:	68 05 50 04 00       	push   0x45005
   10e97:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   10e9a:	e8 fd 02 00 00       	call   1119c <_conv>
   10e9f:	83 c4 10             	add    esp,0x10
   10ea2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10ea5:	e9 d5 02 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:234
            --year;
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
          }
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
   10eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10ead:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10eb0:	3c 67                	cmp    al,0x67
   10eb2:	75 3b                	jne    10eef <_fmt+0x7e0>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:235
            pt = _conv(year % 100, "%02d", pt, ptlim);
   10eb4:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10eb7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10ebc:	89 c8                	mov    eax,ecx
   10ebe:	f7 ea                	imul   edx
   10ec0:	c1 fa 05             	sar    edx,0x5
   10ec3:	89 c8                	mov    eax,ecx
   10ec5:	c1 f8 1f             	sar    eax,0x1f
   10ec8:	29 c2                	sub    edx,eax
   10eca:	89 d0                	mov    eax,edx
   10ecc:	6b c0 64             	imul   eax,eax,0x64
   10ecf:	29 c1                	sub    ecx,eax
   10ed1:	89 c8                	mov    eax,ecx
   10ed3:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ed6:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ed9:	68 05 50 04 00       	push   0x45005
   10ede:	50                   	push   eax
   10edf:	e8 b8 02 00 00       	call   1119c <_conv>
   10ee4:	83 c4 10             	add    esp,0x10
   10ee7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10eea:	e9 90 02 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:237
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
   10eef:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ef2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ef5:	68 66 50 04 00       	push   0x45066
   10efa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   10efd:	e8 9a 02 00 00       	call   1119c <_conv>
   10f02:	83 c4 10             	add    esp,0x10
   10f05:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          }
          continue;
   10f08:	e9 72 02 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:243
        }

        case 'v':
          pt = _fmt("%e-%b-%Y", t, pt, ptlim);
   10f0d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f10:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f13:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10f16:	68 6b 50 04 00       	push   0x4506b
   10f1b:	e8 ef f7 ff ff       	call   1070f <_fmt>
   10f20:	83 c4 10             	add    esp,0x10
   10f23:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:244
          continue;
   10f26:	e9 54 02 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247

        case 'W':
          pt = _conv((t->tm_yday + 7 - (t->tm_wday ? (t->tm_wday - 1) : 6)) / 7, "%02d", pt, ptlim);
   10f2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f2e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10f31:	8d 50 07             	lea    edx,[eax+0x7]
   10f34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f37:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f3a:	85 c0                	test   eax,eax
   10f3c:	74 0b                	je     10f49 <_fmt+0x83a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 1)
   10f3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f41:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f44:	83 e8 01             	sub    eax,0x1
   10f47:	eb 05                	jmp    10f4e <_fmt+0x83f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 2)
   10f49:	b8 06 00 00 00       	mov    eax,0x6
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 4)
   10f4e:	89 d1                	mov    ecx,edx
   10f50:	29 c1                	sub    ecx,eax
   10f52:	ba 93 24 49 92       	mov    edx,0x92492493
   10f57:	89 c8                	mov    eax,ecx
   10f59:	f7 ea                	imul   edx
   10f5b:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10f5e:	c1 f8 02             	sar    eax,0x2
   10f61:	89 c2                	mov    edx,eax
   10f63:	89 c8                	mov    eax,ecx
   10f65:	c1 f8 1f             	sar    eax,0x1f
   10f68:	29 c2                	sub    edx,eax
   10f6a:	89 d0                	mov    eax,edx
   10f6c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f6f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f72:	68 05 50 04 00       	push   0x45005
   10f77:	50                   	push   eax
   10f78:	e8 1f 02 00 00       	call   1119c <_conv>
   10f7d:	83 c4 10             	add    esp,0x10
   10f80:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:248 (discriminator 4)
          continue;
   10f83:	e9 f7 01 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:251

        case 'w':
          pt = _conv(t->tm_wday, "%d", pt, ptlim);
   10f88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f8b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f8e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f91:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f94:	68 63 50 04 00       	push   0x45063
   10f99:	50                   	push   eax
   10f9a:	e8 fd 01 00 00       	call   1119c <_conv>
   10f9f:	83 c4 10             	add    esp,0x10
   10fa2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:252
          continue;
   10fa5:	e9 d5 01 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:255

        case 'X':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10faa:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fad:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fb0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fb3:	68 58 50 04 00       	push   0x45058
   10fb8:	e8 52 f7 ff ff       	call   1070f <_fmt>
   10fbd:	83 c4 10             	add    esp,0x10
   10fc0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:256
          continue;
   10fc3:	e9 b7 01 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:259

        case 'x':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   10fc8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fcb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fce:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fd1:	68 1f 50 04 00       	push   0x4501f
   10fd6:	e8 34 f7 ff ff       	call   1070f <_fmt>
   10fdb:	83 c4 10             	add    esp,0x10
   10fde:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:260
          continue;
   10fe1:	e9 99 01 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:263

        case 'y':
          pt = _conv((t->tm_year + TM_YEAR_BASE) % 100, "%02d", pt, ptlim);
   10fe6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10fe9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10fec:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   10ff2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10ff7:	89 c8                	mov    eax,ecx
   10ff9:	f7 ea                	imul   edx
   10ffb:	c1 fa 05             	sar    edx,0x5
   10ffe:	89 c8                	mov    eax,ecx
   11000:	c1 f8 1f             	sar    eax,0x1f
   11003:	29 c2                	sub    edx,eax
   11005:	89 d0                	mov    eax,edx
   11007:	6b c0 64             	imul   eax,eax,0x64
   1100a:	29 c1                	sub    ecx,eax
   1100c:	89 c8                	mov    eax,ecx
   1100e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11011:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11014:	68 05 50 04 00       	push   0x45005
   11019:	50                   	push   eax
   1101a:	e8 7d 01 00 00       	call   1119c <_conv>
   1101f:	83 c4 10             	add    esp,0x10
   11022:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:264
          continue;
   11025:	e9 55 01 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:267

        case 'Y':
          pt = _conv(t->tm_year + TM_YEAR_BASE, "%04d", pt, ptlim);
   1102a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1102d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   11030:	05 6c 07 00 00       	add    eax,0x76c
   11035:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11038:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1103b:	68 66 50 04 00       	push   0x45066
   11040:	50                   	push   eax
   11041:	e8 56 01 00 00       	call   1119c <_conv>
   11046:	83 c4 10             	add    esp,0x10
   11049:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:268
          continue;
   1104c:	e9 2e 01 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:271

        case 'Z':
          pt = _add("?", pt, ptlim);
   11051:	83 ec 04             	sub    esp,0x4
   11054:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11057:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1105a:	68 03 50 04 00       	push   0x45003
   1105f:	e8 6a 01 00 00       	call   111ce <_add>
   11064:	83 c4 10             	add    esp,0x10
   11067:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:272
          continue;
   1106a:	e9 10 01 00 00       	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:276

        case 'z': {
          long absoff;
          if (kTimeZone >= 0) {
   1106f:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   11074:	85 c0                	test   eax,eax
   11076:	78 23                	js     1109b <_fmt+0x98c>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:277
            absoff = kTimeZone;
   11078:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   1107d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:278
            pt = _add("+", pt, ptlim);
   11080:	83 ec 04             	sub    esp,0x4
   11083:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11086:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11089:	68 74 50 04 00       	push   0x45074
   1108e:	e8 3b 01 00 00       	call   111ce <_add>
   11093:	83 c4 10             	add    esp,0x10
   11096:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   11099:	eb 21                	jmp    110bc <_fmt+0x9ad>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:280
          } else {
            absoff = kTimeZone;
   1109b:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   110a0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:281
            pt = _add("-", pt, ptlim);
   110a3:	83 ec 04             	sub    esp,0x4
   110a6:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110a9:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110ac:	68 76 50 04 00       	push   0x45076
   110b1:	e8 18 01 00 00       	call   111ce <_add>
   110b6:	83 c4 10             	add    esp,0x10
   110b9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:283
          }
          pt = _conv(absoff / 3600, "%02d", pt, ptlim);
   110bc:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
   110bf:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   110c4:	89 c8                	mov    eax,ecx
   110c6:	f7 ea                	imul   edx
   110c8:	8d 04 0a             	lea    eax,[edx+ecx*1]
   110cb:	c1 f8 0b             	sar    eax,0xb
   110ce:	89 c2                	mov    edx,eax
   110d0:	89 c8                	mov    eax,ecx
   110d2:	c1 f8 1f             	sar    eax,0x1f
   110d5:	29 c2                	sub    edx,eax
   110d7:	89 d0                	mov    eax,edx
   110d9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110dc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110df:	68 05 50 04 00       	push   0x45005
   110e4:	50                   	push   eax
   110e5:	e8 b2 00 00 00       	call   1119c <_conv>
   110ea:	83 c4 10             	add    esp,0x10
   110ed:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:284
          pt = _conv((absoff % 3600) / 60, "%02d", pt, ptlim);
   110f0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   110f3:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   110f8:	89 d8                	mov    eax,ebx
   110fa:	f7 ea                	imul   edx
   110fc:	8d 04 1a             	lea    eax,[edx+ebx*1]
   110ff:	c1 f8 0b             	sar    eax,0xb
   11102:	89 c2                	mov    edx,eax
   11104:	89 d8                	mov    eax,ebx
   11106:	c1 f8 1f             	sar    eax,0x1f
   11109:	89 d1                	mov    ecx,edx
   1110b:	29 c1                	sub    ecx,eax
   1110d:	69 c1 10 0e 00 00    	imul   eax,ecx,0xe10
   11113:	29 c3                	sub    ebx,eax
   11115:	89 d9                	mov    ecx,ebx
   11117:	ba 89 88 88 88       	mov    edx,0x88888889
   1111c:	89 c8                	mov    eax,ecx
   1111e:	f7 ea                	imul   edx
   11120:	8d 04 0a             	lea    eax,[edx+ecx*1]
   11123:	c1 f8 05             	sar    eax,0x5
   11126:	89 c2                	mov    edx,eax
   11128:	89 c8                	mov    eax,ecx
   1112a:	c1 f8 1f             	sar    eax,0x1f
   1112d:	29 c2                	sub    edx,eax
   1112f:	89 d0                	mov    eax,edx
   11131:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11134:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11137:	68 05 50 04 00       	push   0x45005
   1113c:	50                   	push   eax
   1113d:	e8 5a 00 00 00       	call   1119c <_conv>
   11142:	83 c4 10             	add    esp,0x10
   11145:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:286

          continue;
   11148:	eb 35                	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:290
        }

        case '+':
          pt = _fmt("%a, %d %b %Y %H:%M:%S %z", t, pt, ptlim);
   1114a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1114d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11150:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   11153:	68 78 50 04 00       	push   0x45078
   11158:	e8 b2 f5 ff ff       	call   1070f <_fmt>
   1115d:	83 c4 10             	add    esp,0x10
   11160:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:291
          continue;
   11163:	eb 1a                	jmp    1117f <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:295

        case '%':
        default:
          break;
   11165:	90                   	nop
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:299
      }
    }

    if (pt == ptlim) break;
   11166:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11169:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   1116c:	74 25                	je     11193 <_fmt+0xa84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:300
    *pt++ = *format;
   1116e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11171:	8d 50 01             	lea    edx,[eax+0x1]
   11174:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   11177:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1117a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1117d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68
  *p = '\0';
  return p - s;
}

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
  for ( ; *format; ++format) {
   1117f:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68 (discriminator 1)
   11183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11186:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11189:	84 c0                	test   al,al
   1118b:	0f 85 8a f5 ff ff    	jne    1071b <_fmt+0xc>
   11191:	eb 01                	jmp    11194 <_fmt+0xa85>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:299
        default:
          break;
      }
    }

    if (pt == ptlim) break;
   11193:	90                   	nop
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:303
    *pt++ = *format;
  }

  return pt;
   11194:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:304
}
   11197:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1119a:	c9                   	leave  
   1119b:	c3                   	ret    

0001119c <_conv>:
_conv():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:306

static char *_conv(const int n, char *format, char *pt, const char *ptlim) {
   1119c:	55                   	push   ebp
   1119d:	89 e5                	mov    ebp,esp
   1119f:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:309
  char  buf[32];

  sprintf(buf, format, n);
   111a2:	83 ec 04             	sub    esp,0x4
   111a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   111a8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   111ab:	8d 45 d8             	lea    eax,[ebp-0x28]
   111ae:	50                   	push   eax
   111af:	e8 43 67 01 00       	call   278f7 <sprintf>
   111b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:310
  return _add(buf, pt, ptlim);
   111b7:	83 ec 04             	sub    esp,0x4
   111ba:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   111bd:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   111c0:	8d 45 d8             	lea    eax,[ebp-0x28]
   111c3:	50                   	push   eax
   111c4:	e8 05 00 00 00       	call   111ce <_add>
   111c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:311
}
   111cc:	c9                   	leave  
   111cd:	c3                   	ret    

000111ce <_add>:
_add():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:313

static char *_add(const char *str, char *pt, const char *ptlim) {
   111ce:	55                   	push   ebp
   111cf:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314
  while (pt < ptlim && (*pt = *str++) != '\0') ++pt;
   111d1:	eb 04                	jmp    111d7 <_add+0x9>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 3)
   111d3:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 1)
   111d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111da:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   111dd:	73 1b                	jae    111fa <_add+0x2c>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 2)
   111df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   111e2:	8d 50 01             	lea    edx,[eax+0x1]
   111e5:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   111e8:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   111eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111ee:	88 10                	mov    BYTE PTR [eax],dl
   111f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111f3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   111f6:	84 c0                	test   al,al
   111f8:	75 d9                	jne    111d3 <_add+0x5>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:315
  return pt;
   111fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:316
}
   111fd:	5d                   	pop    ebp
   111fe:	c3                   	ret    
   111ff:	90                   	nop

00011200 <keyboardGetKeyFromBuffer>:
keyboardGetKeyFromBuffer():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:17
extern volatile char* kKbdBuffCurrChar;
//Get a key from the keyboard buffer
//Curr moves when a key is put into the buffer
//Base moves when a key is taken from the buffer
uint8_t keyboardGetKeyFromBuffer()
{
   11200:	55                   	push   ebp
   11201:	89 e5                	mov    ebp,esp
   11203:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:18
    char lTemp=0;
   11206:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:20
    //If top > buffer address, there are new characters to be processed
    if (kKbdBuffCurrTop>(char*)KEYBOARD_BUFFER_ADDRESS)
   1120a:	a1 60 99 12 00       	mov    eax,ds:0x129960
   1120f:	3d b0 24 16 00       	cmp    eax,0x1624b0
   11214:	76 3b                	jbe    11251 <keyboardGetKeyFromBuffer+0x51>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:23
    {
        //increment the current character pointer
        kKbdBuffCurrChar++;
   11216:	a1 90 99 12 00       	mov    eax,ds:0x129990
   1121b:	83 c0 01             	add    eax,0x1
   1121e:	a3 90 99 12 00       	mov    ds:0x129990,eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:25
        //get the character from the buffer
        lTemp=*kKbdBuffCurrChar;
   11223:	a1 90 99 12 00       	mov    eax,ds:0x129990
   11228:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1122b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:27
        //If we've reached top, reset both char and top
        if (kKbdBuffCurrChar>=kKbdBuffCurrTop)
   1122e:	8b 15 90 99 12 00    	mov    edx,DWORD PTR ds:0x129990
   11234:	a1 60 99 12 00       	mov    eax,ds:0x129960
   11239:	39 c2                	cmp    edx,eax
   1123b:	72 14                	jb     11251 <keyboardGetKeyFromBuffer+0x51>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:29
        {
            kKbdBuffCurrChar=(char*)KEYBOARD_BUFFER_ADDRESS;
   1123d:	c7 05 90 99 12 00 b0 	mov    DWORD PTR ds:0x129990,0x1624b0
   11244:	24 16 00 
/home/yogi/src/os//chrisOS/src/char/keyboard.c:30
            kKbdBuffCurrTop=(char*)KEYBOARD_BUFFER_ADDRESS;
   11247:	c7 05 60 99 12 00 b0 	mov    DWORD PTR ds:0x129960,0x1624b0
   1124e:	24 16 00 
/home/yogi/src/os//chrisOS/src/char/keyboard.c:33
        }
    }
    return lTemp;
   11251:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:34
}
   11255:	c9                   	leave  
   11256:	c3                   	ret    

00011257 <waitForKeyboardKey>:
waitForKeyboardKey():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:37

char waitForKeyboardKey()
{
   11257:	55                   	push   ebp
   11258:	89 e5                	mov    ebp,esp
   1125a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:38
    printd(DEBUG_KEYBOARD_DRIVER,"buffer=%08X, char=%08X, top=%08X\t", KEYBOARD_BUFFER_ADDRESS, kKbdBuffCurrChar, kKbdBuffCurrTop);
   1125d:	8b 15 60 99 12 00    	mov    edx,DWORD PTR ds:0x129960
   11263:	a1 90 99 12 00       	mov    eax,ds:0x129990
   11268:	83 ec 0c             	sub    esp,0xc
   1126b:	52                   	push   edx
   1126c:	50                   	push   eax
   1126d:	68 b0 24 16 00       	push   0x1624b0
   11272:	68 80 53 04 00       	push   0x45380
   11277:	68 00 00 10 00       	push   0x100000
   1127c:	e8 42 66 01 00       	call   278c3 <printd>
   11281:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/char/keyboard.c:39
    char lTemp=0;
   11284:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:40
    bool debugMsgPrinted=false;
   11288:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:42
    //CLR 02/19/2017 - Had to change the conditon because of modifications I made to how buffer & bufferbase are used.
    while (kKbdBuffCurrTop==(char*)KEYBOARD_BUFFER_ADDRESS)
   1128c:	eb 1e                	jmp    112ac <waitForKeyboardKey+0x55>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:44
    {
        if (!debugMsgPrinted)
   1128e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   11292:	83 f0 01             	xor    eax,0x1
   11295:	84 c0                	test   al,al
   11297:	74 04                	je     1129d <waitForKeyboardKey+0x46>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:46
        {
            debugMsgPrinted=true;
   11299:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os//chrisOS/src/char/keyboard.c:48
        }
        __asm__("sti\nhlt\n");
   1129d:	fb                   	sti    
   1129e:	f4                   	hlt    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:49
        waitTicks(1);
   1129f:	83 ec 0c             	sub    esp,0xc
   112a2:	6a 01                	push   0x1
   112a4:	e8 1e 78 01 00       	call   28ac7 <waitTicks>
   112a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:42
{
    printd(DEBUG_KEYBOARD_DRIVER,"buffer=%08X, char=%08X, top=%08X\t", KEYBOARD_BUFFER_ADDRESS, kKbdBuffCurrChar, kKbdBuffCurrTop);
    char lTemp=0;
    bool debugMsgPrinted=false;
    //CLR 02/19/2017 - Had to change the conditon because of modifications I made to how buffer & bufferbase are used.
    while (kKbdBuffCurrTop==(char*)KEYBOARD_BUFFER_ADDRESS)
   112ac:	a1 60 99 12 00       	mov    eax,ds:0x129960
   112b1:	3d b0 24 16 00       	cmp    eax,0x1624b0
   112b6:	74 d6                	je     1128e <waitForKeyboardKey+0x37>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:51
            debugMsgPrinted=true;
        }
        __asm__("sti\nhlt\n");
        waitTicks(1);
    }
    lTemp=keyboardGetKeyFromBuffer();
   112b8:	e8 43 ff ff ff       	call   11200 <keyboardGetKeyFromBuffer>
   112bd:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:52
    printd(DEBUG_KEYBOARD_DRIVER,"got a key %u!\n", lTemp);
   112c0:	0f be 45 f6          	movsx  eax,BYTE PTR [ebp-0xa]
   112c4:	83 ec 04             	sub    esp,0x4
   112c7:	50                   	push   eax
   112c8:	68 a2 53 04 00       	push   0x453a2
   112cd:	68 00 00 10 00       	push   0x100000
   112d2:	e8 ec 65 01 00       	call   278c3 <printd>
   112d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:53
    return lTemp;
   112da:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:54
}
   112de:	c9                   	leave  
   112df:	c3                   	ret    

000112e0 <gets>:
gets():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:57

void gets(char* buffer, int len)
{
   112e0:	55                   	push   ebp
   112e1:	89 e5                	mov    ebp,esp
   112e3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:58
    volatile char inchar=0;
   112e6:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:59
    int cnt=0;
   112ea:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:60
    memset(buffer,0,len);
   112f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   112f4:	83 ec 04             	sub    esp,0x4
   112f7:	50                   	push   eax
   112f8:	6a 00                	push   0x0
   112fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   112fd:	e8 3b 43 01 00       	call   2563d <memset>
   11302:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:63
    while (1==1)
    {
        inchar=waitForKeyboardKey();
   11305:	e8 4d ff ff ff       	call   11257 <waitForKeyboardKey>
   1130a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:64
        if (inchar=='\b' && cnt>0)
   1130d:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11311:	3c 08                	cmp    al,0x8
   11313:	75 27                	jne    1133c <gets+0x5c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:64 (discriminator 1)
   11315:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11319:	7e 21                	jle    1133c <gets+0x5c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:66
        {
            buffer[cnt]=0;
   1131b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1131e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11321:	01 d0                	add    eax,edx
   11323:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:67
            cnt--;
   11326:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/keyboard.c:68
            puts("\b");
   1132a:	83 ec 0c             	sub    esp,0xc
   1132d:	68 b1 53 04 00       	push   0x453b1
   11332:	e8 2f 71 00 00       	call   18466 <puts>
   11337:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:65
    memset(buffer,0,len);
    while (1==1)
    {
        inchar=waitForKeyboardKey();
        if (inchar=='\b' && cnt>0)
        {
   1133a:	eb 63                	jmp    1139f <gets+0xbf>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:70
            buffer[cnt]=0;
            cnt--;
            puts("\b");
        }
        else if (inchar>0)
   1133c:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11340:	84 c0                	test   al,al
   11342:	7e c1                	jle    11305 <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:72
        {
            if (inchar==0x0a)
   11344:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11348:	3c 0a                	cmp    al,0xa
   1134a:	75 1a                	jne    11366 <gets+0x86>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:74
            {
                printk("%c",inchar);
   1134c:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11350:	0f be c0             	movsx  eax,al
   11353:	83 ec 08             	sub    esp,0x8
   11356:	50                   	push   eax
   11357:	68 b3 53 04 00       	push   0x453b3
   1135c:	e8 42 65 01 00       	call   278a3 <printk>
   11361:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:75
                return;
   11364:	eb 3e                	jmp    113a4 <gets+0xc4>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:77
            }
            if (cnt<len-2)
   11366:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11369:	83 e8 02             	sub    eax,0x2
   1136c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1136f:	7e 94                	jle    11305 <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:79
            {
                printk("%c",inchar);
   11371:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11375:	0f be c0             	movsx  eax,al
   11378:	83 ec 08             	sub    esp,0x8
   1137b:	50                   	push   eax
   1137c:	68 b3 53 04 00       	push   0x453b3
   11381:	e8 1d 65 01 00       	call   278a3 <printk>
   11386:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:80
                buffer[cnt++]=inchar;
   11389:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1138c:	8d 50 01             	lea    edx,[eax+0x1]
   1138f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   11392:	89 c2                	mov    edx,eax
   11394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11397:	01 c2                	add    edx,eax
   11399:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1139d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:83
            }
        }
    }
   1139f:	e9 61 ff ff ff       	jmp    11305 <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:84
}
   113a4:	c9                   	leave  
   113a5:	c3                   	ret    

000113a6 <getc>:
getc():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:87

char getc()
{
   113a6:	55                   	push   ebp
   113a7:	89 e5                	mov    ebp,esp
   113a9:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:88
   int inchar=waitForKeyboardKey();
   113ac:	e8 a6 fe ff ff       	call   11257 <waitForKeyboardKey>
   113b1:	0f be c0             	movsx  eax,al
   113b4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:90
   
   while (inchar==0)
   113b7:	eb 0b                	jmp    113c4 <getc+0x1e>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:92
   {
       inchar=waitForKeyboardKey();
   113b9:	e8 99 fe ff ff       	call   11257 <waitForKeyboardKey>
   113be:	0f be c0             	movsx  eax,al
   113c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:90

char getc()
{
   int inchar=waitForKeyboardKey();
   
   while (inchar==0)
   113c4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   113c8:	74 ef                	je     113b9 <getc+0x13>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:94
   {
       inchar=waitForKeyboardKey();
   }
   return inchar;
   113ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:95
}
   113cd:	c9                   	leave  
   113ce:	c3                   	ret    
   113cf:	90                   	nop

000113d0 <kPagingGet4kPDEntryValueCR3>:
kPagingGet4kPDEntryValueCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:21
extern uint32_t kDebugLevel;



uint32_t kPagingGet4kPDEntryValueCR3(uintptr_t PageDirAddress, uint32_t address)
{
   113d0:	55                   	push   ebp
   113d1:	89 e5                	mov    ebp,esp
   113d3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:22
    address&=0xFFFFF000;
   113d6:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:23
    uintptr_t*pageDirEntry=((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
   113dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   113e0:	c1 e8 16             	shr    eax,0x16
   113e3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   113ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   113ed:	01 d0                	add    eax,edx
   113ef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:24
    uintptr_t* lTemp=(uint32_t*)((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
   113f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   113f5:	c1 e8 16             	shr    eax,0x16
   113f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   113ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11402:	01 d0                	add    eax,edx
   11404:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:26
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11407:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1140c:	83 e0 40             	and    eax,0x40
   1140f:	85 c0                	test   eax,eax
   11411:	74 19                	je     1142c <kPagingGet4kPDEntryValueCR3+0x5c>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:27
            printk("kPagingGet4kPDEntryValueCR3: dirAddressPtr=0x%08x (PDIR=0x%08X)\n", *lTemp,PageDirAddress);
   11413:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11416:	8b 00                	mov    eax,DWORD PTR [eax]
   11418:	83 ec 04             	sub    esp,0x4
   1141b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1141e:	50                   	push   eax
   1141f:	68 c0 54 04 00       	push   0x454c0
   11424:	e8 7a 64 01 00       	call   278a3 <printk>
   11429:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:29
#endif
    return (uint32_t)*lTemp;
   1142c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1142f:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:30
}
   11431:	c9                   	leave  
   11432:	c3                   	ret    

00011433 <kPagingGet4kPDEntryValue>:
kPagingGet4kPDEntryValue():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:33

uint32_t kPagingGet4kPDEntryValue(uint32_t address)
{
   11433:	55                   	push   ebp
   11434:	89 e5                	mov    ebp,esp
   11436:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:34
    return kPagingGet4kPDEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   11439:	83 ec 08             	sub    esp,0x8
   1143c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1143f:	68 00 a0 4b 00       	push   0x4ba000
   11444:	e8 87 ff ff ff       	call   113d0 <kPagingGet4kPDEntryValueCR3>
   11449:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:35
}
   1144c:	c9                   	leave  
   1144d:	c3                   	ret    

0001144e <kPagingGet4kPDEntryAddressCR3>:
kPagingGet4kPDEntryAddressCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:38

uint32_t kPagingGet4kPDEntryAddressCR3(uintptr_t PageDirAddress, uint32_t address)
{
   1144e:	55                   	push   ebp
   1144f:	89 e5                	mov    ebp,esp
   11451:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:39
    address&=0xFFFFF000;
   11454:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:40
    uintptr_t lTemp=((PageDirAddress  | (((address & 0xFFC00000) >> 22) << 2)));
   1145b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1145e:	c1 e8 16             	shr    eax,0x16
   11461:	c1 e0 02             	shl    eax,0x2
   11464:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
   11467:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:42
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1146a:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1146f:	83 e0 40             	and    eax,0x40
   11472:	85 c0                	test   eax,eax
   11474:	74 16                	je     1148c <kPagingGet4kPDEntryAddressCR3+0x3e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:43
            printk("kPagingGet4kPDEntryAddressCR3: dirEntryAddress=0x%08x  (PDIR=0x%08X)\n", lTemp, PageDirAddress);
   11476:	83 ec 04             	sub    esp,0x4
   11479:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1147c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1147f:	68 04 55 04 00       	push   0x45504
   11484:	e8 1a 64 01 00       	call   278a3 <printk>
   11489:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:45
#endif
    return (uint32_t)lTemp & 0xFFFFFFFF;
   1148c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:46
}
   1148f:	c9                   	leave  
   11490:	c3                   	ret    

00011491 <kPagingGet4kPDEntryAddress>:
kPagingGet4kPDEntryAddress():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:49

uint32_t kPagingGet4kPDEntryAddress(uint32_t address)
{
   11491:	55                   	push   ebp
   11492:	89 e5                	mov    ebp,esp
   11494:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:50
    return kPagingGet4kPDEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   11497:	83 ec 08             	sub    esp,0x8
   1149a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1149d:	68 00 a0 4b 00       	push   0x4ba000
   114a2:	e8 a7 ff ff ff       	call   1144e <kPagingGet4kPDEntryAddressCR3>
   114a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:51
}
   114aa:	c9                   	leave  
   114ab:	c3                   	ret    

000114ac <kPagingGet4kPTEntryAddressCR3>:
kPagingGet4kPTEntryAddressCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:54

uint32_t kPagingGet4kPTEntryAddressCR3(uintptr_t pageDirAddress, uint32_t address)
{
   114ac:	55                   	push   ebp
   114ad:	89 e5                	mov    ebp,esp
   114af:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:55
    address&=0xFFFFF000;
   114b2:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:56
    uintptr_t pDirPtr=kPagingGet4kPDEntryValueCR3(pageDirAddress,address) & 0xFFFFF000;
   114b9:	83 ec 08             	sub    esp,0x8
   114bc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   114bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   114c2:	e8 09 ff ff ff       	call   113d0 <kPagingGet4kPDEntryValueCR3>
   114c7:	83 c4 10             	add    esp,0x10
   114ca:	25 00 f0 ff ff       	and    eax,0xfffff000
   114cf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:57
    return ((address & 0x3FF000) >> 12) << 2 | pDirPtr;
   114d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   114d5:	25 00 f0 3f 00       	and    eax,0x3ff000
   114da:	c1 e8 0c             	shr    eax,0xc
   114dd:	c1 e0 02             	shl    eax,0x2
   114e0:	0b 45 f4             	or     eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:58
}
   114e3:	c9                   	leave  
   114e4:	c3                   	ret    

000114e5 <kPagingGet4kPTEntryAddress>:
kPagingGet4kPTEntryAddress():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:61

uint32_t kPagingGet4kPTEntryAddress(uint32_t address)
{
   114e5:	55                   	push   ebp
   114e6:	89 e5                	mov    ebp,esp
   114e8:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:62
    return kPagingGet4kPTEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   114eb:	83 ec 08             	sub    esp,0x8
   114ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   114f1:	68 00 a0 4b 00       	push   0x4ba000
   114f6:	e8 b1 ff ff ff       	call   114ac <kPagingGet4kPTEntryAddressCR3>
   114fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:63
}
   114fe:	c9                   	leave  
   114ff:	c3                   	ret    

00011500 <kPagingGet4kPTEntryValueCR3>:
kPagingGet4kPTEntryValueCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:66

uint32_t kPagingGet4kPTEntryValueCR3(uintptr_t pageDirAddress, uint32_t address)
{
   11500:	55                   	push   ebp
   11501:	89 e5                	mov    ebp,esp
   11503:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:67
    address&=0xFFFFF000;
   11506:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:68
    uint32_t* pTablePtr=(uint32_t*)kPagingGet4kPTEntryAddressCR3(pageDirAddress,address);
   1150d:	83 ec 08             	sub    esp,0x8
   11510:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   11513:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11516:	e8 91 ff ff ff       	call   114ac <kPagingGet4kPTEntryAddressCR3>
   1151b:	83 c4 10             	add    esp,0x10
   1151e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:70
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11521:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11526:	83 e0 40             	and    eax,0x40
   11529:	85 c0                	test   eax,eax
   1152b:	74 19                	je     11546 <kPagingGet4kPTEntryValueCR3+0x46>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:71
             printk("kPagingGet4kPTEntryValueCR3: PTAddress=0x%08X, PTValue=0x%08X (PDIR=0x%08X)\n", pTablePtr,*pTablePtr,pageDirAddress);
   1152d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11530:	8b 00                	mov    eax,DWORD PTR [eax]
   11532:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11535:	50                   	push   eax
   11536:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11539:	68 4c 55 04 00       	push   0x4554c
   1153e:	e8 60 63 01 00       	call   278a3 <printk>
   11543:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:73
#endif
    return *pTablePtr;
   11546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11549:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:74
}
   1154b:	c9                   	leave  
   1154c:	c3                   	ret    

0001154d <kPagingGet4kPTEntryValue>:
kPagingGet4kPTEntryValue():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:77

uint32_t kPagingGet4kPTEntryValue(uint32_t address)
{
   1154d:	55                   	push   ebp
   1154e:	89 e5                	mov    ebp,esp
   11550:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:78
    return kPagingGet4kPTEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   11553:	83 ec 08             	sub    esp,0x8
   11556:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11559:	68 00 a0 4b 00       	push   0x4ba000
   1155e:	e8 9d ff ff ff       	call   11500 <kPagingGet4kPTEntryValueCR3>
   11563:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:79
}
   11566:	c9                   	leave  
   11567:	c3                   	ret    

00011568 <kPagingSetPageReadOnlyFlag>:
kPagingSetPageReadOnlyFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:85




void kPagingSetPageReadOnlyFlag(uintptr_t* ptEntry, bool readOnly)
{
   11568:	55                   	push   ebp
   11569:	89 e5                	mov    ebp,esp
   1156b:	83 ec 18             	sub    esp,0x18
   1156e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11571:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:87
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11574:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11579:	83 e0 40             	and    eax,0x40
   1157c:	85 c0                	test   eax,eax
   1157e:	74 19                	je     11599 <kPagingSetPageReadOnlyFlag+0x31>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:88
            printk("pagingMakePageReadOnly: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   11580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11583:	8b 00                	mov    eax,DWORD PTR [eax]
   11585:	83 ec 04             	sub    esp,0x4
   11588:	50                   	push   eax
   11589:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1158c:	68 9c 55 04 00       	push   0x4559c
   11591:	e8 0d 63 01 00       	call   278a3 <printk>
   11596:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:90
#endif
         if (readOnly)
   11599:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   1159d:	74 11                	je     115b0 <kPagingSetPageReadOnlyFlag+0x48>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:91
            *ptEntry&=0xFFFFFFFD;
   1159f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115a2:	8b 00                	mov    eax,DWORD PTR [eax]
   115a4:	83 e0 fd             	and    eax,0xfffffffd
   115a7:	89 c2                	mov    edx,eax
   115a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115ac:	89 10                	mov    DWORD PTR [eax],edx
   115ae:	eb 0f                	jmp    115bf <kPagingSetPageReadOnlyFlag+0x57>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:93
         else
            *ptEntry|=2; 
   115b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115b3:	8b 00                	mov    eax,DWORD PTR [eax]
   115b5:	83 c8 02             	or     eax,0x2
   115b8:	89 c2                	mov    edx,eax
   115ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115bd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:94
    RELOAD_CR3
   115bf:	0f 20 d8             	mov    eax,cr3
   115c2:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:96
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   115c5:	a1 78 98 12 00       	mov    eax,ds:0x129878
   115ca:	83 e0 40             	and    eax,0x40
   115cd:	85 c0                	test   eax,eax
   115cf:	74 16                	je     115e7 <kPagingSetPageReadOnlyFlag+0x7f>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:97
            printk("0x%08X\n", *ptEntry);
   115d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115d4:	8b 00                	mov    eax,DWORD PTR [eax]
   115d6:	83 ec 08             	sub    esp,0x8
   115d9:	50                   	push   eax
   115da:	68 d3 55 04 00       	push   0x455d3
   115df:	e8 bf 62 01 00       	call   278a3 <printk>
   115e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:99
#endif
}
   115e7:	90                   	nop
   115e8:	c9                   	leave  
   115e9:	c3                   	ret    

000115ea <kPagingUpdatePTEPresentFlag>:
kPagingUpdatePTEPresentFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:102

void kPagingUpdatePTEPresentFlag(uintptr_t* ptEntry, bool present)
{
   115ea:	55                   	push   ebp
   115eb:	89 e5                	mov    ebp,esp
   115ed:	83 ec 18             	sub    esp,0x18
   115f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   115f3:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:103
         printd(DEBUG_PAGING,"pagingUpdatePTEPresentFlag: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   115f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115f9:	8b 00                	mov    eax,DWORD PTR [eax]
   115fb:	50                   	push   eax
   115fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   115ff:	68 dc 55 04 00       	push   0x455dc
   11604:	6a 40                	push   0x40
   11606:	e8 b8 62 01 00       	call   278c3 <printd>
   1160b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:104
         if (present)
   1160e:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   11612:	74 11                	je     11625 <kPagingUpdatePTEPresentFlag+0x3b>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:105
             *ptEntry=*ptEntry | 1;
   11614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11617:	8b 00                	mov    eax,DWORD PTR [eax]
   11619:	83 c8 01             	or     eax,0x1
   1161c:	89 c2                	mov    edx,eax
   1161e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11621:	89 10                	mov    DWORD PTR [eax],edx
   11623:	eb 0f                	jmp    11634 <kPagingUpdatePTEPresentFlag+0x4a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:107
         else
             *ptEntry&=0xFFFFFFFE;
   11625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11628:	8b 00                	mov    eax,DWORD PTR [eax]
   1162a:	83 e0 fe             	and    eax,0xfffffffe
   1162d:	89 c2                	mov    edx,eax
   1162f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11632:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:108
         __asm__("mov eax,cr3\nmov cr3,eax\n":::"eax");
   11634:	0f 20 d8             	mov    eax,cr3
   11637:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:109
         printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
   1163a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1163d:	8b 00                	mov    eax,DWORD PTR [eax]
   1163f:	83 ec 04             	sub    esp,0x4
   11642:	50                   	push   eax
   11643:	68 d3 55 04 00       	push   0x455d3
   11648:	6a 40                	push   0x40
   1164a:	e8 74 62 01 00       	call   278c3 <printd>
   1164f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:110
}
   11652:	90                   	nop
   11653:	c9                   	leave  
   11654:	c3                   	ret    

00011655 <kSetVirtualRangeRO>:
kSetVirtualRangeRO():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:113

void kSetVirtualRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   11655:	55                   	push   ebp
   11656:	89 e5                	mov    ebp,esp
   11658:	83 ec 28             	sub    esp,0x28
   1165b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1165e:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:116
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11661:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11666:	83 e0 40             	and    eax,0x40
   11669:	85 c0                	test   eax,eax
   1166b:	74 16                	je     11683 <kSetVirtualRangeRO+0x2e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:117
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
   1166d:	83 ec 04             	sub    esp,0x4
   11670:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   11673:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11676:	68 18 56 04 00       	push   0x45618
   1167b:	e8 23 62 01 00       	call   278a3 <printk>
   11680:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:119
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   11683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11686:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11689:	eb 64                	jmp    116ef <kSetVirtualRangeRO+0x9a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:121
    {
        startPTE=(uintptr_t*)kPagingGet4kPTEntryAddress(cnt);
   1168b:	83 ec 0c             	sub    esp,0xc
   1168e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11691:	e8 4f fe ff ff       	call   114e5 <kPagingGet4kPTEntryAddress>
   11696:	83 c4 10             	add    esp,0x10
   11699:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:123
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1169c:	a1 78 98 12 00       	mov    eax,ds:0x129878
   116a1:	83 e0 40             	and    eax,0x40
   116a4:	85 c0                	test   eax,eax
   116a6:	74 26                	je     116ce <kSetVirtualRangeRO+0x79>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124
            printk("0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
   116a8:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   116ac:	74 07                	je     116b5 <kSetVirtualRangeRO+0x60>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124 (discriminator 1)
   116ae:	b8 45 56 04 00       	mov    eax,0x45645
   116b3:	eb 05                	jmp    116ba <kSetVirtualRangeRO+0x65>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124 (discriminator 2)
   116b5:	b8 48 56 04 00       	mov    eax,0x45648
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124 (discriminator 4)
   116ba:	50                   	push   eax
   116bb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   116be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   116c1:	68 4b 56 04 00       	push   0x4564b
   116c6:	e8 d8 61 01 00       	call   278a3 <printk>
   116cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:126 (discriminator 2)
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
   116ce:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   116d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   116d5:	8d 48 04             	lea    ecx,[eax+0x4]
   116d8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   116db:	83 ec 08             	sub    esp,0x8
   116de:	52                   	push   edx
   116df:	50                   	push   eax
   116e0:	e8 83 fe ff ff       	call   11568 <kPagingSetPageReadOnlyFlag>
   116e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:119 (discriminator 2)
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   116e8:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:119 (discriminator 1)
   116ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   116f2:	83 c0 01             	add    eax,0x1
   116f5:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   116f8:	73 91                	jae    1168b <kSetVirtualRangeRO+0x36>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:130
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
            
    }
        //for cnt=0;cnt<=8192;cnt+=4096
}
   116fa:	90                   	nop
   116fb:	c9                   	leave  
   116fc:	c3                   	ret    

000116fd <kpagingUpdatePresentFlagA>:
kpagingUpdatePresentFlagA():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:134

//Absolute version, page passed is already virtual
void kpagingUpdatePresentFlagA(uint32_t address, bool present)
{
   116fd:	55                   	push   ebp
   116fe:	89 e5                	mov    ebp,esp
   11700:	83 ec 28             	sub    esp,0x28
   11703:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11706:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:136
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11709:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1170e:	83 e0 40             	and    eax,0x40
   11711:	85 c0                	test   eax,eax
   11713:	74 26                	je     1173b <kpagingUpdatePresentFlagA+0x3e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137
            printk("kpagingUpdatePresentFlagA: Make 0x%08X %s\n", address, present?"present":"not present");
   11715:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11719:	74 07                	je     11722 <kpagingUpdatePresentFlagA+0x25>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137 (discriminator 1)
   1171b:	b8 63 56 04 00       	mov    eax,0x45663
   11720:	eb 05                	jmp    11727 <kpagingUpdatePresentFlagA+0x2a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137 (discriminator 2)
   11722:	b8 6b 56 04 00       	mov    eax,0x4566b
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137 (discriminator 4)
   11727:	83 ec 04             	sub    esp,0x4
   1172a:	50                   	push   eax
   1172b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1172e:	68 78 56 04 00       	push   0x45678
   11733:	e8 6b 61 01 00       	call   278a3 <printk>
   11738:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:139
#endif
        uintptr_t* pagePTE= (uintptr_t*)kPagingGet4kPTEntryAddress(address&0xFFFFF000);
   1173b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1173e:	25 00 f0 ff ff       	and    eax,0xfffff000
   11743:	83 ec 0c             	sub    esp,0xc
   11746:	50                   	push   eax
   11747:	e8 99 fd ff ff       	call   114e5 <kPagingGet4kPTEntryAddress>
   1174c:	83 c4 10             	add    esp,0x10
   1174f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:141
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11752:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11757:	83 e0 40             	and    eax,0x40
   1175a:	85 c0                	test   eax,eax
   1175c:	74 13                	je     11771 <kpagingUpdatePresentFlagA+0x74>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:142
            printk("kpagingUpdatePresentFlagA: updating entry 0x%08X\n", pagePTE);
   1175e:	83 ec 08             	sub    esp,0x8
   11761:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11764:	68 a4 56 04 00       	push   0x456a4
   11769:	e8 35 61 01 00       	call   278a3 <printk>
   1176e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:144
#endif
        kPagingUpdatePTEPresentFlag(pagePTE, present);
   11771:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11775:	83 ec 08             	sub    esp,0x8
   11778:	50                   	push   eax
   11779:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1177c:	e8 69 fe ff ff       	call   115ea <kPagingUpdatePTEPresentFlag>
   11781:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:145
}
   11784:	90                   	nop
   11785:	c9                   	leave  
   11786:	c3                   	ret    

00011787 <kpagingUpdatePresentFlagV>:
kpagingUpdatePresentFlagV():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:148

void kpagingUpdatePresentFlagV(uint32_t address, bool present)
{
   11787:	55                   	push   ebp
   11788:	89 e5                	mov    ebp,esp
   1178a:	83 ec 18             	sub    esp,0x18
   1178d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11790:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:149
    address+=KERNEL_PAGED_BASE_ADDRESS; 
   11793:	81 6d 08 00 00 00 40 	sub    DWORD PTR [ebp+0x8],0x40000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:150
    kpagingUpdatePresentFlagA(address, present);
   1179a:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   1179e:	83 ec 08             	sub    esp,0x8
   117a1:	50                   	push   eax
   117a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   117a5:	e8 53 ff ff ff       	call   116fd <kpagingUpdatePresentFlagA>
   117aa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:151
}
   117ad:	90                   	nop
   117ae:	c9                   	leave  
   117af:	c3                   	ret    

000117b0 <kMapPage>:
kMapPage():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:154

void kMapPage(uintptr_t mapTo, uintptr_t mapFrom, uint8_t flags)
{
   117b0:	55                   	push   ebp
   117b1:	89 e5                	mov    ebp,esp
   117b3:	53                   	push   ebx
   117b4:	83 ec 24             	sub    esp,0x24
   117b7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   117ba:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:158
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   117bd:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
   117c2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:159
    ptrVal=ptr[(mapTo>>22)];
   117c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   117c8:	c1 e8 16             	shr    eax,0x16
   117cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   117d5:	01 d0                	add    eax,edx
   117d7:	8b 00                	mov    eax,DWORD PTR [eax]
   117d9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:160
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   117dc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   117e0:	0f 85 cb 00 00 00    	jne    118b1 <kMapPage+0x101>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:160 (discriminator 1)
   117e6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   117e9:	bb 00 00 00 00       	mov    ebx,0x0
   117ee:	a1 88 95 12 00       	mov    eax,ds:0x129588
   117f3:	8b 15 8c 95 12 00    	mov    edx,DWORD PTR ds:0x12958c
   117f9:	39 d3                	cmp    ebx,edx
   117fb:	0f 87 b0 00 00 00    	ja     118b1 <kMapPage+0x101>
   11801:	39 d3                	cmp    ebx,edx
   11803:	72 08                	jb     1180d <kMapPage+0x5d>
   11805:	39 c1                	cmp    ecx,eax
   11807:	0f 83 a4 00 00 00    	jae    118b1 <kMapPage+0x101>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:162
    {
        ptrT=(uint32_t*)0x20000000;
   1180d:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:163
        ptr[(mapTo>>22)]=0x20000063;
   11814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11817:	c1 e8 16             	shr    eax,0x16
   1181a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11821:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11824:	01 d0                	add    eax,edx
   11826:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os//chrisOS/src/init/kpaging.c:164
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
   1182c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1182f:	25 ff 03 00 00       	and    eax,0x3ff
   11834:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1183b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1183e:	01 c2                	add    edx,eax
   11840:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11844:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   11847:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:166
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11849:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1184e:	83 e0 40             	and    eax,0x40
   11851:	85 c0                	test   eax,eax
   11853:	0f 84 41 01 00 00    	je     1199a <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:167
            printk("kMapPage: Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)],ptrT[(mapTo&0x003FFFFF/4096)]);
   11859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1185c:	25 ff 03 00 00       	and    eax,0x3ff
   11861:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11868:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1186b:	01 d0                	add    eax,edx
   1186d:	8b 00                	mov    eax,DWORD PTR [eax]
   1186f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11872:	81 e2 ff 03 00 00    	and    edx,0x3ff
   11878:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   1187f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   11882:	01 d1                	add    ecx,edx
   11884:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11887:	c1 ea 16             	shr    edx,0x16
   1188a:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   11891:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   11894:	01 da                	add    edx,ebx
   11896:	83 ec 0c             	sub    esp,0xc
   11899:	50                   	push   eax
   1189a:	51                   	push   ecx
   1189b:	52                   	push   edx
   1189c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1189f:	68 d8 56 04 00       	push   0x456d8
   118a4:	e8 fa 5f 01 00       	call   278a3 <printk>
   118a9:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:166
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   118ac:	e9 e9 00 00 00       	jmp    1199a <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:173
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   118b1:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
   118b6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:174
        if (ptr[(mapTo>>22)]==0)
   118b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   118bc:	c1 e8 16             	shr    eax,0x16
   118bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   118c9:	01 d0                	add    eax,edx
   118cb:	8b 00                	mov    eax,DWORD PTR [eax]
   118cd:	85 c0                	test   eax,eax
   118cf:	75 29                	jne    118fa <kMapPage+0x14a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:175
            ptr[mapTo>>22]=(KERNEL_PAGE_TABLE_BASE_ADDRESS + ((mapTo&0x003FFFFF)/4096)) | 0x63;
   118d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   118d4:	c1 e8 16             	shr    eax,0x16
   118d7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   118e1:	01 d0                	add    eax,edx
   118e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   118e6:	81 e2 ff ff 3f 00    	and    edx,0x3fffff
   118ec:	c1 ea 0c             	shr    edx,0xc
   118ef:	81 c2 00 c0 4c 00    	add    edx,0x4cc000
   118f5:	83 ca 63             	or     edx,0x63
   118f8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:176
        ptrVal=ptr[mapTo>>22];
   118fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   118fd:	c1 e8 16             	shr    eax,0x16
   11900:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11907:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1190a:	01 d0                	add    eax,edx
   1190c:	8b 00                	mov    eax,DWORD PTR [eax]
   1190e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:177
        ptrVal=(ptrVal&0xFFFFF000);
   11911:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:178
        ptrT=(uint32_t*)ptrVal;
   11918:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1191b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:180
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   1191e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11921:	25 ff ff 3f 00       	and    eax,0x3fffff
   11926:	c1 e8 0c             	shr    eax,0xc
   11929:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:181
        ptrT[ptrVal]=mapFrom | flags;
   1192c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1192f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11936:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11939:	01 c2                	add    edx,eax
   1193b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   1193f:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   11942:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:185
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11944:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11949:	83 e0 40             	and    eax,0x40
   1194c:	85 c0                	test   eax,eax
   1194e:	74 4a                	je     1199a <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:186
            printk("2) Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal],ptrT[ptrVal]);
   11950:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11953:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1195a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1195d:	01 d0                	add    eax,edx
   1195f:	8b 00                	mov    eax,DWORD PTR [eax]
   11961:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   11964:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   1196b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1196e:	01 d1                	add    ecx,edx
   11970:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11973:	c1 ea 16             	shr    edx,0x16
   11976:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   1197d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   11980:	01 da                	add    edx,ebx
   11982:	83 ec 0c             	sub    esp,0xc
   11985:	50                   	push   eax
   11986:	51                   	push   ecx
   11987:	52                   	push   edx
   11988:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1198b:	68 18 57 04 00       	push   0x45718
   11990:	e8 0e 5f 01 00       	call   278a3 <printk>
   11995:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:190
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   11998:	eb 00                	jmp    1199a <kMapPage+0x1ea>
   1199a:	90                   	nop
   1199b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1199e:	c9                   	leave  
   1199f:	c3                   	ret    

000119a0 <kIsPageMapped>:
kIsPageMapped():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:193

bool kIsPageMapped(uintptr_t Address)
{
   119a0:	55                   	push   ebp
   119a1:	89 e5                	mov    ebp,esp
   119a3:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:194
    if (!kPagingGet4kPTEntryValue(Address))
   119a6:	83 ec 0c             	sub    esp,0xc
   119a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   119ac:	e8 9c fb ff ff       	call   1154d <kPagingGet4kPTEntryValue>
   119b1:	83 c4 10             	add    esp,0x10
   119b4:	85 c0                	test   eax,eax
   119b6:	75 07                	jne    119bf <kIsPageMapped+0x1f>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:195
        return false;
   119b8:	b8 00 00 00 00       	mov    eax,0x0
   119bd:	eb 05                	jmp    119c4 <kIsPageMapped+0x24>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:196
    return true;
   119bf:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os//chrisOS/src/init/kpaging.c:197
}
   119c4:	c9                   	leave  
   119c5:	c3                   	ret    

000119c6 <kUnMapPage>:
kUnMapPage():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:200

void kUnMapPage(uintptr_t mapTo)
{
   119c6:	55                   	push   ebp
   119c7:	89 e5                	mov    ebp,esp
   119c9:	53                   	push   ebx
   119ca:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os//chrisOS/src/init/kpaging.c:204
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   119cd:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
   119d2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:205
    ptrVal=ptr[(mapTo>>22)];
   119d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119d8:	c1 e8 16             	shr    eax,0x16
   119db:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   119e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   119e5:	01 d0                	add    eax,edx
   119e7:	8b 00                	mov    eax,DWORD PTR [eax]
   119e9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:206
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   119ec:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   119f0:	0f 85 ad 00 00 00    	jne    11aa3 <kUnMapPage+0xdd>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:206 (discriminator 1)
   119f6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   119f9:	bb 00 00 00 00       	mov    ebx,0x0
   119fe:	a1 88 95 12 00       	mov    eax,ds:0x129588
   11a03:	8b 15 8c 95 12 00    	mov    edx,DWORD PTR ds:0x12958c
   11a09:	39 d3                	cmp    ebx,edx
   11a0b:	0f 87 92 00 00 00    	ja     11aa3 <kUnMapPage+0xdd>
   11a11:	39 d3                	cmp    ebx,edx
   11a13:	72 08                	jb     11a1d <kUnMapPage+0x57>
   11a15:	39 c1                	cmp    ecx,eax
   11a17:	0f 83 86 00 00 00    	jae    11aa3 <kUnMapPage+0xdd>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:208
    {
        ptrT=(uint32_t*)0x20000000;
   11a1d:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:209
        ptr[(mapTo>>22)]=0x20000063;
   11a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a27:	c1 e8 16             	shr    eax,0x16
   11a2a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a34:	01 d0                	add    eax,edx
   11a36:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os//chrisOS/src/init/kpaging.c:210
        ptrT[(mapTo&0x003FFFFF/4096)]=0;
   11a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a3f:	25 ff 03 00 00       	and    eax,0x3ff
   11a44:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a4e:	01 d0                	add    eax,edx
   11a50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/init/kpaging.c:212
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11a56:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11a5b:	83 e0 40             	and    eax,0x40
   11a5e:	85 c0                	test   eax,eax
   11a60:	0f 84 cd 00 00 00    	je     11b33 <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:213
            printk("kMapPage: Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)]);
   11a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a69:	25 ff 03 00 00       	and    eax,0x3ff
   11a6e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a75:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a78:	01 c2                	add    edx,eax
   11a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a7d:	c1 e8 16             	shr    eax,0x16
   11a80:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11a87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a8a:	01 c8                	add    eax,ecx
   11a8c:	52                   	push   edx
   11a8d:	50                   	push   eax
   11a8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11a91:	68 54 57 04 00       	push   0x45754
   11a96:	e8 08 5e 01 00       	call   278a3 <printk>
   11a9b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:212
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=0;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11a9e:	e9 90 00 00 00       	jmp    11b33 <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:219
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   11aa3:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
   11aa8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:220
        ptrVal=ptr[mapTo>>22];
   11aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11aae:	c1 e8 16             	shr    eax,0x16
   11ab1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11ab8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11abb:	01 d0                	add    eax,edx
   11abd:	8b 00                	mov    eax,DWORD PTR [eax]
   11abf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:221
        ptrVal=(ptrVal&0xFFFFF000);
   11ac2:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:222
        ptrT=(uint32_t*)ptrVal;
   11ac9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11acc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:224
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   11acf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11ad2:	25 ff ff 3f 00       	and    eax,0x3fffff
   11ad7:	c1 e8 0c             	shr    eax,0xc
   11ada:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:225
        ptrT[ptrVal]=0;
   11add:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11ae0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11ae7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11aea:	01 d0                	add    eax,edx
   11aec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/init/kpaging.c:229
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11af2:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11af7:	83 e0 40             	and    eax,0x40
   11afa:	85 c0                	test   eax,eax
   11afc:	74 35                	je     11b33 <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:230
            printk("2) Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal]);
   11afe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11b01:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11b08:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11b0b:	01 c2                	add    edx,eax
   11b0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11b10:	c1 e8 16             	shr    eax,0x16
   11b13:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11b1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11b1d:	01 c8                	add    eax,ecx
   11b1f:	52                   	push   edx
   11b20:	50                   	push   eax
   11b21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11b24:	68 8c 57 04 00       	push   0x4578c
   11b29:	e8 75 5d 01 00       	call   278a3 <printk>
   11b2e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:234
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   11b31:	eb 00                	jmp    11b33 <kUnMapPage+0x16d>
   11b33:	90                   	nop
   11b34:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11b37:	c9                   	leave  
   11b38:	c3                   	ret    

00011b39 <kSetPhysicalRangeRO>:
kSetPhysicalRangeRO():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:237

void kSetPhysicalRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   11b39:	55                   	push   ebp
   11b3a:	89 e5                	mov    ebp,esp
   11b3c:	83 ec 18             	sub    esp,0x18
   11b3f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11b42:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:239
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11b45:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11b4a:	83 e0 40             	and    eax,0x40
   11b4d:	85 c0                	test   eax,eax
   11b4f:	74 2a                	je     11b7b <kSetPhysicalRangeRO+0x42>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:240
            printk("kMakePhysicalRangeRO: Make 0x%08X(0x%08X)-0x%08X(0x%08X) r/o\n", startAddy, startAddy&0xFffff000, endAddy, endAddy&0xFFFFF000);
   11b51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11b54:	25 00 f0 ff ff       	and    eax,0xfffff000
   11b59:	89 c2                	mov    edx,eax
   11b5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11b5e:	25 00 f0 ff ff       	and    eax,0xfffff000
   11b63:	83 ec 0c             	sub    esp,0xc
   11b66:	52                   	push   edx
   11b67:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   11b6a:	50                   	push   eax
   11b6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11b6e:	68 bc 57 04 00       	push   0x457bc
   11b73:	e8 2b 5d 01 00       	call   278a3 <printk>
   11b78:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:242
#endif
    kSetVirtualRangeRO((startAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, (endAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, readOnly);
   11b7b:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   11b7f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11b82:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11b88:	89 d1                	mov    ecx,edx
   11b8a:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
   11b90:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11b93:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11b99:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
   11b9f:	83 ec 04             	sub    esp,0x4
   11ba2:	50                   	push   eax
   11ba3:	51                   	push   ecx
   11ba4:	52                   	push   edx
   11ba5:	e8 ab fa ff ff       	call   11655 <kSetVirtualRangeRO>
   11baa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:243
}
   11bad:	90                   	nop
   11bae:	c9                   	leave  
   11baf:	c3                   	ret    

00011bb0 <mmKernelSetPageInUseFlag>:
mmKernelSetPageInUseFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:246

void mmKernelSetPageInUseFlag(uintptr_t address, bool inUse)
{
   11bb0:	55                   	push   ebp
   11bb1:	89 e5                	mov    ebp,esp
   11bb3:	83 ec 28             	sub    esp,0x28
   11bb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11bb9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:249
    uintptr_t* ptEntry;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11bbc:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11bc1:	83 e0 40             	and    eax,0x40
   11bc4:	85 c0                	test   eax,eax
   11bc6:	74 25                	je     11bed <mmKernelSetPageInUseFlag+0x3d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250
           printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
   11bc8:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11bcc:	74 07                	je     11bd5 <mmKernelSetPageInUseFlag+0x25>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250 (discriminator 1)
   11bce:	b8 fa 57 04 00       	mov    eax,0x457fa
   11bd3:	eb 05                	jmp    11bda <mmKernelSetPageInUseFlag+0x2a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250 (discriminator 2)
   11bd5:	b8 01 58 04 00       	mov    eax,0x45801
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250 (discriminator 4)
   11bda:	50                   	push   eax
   11bdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11bde:	68 0c 58 04 00       	push   0x4580c
   11be3:	6a 40                	push   0x40
   11be5:	e8 d9 5c 01 00       	call   278c3 <printd>
   11bea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:252
#endif
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
   11bed:	83 ec 0c             	sub    esp,0xc
   11bf0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11bf3:	e8 ed f8 ff ff       	call   114e5 <kPagingGet4kPTEntryAddress>
   11bf8:	83 c4 10             	add    esp,0x10
   11bfb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:253
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
   11bfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c01:	8b 00                	mov    eax,DWORD PTR [eax]
   11c03:	50                   	push   eax
   11c04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11c07:	68 50 58 04 00       	push   0x45850
   11c0c:	6a 40                	push   0x40
   11c0e:	e8 b0 5c 01 00       	call   278c3 <printd>
   11c13:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:254
        if (inUse)
   11c16:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11c1a:	74 11                	je     11c2d <mmKernelSetPageInUseFlag+0x7d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:255
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
   11c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c1f:	8b 00                	mov    eax,DWORD PTR [eax]
   11c21:	80 cc 08             	or     ah,0x8
   11c24:	89 c2                	mov    edx,eax
   11c26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c29:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:258
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}
   11c2b:	eb 0f                	jmp    11c3c <mmKernelSetPageInUseFlag+0x8c>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:257
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
        if (inUse)
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
   11c2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c30:	8b 00                	mov    eax,DWORD PTR [eax]
   11c32:	80 e4 f7             	and    ah,0xf7
   11c35:	89 c2                	mov    edx,eax
   11c37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c3a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:258
}
   11c3c:	90                   	nop
   11c3d:	c9                   	leave  
   11c3e:	c3                   	ret    

00011c3f <mmKernelSetPageRangeInUseFlag>:
mmKernelSetPageRangeInUseFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:261

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
   11c3f:	55                   	push   ebp
   11c40:	89 e5                	mov    ebp,esp
   11c42:	83 ec 28             	sub    esp,0x28
   11c45:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   11c48:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:262
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c4e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11c51:	eb 19                	jmp    11c6c <mmKernelSetPageRangeInUseFlag+0x2d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:263 (discriminator 3)
        mmKernelSetPageInUseFlag(cnt,inUse);
   11c53:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11c57:	83 ec 08             	sub    esp,0x8
   11c5a:	50                   	push   eax
   11c5b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11c5e:	e8 4d ff ff ff       	call   11bb0 <mmKernelSetPageInUseFlag>
   11c63:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:262 (discriminator 3)
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11c66:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11c69:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:262 (discriminator 1)
   11c6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c6f:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   11c72:	72 df                	jb     11c53 <mmKernelSetPageRangeInUseFlag+0x14>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:264
        mmKernelSetPageInUseFlag(cnt,inUse);
}
   11c74:	90                   	nop
   11c75:	c9                   	leave  
   11c76:	c3                   	ret    

00011c77 <mmUnusePageRange>:
mmUnusePageRange():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:267

void mmUnusePageRange()
{
   11c77:	55                   	push   ebp
   11c78:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/init/kpaging.c:269
    
}
   11c7a:	90                   	nop
   11c7b:	5d                   	pop    ebp
   11c7c:	c3                   	ret    
   11c7d:	66 90                	xchg   ax,ax
   11c7f:	90                   	nop

00011c80 <strncmp>:
strncmp():
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   11c80:	55                   	push   ebp
   11c81:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
   11c83:	eb 4b                	jmp    11cd0 <strncmp+0x50>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
   11c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c88:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11c8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c8e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c91:	38 c2                	cmp    dl,al
   11c93:	74 1e                	je     11cb3 <strncmp+0x33>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
   11c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c98:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11c9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c9e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11ca1:	38 c2                	cmp    dl,al
   11ca3:	73 07                	jae    11cac <strncmp+0x2c>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16 (discriminator 1)
   11ca5:	b8 ff ff ff ff       	mov    eax,0xffffffff
   11caa:	eb 2f                	jmp    11cdb <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16 (discriminator 2)
   11cac:	b8 01 00 00 00       	mov    eax,0x1
   11cb1:	eb 28                	jmp    11cdb <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
   11cb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11cb6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11cb9:	84 c0                	test   al,al
   11cbb:	75 07                	jne    11cc4 <strncmp+0x44>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:18
	    return 0;
   11cbd:	b8 00 00 00 00       	mov    eax,0x0
   11cc2:	eb 17                	jmp    11cdb <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
   11cc4:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   11cc8:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
   11ccc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14 (discriminator 1)
   11cd0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11cd4:	75 af                	jne    11c85 <strncmp+0x5>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
   11cd6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:20
}
   11cdb:	5d                   	pop    ebp
   11cdc:	c3                   	ret    
   11cdd:	66 90                	xchg   ax,ax
   11cdf:	90                   	nop

00011ce0 <strncpy>:
strncpy():
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
   11ce0:	55                   	push   ebp
   11ce1:	89 e5                	mov    ebp,esp
   11ce3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:15
    char *s = s1;
   11ce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11ce9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
   11cec:	eb 1b                	jmp    11d09 <strncpy+0x29>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
   11cee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11cf1:	8d 50 01             	lea    edx,[eax+0x1]
   11cf4:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11cf7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11cfa:	8d 4a 01             	lea    ecx,[edx+0x1]
   11cfd:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   11d00:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   11d03:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:18
	--n;
   11d05:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
   11d09:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11d0d:	74 1c                	je     11d2b <strncpy+0x4b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16 (discriminator 1)
   11d0f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11d12:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11d15:	84 c0                	test   al,al
   11d17:	75 d5                	jne    11cee <strncpy+0xe>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11d19:	eb 10                	jmp    11d2b <strncpy+0x4b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
   11d1b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11d1e:	8d 50 01             	lea    edx,[eax+0x1]
   11d21:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11d24:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:22
	--n;
   11d27:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11d2b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11d2f:	75 ea                	jne    11d1b <strncpy+0x3b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
   11d31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:25
}
   11d34:	c9                   	leave  
   11d35:	c3                   	ret    
   11d36:	66 90                	xchg   ax,ax

00011d38 <dumpregs>:
dumpregs():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:22

.globl dumpregs
.type dumpregs, @function
dumpregs:
.code32
        mov exceptionAX, eax
   11d38:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:23
        mov exceptionBX, ebx
   11d3d:	89 1d f4 96 12 00    	mov    DWORD PTR ds:0x1296f4,ebx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:24
        mov exceptionCX, ecx
   11d43:	89 0d f8 96 12 00    	mov    DWORD PTR ds:0x1296f8,ecx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:25
        mov exceptionDX, edx
   11d49:	89 15 fc 96 12 00    	mov    DWORD PTR ds:0x1296fc,edx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:26
        mov exceptionSI, esi
   11d4f:	89 35 00 97 12 00    	mov    DWORD PTR ds:0x129700,esi
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:27
        mov exceptionDI, edi
   11d55:	89 3d 04 97 12 00    	mov    DWORD PTR ds:0x129704,edi
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:28
        mov exceptionBP, eax
   11d5b:	a3 08 97 12 00       	mov    ds:0x129708,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:29
        mov eax, cr0
   11d60:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:30
        mov exceptionCR0, eax
   11d63:	a3 0c 97 12 00       	mov    ds:0x12970c,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:31
        mov eax, cr3
   11d68:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:32
        mov exceptionCR3, eax
   11d6b:	a3 10 97 12 00       	mov    ds:0x129710,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:33
        mov eax, cr4
   11d70:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:34
        mov exceptionCR4, eax
   11d73:	a3 14 97 12 00       	mov    ds:0x129714,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:35
        mov eax, exceptionAX
   11d78:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:36
        ret 
   11d7d:	c3                   	ret    

00011d7e <storeGDT>:
storeGDT():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:42

.global storeGDT
.type storeGDT, @function
storeGDT:
.code32
    mov eax,[esp+4]
   11d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:43
    sgdt [eax]
   11d82:	0f 01 00             	sgdtd  [eax]
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:44
    ret
   11d85:	c3                   	ret    

00011d86 <getCS>:
getCS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:50

.global getCS
.type getCS, @function
getCS:
.code32
    push cs
   11d86:	0e                   	push   cs
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:51
    pop eax
   11d87:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:52
    ret
   11d88:	c3                   	ret    

00011d89 <getDS>:
getDS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:58

.global getDS
.type getDS, @function
getDS:
.code32
    push DS
   11d89:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:59
    pop eax
   11d8a:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:60
    ret
   11d8b:	c3                   	ret    

00011d8c <getES>:
getES():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:66

.global getES
.type getES, @function
getES:
.code32
    push ES
   11d8c:	06                   	push   es
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:67
    pop eax
   11d8d:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:68
    ret
   11d8e:	c3                   	ret    

00011d8f <getFS>:
getFS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:74

.global getFS
.type getFS, @function
getFS:
.code32
    push FS
   11d8f:	0f a0                	push   fs
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:75
    pop eax
   11d91:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:76
    ret
   11d92:	c3                   	ret    

00011d93 <getGS>:
getGS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:82

.global getGS
.type getGS, @function
getGS:
.code32
    push GS
   11d93:	0f a8                	push   gs
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:83
    pop eax
   11d95:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:84
    ret
   11d96:	c3                   	ret    

00011d97 <getSS>:
getSS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:90

.global getSS
.type getSS, @function
getSS:
.code32
    push SS
   11d97:	16                   	push   ss
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:91
    pop eax
   11d98:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:92
    ret
   11d99:	c3                   	ret    

00011d9a <getESP>:
getESP():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:98

.global getESP
.type getESP, @function
getESP:
.code32
    push ESP
   11d9a:	54                   	push   esp
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:99
    pop eax
   11d9b:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:100
    sub eax,4
   11d9c:	83 e8 04             	sub    eax,0x4
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:101
    ret
   11d9f:	c3                   	ret    

00011da0 <getEFlags>:
getEFlags():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:108

.global getEFlags
.type getEFlags, @function
getEFlags:
.code32
    pushfd
   11da0:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:109
    pop eax
   11da1:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:110
    ret
   11da2:	c3                   	ret    

00011da3 <enableCR0_WP>:
enableCR0_WP():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:116


.global enableCR0_WP
.type enableCR0_WP, @function
enableCR0_WP:
    push eax
   11da3:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:117
    mov eax,cr0
   11da4:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:118
    or eax,0x10000
   11da7:	0d 00 00 01 00       	or     eax,0x10000
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:119
    mov cr0,eax
   11dac:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:120
    pop eax
   11daf:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:121
    ret
   11db0:	c3                   	ret    
   11db1:	66 90                	xchg   ax,ax
   11db3:	90                   	nop

00011db4 <selectHDNum>:
selectHDNum():
/home/yogi/src/os/chrisOS/src/bishell.c:537
        printk("\tMapping based on current CR3\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
    }
}

void HIGH_CODE_SECTION selectHDNum (char* cmdline)
{
   11db4:	55                   	push   ebp
   11db5:	89 e5                	mov    ebp,esp
   11db7:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:539
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=0;
   11dbd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:540
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11dc4:	83 ec 04             	sub    esp,0x4
   11dc7:	68 00 14 00 00       	push   0x1400
   11dcc:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11dd2:	50                   	push   eax
   11dd3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11dd6:	e8 81 07 00 00       	call   1255c <parseParamsShell>
   11ddb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:542

    lTemp =strtol(params[0],0,10);
   11dde:	83 ec 04             	sub    esp,0x4
   11de1:	6a 0a                	push   0xa
   11de3:	6a 00                	push   0x0
   11de5:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11deb:	50                   	push   eax
   11dec:	e8 33 5e 01 00       	call   27c24 <strtol>
   11df1:	83 c4 10             	add    esp,0x10
   11df4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:544
 
    if (lTemp<0 || lTemp>kATADeviceInfoCount)
   11df7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11dfb:	78 0a                	js     11e07 <selectHDNum+0x53>
/home/yogi/src/os/chrisOS/src/bishell.c:544 (discriminator 1)
   11dfd:	a1 04 98 12 00       	mov    eax,ds:0x129804
   11e02:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11e05:	7e 1b                	jle    11e22 <selectHDNum+0x6e>
/home/yogi/src/os/chrisOS/src/bishell.c:545
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",lTemp,kATADeviceInfoCount);
   11e07:	a1 04 98 12 00       	mov    eax,ds:0x129804
   11e0c:	83 ec 04             	sub    esp,0x4
   11e0f:	50                   	push   eax
   11e10:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11e13:	68 a0 59 04 00       	push   0x459a0
   11e18:	e8 86 5a 01 00       	call   278a3 <printk>
   11e1d:	83 c4 10             	add    esp,0x10
   11e20:	eb 08                	jmp    11e2a <selectHDNum+0x76>
/home/yogi/src/os/chrisOS/src/bishell.c:547
    else
        kSelectedDiskNum=lTemp;
   11e22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11e25:	a3 44 99 12 00       	mov    ds:0x129944,eax
/home/yogi/src/os/chrisOS/src/bishell.c:548
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
   11e2a:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   11e30:	a1 44 99 12 00       	mov    eax,ds:0x129944
   11e35:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11e3b:	01 d0                	add    eax,edx
   11e3d:	83 ec 08             	sub    esp,0x8
   11e40:	68 40 5f 09 00       	push   0x95f40
   11e45:	50                   	push   eax
   11e46:	e8 c8 fb 00 00       	call   21a13 <parseMBR>
   11e4b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:549
    printk("Disk %u selected\n",kSelectedDiskNum);
   11e4e:	a1 44 99 12 00       	mov    eax,ds:0x129944
   11e53:	83 ec 08             	sub    esp,0x8
   11e56:	50                   	push   eax
   11e57:	68 ea 59 04 00       	push   0x459ea
   11e5c:	e8 42 5a 01 00       	call   278a3 <printk>
   11e61:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:550
}
   11e64:	90                   	nop
   11e65:	c9                   	leave  
   11e66:	c3                   	ret    

00011e67 <selectPart>:
selectPart():
/home/yogi/src/os/chrisOS/src/bishell.c:579
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
    printMBR(&mbr);
}

void HIGH_CODE_SECTION selectPart(char* cmdline)
{
   11e67:	55                   	push   ebp
   11e68:	89 e5                	mov    ebp,esp
   11e6a:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:581
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=-1;
   11e70:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:582
    if (kSelectedDiskNum==-1)
   11e77:	a1 44 99 12 00       	mov    eax,ds:0x129944
   11e7c:	83 f8 ff             	cmp    eax,0xffffffff
   11e7f:	75 10                	jne    11e91 <selectPart+0x2a>
/home/yogi/src/os/chrisOS/src/bishell.c:584
    {
        printk("You must select a disk with 'disk' before selecting a partition");
   11e81:	83 ec 0c             	sub    esp,0xc
   11e84:	68 fc 59 04 00       	push   0x459fc
   11e89:	e8 15 5a 01 00       	call   278a3 <printk>
   11e8e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:586
    }
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11e91:	83 ec 04             	sub    esp,0x4
   11e94:	68 00 14 00 00       	push   0x1400
   11e99:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11e9f:	50                   	push   eax
   11ea0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11ea3:	e8 b4 06 00 00       	call   1255c <parseParamsShell>
   11ea8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:588

    lTemp =strtol(params[0],0,10);
   11eab:	83 ec 04             	sub    esp,0x4
   11eae:	6a 0a                	push   0xa
   11eb0:	6a 00                	push   0x0
   11eb2:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11eb8:	50                   	push   eax
   11eb9:	e8 66 5d 01 00       	call   27c24 <strtol>
   11ebe:	83 c4 10             	add    esp,0x10
   11ec1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:590
    //printk("parameter 1=%u\n",lTemp);
    if (lTemp<0 || lTemp>mbr.partCount)
   11ec4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11ec8:	78 0a                	js     11ed4 <selectPart+0x6d>
/home/yogi/src/os/chrisOS/src/bishell.c:590 (discriminator 1)
   11eca:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11ecf:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   11ed2:	7d 1b                	jge    11eef <selectPart+0x88>
/home/yogi/src/os/chrisOS/src/bishell.c:592
    {
        printk("Error, selected partition number (%u) is not valid.  It must be >=1 and <=%u\n",lTemp,mbr.partCount);
   11ed4:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11ed9:	83 ec 04             	sub    esp,0x4
   11edc:	50                   	push   eax
   11edd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11ee0:	68 3c 5a 04 00       	push   0x45a3c
   11ee5:	e8 b9 59 01 00       	call   278a3 <printk>
   11eea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:593
        return;
   11eed:	eb 7d                	jmp    11f6c <selectPart+0x105>
/home/yogi/src/os/chrisOS/src/bishell.c:595
    }
    if (mbr.parts[lTemp].partTotalSectors==0)
   11eef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11ef2:	c1 e0 04             	shl    eax,0x4
   11ef5:	05 40 5f 09 00       	add    eax,0x95f40
   11efa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   11efd:	85 c0                	test   eax,eax
   11eff:	75 25                	jne    11f26 <selectPart+0xbf>
/home/yogi/src/os/chrisOS/src/bishell.c:597
    {
        printk("Error, selected partition (number %u) is not a valid partition as its total sector count is 0.",lTemp);
   11f01:	83 ec 08             	sub    esp,0x8
   11f04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11f07:	68 8c 5a 04 00       	push   0x45a8c
   11f0c:	e8 92 59 01 00       	call   278a3 <printk>
   11f11:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:598
        printMBR(&mbr);   
   11f14:	83 ec 0c             	sub    esp,0xc
   11f17:	68 40 5f 09 00       	push   0x95f40
   11f1c:	e8 17 fa 00 00       	call   21938 <printMBR>
   11f21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:599
        return;
   11f24:	eb 46                	jmp    11f6c <selectPart+0x105>
/home/yogi/src/os/chrisOS/src/bishell.c:601
    }
    kSelectedPartNum = lTemp;
   11f26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11f29:	a3 48 99 12 00       	mov    ds:0x129948,eax
/home/yogi/src/os/chrisOS/src/bishell.c:602
    ahciSetCurrentPart(mbr.parts[lTemp]);
   11f2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11f31:	c1 e0 04             	shl    eax,0x4
   11f34:	05 40 5f 09 00       	add    eax,0x95f40
   11f39:	83 ec 10             	sub    esp,0x10
   11f3c:	89 e2                	mov    edx,esp
   11f3e:	8b 08                	mov    ecx,DWORD PTR [eax]
   11f40:	89 0a                	mov    DWORD PTR [edx],ecx
   11f42:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   11f45:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   11f48:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   11f4b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   11f4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   11f51:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
   11f54:	e8 78 34 00 00       	call   153d1 <ahciSetCurrentPart>
   11f59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:604
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
   11f5c:	83 ec 0c             	sub    esp,0xc
   11f5f:	68 eb 5a 04 00       	push   0x45aeb
   11f64:	e8 1a 01 00 00       	call   12083 <attach>
   11f69:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:605
}
   11f6c:	c9                   	leave  
   11f6d:	c3                   	ret    

00011f6e <listParts>:
listParts():
/home/yogi/src/os/chrisOS/src/bishell.c:553
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
    printk("Disk %u selected\n",kSelectedDiskNum);
}

void HIGH_CODE_SECTION listParts(char* cmdline)
{
   11f6e:	55                   	push   ebp
   11f6f:	89 e5                	mov    ebp,esp
   11f71:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:555
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11f77:	83 ec 04             	sub    esp,0x4
   11f7a:	68 00 14 00 00       	push   0x1400
   11f7f:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11f85:	50                   	push   eax
   11f86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11f89:	e8 ce 05 00 00       	call   1255c <parseParamsShell>
   11f8e:	83 c4 10             	add    esp,0x10
   11f91:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:556
    int driveNo=-1;
   11f94:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:558

    if (paramCount>0)
   11f9b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   11f9f:	7e 1b                	jle    11fbc <listParts+0x4e>
/home/yogi/src/os/chrisOS/src/bishell.c:559
        driveNo=strtol(params[0],0,10);
   11fa1:	83 ec 04             	sub    esp,0x4
   11fa4:	6a 0a                	push   0xa
   11fa6:	6a 00                	push   0x0
   11fa8:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11fae:	50                   	push   eax
   11faf:	e8 70 5c 01 00       	call   27c24 <strtol>
   11fb4:	83 c4 10             	add    esp,0x10
   11fb7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11fba:	eb 08                	jmp    11fc4 <listParts+0x56>
/home/yogi/src/os/chrisOS/src/bishell.c:561
    else
        driveNo=kSelectedDiskNum;
   11fbc:	a1 44 99 12 00       	mov    eax,ds:0x129944
   11fc1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:562
    if (driveNo<0 || driveNo>kATADeviceInfoCount)
   11fc4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11fc8:	78 0a                	js     11fd4 <listParts+0x66>
/home/yogi/src/os/chrisOS/src/bishell.c:562 (discriminator 1)
   11fca:	a1 04 98 12 00       	mov    eax,ds:0x129804
   11fcf:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11fd2:	7e 1e                	jle    11ff2 <listParts+0x84>
/home/yogi/src/os/chrisOS/src/bishell.c:564
    {
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",driveNo,kATADeviceInfoCount);
   11fd4:	a1 04 98 12 00       	mov    eax,ds:0x129804
   11fd9:	83 ec 04             	sub    esp,0x4
   11fdc:	50                   	push   eax
   11fdd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11fe0:	68 a0 59 04 00       	push   0x459a0
   11fe5:	e8 b9 58 01 00       	call   278a3 <printk>
   11fea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:565
        return;
   11fed:	e9 8f 00 00 00       	jmp    12081 <listParts+0x113>
/home/yogi/src/os/chrisOS/src/bishell.c:567
    }
    printk("Partitions for disk # %u\n",driveNo);
   11ff2:	83 ec 08             	sub    esp,0x8
   11ff5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11ff8:	68 ec 5a 04 00       	push   0x45aec
   11ffd:	e8 a1 58 01 00       	call   278a3 <printk>
   12002:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:568
    port=(HBA_PORT*)kATADeviceInfo[driveNo].ioPort;
   12005:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   1200b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1200e:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   12014:	01 d0                	add    eax,edx
   12016:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   1201c:	a3 5c 63 09 00       	mov    ds:0x9635c,eax
/home/yogi/src/os/chrisOS/src/bishell.c:569
    if (kATADeviceInfo[driveNo].ATADeviceType != ATA_DEVICE_TYPE_SATA_HD)
   12021:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   12027:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1202a:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   12030:	01 d0                	add    eax,edx
   12032:	8b 80 52 02 00 00    	mov    eax,DWORD PTR [eax+0x252]
   12038:	83 f8 02             	cmp    eax,0x2
   1203b:	74 12                	je     1204f <listParts+0xe1>
/home/yogi/src/os/chrisOS/src/bishell.c:571
    {
        printk("Invalid device type.  Only SATA disks can be listed at the moment\n");
   1203d:	83 ec 0c             	sub    esp,0xc
   12040:	68 08 5b 04 00       	push   0x45b08
   12045:	e8 59 58 01 00       	call   278a3 <printk>
   1204a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:572
        return;
   1204d:	eb 32                	jmp    12081 <listParts+0x113>
/home/yogi/src/os/chrisOS/src/bishell.c:574
    }
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
   1204f:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   12055:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12058:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1205e:	01 d0                	add    eax,edx
   12060:	83 ec 08             	sub    esp,0x8
   12063:	68 40 5f 09 00       	push   0x95f40
   12068:	50                   	push   eax
   12069:	e8 a5 f9 00 00       	call   21a13 <parseMBR>
   1206e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:575
    printMBR(&mbr);
   12071:	83 ec 0c             	sub    esp,0xc
   12074:	68 40 5f 09 00       	push   0x95f40
   12079:	e8 ba f8 00 00       	call   21938 <printMBR>
   1207e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:576
}
   12081:	c9                   	leave  
   12082:	c3                   	ret    

00012083 <attach>:
attach():
/home/yogi/src/os/chrisOS/src/bishell.c:608
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
}

void HIGH_CODE_SECTION attach(char* cmdline)
{
   12083:	55                   	push   ebp
   12084:	89 e5                	mov    ebp,esp
   12086:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:610
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1208c:	83 ec 04             	sub    esp,0x4
   1208f:	68 00 14 00 00       	push   0x1400
   12094:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   1209a:	50                   	push   eax
   1209b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1209e:	e8 b9 04 00 00       	call   1255c <parseParamsShell>
   120a3:	83 c4 10             	add    esp,0x10
   120a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:612

    if (kSelectedDiskNum < 0 || kSelectedPartNum < 0)
   120a9:	a1 44 99 12 00       	mov    eax,ds:0x129944
   120ae:	85 c0                	test   eax,eax
   120b0:	78 09                	js     120bb <attach+0x38>
/home/yogi/src/os/chrisOS/src/bishell.c:612 (discriminator 1)
   120b2:	a1 48 99 12 00       	mov    eax,ds:0x129948
   120b7:	85 c0                	test   eax,eax
   120b9:	79 1d                	jns    120d8 <attach+0x55>
/home/yogi/src/os/chrisOS/src/bishell.c:614
    {
        printk("Must first select a disk (%u) and a partition (%u) using 'selectpart'",kSelectedDiskNum,kSelectedPartNum);
   120bb:	8b 15 48 99 12 00    	mov    edx,DWORD PTR ds:0x129948
   120c1:	a1 44 99 12 00       	mov    eax,ds:0x129944
   120c6:	83 ec 04             	sub    esp,0x4
   120c9:	52                   	push   edx
   120ca:	50                   	push   eax
   120cb:	68 4c 5b 04 00       	push   0x45b4c
   120d0:	e8 ce 57 01 00       	call   278a3 <printk>
   120d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:616
    }
    strcpy(selectedDir,"/");
   120d8:	83 ec 08             	sub    esp,0x8
   120db:	68 92 5b 04 00       	push   0x45b92
   120e0:	68 c0 b4 08 00       	push   0x8b4c0
   120e5:	e8 1a 59 01 00       	call   27a04 <strcpy>
   120ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:617
    ahciSetCurrentDisk((HBA_PORT*)kATADeviceInfo[kSelectedDiskNum].ioPort);
   120ed:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   120f3:	a1 44 99 12 00       	mov    eax,ds:0x129944
   120f8:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   120fe:	01 d0                	add    eax,edx
   12100:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   12106:	83 ec 0c             	sub    esp,0xc
   12109:	50                   	push   eax
   1210a:	e8 b4 32 00 00       	call   153c3 <ahciSetCurrentDisk>
   1210f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:618
    int lRetVal=fl_attach_media((fn_diskio_read)ahciBlockingRead28, (fn_diskio_write)ahciBlockingWrite28);
   12112:	83 ec 08             	sub    esp,0x8
   12115:	68 02 57 01 00       	push   0x15702
   1211a:	68 2e 54 01 00       	push   0x1542e
   1211f:	e8 9c b7 00 00       	call   1d8c0 <fl_attach_media>
   12124:	83 c4 10             	add    esp,0x10
   12127:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:619
    if (lRetVal!=0)
   1212a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1212e:	74 1f                	je     1214f <attach+0xcc>
/home/yogi/src/os/chrisOS/src/bishell.c:621
    {
        printk("Error attaching to disk %u, partition %u.  Error number %u",kSelectedDiskNum,kSelectedPartNum,lRetVal);
   12130:	8b 15 48 99 12 00    	mov    edx,DWORD PTR ds:0x129948
   12136:	a1 44 99 12 00       	mov    eax,ds:0x129944
   1213b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1213e:	52                   	push   edx
   1213f:	50                   	push   eax
   12140:	68 94 5b 04 00       	push   0x45b94
   12145:	e8 59 57 01 00       	call   278a3 <printk>
   1214a:	83 c4 10             	add    esp,0x10
   1214d:	eb 1d                	jmp    1216c <attach+0xe9>
/home/yogi/src/os/chrisOS/src/bishell.c:624
        return;
    }
    printk("Attached to disk %u, partition %u.\n",kSelectedDiskNum,kSelectedPartNum);
   1214f:	8b 15 48 99 12 00    	mov    edx,DWORD PTR ds:0x129948
   12155:	a1 44 99 12 00       	mov    eax,ds:0x129944
   1215a:	83 ec 04             	sub    esp,0x4
   1215d:	52                   	push   edx
   1215e:	50                   	push   eax
   1215f:	68 d0 5b 04 00       	push   0x45bd0
   12164:	e8 3a 57 01 00       	call   278a3 <printk>
   12169:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:627
    
    //fl_listdirectory(selectedDir);
}
   1216c:	c9                   	leave  
   1216d:	c3                   	ret    

0001216e <listDir>:
listDir():
/home/yogi/src/os/chrisOS/src/bishell.c:630

void HIGH_CODE_SECTION listDir(char* cmdline)
{
   1216e:	55                   	push   ebp
   1216f:	89 e5                	mov    ebp,esp
   12171:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:632
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12177:	83 ec 04             	sub    esp,0x4
   1217a:	68 00 14 00 00       	push   0x1400
   1217f:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12185:	50                   	push   eax
   12186:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12189:	e8 ce 03 00 00       	call   1255c <parseParamsShell>
   1218e:	83 c4 10             	add    esp,0x10
   12191:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:636
    
    //printk("Kernel Debug: Listing of directory %s + %s\n",params[0],params[1]);
    
    fl_listdirectory(params[0]);
   12194:	83 ec 0c             	sub    esp,0xc
   12197:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1219d:	50                   	push   eax
   1219e:	e8 fd c5 00 00       	call   1e7a0 <fl_listdirectory>
   121a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:637
}
   121a6:	90                   	nop
   121a7:	c9                   	leave  
   121a8:	c3                   	ret    

000121a9 <execCommand>:
execCommand():
/home/yogi/src/os/chrisOS/src/bishell.c:640

void HIGH_CODE_SECTION execCommand(char* cmdline)
{
   121a9:	55                   	push   ebp
   121aa:	89 e5                	mov    ebp,esp
   121ac:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:642
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   121b2:	83 ec 04             	sub    esp,0x4
   121b5:	68 00 14 00 00       	push   0x1400
   121ba:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   121c0:	50                   	push   eax
   121c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   121c4:	e8 93 03 00 00       	call   1255c <parseParamsShell>
   121c9:	83 c4 10             	add    esp,0x10
   121cc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:645

    
    strcpy(sExecutingProgram,params[0]+1);
   121cf:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   121d5:	83 c0 01             	add    eax,0x1
   121d8:	83 ec 08             	sub    esp,0x8
   121db:	50                   	push   eax
   121dc:	68 40 b4 08 00       	push   0x8b440
   121e1:	e8 1e 58 01 00       	call   27a04 <strcpy>
   121e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:648
    //printk("execProgram: param count = %u\n",paramCount);

    lTemp=buildargv(cmdline);
   121e9:	83 ec 0c             	sub    esp,0xc
   121ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   121ef:	e8 b2 04 00 00       	call   126a6 <buildargv>
   121f4:	83 c4 10             	add    esp,0x10
   121f7:	a3 20 b4 08 00       	mov    ds:0x8b420,eax
/home/yogi/src/os/chrisOS/src/bishell.c:655

//    printk("listing parameters:\n");
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("%u = '%s'\n",cnt,lTemp[cnt]);
   
    exec (params[0],paramCount,lTemp);
   121fc:	a1 20 b4 08 00       	mov    eax,ds:0x8b420
   12201:	83 ec 04             	sub    esp,0x4
   12204:	50                   	push   eax
   12205:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12208:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1220e:	50                   	push   eax
   1220f:	e8 d4 50 01 00       	call   272e8 <exec>
   12214:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:656
    strcpy(sExecutingProgram,sbiShellProgramName);
   12217:	83 ec 08             	sub    esp,0x8
   1221a:	68 e0 91 02 00       	push   0x291e0
   1221f:	68 40 b4 08 00       	push   0x8b440
   12224:	e8 db 57 01 00       	call   27a04 <strcpy>
   12229:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:657
}
   1222c:	90                   	nop
   1222d:	c9                   	leave  
   1222e:	c3                   	ret    

0001222f <displayGDTTable>:
displayGDTTable():
/home/yogi/src/os/chrisOS/src/bishell.c:212
  //printk("buildargv: exiting\n");
  return (argv);
}

void HIGH_CODE_SECTION displayGDTTable(char *cmdline)
{
   1222f:	55                   	push   ebp
   12230:	89 e5                	mov    ebp,esp
   12232:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/bishell.c:213
    dumpGDTTable();
   12235:	e8 c4 3d 01 00       	call   25ffe <dumpGDTTable>
/home/yogi/src/os/chrisOS/src/bishell.c:214
}
   1223a:	90                   	nop
   1223b:	c9                   	leave  
   1223c:	c3                   	ret    

0001223d <displayTSSEntry>:
displayTSSEntry():
/home/yogi/src/os/chrisOS/src/bishell.c:217

void HIGH_CODE_SECTION displayTSSEntry(char *cmdline)
{
   1223d:	55                   	push   ebp
   1223e:	89 e5                	mov    ebp,esp
   12240:	81 ec 08 14 00 00    	sub    esp,0x1408
/home/yogi/src/os/chrisOS/src/bishell.c:220
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];

    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12246:	83 ec 04             	sub    esp,0x4
   12249:	68 00 14 00 00       	push   0x1400
   1224e:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   12254:	50                   	push   eax
   12255:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12258:	e8 ff 02 00 00       	call   1255c <parseParamsShell>
   1225d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:221
    if (params[0][0]==0)
   12260:	0f b6 85 f8 eb ff ff 	movzx  eax,BYTE PTR [ebp-0x1408]
   12267:	84 c0                	test   al,al
   12269:	75 12                	jne    1227d <displayTSSEntry+0x40>
/home/yogi/src/os/chrisOS/src/bishell.c:223
    {
        printk("Requires 1 parameter which is the address of the TSS record\n");
   1226b:	83 ec 0c             	sub    esp,0xc
   1226e:	68 f4 5b 04 00       	push   0x45bf4
   12273:	e8 2b 56 01 00       	call   278a3 <printk>
   12278:	83 c4 10             	add    esp,0x10
   1227b:	eb 22                	jmp    1229f <displayTSSEntry+0x62>
/home/yogi/src/os/chrisOS/src/bishell.c:226
        return;
    }
    displayTSS(strtoul(params[0],0,16));
   1227d:	83 ec 04             	sub    esp,0x4
   12280:	6a 10                	push   0x10
   12282:	6a 00                	push   0x0
   12284:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1228a:	50                   	push   eax
   1228b:	e8 0c 58 01 00       	call   27a9c <strtoul>
   12290:	83 c4 10             	add    esp,0x10
   12293:	83 ec 0c             	sub    esp,0xc
   12296:	50                   	push   eax
   12297:	e8 51 3e 01 00       	call   260ed <displayTSS>
   1229c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:228
    
}
   1229f:	c9                   	leave  
   122a0:	c3                   	ret    

000122a1 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   122a1:	55                   	push   ebp
   122a2:	89 e5                	mov    ebp,esp
   122a4:	83 ec 08             	sub    esp,0x8
   122a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   122aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122ad:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   122b1:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   122b4:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   122b8:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   122bc:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   122bd:	90                   	nop
   122be:	c9                   	leave  
   122bf:	c3                   	ret    

000122c0 <outw>:
outw():
/home/yogi/src/os/chrisOS/include/io.h:27

static __inline void outw(unsigned short __port, unsigned short __val)
{
   122c0:	55                   	push   ebp
   122c1:	89 e5                	mov    ebp,esp
   122c3:	83 ec 08             	sub    esp,0x8
   122c6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   122c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122cc:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   122d0:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
/home/yogi/src/os/chrisOS/include/io.h:28
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
   122d4:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
   122d8:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   122dc:	66 ef                	out    dx,ax
/home/yogi/src/os/chrisOS/include/io.h:29
}
   122de:	90                   	nop
   122df:	c9                   	leave  
   122e0:	c3                   	ret    

000122e1 <outl>:
outl():
/home/yogi/src/os/chrisOS/include/io.h:32

static __inline void outl(unsigned short __port, unsigned int __val)
{
   122e1:	55                   	push   ebp
   122e2:	89 e5                	mov    ebp,esp
   122e4:	83 ec 04             	sub    esp,0x4
   122e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122ea:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   122ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122f1:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   122f5:	ef                   	out    dx,eax
/home/yogi/src/os/chrisOS/include/io.h:34
}
   122f6:	90                   	nop
   122f7:	c9                   	leave  
   122f8:	c3                   	ret    

000122f9 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37

static __inline unsigned char inb(unsigned short __port)
{
   122f9:	55                   	push   ebp
   122fa:	89 e5                	mov    ebp,esp
   122fc:	83 ec 14             	sub    esp,0x14
   122ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12302:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   12306:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1230a:	89 c2                	mov    edx,eax
   1230c:	ec                   	in     al,dx
   1230d:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   12310:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   12314:	c9                   	leave  
   12315:	c3                   	ret    

00012316 <inw>:
inw():
/home/yogi/src/os/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   12316:	55                   	push   ebp
   12317:	89 e5                	mov    ebp,esp
   12319:	83 ec 14             	sub    esp,0x14
   1231c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1231f:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   12323:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   12327:	89 c2                	mov    edx,eax
   12329:	66 ed                	in     ax,dx
   1232b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/include/io.h:47
	return __val;
   1232f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/include/io.h:48
}
   12333:	c9                   	leave  
   12334:	c3                   	ret    

00012335 <inl>:
inl():
/home/yogi/src/os/chrisOS/include/io.h:51

static __inline unsigned int inl(unsigned short __port)
{
   12335:	55                   	push   ebp
   12336:	89 e5                	mov    ebp,esp
   12338:	83 ec 14             	sub    esp,0x14
   1233b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1233e:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   12342:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   12346:	89 c2                	mov    edx,eax
   12348:	ed                   	in     eax,dx
   12349:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/include/io.h:54
	return __val;
   1234c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/io.h:55
}
   1234f:	c9                   	leave  
   12350:	c3                   	ret    

00012351 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   12351:	55                   	push   ebp
   12352:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12357:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1235e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12361:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   12364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12367:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   12369:	90                   	nop
   1236a:	5d                   	pop    ebp
   1236b:	c3                   	ret    

0001236c <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1236c:	55                   	push   ebp
   1236d:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1236f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12372:	8b 00                	mov    eax,DWORD PTR [eax]
   12374:	85 c0                	test   eax,eax
   12376:	75 0d                	jne    12385 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   12378:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1237b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1237e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12381:	89 10                	mov    DWORD PTR [eax],edx
   12383:	eb 0e                	jmp    12393 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   12385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12388:	8b 00                	mov    eax,DWORD PTR [eax]
   1238a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1238d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   12390:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   12393:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12396:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12399:	85 c0                	test   eax,eax
   1239b:	75 0d                	jne    123aa <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1239d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123a0:	8b 10                	mov    edx,DWORD PTR [eax]
   123a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   123a8:	eb 0d                	jmp    123b7 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   123aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   123b0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   123b3:	8b 12                	mov    edx,DWORD PTR [edx]
   123b5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   123b7:	90                   	nop
   123b8:	5d                   	pop    ebp
   123b9:	c3                   	ret    

000123ba <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   123ba:	55                   	push   ebp
   123bb:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   123bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   123c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   123c3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   123c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   123cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   123ce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   123d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   123d7:	85 c0                	test   eax,eax
   123d9:	75 0b                	jne    123e6 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   123db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123de:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   123e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   123e4:	eb 0b                	jmp    123f1 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   123e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   123ec:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   123ef:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   123f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123f4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   123f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   123fa:	90                   	nop
   123fb:	5d                   	pop    ebp
   123fc:	c3                   	ret    

000123fd <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   123fd:	55                   	push   ebp
   123fe:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12400:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12403:	8b 10                	mov    edx,DWORD PTR [eax]
   12405:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12408:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1240a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1240d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12410:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   12413:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12416:	8b 00                	mov    eax,DWORD PTR [eax]
   12418:	85 c0                	test   eax,eax
   1241a:	75 0a                	jne    12426 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1241c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1241f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12422:	89 10                	mov    DWORD PTR [eax],edx
   12424:	eb 0b                	jmp    12431 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   12426:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12429:	8b 00                	mov    eax,DWORD PTR [eax]
   1242b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1242e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   12431:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12434:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12437:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   12439:	90                   	nop
   1243a:	5d                   	pop    ebp
   1243b:	c3                   	ret    

0001243c <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1243c:	55                   	push   ebp
   1243d:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1243f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12442:	8b 00                	mov    eax,DWORD PTR [eax]
   12444:	85 c0                	test   eax,eax
   12446:	75 26                	jne    1246e <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   12448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1244b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1244e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   12450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12453:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12456:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   12459:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1245c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   12462:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12465:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1246c:	eb 14                	jmp    12482 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1246e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12471:	8b 00                	mov    eax,DWORD PTR [eax]
   12473:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   12476:	50                   	push   eax
   12477:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1247a:	e8 7e ff ff ff       	call   123fd <fat_list_insert_before>
   1247f:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   12482:	90                   	nop
   12483:	c9                   	leave  
   12484:	c3                   	ret    

00012485 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   12485:	55                   	push   ebp
   12486:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1248b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1248e:	85 c0                	test   eax,eax
   12490:	75 10                	jne    124a2 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   12492:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   12495:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12498:	e8 9f ff ff ff       	call   1243c <fat_list_insert_first>
   1249d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   124a0:	eb 15                	jmp    124b7 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   124a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   124a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   124a8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   124ab:	50                   	push   eax
   124ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   124af:	e8 06 ff ff ff       	call   123ba <fat_list_insert_after>
   124b4:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   124b7:	90                   	nop
   124b8:	c9                   	leave  
   124b9:	c3                   	ret    

000124ba <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   124ba:	55                   	push   ebp
   124bb:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   124bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   124c0:	8b 00                	mov    eax,DWORD PTR [eax]
   124c2:	85 c0                	test   eax,eax
   124c4:	0f 94 c0             	sete   al
   124c7:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   124ca:	5d                   	pop    ebp
   124cb:	c3                   	ret    

000124cc <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   124cc:	55                   	push   ebp
   124cd:	89 e5                	mov    ebp,esp
   124cf:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   124d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   124d5:	8b 00                	mov    eax,DWORD PTR [eax]
   124d7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   124da:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   124de:	74 0e                	je     124ee <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   124e0:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   124e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   124e6:	e8 81 fe ff ff       	call   1236c <fat_list_remove>
   124eb:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   124ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   124f1:	c9                   	leave  
   124f2:	c3                   	ret    

000124f3 <findCommand>:
findCommand():
/home/yogi/src/os/chrisOS/src/bishell.c:38
char programParams[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
char** lTemp;


int HIGH_CODE_SECTION findCommand(char* command)
{
   124f3:	55                   	push   ebp
   124f4:	89 e5                	mov    ebp,esp
   124f6:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/bishell.c:42
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   124f9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12500:	eb 4d                	jmp    1254f <findCommand+0x5c>
/home/yogi/src/os/chrisOS/src/bishell.c:44
    {
        ret = strncmp(command, cmds[i].name,strlen(cmds[i].name));
   12502:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12505:	c1 e0 04             	shl    eax,0x4
   12508:	05 00 90 02 00       	add    eax,0x29000
   1250d:	8b 00                	mov    eax,DWORD PTR [eax]
   1250f:	83 ec 0c             	sub    esp,0xc
   12512:	50                   	push   eax
   12513:	e8 5c 55 01 00       	call   27a74 <strlen>
   12518:	83 c4 10             	add    esp,0x10
   1251b:	89 c2                	mov    edx,eax
   1251d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12520:	c1 e0 04             	shl    eax,0x4
   12523:	05 00 90 02 00       	add    eax,0x29000
   12528:	8b 00                	mov    eax,DWORD PTR [eax]
   1252a:	83 ec 04             	sub    esp,0x4
   1252d:	52                   	push   edx
   1252e:	50                   	push   eax
   1252f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12532:	e8 49 f7 ff ff       	call   11c80 <strncmp>
   12537:	83 c4 10             	add    esp,0x10
   1253a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:46
        //printk("findCommand compared %s and %s for %u, returned %u\n", command, cmds[i].name, strlen(cmds[i].name), ret);
        if(ret==0)
   1253d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   12541:	75 08                	jne    1254b <findCommand+0x58>
/home/yogi/src/os/chrisOS/src/bishell.c:49
        {
            //printk("findCommand returning %u", i+1);
            return i+1;
   12543:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12546:	83 c0 01             	add    eax,0x1
   12549:	eb 0f                	jmp    1255a <findCommand+0x67>
/home/yogi/src/os/chrisOS/src/bishell.c:42 (discriminator 2)
int HIGH_CODE_SECTION findCommand(char* command)
{
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   1254b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:42 (discriminator 1)
   1254f:	83 7d f4 1c          	cmp    DWORD PTR [ebp-0xc],0x1c
   12553:	76 ad                	jbe    12502 <findCommand+0xf>
/home/yogi/src/os/chrisOS/src/bishell.c:53
            //printk("findCommand returning %u", i+1);
            return i+1;
        }
    }
    //printk("findCommand returning -1");
            return -1;
   12555:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:54
}
   1255a:	c9                   	leave  
   1255b:	c3                   	ret    

0001255c <parseParamsShell>:
parseParamsShell():
/home/yogi/src/os/chrisOS/src/bishell.c:57

int HIGH_CODE_SECTION parseParamsShell(char* cmdLine, char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], int size)
    {
   1255c:	55                   	push   ebp
   1255d:	89 e5                	mov    ebp,esp
   1255f:	53                   	push   ebx
   12560:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/bishell.c:58
    int x=0,y=0;
   12563:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1256a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:59
    int lRetVal=0,parsedChars=0;
   12571:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   12578:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:61
    
    memset(params,0, size);
   1257f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12582:	83 ec 04             	sub    esp,0x4
   12585:	50                   	push   eax
   12586:	6a 00                	push   0x0
   12588:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1258b:	e8 ad 30 01 00       	call   2563d <memset>
   12590:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:63
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   12593:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   1259a:	e9 c9 00 00 00       	jmp    12668 <parseParamsShell+0x10c>
/home/yogi/src/os/chrisOS/src/bishell.c:66
    {
        //printk("c=%c\n", cmdLine[cnt]);
        if ( (cmdLine[cnt]==' ' || cmdLine[cnt]=='-') || cmdLine[cnt]==',')
   1259f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   125a2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   125a5:	01 d0                	add    eax,edx
   125a7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   125aa:	3c 20                	cmp    al,0x20
   125ac:	74 1e                	je     125cc <parseParamsShell+0x70>
/home/yogi/src/os/chrisOS/src/bishell.c:66 (discriminator 1)
   125ae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   125b1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   125b4:	01 d0                	add    eax,edx
   125b6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   125b9:	3c 2d                	cmp    al,0x2d
   125bb:	74 0f                	je     125cc <parseParamsShell+0x70>
/home/yogi/src/os/chrisOS/src/bishell.c:66 (discriminator 2)
   125bd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   125c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   125c3:	01 d0                	add    eax,edx
   125c5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   125c8:	3c 2c                	cmp    al,0x2c
   125ca:	75 6f                	jne    1263b <parseParamsShell+0xdf>
/home/yogi/src/os/chrisOS/src/bishell.c:69
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
   125cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   125cf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   125d2:	01 d0                	add    eax,edx
   125d4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   125d7:	3c 2d                	cmp    al,0x2d
   125d9:	74 0f                	je     125ea <parseParamsShell+0x8e>
/home/yogi/src/os/chrisOS/src/bishell.c:69 (discriminator 1)
   125db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   125de:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   125e1:	01 d0                	add    eax,edx
   125e3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   125e6:	3c 2f                	cmp    al,0x2f
   125e8:	75 25                	jne    1260f <parseParamsShell+0xb3>
/home/yogi/src/os/chrisOS/src/bishell.c:70
                params[y][x++]=cmdLine[cnt];
   125ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   125ed:	c1 e0 09             	shl    eax,0x9
   125f0:	89 c2                	mov    edx,eax
   125f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   125f5:	8d 0c 02             	lea    ecx,[edx+eax*1]
   125f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   125fb:	8d 50 01             	lea    edx,[eax+0x1]
   125fe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12601:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   12604:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   12607:	01 da                	add    edx,ebx
   12609:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1260c:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/src/os/chrisOS/src/bishell.c:71
            params[y][x]='\0';
   1260f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12612:	c1 e0 09             	shl    eax,0x9
   12615:	89 c2                	mov    edx,eax
   12617:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1261a:	01 c2                	add    edx,eax
   1261c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1261f:	01 d0                	add    eax,edx
   12621:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:72
            if (cnt>0)
   12624:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   12628:	74 36                	je     12660 <parseParamsShell+0x104>
/home/yogi/src/os/chrisOS/src/bishell.c:73
                {x=0;y++;lRetVal++;}
   1262a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12631:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
   12635:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:72
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
                params[y][x++]=cmdLine[cnt];
            params[y][x]='\0';
            if (cnt>0)
   12639:	eb 25                	jmp    12660 <parseParamsShell+0x104>
/home/yogi/src/os/chrisOS/src/bishell.c:78
                {x=0;y++;lRetVal++;}
        }
        else
        {
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
   1263b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1263e:	c1 e0 09             	shl    eax,0x9
   12641:	89 c2                	mov    edx,eax
   12643:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12646:	8d 0c 02             	lea    ecx,[edx+eax*1]
   12649:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1264c:	8d 50 01             	lea    edx,[eax+0x1]
   1264f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12652:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   12655:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   12658:	01 da                	add    edx,ebx
   1265a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1265d:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/src/os/chrisOS/src/bishell.c:80 (discriminator 2)
        }
        parsedChars++;
   12660:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:63 (discriminator 2)
    int x=0,y=0;
    int lRetVal=0,parsedChars=0;
    
    memset(params,0, size);
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   12664:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:63 (discriminator 1)
   12668:	83 ec 0c             	sub    esp,0xc
   1266b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1266e:	e8 01 54 01 00       	call   27a74 <strlen>
   12673:	83 c4 10             	add    esp,0x10
   12676:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   12679:	0f 87 20 ff ff ff    	ja     1259f <parseParamsShell+0x43>
/home/yogi/src/os/chrisOS/src/bishell.c:82
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
        }
        parsedChars++;
    }
    if (parsedChars)
   1267f:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   12683:	74 19                	je     1269e <parseParamsShell+0x142>
/home/yogi/src/os/chrisOS/src/bishell.c:84
    {
        lRetVal++;
   12685:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:85
        params[y][x]='\0';
   12689:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1268c:	c1 e0 09             	shl    eax,0x9
   1268f:	89 c2                	mov    edx,eax
   12691:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12694:	01 c2                	add    edx,eax
   12696:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12699:	01 d0                	add    eax,edx
   1269b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:90
    }
    //printk("Returning %u parameters:\n", lRetVal);
    //for (int cnt=0;cnt<lRetVal;cnt++)
        //printk("\tParameter %u: '%s'\n", cnt, params[cnt]);
    return lRetVal;
   1269e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/bishell.c:91
}
   126a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   126a4:	c9                   	leave  
   126a5:	c3                   	ret    

000126a6 <buildargv>:
buildargv():
/home/yogi/src/os/chrisOS/src/bishell.c:95

/*parts from http://*/
char **buildargv (const char *input)
{
   126a6:	55                   	push   ebp
   126a7:	89 e5                	mov    ebp,esp
   126a9:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/bishell.c:98
  char *arg;
  char *copybuf;
  int squote = 0;
   126ac:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:99
  int dquote = 0;
   126b3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:100
  int bsquote = 0;
   126ba:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:101
  int argc = 0;
   126c1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:102
  int maxargc = 0;
   126c8:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:103
  char **argv = NULL;
   126cf:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:107
  char **nargv;
  //printk("buildargv: entering\n");
  
  if (input != NULL)
   126d6:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   126da:	0f 84 17 02 00 00    	je     128f7 <buildargv+0x251>
/home/yogi/src/os/chrisOS/src/bishell.c:110
    {
      //printk("buildargv: command to parse (%u chars) is: '%s'\n",strlen (input) + 1,input);
      copybuf = (char *) mallocTemp (strlen (input) + 1);
   126e0:	83 ec 0c             	sub    esp,0xc
   126e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   126e6:	e8 89 53 01 00       	call   27a74 <strlen>
   126eb:	83 c4 10             	add    esp,0x10
   126ee:	83 c0 01             	add    eax,0x1
   126f1:	83 ec 0c             	sub    esp,0xc
   126f4:	50                   	push   eax
   126f5:	e8 e1 38 01 00       	call   25fdb <mallocTemp>
   126fa:	83 c4 10             	add    esp,0x10
   126fd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:118
	 argv, even for null strings.  See NOTES above, test case below. */
      do
	{
	  /* Pick off argv[argc] */

	  if ((maxargc == 0) || (argc >= (maxargc - 1)))
   12700:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   12704:	74 0b                	je     12711 <buildargv+0x6b>
/home/yogi/src/os/chrisOS/src/bishell.c:118 (discriminator 1)
   12706:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12709:	83 e8 01             	sub    eax,0x1
   1270c:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1270f:	7f 3d                	jg     1274e <buildargv+0xa8>
/home/yogi/src/os/chrisOS/src/bishell.c:121
	    {
	      /* argv needs initialization, or expansion */
	      if (argv == NULL)
   12711:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   12715:	75 1c                	jne    12733 <buildargv+0x8d>
/home/yogi/src/os/chrisOS/src/bishell.c:123
		{
		  maxargc = INITIAL_MAXARGC;
   12717:	c7 45 dc 14 00 00 00 	mov    DWORD PTR [ebp-0x24],0x14
/home/yogi/src/os/chrisOS/src/bishell.c:124
		  nargv = (char **) mallocTemp (maxargc * sizeof (char *));
   1271e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12721:	c1 e0 02             	shl    eax,0x2
   12724:	83 ec 0c             	sub    esp,0xc
   12727:	50                   	push   eax
   12728:	e8 ae 38 01 00       	call   25fdb <mallocTemp>
   1272d:	83 c4 10             	add    esp,0x10
   12730:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:126
		}
	      argv = nargv;
   12733:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   12736:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/bishell.c:127
	      argv[argc] = NULL;
   12739:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1273c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   12746:	01 d0                	add    eax,edx
   12748:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:130
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
   1274e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12751:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:131
	  while (*input != EOS)
   12754:	e9 ec 00 00 00       	jmp    12845 <buildargv+0x19f>
/home/yogi/src/os/chrisOS/src/bishell.c:133
	    {
	      if ((*input)==' ' && !squote && !dquote && !bsquote)
   12759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1275c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1275f:	3c 20                	cmp    al,0x20
   12761:	75 16                	jne    12779 <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:133 (discriminator 1)
   12763:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   12767:	75 10                	jne    12779 <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:133 (discriminator 2)
   12769:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1276d:	75 0a                	jne    12779 <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:133 (discriminator 3)
   1276f:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   12773:	0f 84 da 00 00 00    	je     12853 <buildargv+0x1ad>
/home/yogi/src/os/chrisOS/src/bishell.c:139
		{
		  break;
		}
	      else
		{
		  if (bsquote)
   12779:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1277d:	74 1d                	je     1279c <buildargv+0xf6>
/home/yogi/src/os/chrisOS/src/bishell.c:141
		    {
		      bsquote = 0;
   1277f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:142
		      *arg++ = *input;
   12786:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12789:	8d 50 01             	lea    edx,[eax+0x1]
   1278c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1278f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12792:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12795:	88 10                	mov    BYTE PTR [eax],dl
   12797:	e9 a5 00 00 00       	jmp    12841 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:144
		    }
		  else if (*input == '\\')
   1279c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1279f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   127a2:	3c 5c                	cmp    al,0x5c
   127a4:	75 0c                	jne    127b2 <buildargv+0x10c>
/home/yogi/src/os/chrisOS/src/bishell.c:146
		    {
		      bsquote = 1;
   127a6:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
   127ad:	e9 8f 00 00 00       	jmp    12841 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:148
		    }
		  else if (squote)
   127b2:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   127b6:	74 26                	je     127de <buildargv+0x138>
/home/yogi/src/os/chrisOS/src/bishell.c:150
		    {
		      if (*input == '\'')
   127b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   127bb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   127be:	3c 27                	cmp    al,0x27
   127c0:	75 09                	jne    127cb <buildargv+0x125>
/home/yogi/src/os/chrisOS/src/bishell.c:152
			{
			  squote = 0;
   127c2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   127c9:	eb 76                	jmp    12841 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:156
			}
		      else
			{
			  *arg++ = *input;
   127cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   127ce:	8d 50 01             	lea    edx,[eax+0x1]
   127d1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   127d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   127d7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   127da:	88 10                	mov    BYTE PTR [eax],dl
   127dc:	eb 63                	jmp    12841 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:159
			}
		    }
		  else if (dquote)
   127de:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   127e2:	74 26                	je     1280a <buildargv+0x164>
/home/yogi/src/os/chrisOS/src/bishell.c:161
		    {
		      if (*input == '"')
   127e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   127e7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   127ea:	3c 22                	cmp    al,0x22
   127ec:	75 09                	jne    127f7 <buildargv+0x151>
/home/yogi/src/os/chrisOS/src/bishell.c:163
			{
			  dquote = 0;
   127ee:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   127f5:	eb 4a                	jmp    12841 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:167
			}
		      else
			{
			  *arg++ = *input;
   127f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   127fa:	8d 50 01             	lea    edx,[eax+0x1]
   127fd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12800:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12803:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12806:	88 10                	mov    BYTE PTR [eax],dl
   12808:	eb 37                	jmp    12841 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:172
			}
		    }
		  else
		    {
		      if (*input == '\'')
   1280a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1280d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12810:	3c 27                	cmp    al,0x27
   12812:	75 09                	jne    1281d <buildargv+0x177>
/home/yogi/src/os/chrisOS/src/bishell.c:174
			{
			  squote = 1;
   12814:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
   1281b:	eb 24                	jmp    12841 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:176
			}
		      else if (*input == '"')
   1281d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12820:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12823:	3c 22                	cmp    al,0x22
   12825:	75 09                	jne    12830 <buildargv+0x18a>
/home/yogi/src/os/chrisOS/src/bishell.c:178
			{
			  dquote = 1;
   12827:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
   1282e:	eb 11                	jmp    12841 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:182
			}
		      else
			{
			  *arg++ = *input;
   12830:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12833:	8d 50 01             	lea    edx,[eax+0x1]
   12836:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12839:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1283c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1283f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/bishell.c:186
                          //printk("Incremented input to %u, char=%u,value='%c'\n",input,*input,*input);
			}
		    }
		  input++;
   12841:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:131
	      argv = nargv;
	      argv[argc] = NULL;
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
	  while (*input != EOS)
   12845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12848:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1284b:	84 c0                	test   al,al
   1284d:	0f 85 06 ff ff ff    	jne    12759 <buildargv+0xb3>
/home/yogi/src/os/chrisOS/src/bishell.c:189
			}
		    }
		  input++;
		}
	    }
	  *arg = EOS;
   12853:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12856:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:191
          //printk("Found an EOS\n");
          if (copybuf[0]!='\0')
   12859:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1285c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1285f:	84 c0                	test   al,al
   12861:	0f 84 82 00 00 00    	je     128e9 <buildargv+0x243>
/home/yogi/src/os/chrisOS/src/bishell.c:193
          {
            char* temp=mallocTemp(strlen(copybuf)+1);
   12867:	83 ec 0c             	sub    esp,0xc
   1286a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1286d:	e8 02 52 01 00       	call   27a74 <strlen>
   12872:	83 c4 10             	add    esp,0x10
   12875:	83 c0 01             	add    eax,0x1
   12878:	83 ec 0c             	sub    esp,0xc
   1287b:	50                   	push   eax
   1287c:	e8 5a 37 01 00       	call   25fdb <mallocTemp>
   12881:	83 c4 10             	add    esp,0x10
   12884:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/bishell.c:196
            //printk("*malloc'd temp to 0x%08X for %u characters\n",temp,strlen(copybuf));
            //printk("Copied copybuf @ 0x%08X to temp @ 0x%08X\n",copybuf,temp);
            strcpy(temp,copybuf);
   12887:	83 ec 08             	sub    esp,0x8
   1288a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1288d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   12890:	e8 6f 51 01 00       	call   27a04 <strcpy>
   12895:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:197
            copybuf = (char *) mallocTemp (strlen (input) + 1);
   12898:	83 ec 0c             	sub    esp,0xc
   1289b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1289e:	e8 d1 51 01 00       	call   27a74 <strlen>
   128a3:	83 c4 10             	add    esp,0x10
   128a6:	83 c0 01             	add    eax,0x1
   128a9:	83 ec 0c             	sub    esp,0xc
   128ac:	50                   	push   eax
   128ad:	e8 29 37 01 00       	call   25fdb <mallocTemp>
   128b2:	83 c4 10             	add    esp,0x10
   128b5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:198
            argv[argc] = temp;
   128b8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   128bb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   128c2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   128c5:	01 c2                	add    edx,eax
   128c7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   128ca:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/bishell.c:200
            //printk("set argv[%u] to 0x%08X\n",argc,temp);
            argc++;
   128cc:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:201
            argv[argc] = NULL;
   128d0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   128d3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   128da:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   128dd:	01 d0                	add    eax,edx
   128df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:202
            input++;
   128e5:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:205
          }
	}
      while (*input != EOS);
   128e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   128ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   128ef:	84 c0                	test   al,al
   128f1:	0f 85 09 fe ff ff    	jne    12700 <buildargv+0x5a>
/home/yogi/src/os/chrisOS/src/bishell.c:208
    }
  //printk("buildargv: exiting\n");
  return (argv);
   128f7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/chrisOS/src/bishell.c:209
}
   128fa:	c9                   	leave  
   128fb:	c3                   	ret    

000128fc <QueryBDF>:
QueryBDF():
/home/yogi/src/os/chrisOS/src/bishell.c:231
    displayTSS(strtoul(params[0],0,16));
    
}

void HIGH_CODE_SECTION QueryBDF(char* cmdline)
{
   128fc:	55                   	push   ebp
   128fd:	89 e5                	mov    ebp,esp
   128ff:	56                   	push   esi
   12900:	53                   	push   ebx
   12901:	81 ec 00 14 00 00    	sub    esp,0x1400
/home/yogi/src/os/chrisOS/src/bishell.c:234
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];

    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12907:	83 ec 04             	sub    esp,0x4
   1290a:	68 00 14 00 00       	push   0x1400
   1290f:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   12915:	50                   	push   eax
   12916:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12919:	e8 3e fc ff ff       	call   1255c <parseParamsShell>
   1291e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:236
    //printk("Params: 0=%u, 1=%u, 2=%u",strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
    pciQueryBDF(strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
   12921:	83 ec 04             	sub    esp,0x4
   12924:	6a 10                	push   0x10
   12926:	6a 00                	push   0x0
   12928:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1292e:	05 00 04 00 00       	add    eax,0x400
   12933:	50                   	push   eax
   12934:	e8 63 51 01 00       	call   27a9c <strtoul>
   12939:	83 c4 10             	add    esp,0x10
   1293c:	0f b6 f0             	movzx  esi,al
   1293f:	83 ec 04             	sub    esp,0x4
   12942:	6a 10                	push   0x10
   12944:	6a 00                	push   0x0
   12946:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1294c:	05 00 02 00 00       	add    eax,0x200
   12951:	50                   	push   eax
   12952:	e8 45 51 01 00       	call   27a9c <strtoul>
   12957:	83 c4 10             	add    esp,0x10
   1295a:	0f b6 d8             	movzx  ebx,al
   1295d:	83 ec 04             	sub    esp,0x4
   12960:	6a 10                	push   0x10
   12962:	6a 00                	push   0x0
   12964:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1296a:	50                   	push   eax
   1296b:	e8 2c 51 01 00       	call   27a9c <strtoul>
   12970:	83 c4 10             	add    esp,0x10
   12973:	0f b6 c0             	movzx  eax,al
   12976:	83 ec 04             	sub    esp,0x4
   12979:	56                   	push   esi
   1297a:	53                   	push   ebx
   1297b:	50                   	push   eax
   1297c:	e8 3c 41 00 00       	call   16abd <pciQueryBDF>
   12981:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:237
}
   12984:	90                   	nop
   12985:	8d 65 f8             	lea    esp,[ebp-0x8]
   12988:	5b                   	pop    ebx
   12989:	5e                   	pop    esi
   1298a:	5d                   	pop    ebp
   1298b:	c3                   	ret    

0001298c <dumpP>:
dumpP():
/home/yogi/src/os/chrisOS/src/bishell.c:240

void HIGH_CODE_SECTION dumpP(char* cmdline)
{
   1298c:	55                   	push   ebp
   1298d:	89 e5                	mov    ebp,esp
   1298f:	81 ec 58 16 00 00    	sub    esp,0x1658
/home/yogi/src/os/chrisOS/src/bishell.c:242
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12995:	83 ec 04             	sub    esp,0x4
   12998:	68 00 14 00 00       	push   0x1400
   1299d:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   129a3:	50                   	push   eax
   129a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   129a7:	e8 b0 fb ff ff       	call   1255c <parseParamsShell>
   129ac:	83 c4 10             	add    esp,0x10
   129af:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:243
    int lCount=0;
   129b2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:244
    uint32_t lAddress=0;
   129b9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:245
    char lCharType=' ', lCharSize=' ';
   129c0:	c6 45 ef 20          	mov    BYTE PTR [ebp-0x11],0x20
   129c4:	c6 45 ee 20          	mov    BYTE PTR [ebp-0x12],0x20
/home/yogi/src/os/chrisOS/src/bishell.c:246
    int lTemp=0;
   129c8:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:248
    char lTempS[MAX_PARAM_WIDTH];
    bool addrIsVirtual=false;
   129cf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:249
    uint32_t cr3=0;
   129d3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:254
    
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
   129da:	83 ec 04             	sub    esp,0x4
   129dd:	68 00 02 00 00       	push   0x200
   129e2:	6a 00                	push   0x0
   129e4:	8d 85 b4 e9 ff ff    	lea    eax,[ebp-0x164c]
   129ea:	50                   	push   eax
   129eb:	e8 4d 2c 01 00       	call   2563d <memset>
   129f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:255
    for (int cnt=0;cnt<=paramCount;cnt++)
   129f3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   129fa:	e9 84 01 00 00       	jmp    12b83 <dumpP+0x1f7>
/home/yogi/src/os/chrisOS/src/bishell.c:257
    {
        printk("Processing parameter %u, value='%s'\n",cnt,params[cnt]);
   129ff:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   12a05:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12a08:	c1 e2 09             	shl    edx,0x9
   12a0b:	01 d0                	add    eax,edx
   12a0d:	83 ec 04             	sub    esp,0x4
   12a10:	50                   	push   eax
   12a11:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   12a14:	68 94 5f 04 00       	push   0x45f94
   12a19:	e8 85 4e 01 00       	call   278a3 <printk>
   12a1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:258
        if (params[cnt][0]=='v')
   12a21:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12a24:	c1 e0 09             	shl    eax,0x9
   12a27:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12a2a:	01 c8                	add    eax,ecx
   12a2c:	2d 44 14 00 00       	sub    eax,0x1444
   12a31:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12a34:	3c 76                	cmp    al,0x76
   12a36:	75 09                	jne    12a41 <dumpP+0xb5>
/home/yogi/src/os/chrisOS/src/bishell.c:261
        {
            //printk("Address is virtual parameter found\n");
            addrIsVirtual=true;
   12a38:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
   12a3c:	e9 3e 01 00 00       	jmp    12b7f <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:263
        }
        else if (params[cnt][0]=='/')
   12a41:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12a44:	c1 e0 09             	shl    eax,0x9
   12a47:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12a4a:	01 c8                	add    eax,ecx
   12a4c:	2d 44 14 00 00       	sub    eax,0x1444
   12a51:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12a54:	3c 2f                	cmp    al,0x2f
   12a56:	0f 85 af 00 00 00    	jne    12b0b <dumpP+0x17f>
/home/yogi/src/os/chrisOS/src/bishell.c:265
        {
            lTemp=1;
   12a5c:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:266
            while (ISDIGIT(params[cnt][lTemp]))
   12a63:	eb 29                	jmp    12a8e <dumpP+0x102>
/home/yogi/src/os/chrisOS/src/bishell.c:268
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
   12a65:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12a68:	8d 50 ff             	lea    edx,[eax-0x1]
   12a6b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12a6e:	c1 e0 09             	shl    eax,0x9
   12a71:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12a74:	01 c1                	add    ecx,eax
   12a76:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12a79:	01 c8                	add    eax,ecx
   12a7b:	2d 44 14 00 00       	sub    eax,0x1444
   12a80:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12a83:	88 84 15 b4 e9 ff ff 	mov    BYTE PTR [ebp+edx*1-0x164c],al
/home/yogi/src/os/chrisOS/src/bishell.c:269
                lTemp++;
   12a8a:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:266
            addrIsVirtual=true;
        }
        else if (params[cnt][0]=='/')
        {
            lTemp=1;
            while (ISDIGIT(params[cnt][lTemp]))
   12a8e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12a91:	c1 e0 09             	shl    eax,0x9
   12a94:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12a97:	8d 14 01             	lea    edx,[ecx+eax*1]
   12a9a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12a9d:	01 d0                	add    eax,edx
   12a9f:	2d 44 14 00 00       	sub    eax,0x1444
   12aa4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12aa7:	0f be c0             	movsx  eax,al
   12aaa:	83 e8 30             	sub    eax,0x30
   12aad:	83 f8 09             	cmp    eax,0x9
   12ab0:	76 b3                	jbe    12a65 <dumpP+0xd9>
/home/yogi/src/os/chrisOS/src/bishell.c:271
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
                lTemp++;
            }
            lCount=atoi(lTempS);
   12ab2:	83 ec 0c             	sub    esp,0xc
   12ab5:	8d 85 b4 e9 ff ff    	lea    eax,[ebp-0x164c]
   12abb:	50                   	push   eax
   12abc:	e8 44 2a 01 00       	call   25505 <atoi>
   12ac1:	83 c4 10             	add    esp,0x10
   12ac4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:272
            lCharSize=params[cnt][lTemp++];
   12ac7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12aca:	8d 50 01             	lea    edx,[eax+0x1]
   12acd:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12ad0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12ad3:	c1 e2 09             	shl    edx,0x9
   12ad6:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12ad9:	01 ca                	add    edx,ecx
   12adb:	01 d0                	add    eax,edx
   12add:	2d 44 14 00 00       	sub    eax,0x1444
   12ae2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12ae5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/chrisOS/src/bishell.c:273
            lCharType=params[cnt][lTemp++];
   12ae8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12aeb:	8d 50 01             	lea    edx,[eax+0x1]
   12aee:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12af1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12af4:	c1 e2 09             	shl    edx,0x9
   12af7:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12afa:	01 ca                	add    edx,ecx
   12afc:	01 d0                	add    eax,edx
   12afe:	2d 44 14 00 00       	sub    eax,0x1444
   12b03:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12b06:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
   12b09:	eb 74                	jmp    12b7f <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:275
        }
        else if (lAddress==0)
   12b0b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   12b0f:	75 23                	jne    12b34 <dumpP+0x1a8>
/home/yogi/src/os/chrisOS/src/bishell.c:277
        {
            lAddress=strtoul(params[cnt],0,16);
   12b11:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   12b17:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12b1a:	c1 e2 09             	shl    edx,0x9
   12b1d:	01 d0                	add    eax,edx
   12b1f:	83 ec 04             	sub    esp,0x4
   12b22:	6a 10                	push   0x10
   12b24:	6a 00                	push   0x0
   12b26:	50                   	push   eax
   12b27:	e8 70 4f 01 00       	call   27a9c <strtoul>
   12b2c:	83 c4 10             	add    esp,0x10
   12b2f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   12b32:	eb 4b                	jmp    12b7f <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:279
        }
        else if (params[cnt][0]!=0)
   12b34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12b37:	c1 e0 09             	shl    eax,0x9
   12b3a:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12b3d:	01 c8                	add    eax,ecx
   12b3f:	2d 44 14 00 00       	sub    eax,0x1444
   12b44:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12b47:	84 c0                	test   al,al
   12b49:	74 34                	je     12b7f <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:281
        {
            cr3=strtoul(params[cnt],0,16);
   12b4b:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   12b51:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12b54:	c1 e2 09             	shl    edx,0x9
   12b57:	01 d0                	add    eax,edx
   12b59:	83 ec 04             	sub    esp,0x4
   12b5c:	6a 10                	push   0x10
   12b5e:	6a 00                	push   0x0
   12b60:	50                   	push   eax
   12b61:	e8 36 4f 01 00       	call   27a9c <strtoul>
   12b66:	83 c4 10             	add    esp,0x10
   12b69:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/bishell.c:282
            printk("Using CR3=0x%08X",cr3);
   12b6c:	83 ec 08             	sub    esp,0x8
   12b6f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   12b72:	68 b9 5f 04 00       	push   0x45fb9
   12b77:	e8 27 4d 01 00       	call   278a3 <printk>
   12b7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:255 (discriminator 2)
    
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
    for (int cnt=0;cnt<=paramCount;cnt++)
   12b7f:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:255 (discriminator 1)
   12b83:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12b86:	3b 45 c4             	cmp    eax,DWORD PTR [ebp-0x3c]
   12b89:	0f 8e 70 fe ff ff    	jle    129ff <dumpP+0x73>
/home/yogi/src/os/chrisOS/src/bishell.c:291
//    {
//        printk("Converted 0x%08X to ",lAddress);
//        lAddress=__pa(lAddress);
//        printk("%0x%08X\n", lAddress);
//    }
    if (lCount>65535)
   12b8f:	81 7d f4 ff ff 00 00 	cmp    DWORD PTR [ebp-0xc],0xffff
   12b96:	7e 18                	jle    12bb0 <dumpP+0x224>
/home/yogi/src/os/chrisOS/src/bishell.c:293
    {
        printk("\nError: Count is too large (%u), max is 500, can't dump", lCount);
   12b98:	83 ec 08             	sub    esp,0x8
   12b9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12b9e:	68 cc 5f 04 00       	push   0x45fcc
   12ba3:	e8 fb 4c 01 00       	call   278a3 <printk>
   12ba8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:294
        return;
   12bab:	e9 1d 05 00 00       	jmp    130cd <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:296
    }
    if (lCharSize!='b' && lCharSize!='h' && lCharSize!='w' && lCharSize!='d')
   12bb0:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12bb4:	74 2c                	je     12be2 <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:296 (discriminator 1)
   12bb6:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12bba:	74 26                	je     12be2 <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:296 (discriminator 2)
   12bbc:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12bc0:	74 20                	je     12be2 <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:296 (discriminator 3)
   12bc2:	80 7d ee 64          	cmp    BYTE PTR [ebp-0x12],0x64
   12bc6:	74 1a                	je     12be2 <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:298
    {
        printk("\nError: Character size (%c) must be in bhwd", lCharSize);
   12bc8:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12bcc:	83 ec 08             	sub    esp,0x8
   12bcf:	50                   	push   eax
   12bd0:	68 04 60 04 00       	push   0x46004
   12bd5:	e8 c9 4c 01 00       	call   278a3 <printk>
   12bda:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:299
        return;
   12bdd:	e9 eb 04 00 00       	jmp    130cd <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:301
    }
    if (lCharType!='x' && lCharType!='c' && lCharType!='e')
   12be2:	80 7d ef 78          	cmp    BYTE PTR [ebp-0x11],0x78
   12be6:	74 26                	je     12c0e <dumpP+0x282>
/home/yogi/src/os/chrisOS/src/bishell.c:301 (discriminator 1)
   12be8:	80 7d ef 63          	cmp    BYTE PTR [ebp-0x11],0x63
   12bec:	74 20                	je     12c0e <dumpP+0x282>
/home/yogi/src/os/chrisOS/src/bishell.c:301 (discriminator 2)
   12bee:	80 7d ef 65          	cmp    BYTE PTR [ebp-0x11],0x65
   12bf2:	74 1a                	je     12c0e <dumpP+0x282>
/home/yogi/src/os/chrisOS/src/bishell.c:303
    {
        printk("\nError: Character type (%c) must be in xce", lCharType);
   12bf4:	0f be 45 ef          	movsx  eax,BYTE PTR [ebp-0x11]
   12bf8:	83 ec 08             	sub    esp,0x8
   12bfb:	50                   	push   eax
   12bfc:	68 30 60 04 00       	push   0x46030
   12c01:	e8 9d 4c 01 00       	call   278a3 <printk>
   12c06:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:304
        return;
   12c09:	e9 bf 04 00 00       	jmp    130cd <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:312
    {
        printk("Error: Requested address (0x%08X) or address+count (0x%08X) > memory size ()", lAddress, lAddress+lCount);
        return;
    }*/
    
    if (cr3!=0)
   12c0e:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   12c12:	74 37                	je     12c4b <dumpP+0x2bf>
/home/yogi/src/os/chrisOS/src/bishell.c:314
    {
        lAddress=(kPagingGet4kPTEntryValueCR3(cr3,lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF) ;
   12c14:	83 ec 08             	sub    esp,0x8
   12c17:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12c1a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   12c1d:	e8 de e8 ff ff       	call   11500 <kPagingGet4kPTEntryValueCR3>
   12c22:	83 c4 10             	add    esp,0x10
   12c25:	25 00 f0 ff ff       	and    eax,0xfffff000
   12c2a:	89 c2                	mov    edx,eax
   12c2c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12c2f:	25 ff 0f 00 00       	and    eax,0xfff
   12c34:	09 d0                	or     eax,edx
   12c36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:315
        printk(", physical address is 0x%08X\n");
   12c39:	83 ec 0c             	sub    esp,0xc
   12c3c:	68 5b 60 04 00       	push   0x4605b
   12c41:	e8 5d 4c 01 00       	call   278a3 <printk>
   12c46:	83 c4 10             	add    esp,0x10
   12c49:	eb 10                	jmp    12c5b <dumpP+0x2cf>
/home/yogi/src/os/chrisOS/src/bishell.c:318
    }
    else
        printk("\n");
   12c4b:	83 ec 0c             	sub    esp,0xc
   12c4e:	68 79 60 04 00       	push   0x46079
   12c53:	e8 4b 4c 01 00       	call   278a3 <printk>
   12c58:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:320
    
    printk("dump");
   12c5b:	83 ec 0c             	sub    esp,0xc
   12c5e:	68 7b 60 04 00       	push   0x4607b
   12c63:	e8 3b 4c 01 00       	call   278a3 <printk>
   12c68:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:321
    if (addrIsVirtual)
   12c6b:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   12c6f:	74 12                	je     12c83 <dumpP+0x2f7>
/home/yogi/src/os/chrisOS/src/bishell.c:322
        printk("V");
   12c71:	83 ec 0c             	sub    esp,0xc
   12c74:	68 80 60 04 00       	push   0x46080
   12c79:	e8 25 4c 01 00       	call   278a3 <printk>
   12c7e:	83 c4 10             	add    esp,0x10
   12c81:	eb 10                	jmp    12c93 <dumpP+0x307>
/home/yogi/src/os/chrisOS/src/bishell.c:324
    else
        printk("P");
   12c83:	83 ec 0c             	sub    esp,0xc
   12c86:	68 82 60 04 00       	push   0x46082
   12c8b:	e8 13 4c 01 00       	call   278a3 <printk>
   12c90:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:325
    printk(": Dumping %u %c (%c) from 0x%08X\n", lCount, lCharSize , lCharType, lAddress);
   12c93:	0f be 55 ef          	movsx  edx,BYTE PTR [ebp-0x11]
   12c97:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12c9b:	83 ec 0c             	sub    esp,0xc
   12c9e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12ca1:	52                   	push   edx
   12ca2:	50                   	push   eax
   12ca3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12ca6:	68 84 60 04 00       	push   0x46084
   12cab:	e8 f3 4b 01 00       	call   278a3 <printk>
   12cb0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:326
    uint8_t* mem=(uint8_t*)lAddress;
   12cb3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12cb6:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
/home/yogi/src/os/chrisOS/src/bishell.c:327
    uint16_t* memw=(uint16_t*)lAddress;
   12cb9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12cbc:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
/home/yogi/src/os/chrisOS/src/bishell.c:328
    uint32_t* memd=(uint32_t*)lAddress;
   12cbf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12cc2:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
/home/yogi/src/os/chrisOS/src/bishell.c:329
    uint32_t* memq=(uint32_t*)lAddress;
   12cc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12cc8:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:330
    int lineCount=0;
   12ccb:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:332
    int lEntriesPerLine;
    if (lCharSize=='b')
   12cd2:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12cd6:	75 07                	jne    12cdf <dumpP+0x353>
/home/yogi/src/os/chrisOS/src/bishell.c:333
        lEntriesPerLine=15;
   12cd8:	c7 45 d4 0f 00 00 00 	mov    DWORD PTR [ebp-0x2c],0xf
/home/yogi/src/os/chrisOS/src/bishell.c:334
    if (lCharSize=='h')
   12cdf:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12ce3:	75 09                	jne    12cee <dumpP+0x362>
/home/yogi/src/os/chrisOS/src/bishell.c:335
        lEntriesPerLine=8;
   12ce5:	c7 45 d4 08 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x8
   12cec:	eb 16                	jmp    12d04 <dumpP+0x378>
/home/yogi/src/os/chrisOS/src/bishell.c:336
    else if (lCharSize=='w')
   12cee:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12cf2:	75 09                	jne    12cfd <dumpP+0x371>
/home/yogi/src/os/chrisOS/src/bishell.c:337
        lEntriesPerLine=4;
   12cf4:	c7 45 d4 04 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x4
   12cfb:	eb 07                	jmp    12d04 <dumpP+0x378>
/home/yogi/src/os/chrisOS/src/bishell.c:339
    else
        lEntriesPerLine=3;
   12cfd:	c7 45 d4 03 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x3
/home/yogi/src/os/chrisOS/src/bishell.c:340
    lTemp=0; //column
   12d04:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:341
    if (!addrIsVirtual)
   12d0b:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   12d0f:	83 f0 01             	xor    eax,0x1
   12d12:	84 c0                	test   al,al
   12d14:	74 17                	je     12d2d <dumpP+0x3a1>
/home/yogi/src/os/chrisOS/src/bishell.c:343
    {
        SWITCH_TO_NON_KERNEL_DATA_AND_STACK
   12d16:	50                   	push   eax
   12d17:	b8 18 00 00 00       	mov    eax,0x18
   12d1c:	8e d8                	mov    ds,eax
   12d1e:	8e c0                	mov    es,eax
   12d20:	8e e0                	mov    fs,eax
   12d22:	8e e8                	mov    gs,eax
   12d24:	8e d0                	mov    ss,eax
   12d26:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:344
        __asm__("cli\n");
   12d27:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/bishell.c:345
        doNonPagingJump();
   12d28:	e8 11 e6 fe ff       	call   133e <doNonPagingJump>
/home/yogi/src/os/chrisOS/src/bishell.c:347
    }
    if (lCharSize=='b')
   12d2d:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12d31:	0f 85 10 02 00 00    	jne    12f47 <dumpP+0x5bb>
/home/yogi/src/os/chrisOS/src/bishell.c:349
    {
        printk("%08X:\t", &mem[0]);
   12d37:	83 ec 08             	sub    esp,0x8
   12d3a:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
   12d3d:	68 a6 60 04 00       	push   0x460a6
   12d42:	e8 5c 4b 01 00       	call   278a3 <printk>
   12d47:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:350
        for (int cnt=0;cnt<lCount;cnt++)
   12d4a:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
   12d51:	e9 e3 01 00 00       	jmp    12f39 <dumpP+0x5ad>
/home/yogi/src/os/chrisOS/src/bishell.c:353
        {
            //After every 16 bytes, print the character values, a newline, and the start address of the next 16 bytes
            if (lTemp==16)
   12d56:	83 7d e8 10          	cmp    DWORD PTR [ebp-0x18],0x10
   12d5a:	0f 85 81 01 00 00    	jne    12ee1 <dumpP+0x555>
/home/yogi/src/os/chrisOS/src/bishell.c:355
            {
                puts(" ");
   12d60:	83 ec 0c             	sub    esp,0xc
   12d63:	68 ad 60 04 00       	push   0x460ad
   12d68:	e8 f9 56 00 00       	call   18466 <puts>
   12d6d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:356
                for (int cnt2=0;cnt2<16;cnt2++)
   12d70:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
   12d77:	e9 05 01 00 00       	jmp    12e81 <dumpP+0x4f5>
/home/yogi/src/os/chrisOS/src/bishell.c:358
                {
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96) || (lTempS[cnt2]>=58&&lTempS[cnt2]<=64) )
   12d7c:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d82:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d85:	01 d0                	add    eax,edx
   12d87:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d8a:	83 c8 20             	or     eax,0x20
   12d8d:	0f be c0             	movsx  eax,al
   12d90:	83 e8 61             	sub    eax,0x61
   12d93:	83 f8 19             	cmp    eax,0x19
   12d96:	0f 86 ad 00 00 00    	jbe    12e49 <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:358 (discriminator 1)
   12d9c:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12da2:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12da5:	01 d0                	add    eax,edx
   12da7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12daa:	0f be c0             	movsx  eax,al
   12dad:	83 e8 30             	sub    eax,0x30
   12db0:	83 f8 09             	cmp    eax,0x9
   12db3:	0f 86 90 00 00 00    	jbe    12e49 <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:358 (discriminator 2)
   12db9:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12dbf:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12dc2:	01 d0                	add    eax,edx
   12dc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12dc7:	3c 1f                	cmp    al,0x1f
   12dc9:	7e 12                	jle    12ddd <dumpP+0x451>
/home/yogi/src/os/chrisOS/src/bishell.c:358 (discriminator 3)
   12dcb:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12dd1:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12dd4:	01 d0                	add    eax,edx
   12dd6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12dd9:	3c 2f                	cmp    al,0x2f
   12ddb:	7e 6c                	jle    12e49 <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:358 (discriminator 5)
   12ddd:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12de3:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12de6:	01 d0                	add    eax,edx
   12de8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12deb:	3c 7a                	cmp    al,0x7a
   12ded:	7e 12                	jle    12e01 <dumpP+0x475>
/home/yogi/src/os/chrisOS/src/bishell.c:358 (discriminator 6)
   12def:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12df5:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12df8:	01 d0                	add    eax,edx
   12dfa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12dfd:	3c 7f                	cmp    al,0x7f
   12dff:	75 48                	jne    12e49 <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:358 (discriminator 8)
   12e01:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12e07:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e0a:	01 d0                	add    eax,edx
   12e0c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12e0f:	3c 5a                	cmp    al,0x5a
   12e11:	7e 12                	jle    12e25 <dumpP+0x499>
/home/yogi/src/os/chrisOS/src/bishell.c:358 (discriminator 9)
   12e13:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12e19:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e1c:	01 d0                	add    eax,edx
   12e1e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12e21:	3c 60                	cmp    al,0x60
   12e23:	7e 24                	jle    12e49 <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:358 (discriminator 11)
   12e25:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12e2b:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e2e:	01 d0                	add    eax,edx
   12e30:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12e33:	3c 39                	cmp    al,0x39
   12e35:	7e 36                	jle    12e6d <dumpP+0x4e1>
/home/yogi/src/os/chrisOS/src/bishell.c:358 (discriminator 12)
   12e37:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12e3d:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e40:	01 d0                	add    eax,edx
   12e42:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12e45:	3c 40                	cmp    al,0x40
   12e47:	7f 24                	jg     12e6d <dumpP+0x4e1>
/home/yogi/src/os/chrisOS/src/bishell.c:359
                        printk("%c",lTempS[cnt2]);
   12e49:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12e4f:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e52:	01 d0                	add    eax,edx
   12e54:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12e57:	0f be c0             	movsx  eax,al
   12e5a:	83 ec 08             	sub    esp,0x8
   12e5d:	50                   	push   eax
   12e5e:	68 af 60 04 00       	push   0x460af
   12e63:	e8 3b 4a 01 00       	call   278a3 <printk>
   12e68:	83 c4 10             	add    esp,0x10
   12e6b:	eb 10                	jmp    12e7d <dumpP+0x4f1>
/home/yogi/src/os/chrisOS/src/bishell.c:361
                    else
                        puts(".");
   12e6d:	83 ec 0c             	sub    esp,0xc
   12e70:	68 b2 60 04 00       	push   0x460b2
   12e75:	e8 ec 55 00 00       	call   18466 <puts>
   12e7a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:356 (discriminator 2)
        {
            //After every 16 bytes, print the character values, a newline, and the start address of the next 16 bytes
            if (lTemp==16)
            {
                puts(" ");
                for (int cnt2=0;cnt2<16;cnt2++)
   12e7d:	83 45 cc 01          	add    DWORD PTR [ebp-0x34],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:356 (discriminator 1)
   12e81:	83 7d cc 0f          	cmp    DWORD PTR [ebp-0x34],0xf
   12e85:	0f 8e f1 fe ff ff    	jle    12d7c <dumpP+0x3f0>
/home/yogi/src/os/chrisOS/src/bishell.c:363
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96) || (lTempS[cnt2]>=58&&lTempS[cnt2]<=64) )
                        printk("%c",lTempS[cnt2]);
                    else
                        puts(".");
                }
                puts("\n");
   12e8b:	83 ec 0c             	sub    esp,0xc
   12e8e:	68 79 60 04 00       	push   0x46079
   12e93:	e8 ce 55 00 00       	call   18466 <puts>
   12e98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:364
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12e9b:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
   12e9f:	83 7d d8 31          	cmp    DWORD PTR [ebp-0x28],0x31
   12ea3:	75 1c                	jne    12ec1 <dumpP+0x535>
/home/yogi/src/os/chrisOS/src/bishell.c:366
                {
                    if (pauseDisplay(true))
   12ea5:	83 ec 0c             	sub    esp,0xc
   12ea8:	6a 01                	push   0x1
   12eaa:	e8 ac 30 01 00       	call   25f5b <pauseDisplay>
   12eaf:	83 c4 10             	add    esp,0x10
   12eb2:	84 c0                	test   al,al
   12eb4:	0f 85 a2 00 00 00    	jne    12f5c <dumpP+0x5d0>
/home/yogi/src/os/chrisOS/src/bishell.c:368
                        break;
                    lineCount=0;
   12eba:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:370
                }
                printk("%08X:\t", &mem[cnt]);
   12ec1:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
   12ec4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12ec7:	01 d0                	add    eax,edx
   12ec9:	83 ec 08             	sub    esp,0x8
   12ecc:	50                   	push   eax
   12ecd:	68 a6 60 04 00       	push   0x460a6
   12ed2:	e8 cc 49 01 00       	call   278a3 <printk>
   12ed7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:371
                lTemp=0;
   12eda:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:373
            }
            printk("%02X ",mem[cnt]);
   12ee1:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
   12ee4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12ee7:	01 d0                	add    eax,edx
   12ee9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12eec:	0f b6 c0             	movzx  eax,al
   12eef:	83 ec 08             	sub    esp,0x8
   12ef2:	50                   	push   eax
   12ef3:	68 b4 60 04 00       	push   0x460b4
   12ef8:	e8 a6 49 01 00       	call   278a3 <printk>
   12efd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:374
            lTempS[lTemp++]=mem[cnt];
   12f00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12f03:	8d 50 01             	lea    edx,[eax+0x1]
   12f06:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12f09:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
   12f0c:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
   12f0f:	01 ca                	add    edx,ecx
   12f11:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12f14:	88 94 05 b4 e9 ff ff 	mov    BYTE PTR [ebp+eax*1-0x164c],dl
/home/yogi/src/os/chrisOS/src/bishell.c:375
            if (lTemp%4==0)
   12f1b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12f1e:	83 e0 03             	and    eax,0x3
   12f21:	85 c0                	test   eax,eax
   12f23:	75 10                	jne    12f35 <dumpP+0x5a9>
/home/yogi/src/os/chrisOS/src/bishell.c:376
                printk(" ");
   12f25:	83 ec 0c             	sub    esp,0xc
   12f28:	68 ad 60 04 00       	push   0x460ad
   12f2d:	e8 71 49 01 00       	call   278a3 <printk>
   12f32:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:350 (discriminator 2)
        doNonPagingJump();
    }
    if (lCharSize=='b')
    {
        printk("%08X:\t", &mem[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12f35:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:350 (discriminator 1)
   12f39:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12f3c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   12f3f:	0f 8c 11 fe ff ff    	jl     12d56 <dumpP+0x3ca>
   12f45:	eb 16                	jmp    12f5d <dumpP+0x5d1>
/home/yogi/src/os/chrisOS/src/bishell.c:380
            if (lTemp%4==0)
                printk(" ");
        }
    }
    else
        printk("%08X:", &memw[0]);
   12f47:	83 ec 08             	sub    esp,0x8
   12f4a:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
   12f4d:	68 ba 60 04 00       	push   0x460ba
   12f52:	e8 4c 49 01 00       	call   278a3 <printk>
   12f57:	83 c4 10             	add    esp,0x10
   12f5a:	eb 01                	jmp    12f5d <dumpP+0x5d1>
/home/yogi/src/os/chrisOS/src/bishell.c:367
                }
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   12f5c:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:381
                printk(" ");
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12f5d:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
   12f64:	e9 0f 01 00 00       	jmp    13078 <dumpP+0x6ec>
/home/yogi/src/os/chrisOS/src/bishell.c:383
        {
            if (lTemp==lEntriesPerLine)
   12f69:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12f6c:	3b 45 d4             	cmp    eax,DWORD PTR [ebp-0x2c]
   12f6f:	0f 85 a9 00 00 00    	jne    1301e <dumpP+0x692>
/home/yogi/src/os/chrisOS/src/bishell.c:385
            {
                puts("\n");
   12f75:	83 ec 0c             	sub    esp,0xc
   12f78:	68 79 60 04 00       	push   0x46079
   12f7d:	e8 e4 54 00 00       	call   18466 <puts>
   12f82:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:386
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12f85:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
   12f89:	83 7d d8 31          	cmp    DWORD PTR [ebp-0x28],0x31
   12f8d:	75 1c                	jne    12fab <dumpP+0x61f>
/home/yogi/src/os/chrisOS/src/bishell.c:388
                {
                    if (pauseDisplay(true))
   12f8f:	83 ec 0c             	sub    esp,0xc
   12f92:	6a 01                	push   0x1
   12f94:	e8 c2 2f 01 00       	call   25f5b <pauseDisplay>
   12f99:	83 c4 10             	add    esp,0x10
   12f9c:	84 c0                	test   al,al
   12f9e:	0f 85 e2 00 00 00    	jne    13086 <dumpP+0x6fa>
/home/yogi/src/os/chrisOS/src/bishell.c:390
                        break;
                    lineCount=0;
   12fa4:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:392
                }
                lTemp=0;
   12fab:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:393
                if (lCharSize=='h')
   12fb2:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12fb6:	75 1e                	jne    12fd6 <dumpP+0x64a>
/home/yogi/src/os/chrisOS/src/bishell.c:394
                    printk("%08X:", &memw[cnt]);
   12fb8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12fbb:	8d 14 00             	lea    edx,[eax+eax*1]
   12fbe:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   12fc1:	01 d0                	add    eax,edx
   12fc3:	83 ec 08             	sub    esp,0x8
   12fc6:	50                   	push   eax
   12fc7:	68 ba 60 04 00       	push   0x460ba
   12fcc:	e8 d2 48 01 00       	call   278a3 <printk>
   12fd1:	83 c4 10             	add    esp,0x10
   12fd4:	eb 48                	jmp    1301e <dumpP+0x692>
/home/yogi/src/os/chrisOS/src/bishell.c:395
                else if (lCharSize=='w')
   12fd6:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12fda:	75 22                	jne    12ffe <dumpP+0x672>
/home/yogi/src/os/chrisOS/src/bishell.c:396
                    printk("%08X:", &memd[cnt]);
   12fdc:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12fdf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12fe6:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   12fe9:	01 d0                	add    eax,edx
   12feb:	83 ec 08             	sub    esp,0x8
   12fee:	50                   	push   eax
   12fef:	68 ba 60 04 00       	push   0x460ba
   12ff4:	e8 aa 48 01 00       	call   278a3 <printk>
   12ff9:	83 c4 10             	add    esp,0x10
   12ffc:	eb 20                	jmp    1301e <dumpP+0x692>
/home/yogi/src/os/chrisOS/src/bishell.c:398
                else
                    printk("%08X:", &memq[cnt]);
   12ffe:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   13001:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   13008:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   1300b:	01 d0                	add    eax,edx
   1300d:	83 ec 08             	sub    esp,0x8
   13010:	50                   	push   eax
   13011:	68 ba 60 04 00       	push   0x460ba
   13016:	e8 88 48 01 00       	call   278a3 <printk>
   1301b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:400
            }
            if (lCharSize=='h')
   1301e:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   13022:	75 24                	jne    13048 <dumpP+0x6bc>
/home/yogi/src/os/chrisOS/src/bishell.c:401
                printk("%04X ",memw[cnt]);
   13024:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   13027:	8d 14 00             	lea    edx,[eax+eax*1]
   1302a:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   1302d:	01 d0                	add    eax,edx
   1302f:	0f b7 00             	movzx  eax,WORD PTR [eax]
   13032:	0f b7 c0             	movzx  eax,ax
   13035:	83 ec 08             	sub    esp,0x8
   13038:	50                   	push   eax
   13039:	68 c0 60 04 00       	push   0x460c0
   1303e:	e8 60 48 01 00       	call   278a3 <printk>
   13043:	83 c4 10             	add    esp,0x10
   13046:	eb 28                	jmp    13070 <dumpP+0x6e4>
/home/yogi/src/os/chrisOS/src/bishell.c:402
            else if (lCharSize=='w')
   13048:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   1304c:	75 22                	jne    13070 <dumpP+0x6e4>
/home/yogi/src/os/chrisOS/src/bishell.c:403
                printk("%08X ", memd[cnt]);
   1304e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   13051:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   13058:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   1305b:	01 d0                	add    eax,edx
   1305d:	8b 00                	mov    eax,DWORD PTR [eax]
   1305f:	83 ec 08             	sub    esp,0x8
   13062:	50                   	push   eax
   13063:	68 c6 60 04 00       	push   0x460c6
   13068:	e8 36 48 01 00       	call   278a3 <printk>
   1306d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:404 (discriminator 2)
            lTemp++;
   13070:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:381 (discriminator 2)
                printk(" ");
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   13074:	83 45 c8 01          	add    DWORD PTR [ebp-0x38],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:381 (discriminator 1)
   13078:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   1307b:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1307e:	0f 8c e5 fe ff ff    	jl     12f69 <dumpP+0x5dd>
   13084:	eb 01                	jmp    13087 <dumpP+0x6fb>
/home/yogi/src/os/chrisOS/src/bishell.c:389
            {
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   13086:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:406
                printk("%04X ",memw[cnt]);
            else if (lCharSize=='w')
                printk("%08X ", memd[cnt]);
            lTemp++;
        }
    puts("\n");
   13087:	83 ec 0c             	sub    esp,0xc
   1308a:	68 79 60 04 00       	push   0x46079
   1308f:	e8 d2 53 00 00       	call   18466 <puts>
   13094:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:407
    if (!addrIsVirtual)
   13097:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   1309b:	83 f0 01             	xor    eax,0x1
   1309e:	84 c0                	test   al,al
   130a0:	74 2b                	je     130cd <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:409
    {
        __asm__("push eax\nmov eax,cr0\n or eax,0x80000000\n mov cr0,eax\nljmp 0x20:pEnableJmp\npEnableJmp:pop eax\n");
   130a2:	50                   	push   eax
   130a3:	0f 20 c0             	mov    eax,cr0
   130a6:	0d 00 00 00 80       	or     eax,0x80000000
   130ab:	0f 22 c0             	mov    cr0,eax
   130ae:	ea b5 30 01 00 20 00 	jmp    0x20:0x130b5

000130b5 <pEnableJmp>:
   130b5:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:410
       doPagingJump();
   130b6:	e8 6c e2 fe ff       	call   1327 <doPagingJump>
/home/yogi/src/os/chrisOS/src/bishell.c:411
        SWITCH_TO_KERNEL_DATA_AND_STACK
   130bb:	50                   	push   eax
   130bc:	b8 10 00 00 00       	mov    eax,0x10
   130c1:	8e d8                	mov    ds,eax
   130c3:	8e c0                	mov    es,eax
   130c5:	8e e0                	mov    fs,eax
   130c7:	8e e8                	mov    gs,eax
   130c9:	8e d0                	mov    ss,eax
   130cb:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:412
        __asm__("sti\n");
   130cc:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/bishell.c:414
    }
}
   130cd:	c9                   	leave  
   130ce:	c3                   	ret    

000130cf <dumpV>:
dumpV():
/home/yogi/src/os/chrisOS/src/bishell.c:417

void HIGH_CODE_SECTION dumpV(char* cmdline)
{
   130cf:	55                   	push   ebp
   130d0:	89 e5                	mov    ebp,esp
   130d2:	81 ec 08 02 00 00    	sub    esp,0x208
/home/yogi/src/os/chrisOS/src/bishell.c:419
    char newCmdLine[MAX_PARAM_WIDTH];
    strcpy(newCmdLine,cmdline);
   130d8:	83 ec 08             	sub    esp,0x8
   130db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   130de:	8d 85 f8 fd ff ff    	lea    eax,[ebp-0x208]
   130e4:	50                   	push   eax
   130e5:	e8 1a 49 01 00       	call   27a04 <strcpy>
   130ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:420
    strcat(newCmdLine," v");
   130ed:	83 ec 08             	sub    esp,0x8
   130f0:	68 cc 60 04 00       	push   0x460cc
   130f5:	8d 85 f8 fd ff ff    	lea    eax,[ebp-0x208]
   130fb:	50                   	push   eax
   130fc:	e8 1b 48 01 00       	call   2791c <strcat>
   13101:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:421
    dumpP(newCmdLine);
   13104:	83 ec 0c             	sub    esp,0xc
   13107:	8d 85 f8 fd ff ff    	lea    eax,[ebp-0x208]
   1310d:	50                   	push   eax
   1310e:	e8 79 f8 ff ff       	call   1298c <dumpP>
   13113:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:422
}
   13116:	90                   	nop
   13117:	c9                   	leave  
   13118:	c3                   	ret    

00013119 <helpMe>:
helpMe():
/home/yogi/src/os/chrisOS/src/bishell.c:425

void HIGH_CODE_SECTION helpMe()
{
   13119:	55                   	push   ebp
   1311a:	89 e5                	mov    ebp,esp
   1311c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/bishell.c:426
    printk("Help:\n");
   1311f:	83 ec 0c             	sub    esp,0xc
   13122:	68 cf 60 04 00       	push   0x460cf
   13127:	e8 77 47 01 00       	call   278a3 <printk>
   1312c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:427
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   1312f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   13136:	eb 30                	jmp    13168 <helpMe+0x4f>
/home/yogi/src/os/chrisOS/src/bishell.c:428 (discriminator 3)
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
   13138:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1313b:	c1 e0 04             	shl    eax,0x4
   1313e:	05 04 90 02 00       	add    eax,0x29004
   13143:	8b 10                	mov    edx,DWORD PTR [eax]
   13145:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13148:	c1 e0 04             	shl    eax,0x4
   1314b:	05 00 90 02 00       	add    eax,0x29000
   13150:	8b 00                	mov    eax,DWORD PTR [eax]
   13152:	83 ec 04             	sub    esp,0x4
   13155:	52                   	push   edx
   13156:	50                   	push   eax
   13157:	68 d6 60 04 00       	push   0x460d6
   1315c:	e8 42 47 01 00       	call   278a3 <printk>
   13161:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:427 (discriminator 3)
}

void HIGH_CODE_SECTION helpMe()
{
    printk("Help:\n");
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   13164:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:427 (discriminator 1)
   13168:	83 7d f4 1c          	cmp    DWORD PTR [ebp-0xc],0x1c
   1316c:	76 ca                	jbe    13138 <helpMe+0x1f>
/home/yogi/src/os/chrisOS/src/bishell.c:429
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
}
   1316e:	90                   	nop
   1316f:	c9                   	leave  
   13170:	c3                   	ret    

00013171 <inPortB>:
inPortB():
/home/yogi/src/os/chrisOS/src/bishell.c:432

void HIGH_CODE_SECTION inPortB(char* cmdline)
{
   13171:	55                   	push   ebp
   13172:	89 e5                	mov    ebp,esp
   13174:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:434
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1317a:	83 ec 04             	sub    esp,0x4
   1317d:	68 00 14 00 00       	push   0x1400
   13182:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   13188:	50                   	push   eax
   13189:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1318c:	e8 cb f3 ff ff       	call   1255c <parseParamsShell>
   13191:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:436
   
   uint8_t inVal=inb(strtoul(params[0],0,16));
   13194:	83 ec 04             	sub    esp,0x4
   13197:	6a 10                	push   0x10
   13199:	6a 00                	push   0x0
   1319b:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   131a1:	50                   	push   eax
   131a2:	e8 f5 48 01 00       	call   27a9c <strtoul>
   131a7:	83 c4 10             	add    esp,0x10
   131aa:	0f b7 c0             	movzx  eax,ax
   131ad:	83 ec 0c             	sub    esp,0xc
   131b0:	50                   	push   eax
   131b1:	e8 43 f1 ff ff       	call   122f9 <inb>
   131b6:	83 c4 10             	add    esp,0x10
   131b9:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:437
   printk("0x%02X\n",inVal);
   131bc:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   131c0:	83 ec 08             	sub    esp,0x8
   131c3:	50                   	push   eax
   131c4:	68 df 60 04 00       	push   0x460df
   131c9:	e8 d5 46 01 00       	call   278a3 <printk>
   131ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:438
}
   131d1:	90                   	nop
   131d2:	c9                   	leave  
   131d3:	c3                   	ret    

000131d4 <inPortW>:
inPortW():
/home/yogi/src/os/chrisOS/src/bishell.c:441

void HIGH_CODE_SECTION inPortW(char* cmdline)
{
   131d4:	55                   	push   ebp
   131d5:	89 e5                	mov    ebp,esp
   131d7:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:443
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   131dd:	83 ec 04             	sub    esp,0x4
   131e0:	68 00 14 00 00       	push   0x1400
   131e5:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   131eb:	50                   	push   eax
   131ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   131ef:	e8 68 f3 ff ff       	call   1255c <parseParamsShell>
   131f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:445
   
   uint8_t inVal=inw(strtoul(params[0],0,16));
   131f7:	83 ec 04             	sub    esp,0x4
   131fa:	6a 10                	push   0x10
   131fc:	6a 00                	push   0x0
   131fe:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   13204:	50                   	push   eax
   13205:	e8 92 48 01 00       	call   27a9c <strtoul>
   1320a:	83 c4 10             	add    esp,0x10
   1320d:	0f b7 c0             	movzx  eax,ax
   13210:	83 ec 0c             	sub    esp,0xc
   13213:	50                   	push   eax
   13214:	e8 fd f0 ff ff       	call   12316 <inw>
   13219:	83 c4 10             	add    esp,0x10
   1321c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:446
   printk("0x%04X\n",inVal);
   1321f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   13223:	83 ec 08             	sub    esp,0x8
   13226:	50                   	push   eax
   13227:	68 e7 60 04 00       	push   0x460e7
   1322c:	e8 72 46 01 00       	call   278a3 <printk>
   13231:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:447
}
   13234:	90                   	nop
   13235:	c9                   	leave  
   13236:	c3                   	ret    

00013237 <inPortD>:
inPortD():
/home/yogi/src/os/chrisOS/src/bishell.c:450

void HIGH_CODE_SECTION inPortD(char* cmdline)
{
   13237:	55                   	push   ebp
   13238:	89 e5                	mov    ebp,esp
   1323a:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:452
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13240:	83 ec 04             	sub    esp,0x4
   13243:	68 00 14 00 00       	push   0x1400
   13248:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   1324e:	50                   	push   eax
   1324f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13252:	e8 05 f3 ff ff       	call   1255c <parseParamsShell>
   13257:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:454
   
   uint8_t inVal=inl(strtoul(params[0],0,16));
   1325a:	83 ec 04             	sub    esp,0x4
   1325d:	6a 10                	push   0x10
   1325f:	6a 00                	push   0x0
   13261:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   13267:	50                   	push   eax
   13268:	e8 2f 48 01 00       	call   27a9c <strtoul>
   1326d:	83 c4 10             	add    esp,0x10
   13270:	0f b7 c0             	movzx  eax,ax
   13273:	83 ec 0c             	sub    esp,0xc
   13276:	50                   	push   eax
   13277:	e8 b9 f0 ff ff       	call   12335 <inl>
   1327c:	83 c4 10             	add    esp,0x10
   1327f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:455
   printk("0x%08X\n",inVal);
   13282:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   13286:	83 ec 08             	sub    esp,0x8
   13289:	50                   	push   eax
   1328a:	68 ef 60 04 00       	push   0x460ef
   1328f:	e8 0f 46 01 00       	call   278a3 <printk>
   13294:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:456
}
   13297:	90                   	nop
   13298:	c9                   	leave  
   13299:	c3                   	ret    

0001329a <outPortB>:
outPortB():
/home/yogi/src/os/chrisOS/src/bishell.c:459

void HIGH_CODE_SECTION outPortB(char* cmdline)
{
   1329a:	55                   	push   ebp
   1329b:	89 e5                	mov    ebp,esp
   1329d:	53                   	push   ebx
   1329e:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:461
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   132a4:	83 ec 04             	sub    esp,0x4
   132a7:	68 00 14 00 00       	push   0x1400
   132ac:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   132b2:	50                   	push   eax
   132b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   132b6:	e8 a1 f2 ff ff       	call   1255c <parseParamsShell>
   132bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:463
   
   outb(strtoul(params[0],0,16),strtoul(params[1],0,16));
   132be:	83 ec 04             	sub    esp,0x4
   132c1:	6a 10                	push   0x10
   132c3:	6a 00                	push   0x0
   132c5:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   132cb:	05 00 02 00 00       	add    eax,0x200
   132d0:	50                   	push   eax
   132d1:	e8 c6 47 01 00       	call   27a9c <strtoul>
   132d6:	83 c4 10             	add    esp,0x10
   132d9:	0f b6 d8             	movzx  ebx,al
   132dc:	83 ec 04             	sub    esp,0x4
   132df:	6a 10                	push   0x10
   132e1:	6a 00                	push   0x0
   132e3:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   132e9:	50                   	push   eax
   132ea:	e8 ad 47 01 00       	call   27a9c <strtoul>
   132ef:	83 c4 10             	add    esp,0x10
   132f2:	0f b7 c0             	movzx  eax,ax
   132f5:	83 ec 08             	sub    esp,0x8
   132f8:	53                   	push   ebx
   132f9:	50                   	push   eax
   132fa:	e8 a2 ef ff ff       	call   122a1 <outb>
   132ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:464
}
   13302:	90                   	nop
   13303:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13306:	c9                   	leave  
   13307:	c3                   	ret    

00013308 <outPortW>:
outPortW():
/home/yogi/src/os/chrisOS/src/bishell.c:467

void HIGH_CODE_SECTION outPortW(char* cmdline)
{
   13308:	55                   	push   ebp
   13309:	89 e5                	mov    ebp,esp
   1330b:	53                   	push   ebx
   1330c:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:469
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13312:	83 ec 04             	sub    esp,0x4
   13315:	68 00 14 00 00       	push   0x1400
   1331a:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13320:	50                   	push   eax
   13321:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13324:	e8 33 f2 ff ff       	call   1255c <parseParamsShell>
   13329:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:471
   
   outw(strtoul(params[0],0,16),strtoul(params[1],0,16));
   1332c:	83 ec 04             	sub    esp,0x4
   1332f:	6a 10                	push   0x10
   13331:	6a 00                	push   0x0
   13333:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13339:	05 00 02 00 00       	add    eax,0x200
   1333e:	50                   	push   eax
   1333f:	e8 58 47 01 00       	call   27a9c <strtoul>
   13344:	83 c4 10             	add    esp,0x10
   13347:	0f b7 d8             	movzx  ebx,ax
   1334a:	83 ec 04             	sub    esp,0x4
   1334d:	6a 10                	push   0x10
   1334f:	6a 00                	push   0x0
   13351:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13357:	50                   	push   eax
   13358:	e8 3f 47 01 00       	call   27a9c <strtoul>
   1335d:	83 c4 10             	add    esp,0x10
   13360:	0f b7 c0             	movzx  eax,ax
   13363:	83 ec 08             	sub    esp,0x8
   13366:	53                   	push   ebx
   13367:	50                   	push   eax
   13368:	e8 53 ef ff ff       	call   122c0 <outw>
   1336d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:472
}
   13370:	90                   	nop
   13371:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13374:	c9                   	leave  
   13375:	c3                   	ret    

00013376 <outPortD>:
outPortD():
/home/yogi/src/os/chrisOS/src/bishell.c:475

void HIGH_CODE_SECTION outPortD(char* cmdline)
{
   13376:	55                   	push   ebp
   13377:	89 e5                	mov    ebp,esp
   13379:	53                   	push   ebx
   1337a:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:477
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13380:	83 ec 04             	sub    esp,0x4
   13383:	68 00 14 00 00       	push   0x1400
   13388:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1338e:	50                   	push   eax
   1338f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13392:	e8 c5 f1 ff ff       	call   1255c <parseParamsShell>
   13397:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:479
   
   outl(strtoul(params[0],0,16),strtoul(params[1],0,16));
   1339a:	83 ec 04             	sub    esp,0x4
   1339d:	6a 10                	push   0x10
   1339f:	6a 00                	push   0x0
   133a1:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   133a7:	05 00 02 00 00       	add    eax,0x200
   133ac:	50                   	push   eax
   133ad:	e8 ea 46 01 00       	call   27a9c <strtoul>
   133b2:	83 c4 10             	add    esp,0x10
   133b5:	89 c3                	mov    ebx,eax
   133b7:	83 ec 04             	sub    esp,0x4
   133ba:	6a 10                	push   0x10
   133bc:	6a 00                	push   0x0
   133be:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   133c4:	50                   	push   eax
   133c5:	e8 d2 46 01 00       	call   27a9c <strtoul>
   133ca:	83 c4 10             	add    esp,0x10
   133cd:	0f b7 c0             	movzx  eax,ax
   133d0:	83 ec 08             	sub    esp,0x8
   133d3:	53                   	push   ebx
   133d4:	50                   	push   eax
   133d5:	e8 07 ef ff ff       	call   122e1 <outl>
   133da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:480
}
   133dd:	90                   	nop
   133de:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   133e1:	c9                   	leave  
   133e2:	c3                   	ret    

000133e3 <writeBytes>:
writeBytes():
/home/yogi/src/os/chrisOS/src/bishell.c:483

void HIGH_CODE_SECTION writeBytes(char* cmdline)
{
   133e3:	55                   	push   ebp
   133e4:	89 e5                	mov    ebp,esp
   133e6:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:485
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   133ec:	83 ec 04             	sub    esp,0x4
   133ef:	68 00 14 00 00       	push   0x1400
   133f4:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   133fa:	50                   	push   eax
   133fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   133fe:	e8 59 f1 ff ff       	call   1255c <parseParamsShell>
   13403:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:487

    uint8_t* bytes=(uint8_t*)strtoul(params[0],0,16);
   13406:	83 ec 04             	sub    esp,0x4
   13409:	6a 10                	push   0x10
   1340b:	6a 00                	push   0x0
   1340d:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13413:	50                   	push   eax
   13414:	e8 83 46 01 00       	call   27a9c <strtoul>
   13419:	83 c4 10             	add    esp,0x10
   1341c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:488
    bytes[0]=strtoul(params[1],0,16);
   1341f:	83 ec 04             	sub    esp,0x4
   13422:	6a 10                	push   0x10
   13424:	6a 00                	push   0x0
   13426:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1342c:	05 00 02 00 00       	add    eax,0x200
   13431:	50                   	push   eax
   13432:	e8 65 46 01 00       	call   27a9c <strtoul>
   13437:	83 c4 10             	add    esp,0x10
   1343a:	89 c2                	mov    edx,eax
   1343c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1343f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/bishell.c:489
}
   13441:	90                   	nop
   13442:	c9                   	leave  
   13443:	c3                   	ret    

00013444 <writeWords>:
writeWords():
/home/yogi/src/os/chrisOS/src/bishell.c:492

void HIGH_CODE_SECTION writeWords(char* cmdline)
{
   13444:	55                   	push   ebp
   13445:	89 e5                	mov    ebp,esp
   13447:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:494
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1344d:	83 ec 04             	sub    esp,0x4
   13450:	68 00 14 00 00       	push   0x1400
   13455:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1345b:	50                   	push   eax
   1345c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1345f:	e8 f8 f0 ff ff       	call   1255c <parseParamsShell>
   13464:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:496

    uint16_t* words=(uint16_t*)strtoul(params[0],0,16);
   13467:	83 ec 04             	sub    esp,0x4
   1346a:	6a 10                	push   0x10
   1346c:	6a 00                	push   0x0
   1346e:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13474:	50                   	push   eax
   13475:	e8 22 46 01 00       	call   27a9c <strtoul>
   1347a:	83 c4 10             	add    esp,0x10
   1347d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:497
    words[0]=strtoul(params[1],0,16);
   13480:	83 ec 04             	sub    esp,0x4
   13483:	6a 10                	push   0x10
   13485:	6a 00                	push   0x0
   13487:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1348d:	05 00 02 00 00       	add    eax,0x200
   13492:	50                   	push   eax
   13493:	e8 04 46 01 00       	call   27a9c <strtoul>
   13498:	83 c4 10             	add    esp,0x10
   1349b:	89 c2                	mov    edx,eax
   1349d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   134a0:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/bishell.c:498
}
   134a3:	90                   	nop
   134a4:	c9                   	leave  
   134a5:	c3                   	ret    

000134a6 <writeDWords>:
writeDWords():
/home/yogi/src/os/chrisOS/src/bishell.c:501

void HIGH_CODE_SECTION writeDWords(char* cmdline)
{
   134a6:	55                   	push   ebp
   134a7:	89 e5                	mov    ebp,esp
   134a9:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:503
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   134af:	83 ec 04             	sub    esp,0x4
   134b2:	68 00 14 00 00       	push   0x1400
   134b7:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   134bd:	50                   	push   eax
   134be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   134c1:	e8 96 f0 ff ff       	call   1255c <parseParamsShell>
   134c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:505

    uint32_t* dwords=(uint32_t*)strtoul(params[0],0,16);
   134c9:	83 ec 04             	sub    esp,0x4
   134cc:	6a 10                	push   0x10
   134ce:	6a 00                	push   0x0
   134d0:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   134d6:	50                   	push   eax
   134d7:	e8 c0 45 01 00       	call   27a9c <strtoul>
   134dc:	83 c4 10             	add    esp,0x10
   134df:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:506
    dwords[0]=strtoul(params[1],0,16);
   134e2:	83 ec 04             	sub    esp,0x4
   134e5:	6a 10                	push   0x10
   134e7:	6a 00                	push   0x0
   134e9:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   134ef:	05 00 02 00 00       	add    eax,0x200
   134f4:	50                   	push   eax
   134f5:	e8 a2 45 01 00       	call   27a9c <strtoul>
   134fa:	83 c4 10             	add    esp,0x10
   134fd:	89 c2                	mov    edx,eax
   134ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13502:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/bishell.c:507
}
   13504:	90                   	nop
   13505:	c9                   	leave  
   13506:	c3                   	ret    

00013507 <showMapping>:
showMapping():
/home/yogi/src/os/chrisOS/src/bishell.c:510

void HIGH_CODE_SECTION showMapping(char* cmdline)
{
   13507:	55                   	push   ebp
   13508:	89 e5                	mov    ebp,esp
   1350a:	57                   	push   edi
   1350b:	56                   	push   esi
   1350c:	53                   	push   ebx
   1350d:	81 ec 2c 14 00 00    	sub    esp,0x142c
/home/yogi/src/os/chrisOS/src/bishell.c:512
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13513:	83 ec 04             	sub    esp,0x4
   13516:	68 00 14 00 00       	push   0x1400
   1351b:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   13521:	50                   	push   eax
   13522:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13525:	e8 32 f0 ff ff       	call   1255c <parseParamsShell>
   1352a:	83 c4 10             	add    esp,0x10
   1352d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:516

    uintptr_t CR3;
    uintptr_t lAddress;
    printk("Param count = %u\n",paramCount);
   13530:	83 ec 08             	sub    esp,0x8
   13533:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   13536:	68 f7 60 04 00       	push   0x460f7
   1353b:	e8 63 43 01 00       	call   278a3 <printk>
   13540:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:517
    if (paramCount==2)
   13543:	83 7d e4 02          	cmp    DWORD PTR [ebp-0x1c],0x2
   13547:	0f 85 cb 00 00 00    	jne    13618 <showMapping+0x111>
/home/yogi/src/os/chrisOS/src/bishell.c:519
    {
        CR3=strtoul(params[0],0,16);
   1354d:	83 ec 04             	sub    esp,0x4
   13550:	6a 10                	push   0x10
   13552:	6a 00                	push   0x0
   13554:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   1355a:	50                   	push   eax
   1355b:	e8 3c 45 01 00       	call   27a9c <strtoul>
   13560:	83 c4 10             	add    esp,0x10
   13563:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/bishell.c:520
        lAddress=strtoul(params[1],0,16);
   13566:	83 ec 04             	sub    esp,0x4
   13569:	6a 10                	push   0x10
   1356b:	6a 00                	push   0x0
   1356d:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   13573:	05 00 02 00 00       	add    eax,0x200
   13578:	50                   	push   eax
   13579:	e8 1e 45 01 00       	call   27a9c <strtoul>
   1357e:	83 c4 10             	add    esp,0x10
   13581:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/bishell.c:527
                CR3,
                kPagingGet4kPDEntryAddressCR3(CR3,lAddress),
                kPagingGet4kPDEntryValueCR3(CR3,lAddress),
                kPagingGet4kPTEntryAddressCR3(CR3,lAddress),
                kPagingGet4kPTEntryValueCR3(CR3,lAddress),
                (kPagingGet4kPTEntryValueCR3(CR3,lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
   13584:	83 ec 08             	sub    esp,0x8
   13587:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1358a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1358d:	e8 6e df ff ff       	call   11500 <kPagingGet4kPTEntryValueCR3>
   13592:	83 c4 10             	add    esp,0x10
   13595:	25 00 f0 ff ff       	and    eax,0xfffff000
   1359a:	89 c2                	mov    edx,eax
   1359c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1359f:	25 ff 0f 00 00       	and    eax,0xfff
/home/yogi/src/os/chrisOS/src/bishell.c:521
    printk("Param count = %u\n",paramCount);
    if (paramCount==2)
    {
        CR3=strtoul(params[0],0,16);
        lAddress=strtoul(params[1],0,16);
        printk("\tMapping based on CR3=0x%08X\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",
   135a4:	09 c2                	or     edx,eax
   135a6:	89 d3                	mov    ebx,edx
   135a8:	83 ec 08             	sub    esp,0x8
   135ab:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   135ae:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   135b1:	e8 4a df ff ff       	call   11500 <kPagingGet4kPTEntryValueCR3>
   135b6:	83 c4 10             	add    esp,0x10
   135b9:	89 85 d4 eb ff ff    	mov    DWORD PTR [ebp-0x142c],eax
   135bf:	83 ec 08             	sub    esp,0x8
   135c2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   135c5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   135c8:	e8 df de ff ff       	call   114ac <kPagingGet4kPTEntryAddressCR3>
   135cd:	83 c4 10             	add    esp,0x10
   135d0:	89 c7                	mov    edi,eax
   135d2:	83 ec 08             	sub    esp,0x8
   135d5:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   135d8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   135db:	e8 f0 dd ff ff       	call   113d0 <kPagingGet4kPDEntryValueCR3>
   135e0:	83 c4 10             	add    esp,0x10
   135e3:	89 c6                	mov    esi,eax
   135e5:	83 ec 08             	sub    esp,0x8
   135e8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   135eb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   135ee:	e8 5b de ff ff       	call   1144e <kPagingGet4kPDEntryAddressCR3>
   135f3:	83 c4 10             	add    esp,0x10
   135f6:	83 ec 04             	sub    esp,0x4
   135f9:	53                   	push   ebx
   135fa:	ff b5 d4 eb ff ff    	push   DWORD PTR [ebp-0x142c]
   13600:	57                   	push   edi
   13601:	56                   	push   esi
   13602:	50                   	push   eax
   13603:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   13606:	68 0c 61 04 00       	push   0x4610c
   1360b:	e8 93 42 01 00       	call   278a3 <printk>
   13610:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:534
    else
    {
        lAddress=strtoul(params[0],0,16);
        printk("\tMapping based on current CR3\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
    }
}
   13613:	e9 96 00 00 00       	jmp    136ae <showMapping+0x1a7>
/home/yogi/src/os/chrisOS/src/bishell.c:531
                kPagingGet4kPTEntryValueCR3(CR3,lAddress),
                (kPagingGet4kPTEntryValueCR3(CR3,lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
    }
    else
    {
        lAddress=strtoul(params[0],0,16);
   13618:	83 ec 04             	sub    esp,0x4
   1361b:	6a 10                	push   0x10
   1361d:	6a 00                	push   0x0
   1361f:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   13625:	50                   	push   eax
   13626:	e8 71 44 01 00       	call   27a9c <strtoul>
   1362b:	83 c4 10             	add    esp,0x10
   1362e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/bishell.c:532
        printk("\tMapping based on current CR3\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
   13631:	83 ec 0c             	sub    esp,0xc
   13634:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   13637:	e8 11 df ff ff       	call   1154d <kPagingGet4kPTEntryValue>
   1363c:	83 c4 10             	add    esp,0x10
   1363f:	25 00 f0 ff ff       	and    eax,0xfffff000
   13644:	89 c2                	mov    edx,eax
   13646:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   13649:	25 ff 0f 00 00       	and    eax,0xfff
   1364e:	89 d3                	mov    ebx,edx
   13650:	09 c3                	or     ebx,eax
   13652:	83 ec 0c             	sub    esp,0xc
   13655:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   13658:	e8 f0 de ff ff       	call   1154d <kPagingGet4kPTEntryValue>
   1365d:	83 c4 10             	add    esp,0x10
   13660:	89 85 d4 eb ff ff    	mov    DWORD PTR [ebp-0x142c],eax
   13666:	83 ec 0c             	sub    esp,0xc
   13669:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1366c:	e8 74 de ff ff       	call   114e5 <kPagingGet4kPTEntryAddress>
   13671:	83 c4 10             	add    esp,0x10
   13674:	89 c7                	mov    edi,eax
   13676:	83 ec 0c             	sub    esp,0xc
   13679:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1367c:	e8 b2 dd ff ff       	call   11433 <kPagingGet4kPDEntryValue>
   13681:	83 c4 10             	add    esp,0x10
   13684:	89 c6                	mov    esi,eax
   13686:	83 ec 0c             	sub    esp,0xc
   13689:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1368c:	e8 00 de ff ff       	call   11491 <kPagingGet4kPDEntryAddress>
   13691:	83 c4 10             	add    esp,0x10
   13694:	83 ec 08             	sub    esp,0x8
   13697:	53                   	push   ebx
   13698:	ff b5 d4 eb ff ff    	push   DWORD PTR [ebp-0x142c]
   1369e:	57                   	push   edi
   1369f:	56                   	push   esi
   136a0:	50                   	push   eax
   136a1:	68 94 61 04 00       	push   0x46194
   136a6:	e8 f8 41 01 00       	call   278a3 <printk>
   136ab:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:534
    }
}
   136ae:	90                   	nop
   136af:	8d 65 f4             	lea    esp,[ebp-0xc]
   136b2:	5b                   	pop    ebx
   136b3:	5e                   	pop    esi
   136b4:	5f                   	pop    edi
   136b5:	5d                   	pop    ebp
   136b6:	c3                   	ret    

000136b7 <execInternalCommand>:
execInternalCommand():
/home/yogi/src/os/chrisOS/src/bishell.c:660
    exec (params[0],paramCount,lTemp);
    strcpy(sExecutingProgram,sbiShellProgramName);
}

void HIGH_CODE_SECTION execInternalCommand(char lCommand[256])
{
   136b7:	55                   	push   ebp
   136b8:	89 e5                	mov    ebp,esp
   136ba:	53                   	push   ebx
   136bb:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/bishell.c:661
    int i = findCommand(lCommand);
   136be:	83 ec 0c             	sub    esp,0xc
   136c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   136c4:	e8 2a ee ff ff       	call   124f3 <findCommand>
   136c9:	83 c4 10             	add    esp,0x10
   136cc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:663

    if(i>0)
   136cf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   136d3:	7e 74                	jle    13749 <execInternalCommand+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:665
    {
        i--;
   136d5:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:667
        //printk("Executing command # %u (%s)\n", i, cmds[i].name);
        command_function = cmds[i].function;
   136d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   136dc:	c1 e0 04             	shl    eax,0x4
   136df:	05 08 90 02 00       	add    eax,0x29008
   136e4:	8b 00                	mov    eax,DWORD PTR [eax]
   136e6:	a3 58 63 09 00       	mov    ds:0x96358,eax
/home/yogi/src/os/chrisOS/src/bishell.c:668
        command_function_p = cmds[i].function;
   136eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   136ee:	c1 e0 04             	shl    eax,0x4
   136f1:	05 08 90 02 00       	add    eax,0x29008
   136f6:	8b 00                	mov    eax,DWORD PTR [eax]
   136f8:	a3 a4 b4 08 00       	mov    ds:0x8b4a4,eax
/home/yogi/src/os/chrisOS/src/bishell.c:669
        if (cmds[i].paramCount==0)
   136fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13700:	c1 e0 04             	shl    eax,0x4
   13703:	05 0c 90 02 00       	add    eax,0x2900c
   13708:	8b 00                	mov    eax,DWORD PTR [eax]
   1370a:	85 c0                	test   eax,eax
   1370c:	75 09                	jne    13717 <execInternalCommand+0x60>
/home/yogi/src/os/chrisOS/src/bishell.c:670
            command_function();
   1370e:	a1 58 63 09 00       	mov    eax,ds:0x96358
   13713:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/bishell.c:680
    }
    else
    {
        printk("Invalid command '%s' ya dummy!\n",lCommand);
    }
}
   13715:	eb 45                	jmp    1375c <execInternalCommand+0xa5>
/home/yogi/src/os/chrisOS/src/bishell.c:673
        command_function_p = cmds[i].function;
        if (cmds[i].paramCount==0)
            command_function();
        else
        {
            command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
   13717:	8b 1d a4 b4 08 00    	mov    ebx,DWORD PTR ds:0x8b4a4
   1371d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13720:	c1 e0 04             	shl    eax,0x4
   13723:	05 00 90 02 00       	add    eax,0x29000
   13728:	8b 00                	mov    eax,DWORD PTR [eax]
   1372a:	83 ec 0c             	sub    esp,0xc
   1372d:	50                   	push   eax
   1372e:	e8 41 43 01 00       	call   27a74 <strlen>
   13733:	83 c4 10             	add    esp,0x10
   13736:	8d 50 01             	lea    edx,[eax+0x1]
   13739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1373c:	01 d0                	add    eax,edx
   1373e:	83 ec 0c             	sub    esp,0xc
   13741:	50                   	push   eax
   13742:	ff d3                	call   ebx
   13744:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:680
    }
    else
    {
        printk("Invalid command '%s' ya dummy!\n",lCommand);
    }
}
   13747:	eb 13                	jmp    1375c <execInternalCommand+0xa5>
/home/yogi/src/os/chrisOS/src/bishell.c:678
            command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
        }
    }
    else
    {
        printk("Invalid command '%s' ya dummy!\n",lCommand);
   13749:	83 ec 08             	sub    esp,0x8
   1374c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1374f:	68 1c 62 04 00       	push   0x4621c
   13754:	e8 4a 41 01 00       	call   278a3 <printk>
   13759:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:680
    }
}
   1375c:	90                   	nop
   1375d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13760:	c9                   	leave  
   13761:	c3                   	ret    

00013762 <biShell>:
biShell():
/home/yogi/src/os/chrisOS/src/bishell.c:683

void HIGH_CODE_SECTION biShell()
{
   13762:	55                   	push   ebp
   13763:	89 e5                	mov    ebp,esp
   13765:	53                   	push   ebx
   13766:	81 ec 74 0b 00 00    	sub    esp,0xb74
/home/yogi/src/os/chrisOS/src/bishell.c:685
    char lCommand[256];
    unsigned lCurrKey=0;
   1376c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:686
    int lCurrKeyCount=0;
   13773:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:688
    char commands[50][50];
    int commandsPtr=0;
   1377a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:689
    int commandBuffPtr=0;
   13781:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:690
    int commandWasFromThisBufferPtr=0;
   13788:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:691
    bool stopCountingKeys=false;
   1378f:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:692
    strcpy(sExecutingProgram,sbiShellProgramName);
   13793:	83 ec 08             	sub    esp,0x8
   13796:	68 e0 91 02 00       	push   0x291e0
   1379b:	68 40 b4 08 00       	push   0x8b440
   137a0:	e8 5f 42 01 00       	call   27a04 <strcpy>
   137a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:693
    puts("\nWelcome to biShell ... hang a while!\n");
   137a8:	83 ec 0c             	sub    esp,0xc
   137ab:	68 3c 62 04 00       	push   0x4623c
   137b0:	e8 b1 4c 00 00       	call   18466 <puts>
   137b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:697
    
    /*******************************************************/
    //CLR 02/23/2017 - Temporary code to execute commands on boot
    char lcmd1[40]="disk 4";
   137b8:	c7 85 e0 f4 ff ff 64 	mov    DWORD PTR [ebp-0xb20],0x6b736964
   137bf:	69 73 6b 
   137c2:	c7 85 e4 f4 ff ff 20 	mov    DWORD PTR [ebp-0xb1c],0x3420
   137c9:	34 00 00 
   137cc:	b9 00 00 00 00       	mov    ecx,0x0
   137d1:	b8 20 00 00 00       	mov    eax,0x20
   137d6:	83 e0 fc             	and    eax,0xfffffffc
   137d9:	89 c2                	mov    edx,eax
   137db:	b8 00 00 00 00       	mov    eax,0x0
   137e0:	89 8c 05 e8 f4 ff ff 	mov    DWORD PTR [ebp+eax*1-0xb18],ecx
   137e7:	83 c0 04             	add    eax,0x4
   137ea:	39 d0                	cmp    eax,edx
   137ec:	72 f2                	jb     137e0 <biShell+0x7e>
/home/yogi/src/os/chrisOS/src/bishell.c:698
    execInternalCommand(lcmd1);
   137ee:	83 ec 0c             	sub    esp,0xc
   137f1:	8d 85 e0 f4 ff ff    	lea    eax,[ebp-0xb20]
   137f7:	50                   	push   eax
   137f8:	e8 ba fe ff ff       	call   136b7 <execInternalCommand>
   137fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:699
    char lcmd2[40]="part 5";
   13800:	c7 85 b8 f4 ff ff 70 	mov    DWORD PTR [ebp-0xb48],0x74726170
   13807:	61 72 74 
   1380a:	c7 85 bc f4 ff ff 20 	mov    DWORD PTR [ebp-0xb44],0x3520
   13811:	35 00 00 
   13814:	b9 00 00 00 00       	mov    ecx,0x0
   13819:	b8 20 00 00 00       	mov    eax,0x20
   1381e:	83 e0 fc             	and    eax,0xfffffffc
   13821:	89 c2                	mov    edx,eax
   13823:	b8 00 00 00 00       	mov    eax,0x0
   13828:	89 8c 05 c0 f4 ff ff 	mov    DWORD PTR [ebp+eax*1-0xb40],ecx
   1382f:	83 c0 04             	add    eax,0x4
   13832:	39 d0                	cmp    eax,edx
   13834:	72 f2                	jb     13828 <biShell+0xc6>
/home/yogi/src/os/chrisOS/src/bishell.c:700
    execInternalCommand(lcmd2);
   13836:	83 ec 0c             	sub    esp,0xc
   13839:	8d 85 b8 f4 ff ff    	lea    eax,[ebp-0xb48]
   1383f:	50                   	push   eax
   13840:	e8 72 fe ff ff       	call   136b7 <execInternalCommand>
   13845:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:701
    char lcmd3[40]="exec /kernel";
   13848:	c7 85 90 f4 ff ff 65 	mov    DWORD PTR [ebp-0xb70],0x63657865
   1384f:	78 65 63 
   13852:	c7 85 94 f4 ff ff 20 	mov    DWORD PTR [ebp-0xb6c],0x656b2f20
   13859:	2f 6b 65 
   1385c:	c7 85 98 f4 ff ff 72 	mov    DWORD PTR [ebp-0xb68],0x6c656e72
   13863:	6e 65 6c 
   13866:	c7 85 9c f4 ff ff 00 	mov    DWORD PTR [ebp-0xb64],0x0
   1386d:	00 00 00 
   13870:	b9 00 00 00 00       	mov    ecx,0x0
   13875:	b8 18 00 00 00       	mov    eax,0x18
   1387a:	83 e0 fc             	and    eax,0xfffffffc
   1387d:	89 c2                	mov    edx,eax
   1387f:	b8 00 00 00 00       	mov    eax,0x0
   13884:	89 8c 05 a0 f4 ff ff 	mov    DWORD PTR [ebp+eax*1-0xb60],ecx
   1388b:	83 c0 04             	add    eax,0x4
   1388e:	39 d0                	cmp    eax,edx
   13890:	72 f2                	jb     13884 <biShell+0x122>
/home/yogi/src/os/chrisOS/src/bishell.c:702
    execInternalCommand(lcmd3);
   13892:	83 ec 0c             	sub    esp,0xc
   13895:	8d 85 90 f4 ff ff    	lea    eax,[ebp-0xb70]
   1389b:	50                   	push   eax
   1389c:	e8 16 fe ff ff       	call   136b7 <execInternalCommand>
   138a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:709
    
    
    while (1==1)
    {
getACommand:
        lCurrKey=0;
   138a4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:710
        lCurrKeyCount=0;
   138ab:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:711
        memset(lCommand,0,256);
   138b2:	83 ec 04             	sub    esp,0x4
   138b5:	68 00 01 00 00       	push   0x100
   138ba:	6a 00                	push   0x0
   138bc:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   138c2:	50                   	push   eax
   138c3:	e8 75 1d 01 00       	call   2563d <memset>
   138c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:712
        printk("%s> ",sExecutingProgram);
   138cb:	83 ec 08             	sub    esp,0x8
   138ce:	68 40 b4 08 00       	push   0x8b440
   138d3:	68 63 62 04 00       	push   0x46263
   138d8:	e8 c6 3f 01 00       	call   278a3 <printk>
   138dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:714
getAKey:
        lCurrKey=0;
   138e0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:715
        while(lCurrKey==0)
   138e7:	eb 0b                	jmp    138f4 <biShell+0x192>
/home/yogi/src/os/chrisOS/src/bishell.c:717
        {
            lCurrKey=waitForKeyboardKey();
   138e9:	e8 69 d9 ff ff       	call   11257 <waitForKeyboardKey>
   138ee:	0f be c0             	movsx  eax,al
   138f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:715
        lCurrKeyCount=0;
        memset(lCommand,0,256);
        printk("%s> ",sExecutingProgram);
getAKey:
        lCurrKey=0;
        while(lCurrKey==0)
   138f4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   138f8:	74 ef                	je     138e9 <biShell+0x187>
/home/yogi/src/os/chrisOS/src/bishell.c:720
        {
            lCurrKey=waitForKeyboardKey();
        }
        //printk("key='%08X'",lCurrKey);
        if(lCurrKey==0xc8) //up
   138fa:	81 7d f4 c8 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xc8
   13901:	0f 85 8f 00 00 00    	jne    13996 <biShell+0x234>
/home/yogi/src/os/chrisOS/src/bishell.c:722
        {
            if (commandBuffPtr>=0)
   13907:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1390b:	78 d3                	js     138e0 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:724
            {
                int lTemp=cursorGetPosY();
   1390d:	e8 c5 4a 00 00       	call   183d7 <cursorGetPosY>
   13912:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/bishell.c:725
                strcpy(lCommand,commands[--commandBuffPtr]);
   13915:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   13919:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   1391f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13922:	6b c0 32             	imul   eax,eax,0x32
   13925:	01 d0                	add    eax,edx
   13927:	83 ec 08             	sub    esp,0x8
   1392a:	50                   	push   eax
   1392b:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13931:	50                   	push   eax
   13932:	e8 cd 40 01 00       	call   27a04 <strcpy>
   13937:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:726
                commandWasFromThisBufferPtr=commandBuffPtr;
   1393a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1393d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:727
                cursorMoveTo(4,lTemp);
   13940:	83 ec 08             	sub    esp,0x8
   13943:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   13946:	6a 04                	push   0x4
   13948:	e8 ea 49 00 00       	call   18337 <cursorMoveTo>
   1394d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:728
                printk("%s                                                                                ",lCommand);
   13950:	83 ec 08             	sub    esp,0x8
   13953:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13959:	50                   	push   eax
   1395a:	68 68 62 04 00       	push   0x46268
   1395f:	e8 3f 3f 01 00       	call   278a3 <printk>
   13964:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:729
                lCurrKeyCount=strlen(lCommand);
   13967:	83 ec 0c             	sub    esp,0xc
   1396a:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13970:	50                   	push   eax
   13971:	e8 fe 40 01 00       	call   27a74 <strlen>
   13976:	83 c4 10             	add    esp,0x10
   13979:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:730
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   1397c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1397f:	83 c0 04             	add    eax,0x4
   13982:	83 ec 08             	sub    esp,0x8
   13985:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   13988:	50                   	push   eax
   13989:	e8 a9 49 00 00       	call   18337 <cursorMoveTo>
   1398e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:731
                goto getAKey;
   13991:	e9 4a ff ff ff       	jmp    138e0 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:736
            }
            else
                goto getAKey;
        }
        if (lCurrKey==0xD0)  //down
   13996:	81 7d f4 d0 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xd0
   1399d:	0f 85 95 00 00 00    	jne    13a38 <biShell+0x2d6>
/home/yogi/src/os/chrisOS/src/bishell.c:738
        {
            if (commandBuffPtr<=commandsPtr)
   139a3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   139a6:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   139a9:	0f 8f 31 ff ff ff    	jg     138e0 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:740
            {
                int lTemp=cursorGetPosY();
   139af:	e8 23 4a 00 00       	call   183d7 <cursorGetPosY>
   139b4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/bishell.c:741
                strcpy(lCommand,commands[++commandBuffPtr]);
   139b7:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
   139bb:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   139c1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   139c4:	6b c0 32             	imul   eax,eax,0x32
   139c7:	01 d0                	add    eax,edx
   139c9:	83 ec 08             	sub    esp,0x8
   139cc:	50                   	push   eax
   139cd:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   139d3:	50                   	push   eax
   139d4:	e8 2b 40 01 00       	call   27a04 <strcpy>
   139d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:742
                commandWasFromThisBufferPtr=commandBuffPtr;
   139dc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   139df:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:743
                cursorMoveTo(4,lTemp);
   139e2:	83 ec 08             	sub    esp,0x8
   139e5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   139e8:	6a 04                	push   0x4
   139ea:	e8 48 49 00 00       	call   18337 <cursorMoveTo>
   139ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:744
                printk("%s                                                                                ",lCommand);
   139f2:	83 ec 08             	sub    esp,0x8
   139f5:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   139fb:	50                   	push   eax
   139fc:	68 68 62 04 00       	push   0x46268
   13a01:	e8 9d 3e 01 00       	call   278a3 <printk>
   13a06:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:745
                lCurrKeyCount=strlen(lCommand);
   13a09:	83 ec 0c             	sub    esp,0xc
   13a0c:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13a12:	50                   	push   eax
   13a13:	e8 5c 40 01 00       	call   27a74 <strlen>
   13a18:	83 c4 10             	add    esp,0x10
   13a1b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:746
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   13a1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13a21:	83 c0 04             	add    eax,0x4
   13a24:	83 ec 08             	sub    esp,0x8
   13a27:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   13a2a:	50                   	push   eax
   13a2b:	e8 07 49 00 00       	call   18337 <cursorMoveTo>
   13a30:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:747
                goto getAKey;
   13a33:	e9 a8 fe ff ff       	jmp    138e0 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:753
            }
            else
                goto getAKey;
            
        }   
        if (lCurrKey==0xcb) //left
   13a38:	81 7d f4 cb 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xcb
   13a3f:	75 33                	jne    13a74 <biShell+0x312>
/home/yogi/src/os/chrisOS/src/bishell.c:755
        {
            if (cursorGetPosX()>4)
   13a41:	e8 4d 49 00 00       	call   18393 <cursorGetPosX>
   13a46:	83 f8 04             	cmp    eax,0x4
   13a49:	0f 8e 91 fe ff ff    	jle    138e0 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:757
            {
                cursorMoveTo(cursorGetPosX()-1,cursorGetPosY());
   13a4f:	e8 83 49 00 00       	call   183d7 <cursorGetPosY>
   13a54:	89 c3                	mov    ebx,eax
   13a56:	e8 38 49 00 00       	call   18393 <cursorGetPosX>
   13a5b:	83 e8 01             	sub    eax,0x1
   13a5e:	83 ec 08             	sub    esp,0x8
   13a61:	53                   	push   ebx
   13a62:	50                   	push   eax
   13a63:	e8 cf 48 00 00       	call   18337 <cursorMoveTo>
   13a68:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:758
                stopCountingKeys=true;
   13a6b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:760
            }
            goto getAKey;
   13a6f:	e9 6c fe ff ff       	jmp    138e0 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:762
        }
        if (lCurrKey=='\b')
   13a74:	83 7d f4 08          	cmp    DWORD PTR [ebp-0xc],0x8
   13a78:	75 61                	jne    13adb <biShell+0x379>
/home/yogi/src/os/chrisOS/src/bishell.c:764
        {
            if (lCurrKeyCount>=0)
   13a7a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13a7e:	0f 88 5c fe ff ff    	js     138e0 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:766
            {
                int lTemp=cursorGetPosY();
   13a84:	e8 4e 49 00 00       	call   183d7 <cursorGetPosY>
   13a89:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:768

                lCommand[lCurrKeyCount]=' ';
   13a8c:	8d 95 cc fe ff ff    	lea    edx,[ebp-0x134]
   13a92:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13a95:	01 d0                	add    eax,edx
   13a97:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/chrisOS/src/bishell.c:769
                lCurrKeyCount--;
   13a9a:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:770
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   13a9e:	e8 f0 48 00 00       	call   18393 <cursorGetPosX>
   13aa3:	83 e8 01             	sub    eax,0x1
   13aa6:	83 ec 08             	sub    esp,0x8
   13aa9:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   13aac:	50                   	push   eax
   13aad:	e8 85 48 00 00       	call   18337 <cursorMoveTo>
   13ab2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:771
                putc(' ');
   13ab5:	83 ec 0c             	sub    esp,0xc
   13ab8:	6a 20                	push   0x20
   13aba:	e8 d7 49 00 00       	call   18496 <putc>
   13abf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:772
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   13ac2:	e8 cc 48 00 00       	call   18393 <cursorGetPosX>
   13ac7:	83 e8 01             	sub    eax,0x1
   13aca:	83 ec 08             	sub    esp,0x8
   13acd:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   13ad0:	50                   	push   eax
   13ad1:	e8 61 48 00 00       	call   18337 <cursorMoveTo>
   13ad6:	83 c4 10             	add    esp,0x10
   13ad9:	eb 61                	jmp    13b3c <biShell+0x3da>
/home/yogi/src/os/chrisOS/src/bishell.c:777
            }
            else
                goto getAKey;
        }
        else if (lCurrKey==0xa)
   13adb:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   13adf:	75 30                	jne    13b11 <biShell+0x3af>
/home/yogi/src/os/chrisOS/src/bishell.c:779
        {
            putc(lCurrKey);
   13ae1:	83 ec 0c             	sub    esp,0xc
   13ae4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13ae7:	e8 aa 49 00 00       	call   18496 <putc>
   13aec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:780
            lCommand[lCurrKeyCount++]='\0';
   13aef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13af2:	8d 50 01             	lea    edx,[eax+0x1]
   13af5:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   13af8:	c6 84 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],0x0
   13aff:	00 
/home/yogi/src/os/chrisOS/src/bishell.c:781
            goto doneGettingKeys;
   13b00:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:794
        }
        stopCountingKeys=false;
        goto getAKey;
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
   13b01:	0f b6 85 cc fe ff ff 	movzx  eax,BYTE PTR [ebp-0x134]
   13b08:	84 c0                	test   al,al
   13b0a:	75 39                	jne    13b45 <biShell+0x3e3>
   13b0c:	e9 93 fd ff ff       	jmp    138a4 <biShell+0x142>
/home/yogi/src/os/chrisOS/src/bishell.c:785
            lCommand[lCurrKeyCount++]='\0';
            goto doneGettingKeys;
        }
        else
        {
            lCommand[lCurrKeyCount++]=lCurrKey;
   13b11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13b14:	8d 50 01             	lea    edx,[eax+0x1]
   13b17:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   13b1a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   13b1d:	88 94 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],dl
/home/yogi/src/os/chrisOS/src/bishell.c:786
            if (stopCountingKeys)
   13b24:	80 7d e3 00          	cmp    BYTE PTR [ebp-0x1d],0x0
   13b28:	74 04                	je     13b2e <biShell+0x3cc>
/home/yogi/src/os/chrisOS/src/bishell.c:787
                    lCurrKeyCount--;
   13b2a:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:788
            putc(lCurrKey);
   13b2e:	83 ec 0c             	sub    esp,0xc
   13b31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13b34:	e8 5d 49 00 00       	call   18496 <putc>
   13b39:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:790
        }
        stopCountingKeys=false;
   13b3c:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:791
        goto getAKey;
   13b40:	e9 9b fd ff ff       	jmp    138e0 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:796
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
            goto getACommand;
        int i = findCommand(lCommand);
   13b45:	83 ec 0c             	sub    esp,0xc
   13b48:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13b4e:	50                   	push   eax
   13b4f:	e8 9f e9 ff ff       	call   124f3 <findCommand>
   13b54:	83 c4 10             	add    esp,0x10
   13b57:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/bishell.c:798

        execInternalCommand(lCommand);
   13b5a:	83 ec 0c             	sub    esp,0xc
   13b5d:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13b63:	50                   	push   eax
   13b64:	e8 4e fb ff ff       	call   136b7 <execInternalCommand>
   13b69:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:799
        if(i>0)
   13b6c:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   13b70:	0f 8e 87 00 00 00    	jle    13bfd <biShell+0x49b>
/home/yogi/src/os/chrisOS/src/bishell.c:801
        {
            i--;
   13b76:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:803
            //printk("Executing command # %u (%s)\n", i, cmds[i].name);
            if (commandWasFromThisBufferPtr)
   13b7a:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   13b7e:	74 4b                	je     13bcb <biShell+0x469>
/home/yogi/src/os/chrisOS/src/bishell.c:805
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   13b80:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   13b83:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
   13b86:	eb 30                	jmp    13bb8 <biShell+0x456>
/home/yogi/src/os/chrisOS/src/bishell.c:806 (discriminator 3)
                    strcpy(commands[cnt],commands[cnt+1]);
   13b88:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   13b8b:	83 c0 01             	add    eax,0x1
   13b8e:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13b94:	6b c0 32             	imul   eax,eax,0x32
   13b97:	01 c2                	add    edx,eax
   13b99:	8d 8d 08 f5 ff ff    	lea    ecx,[ebp-0xaf8]
   13b9f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   13ba2:	6b c0 32             	imul   eax,eax,0x32
   13ba5:	01 c8                	add    eax,ecx
   13ba7:	83 ec 08             	sub    esp,0x8
   13baa:	52                   	push   edx
   13bab:	50                   	push   eax
   13bac:	e8 53 3e 01 00       	call   27a04 <strcpy>
   13bb1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:805 (discriminator 3)
        {
            i--;
            //printk("Executing command # %u (%s)\n", i, cmds[i].name);
            if (commandWasFromThisBufferPtr)
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   13bb4:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:805 (discriminator 1)
   13bb8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   13bbb:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   13bbe:	7e c8                	jle    13b88 <biShell+0x426>
/home/yogi/src/os/chrisOS/src/bishell.c:807
                    strcpy(commands[cnt],commands[cnt+1]);
                commandWasFromThisBufferPtr=0;
   13bc0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:808
                commandsPtr--;
   13bc7:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:810
            }
            strcpy(commands[commandsPtr++],lCommand);
   13bcb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13bce:	8d 50 01             	lea    edx,[eax+0x1]
   13bd1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   13bd4:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13bda:	6b c0 32             	imul   eax,eax,0x32
   13bdd:	01 c2                	add    edx,eax
   13bdf:	83 ec 08             	sub    esp,0x8
   13be2:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13be8:	50                   	push   eax
   13be9:	52                   	push   edx
   13bea:	e8 15 3e 01 00       	call   27a04 <strcpy>
   13bef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:811
            commandBuffPtr=commandsPtr;
   13bf2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13bf5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   13bf8:	e9 a7 fc ff ff       	jmp    138a4 <biShell+0x142>
/home/yogi/src/os/chrisOS/src/bishell.c:815
        }
        else
        {
            printk("Invalid command '%s' ya dummy!\n",lCommand);
   13bfd:	83 ec 08             	sub    esp,0x8
   13c00:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13c06:	50                   	push   eax
   13c07:	68 1c 62 04 00       	push   0x4621c
   13c0c:	e8 92 3c 01 00       	call   278a3 <printk>
   13c11:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:817
        }
    }
   13c14:	e9 8b fc ff ff       	jmp    138a4 <biShell+0x142>
   13c19:	66 90                	xchg   ax,ax
   13c1b:	90                   	nop

00013c1c <AhciIssueCmd>:
AhciIssueCmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:38


// Check device type

int AhciIssueCmd(volatile HBA_PORT *port,int cmdslot) 
{
   13c1c:	55                   	push   ebp
   13c1d:	89 e5                	mov    ebp,esp
   13c1f:	53                   	push   ebx
   13c20:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:40
    unsigned i;
    int delay = 0;
   13c23:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:41
    int Status = true;
   13c2a:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:43

    port->cmd.ST=0;
   13c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c34:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13c37:	83 e2 fe             	and    edx,0xfffffffe
   13c3a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:45
    //make sure bit0 Start set to enable process cmd list
    if (!(port->cmd.ST)) {
   13c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c40:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13c43:	83 e0 01             	and    eax,0x1
   13c46:	84 c0                	test   al,al
   13c48:	75 2d                	jne    13c77 <AhciIssueCmd+0x5b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:46
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - ST was cleared, setting FRE and STE\n");
   13c4a:	83 ec 08             	sub    esp,0x8
   13c4d:	68 c0 63 04 00       	push   0x463c0
   13c52:	68 00 20 00 00       	push   0x2000
   13c57:	e8 67 3c 01 00       	call   278c3 <printd>
   13c5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:47
        port->cmd.FRE = 1;
   13c5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c62:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13c65:	83 ca 10             	or     edx,0x10
   13c68:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:48
        port->cmd.ST = 1;
   13c6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c6e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13c71:	83 ca 01             	or     edx,0x1
   13c74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:52
    }

    //if err status or busy, reset PxCMD.
    if ((port->pxis.TFES || port->pxis.HBFS || port->pxis.HBDS || port->pxis.IFS || port->pxis.INFS || port->pxis.OFS || port->pxis.IPMS) || (port->tfd.BSY || port->tfd.BSY)) {
   13c77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c7a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13c7d:	c1 e8 1e             	shr    eax,0x1e
   13c80:	83 e0 01             	and    eax,0x1
   13c83:	84 c0                	test   al,al
   13c85:	0f 85 84 00 00 00    	jne    13d0f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 1)
   13c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c8e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13c91:	c1 e8 1d             	shr    eax,0x1d
   13c94:	83 e0 01             	and    eax,0x1
   13c97:	84 c0                	test   al,al
   13c99:	75 74                	jne    13d0f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 2)
   13c9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c9e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13ca1:	c1 e8 1c             	shr    eax,0x1c
   13ca4:	83 e0 01             	and    eax,0x1
   13ca7:	84 c0                	test   al,al
   13ca9:	75 64                	jne    13d0f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 3)
   13cab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13cb1:	c1 e8 1b             	shr    eax,0x1b
   13cb4:	83 e0 01             	and    eax,0x1
   13cb7:	84 c0                	test   al,al
   13cb9:	75 54                	jne    13d0f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 4)
   13cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cbe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13cc1:	c1 e8 1a             	shr    eax,0x1a
   13cc4:	83 e0 01             	and    eax,0x1
   13cc7:	84 c0                	test   al,al
   13cc9:	75 44                	jne    13d0f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 5)
   13ccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13cd1:	c1 e8 18             	shr    eax,0x18
   13cd4:	83 e0 01             	and    eax,0x1
   13cd7:	84 c0                	test   al,al
   13cd9:	75 34                	jne    13d0f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 6)
   13cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cde:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13ce1:	c1 e8 17             	shr    eax,0x17
   13ce4:	83 e0 01             	and    eax,0x1
   13ce7:	84 c0                	test   al,al
   13ce9:	75 24                	jne    13d0f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 7)
   13ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13cf1:	c1 e8 07             	shr    eax,0x7
   13cf4:	83 e0 01             	and    eax,0x1
   13cf7:	84 c0                	test   al,al
   13cf9:	75 14                	jne    13d0f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 8)
   13cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cfe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13d01:	c1 e8 07             	shr    eax,0x7
   13d04:	83 e0 01             	and    eax,0x1
   13d07:	84 c0                	test   al,al
   13d09:	0f 84 8e 00 00 00    	je     13d9d <AhciIssueCmd+0x181>
/home/yogi/src/os/chrisOS/src/block/ahci.c:53
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - clearing error/busy\n");
   13d0f:	83 ec 08             	sub    esp,0x8
   13d12:	68 fc 63 04 00       	push   0x463fc
   13d17:	68 00 20 00 00       	push   0x2000
   13d1c:	e8 a2 3b 01 00       	call   278c3 <printd>
   13d21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:54
        port->cmd.ST &= ~port->cmd.ST;
   13d24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13d2a:	83 e0 01             	and    eax,0x1
   13d2d:	0f b6 c0             	movzx  eax,al
   13d30:	f7 d0                	not    eax
   13d32:	89 c2                	mov    edx,eax
   13d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d37:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13d3a:	83 e0 01             	and    eax,0x1
   13d3d:	89 c1                	mov    ecx,eax
   13d3f:	89 d0                	mov    eax,edx
   13d41:	21 c8                	and    eax,ecx
   13d43:	83 e0 01             	and    eax,0x1
   13d46:	89 c2                	mov    edx,eax
   13d48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d4b:	0f b6 d2             	movzx  edx,dl
   13d4e:	89 d1                	mov    ecx,edx
   13d50:	83 e1 01             	and    ecx,0x1
   13d53:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13d56:	83 e2 fe             	and    edx,0xfffffffe
   13d59:	09 ca                	or     edx,ecx
   13d5b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:56
        //Start|Command List Override|FIS Receive Enable
        port->cmd.CLO=1;
   13d5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d61:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13d64:	83 ca 08             	or     edx,0x8
   13d67:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:57
        while (port->cmd.CLO);
   13d6a:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:57 (discriminator 1)
   13d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d6e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13d71:	c1 e8 03             	shr    eax,0x3
   13d74:	83 e0 01             	and    eax,0x1
   13d77:	84 c0                	test   al,al
   13d79:	75 f0                	jne    13d6b <AhciIssueCmd+0x14f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:58
        port->cmd.ST = 1;
   13d7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d7e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13d81:	83 ca 01             	or     edx,0x1
   13d84:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:59
        port->cmd.FRE = 1;
   13d87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d8a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13d8d:	83 ca 10             	or     edx,0x10
   13d90:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:60
        port->pxis.AsUlong = 0;
   13d93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d96:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:64
    }

    //issue cmd
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
   13d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13da0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   13da3:	83 ec 04             	sub    esp,0x4
   13da6:	50                   	push   eax
   13da7:	68 28 64 04 00       	push   0x46428
   13dac:	68 00 20 00 00       	push   0x2000
   13db1:	e8 0d 3b 01 00       	call   278c3 <printd>
   13db6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:65
    port->ci |= (1 << cmdslot);
   13db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13dbc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13dbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13dc2:	bb 01 00 00 00       	mov    ebx,0x1
   13dc7:	89 c1                	mov    ecx,eax
   13dc9:	d3 e3                	shl    ebx,cl
   13dcb:	89 d8                	mov    eax,ebx
   13dcd:	09 c2                	or     edx,eax
   13dcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13dd2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:66
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);
   13dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13dd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   13ddb:	83 ec 04             	sub    esp,0x4
   13dde:	50                   	push   eax
   13ddf:	68 5c 64 04 00       	push   0x4645c
   13de4:	68 00 20 00 00       	push   0x2000
   13de9:	e8 d5 3a 01 00       	call   278c3 <printd>
   13dee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:69

    //wait cmd
    for (i = 0; i < 100; i++) {
   13df1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   13df8:	eb 21                	jmp    13e1b <AhciIssueCmd+0x1ff>
/home/yogi/src/os/chrisOS/src/block/ahci.c:70
        wait(50);
   13dfa:	83 ec 0c             	sub    esp,0xc
   13dfd:	6a 32                	push   0x32
   13dff:	e8 de 4c 01 00       	call   28ae2 <wait>
   13e04:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:71
        if (!port->tfd.BSY)
   13e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e0a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13e0d:	c1 e8 07             	shr    eax,0x7
   13e10:	83 e0 01             	and    eax,0x1
   13e13:	84 c0                	test   al,al
   13e15:	74 0c                	je     13e23 <AhciIssueCmd+0x207>
/home/yogi/src/os/chrisOS/src/block/ahci.c:69 (discriminator 2)
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
    port->ci |= (1 << cmdslot);
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);

    //wait cmd
    for (i = 0; i < 100; i++) {
   13e17:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:69 (discriminator 1)
   13e1b:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
   13e1f:	76 d9                	jbe    13dfa <AhciIssueCmd+0x1de>
   13e21:	eb 01                	jmp    13e24 <AhciIssueCmd+0x208>
/home/yogi/src/os/chrisOS/src/block/ahci.c:72
        wait(50);
        if (!port->tfd.BSY)
            break;
   13e23:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:76
    }

    // Wait for completion
    delay = 5000;
   13e24:	c7 45 f0 88 13 00 00 	mov    DWORD PTR [ebp-0x10],0x1388
/home/yogi/src/os/chrisOS/src/block/ahci.c:77
    while (delay > 0) {
   13e2b:	eb 57                	jmp    13e84 <AhciIssueCmd+0x268>
/home/yogi/src/os/chrisOS/src/block/ahci.c:79

        if ((port->ci & (1 << cmdslot)) == 0)
   13e2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e30:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13e33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13e36:	bb 01 00 00 00       	mov    ebx,0x1
   13e3b:	89 c1                	mov    ecx,eax
   13e3d:	d3 e3                	shl    ebx,cl
   13e3f:	89 d8                	mov    eax,ebx
   13e41:	21 d0                	and    eax,edx
   13e43:	85 c0                	test   eax,eax
   13e45:	74 45                	je     13e8c <AhciIssueCmd+0x270>
/home/yogi/src/os/chrisOS/src/block/ahci.c:83
            break;
        // In some longer duration reads, it may be helpful to spin on the DPS bit 
        // in the PxIS port field as well (1 << 5)
        if (port->pxis.TFES) // Task file error
   13e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e4a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13e4d:	c1 e8 1e             	shr    eax,0x1e
   13e50:	83 e0 01             	and    eax,0x1
   13e53:	84 c0                	test   al,al
   13e55:	74 1c                	je     13e73 <AhciIssueCmd+0x257>
/home/yogi/src/os/chrisOS/src/block/ahci.c:85
        {
            printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   13e57:	83 ec 08             	sub    esp,0x8
   13e5a:	68 8f 64 04 00       	push   0x4648f
   13e5f:	68 00 20 00 00       	push   0x2000
   13e64:	e8 5a 3a 01 00       	call   278c3 <printd>
   13e69:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:86
            return -1;
   13e6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
   13e71:	eb 37                	jmp    13eaa <AhciIssueCmd+0x28e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:88
        }
        wait(20);
   13e73:	83 ec 0c             	sub    esp,0xc
   13e76:	6a 14                	push   0x14
   13e78:	e8 65 4c 01 00       	call   28ae2 <wait>
   13e7d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:89
        delay -= 1;
   13e80:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:77
            break;
    }

    // Wait for completion
    delay = 5000;
    while (delay > 0) {
   13e84:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13e88:	7f a3                	jg     13e2d <AhciIssueCmd+0x211>
   13e8a:	eb 01                	jmp    13e8d <AhciIssueCmd+0x271>
/home/yogi/src/os/chrisOS/src/block/ahci.c:80

        if ((port->ci & (1 << cmdslot)) == 0)
            break;
   13e8c:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:92
        }
        wait(20);
        delay -= 1;
    }

    if (port->tfd.ERR || delay == 0)
   13e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13e93:	83 e0 01             	and    eax,0x1
   13e96:	84 c0                	test   al,al
   13e98:	75 06                	jne    13ea0 <AhciIssueCmd+0x284>
/home/yogi/src/os/chrisOS/src/block/ahci.c:92 (discriminator 1)
   13e9a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13e9e:	75 07                	jne    13ea7 <AhciIssueCmd+0x28b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:93
        Status = -2;
   13ea0:	c7 45 ec fe ff ff ff 	mov    DWORD PTR [ebp-0x14],0xfffffffe
/home/yogi/src/os/chrisOS/src/block/ahci.c:95

    return Status;
   13ea7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/block/ahci.c:96
}
   13eaa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13ead:	c9                   	leave  
   13eae:	c3                   	ret    

00013eaf <check_type>:
check_type():
/home/yogi/src/os/chrisOS/src/block/ahci.c:98

int check_type(volatile HBA_PORT *port, uint32_t* sig) {
   13eaf:	55                   	push   ebp
   13eb0:	89 e5                	mov    ebp,esp
   13eb2:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:99
    uint32_t ssts = port->ssts;
   13eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13eb8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13ebb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:100
    uint8_t ipm = (ssts >> 8) & 0x0F;
   13ebe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13ec1:	c1 e8 08             	shr    eax,0x8
   13ec4:	83 e0 0f             	and    eax,0xf
   13ec7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:101
    uint8_t det = ssts & 0x0F;
   13eca:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13ecd:	83 e0 0f             	and    eax,0xf
   13ed0:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:103

    if (det != HBA_PORT_DET_PRESENT) // Check drive status
   13ed3:	80 7d fa 03          	cmp    BYTE PTR [ebp-0x6],0x3
   13ed7:	74 07                	je     13ee0 <check_type+0x31>
/home/yogi/src/os/chrisOS/src/block/ahci.c:104
        return AHCI_DEV_NULL;
   13ed9:	b8 00 00 00 00       	mov    eax,0x0
   13ede:	eb 64                	jmp    13f44 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:105
    if (ipm != HBA_PORT_IPM_ACTIVE)
   13ee0:	80 7d fb 01          	cmp    BYTE PTR [ebp-0x5],0x1
   13ee4:	74 07                	je     13eed <check_type+0x3e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:106
        return AHCI_DEV_NULL;
   13ee6:	b8 00 00 00 00       	mov    eax,0x0
   13eeb:	eb 57                	jmp    13f44 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:108

    *sig = port->sig;
   13eed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ef0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   13ef3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13ef6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:109
    switch (port->sig) {
   13ef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13efb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   13efe:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13f03:	74 25                	je     13f2a <check_type+0x7b>
   13f05:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13f0a:	77 09                	ja     13f15 <check_type+0x66>
   13f0c:	3d 01 01 69 96       	cmp    eax,0x96690101
   13f11:	74 1e                	je     13f31 <check_type+0x82>
   13f13:	eb 2a                	jmp    13f3f <check_type+0x90>
   13f15:	3d 00 00 14 eb       	cmp    eax,0xeb140000
   13f1a:	74 1c                	je     13f38 <check_type+0x89>
   13f1c:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   13f21:	75 1c                	jne    13f3f <check_type+0x90>
/home/yogi/src/os/chrisOS/src/block/ahci.c:111
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
   13f23:	b8 04 00 00 00       	mov    eax,0x4
   13f28:	eb 1a                	jmp    13f44 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:113
        case SATA_SIG_SEMB:
            return AHCI_DEV_SEMB;
   13f2a:	b8 02 00 00 00       	mov    eax,0x2
   13f2f:	eb 13                	jmp    13f44 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:115
        case SATA_SIG_PM:
            return AHCI_DEV_PM;
   13f31:	b8 03 00 00 00       	mov    eax,0x3
   13f36:	eb 0c                	jmp    13f44 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:117
        case SATA_SIG_ATAPI & 0xFFFF0000:
            return AHCI_DEV_SATAPI;
   13f38:	b8 04 00 00 00       	mov    eax,0x4
   13f3d:	eb 05                	jmp    13f44 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:119
        default:
            return AHCI_DEV_SATA;
   13f3f:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:121
    }
}
   13f44:	c9                   	leave  
   13f45:	c3                   	ret    

00013f46 <ahciEnablePortMultiplier>:
ahciEnablePortMultiplier():
/home/yogi/src/os/chrisOS/src/block/ahci.c:123

void ahciEnablePortMultiplier(volatile HBA_PORT* port) {
   13f46:	55                   	push   ebp
   13f47:	89 e5                	mov    ebp,esp
   13f49:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:124
    HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   13f4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f4f:	8b 00                	mov    eax,DWORD PTR [eax]
   13f51:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:126

    port->cmd.ST = 0;
   13f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f57:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13f5a:	83 e2 fe             	and    edx,0xfffffffe
   13f5d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:130

    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
   13f60:	83 ec 04             	sub    esp,0x4
   13f63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13f66:	68 a8 64 04 00       	push   0x464a8
   13f6b:	68 00 20 00 00       	push   0x2000
   13f70:	e8 4e 39 01 00       	call   278c3 <printd>
   13f75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:131
    int slot = find_cmdslot(port);
   13f78:	83 ec 0c             	sub    esp,0xc
   13f7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13f7e:	e8 6a 13 00 00       	call   152ed <find_cmdslot>
   13f83:	83 c4 10             	add    esp,0x10
   13f86:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:132
    if (slot == -1)
   13f89:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   13f8d:	0f 84 94 02 00 00    	je     14227 <ahciEnablePortMultiplier+0x2e1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:134
        return;
    port->ie.AsUlong = 0; //xffffffff;
   13f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f96:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:135
    cmdheader += slot;
   13f9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13fa0:	c1 e0 05             	shl    eax,0x5
   13fa3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:136
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   13fa6:	83 ec 04             	sub    esp,0x4
   13fa9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13fac:	68 d0 64 04 00       	push   0x464d0
   13fb1:	68 00 20 00 00       	push   0x2000
   13fb6:	e8 08 39 01 00       	call   278c3 <printd>
   13fbb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:137
    cmdheader->prdtl = 1;
   13fbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13fc1:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:138
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   13fc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13fca:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13fcd:	83 e2 e0             	and    edx,0xffffffe0
   13fd0:	83 ca 05             	or     edx,0x5
   13fd3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:139
    cmdheader->w = 0;
   13fd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13fd8:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13fdb:	83 e2 bf             	and    edx,0xffffffbf
   13fde:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:140
    cmdheader->c = 1; //required for reset
   13fe0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13fe3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13fe7:	83 ca 04             	or     edx,0x4
   13fea:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:141
    cmdheader->p = 0;
   13fed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13ff0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13ff3:	83 e2 7f             	and    edx,0x7f
   13ff6:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:142
    cmdheader->r = 1; //srst field
   13ff8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13ffb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13fff:	83 ca 01             	or     edx,0x1
   14002:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:144

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14005:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14008:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1400b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:145
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   1400e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14011:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14014:	50                   	push   eax
   14015:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14018:	68 e8 64 04 00       	push   0x464e8
   1401d:	68 00 20 00 00       	push   0x2000
   14022:	e8 9c 38 01 00       	call   278c3 <printd>
   14027:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:146
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   1402a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1402d:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xc53000
   14034:	30 c5 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:147
    cmdtbl->prdt_entry[0].dbc = 0;
   14037:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1403a:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   14040:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   14046:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:148
    cmdtbl->prdt_entry[0].i = 0;
   1404c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1404f:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   14056:	83 e2 7f             	and    edx,0x7f
   14059:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:150

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   1405f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14062:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:151
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   14065:	83 ec 04             	sub    esp,0x4
   14068:	6a 14                	push   0x14
   1406a:	6a 00                	push   0x0
   1406c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1406f:	e8 c9 15 01 00       	call   2563d <memset>
   14074:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:152
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   14077:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1407a:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:153
    cmdfis->c = 0; // Control
   1407d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14080:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14084:	83 e2 7f             	and    edx,0x7f
   14087:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:154
    cmdfis->control |= (1 << 2); //reset bit
   1408a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1408d:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   14091:	83 c8 04             	or     eax,0x4
   14094:	89 c2                	mov    edx,eax
   14096:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14099:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:155
    cmdfis->pmport = 0xf;
   1409c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1409f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   140a3:	83 ca 0f             	or     edx,0xf
   140a6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:156
    port->cmd.CLO = 1;
   140a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   140af:	83 ca 08             	or     edx,0x8
   140b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:157
    while (port->cmd.CLO);
   140b5:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:157 (discriminator 1)
   140b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140b9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   140bc:	c1 e8 03             	shr    eax,0x3
   140bf:	83 e0 01             	and    eax,0x1
   140c2:	84 c0                	test   al,al
   140c4:	75 f0                	jne    140b6 <ahciEnablePortMultiplier+0x170>
/home/yogi/src/os/chrisOS/src/block/ahci.c:158
    port->cmd.ST = 1;
   140c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140c9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   140cc:	83 ca 01             	or     edx,0x1
   140cf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:159
    port->ci |= slot;
   140d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140d5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   140d8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   140db:	09 c2                	or     edx,eax
   140dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:161

    slot = find_cmdslot(port);
   140e3:	83 ec 0c             	sub    esp,0xc
   140e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   140e9:	e8 ff 11 00 00       	call   152ed <find_cmdslot>
   140ee:	83 c4 10             	add    esp,0x10
   140f1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:162
    if (slot == -1)
   140f4:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   140f8:	0f 84 2c 01 00 00    	je     1422a <ahciEnablePortMultiplier+0x2e4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:164
        return;
    port->ie.AsUlong = 0; //xffffffff;
   140fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14101:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:165
    cmdheader += slot;
   14108:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1410b:	c1 e0 05             	shl    eax,0x5
   1410e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:166
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   14111:	83 ec 04             	sub    esp,0x4
   14114:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   14117:	68 d0 64 04 00       	push   0x464d0
   1411c:	68 00 20 00 00       	push   0x2000
   14121:	e8 9d 37 01 00       	call   278c3 <printd>
   14126:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:167
    cmdheader->prdtl = 1;
   14129:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1412c:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:168
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   14132:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14135:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14138:	83 e2 e0             	and    edx,0xffffffe0
   1413b:	83 ca 05             	or     edx,0x5
   1413e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:169
    cmdheader->w = 0;
   14140:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14143:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14146:	83 e2 bf             	and    edx,0xffffffbf
   14149:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:170
    cmdheader->c = 1; //required for reset
   1414b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1414e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14152:	83 ca 04             	or     edx,0x4
   14155:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:171
    cmdheader->p = 0;
   14158:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1415b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   1415e:	83 e2 7f             	and    edx,0x7f
   14161:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:172
    cmdheader->r = 0; //srst field
   14163:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14166:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   1416a:	83 e2 fe             	and    edx,0xfffffffe
   1416d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:173
    cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14170:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14173:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14176:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:174
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   14179:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1417c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1417f:	50                   	push   eax
   14180:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14183:	68 e8 64 04 00       	push   0x464e8
   14188:	68 00 20 00 00       	push   0x2000
   1418d:	e8 31 37 01 00       	call   278c3 <printd>
   14192:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:175
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   14195:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14198:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xc53000
   1419f:	30 c5 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:176
    cmdtbl->prdt_entry[0].dbc = 0;
   141a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   141a5:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   141ab:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   141b1:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:177
    cmdtbl->prdt_entry[0].i = 0;
   141b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   141ba:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   141c1:	83 e2 7f             	and    edx,0x7f
   141c4:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:179

    cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   141ca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   141cd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:180
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   141d0:	83 ec 04             	sub    esp,0x4
   141d3:	6a 14                	push   0x14
   141d5:	6a 00                	push   0x0
   141d7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   141da:	e8 5e 14 01 00       	call   2563d <memset>
   141df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:181
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   141e2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   141e5:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:182
    cmdfis->c = 0; // control
   141e8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   141eb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   141ef:	83 e2 7f             	and    edx,0x7f
   141f2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:183
    cmdfis->control &= ~(1 << 2); //reset bit
   141f5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   141f8:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   141fc:	83 e0 fb             	and    eax,0xfffffffb
   141ff:	89 c2                	mov    edx,eax
   14201:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14204:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:184
    cmdfis->pmport = 0xf;
   14207:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1420a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   1420e:	83 ca 0f             	or     edx,0xf
   14211:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:185
    port->ci |= slot;
   14214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14217:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   1421a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1421d:	09 c2                	or     edx,eax
   1421f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14222:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
   14225:	eb 04                	jmp    1422b <ahciEnablePortMultiplier+0x2e5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:133
    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   14227:	90                   	nop
   14228:	eb 01                	jmp    1422b <ahciEnablePortMultiplier+0x2e5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:163
    port->cmd.ST = 1;
    port->ci |= slot;

    slot = find_cmdslot(port);
    if (slot == -1)
        return;
   1422a:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:186
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
    cmdfis->c = 0; // control
    cmdfis->control &= ~(1 << 2); //reset bit
    cmdfis->pmport = 0xf;
    port->ci |= slot;
}
   1422b:	c9                   	leave  
   1422c:	c3                   	ret    

0001422d <ahciSpinupDrive>:
ahciSpinupDrive():
/home/yogi/src/os/chrisOS/src/block/ahci.c:188

bool ahciSpinupDrive(volatile HBA_PORT* port, int portno) {
   1422d:	55                   	push   ebp
   1422e:	89 e5                	mov    ebp,esp
   14230:	56                   	push   esi
   14231:	53                   	push   ebx
   14232:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:189
    int waitMS = 0;
   14235:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:190
    port->sctl.SPD = 1;
   1423c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1423f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   14242:	80 e2 0f             	and    dl,0xf
   14245:	83 ca 10             	or     edx,0x10
   14248:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:199
    //stop_cmd(&abar->ports[i]);
    //port->cmd.PMA=1;
    //start_cmd(&abar->ports[i]);

    //Spin up the drive
    port->cmd.ST = 0;
   1424b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1424e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14251:	83 e2 fe             	and    edx,0xfffffffe
   14254:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:201

    port->sctl.DET = 1;
   14257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1425a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   1425d:	83 e2 f0             	and    edx,0xfffffff0
   14260:	83 ca 01             	or     edx,0x1
   14263:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:202
    wait(100);
   14266:	83 ec 0c             	sub    esp,0xc
   14269:	6a 64                	push   0x64
   1426b:	e8 72 48 01 00       	call   28ae2 <wait>
   14270:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:203
    port->sctl.DET = 0;
   14273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14276:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   14279:	83 e2 f0             	and    edx,0xfffffff0
   1427c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:206


    waitMS = 1000;
   1427f:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/src/os/chrisOS/src/block/ahci.c:208
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   14286:	eb 11                	jmp    14299 <ahciSpinupDrive+0x6c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:209
        wait(10);
   14288:	83 ec 0c             	sub    esp,0xc
   1428b:	6a 0a                	push   0xa
   1428d:	e8 50 48 01 00       	call   28ae2 <wait>
   14292:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:210
        waitMS -= 10;
   14295:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/src/os/chrisOS/src/block/ahci.c:208
    port->sctl.DET = 0;


    waitMS = 1000;
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   14299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1429c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   1429f:	83 e0 0f             	and    eax,0xf
   142a2:	83 f8 03             	cmp    eax,0x3
   142a5:	74 14                	je     142bb <ahciSpinupDrive+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:208 (discriminator 1)
   142a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   142aa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   142ad:	83 e0 0f             	and    eax,0xf
   142b0:	83 f8 01             	cmp    eax,0x1
   142b3:	74 06                	je     142bb <ahciSpinupDrive+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:208 (discriminator 2)
   142b5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   142b9:	7f cd                	jg     14288 <ahciSpinupDrive+0x5b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:212
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   142bb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   142bf:	75 62                	jne    14323 <ahciSpinupDrive+0xf6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:213
        printd(DEBUG_AHCI, "AHCI: Error spinning up device,  DET not cleared (0x%08X)\n", port->ssts);
   142c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   142c4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   142c7:	83 ec 04             	sub    esp,0x4
   142ca:	50                   	push   eax
   142cb:	68 0c 65 04 00       	push   0x4650c
   142d0:	68 00 20 00 00       	push   0x2000
   142d5:	e8 e9 35 01 00       	call   278c3 <printd>
   142da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:215
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   142dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   142e0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   142e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   142e6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   142e9:	83 ec 08             	sub    esp,0x8
   142ec:	52                   	push   edx
   142ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   142f0:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   142f3:	52                   	push   edx
   142f4:	50                   	push   eax
   142f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   142f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   142fb:	50                   	push   eax
   142fc:	68 48 65 04 00       	push   0x46548
   14301:	68 00 20 00 00       	push   0x2000
   14306:	e8 b8 35 01 00       	call   278c3 <printd>
   1430b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:216
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   1430e:	83 ec 08             	sub    esp,0x8
   14311:	68 7c 65 04 00       	push   0x4657c
   14316:	68 00 20 00 00       	push   0x2000
   1431b:	e8 a3 35 01 00       	call   278c3 <printd>
   14320:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:219
    }
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
   14323:	a1 94 99 12 00       	mov    eax,ds:0x129994
   14328:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   1432e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
   14331:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   14334:	be 01 00 00 00       	mov    esi,0x1
   14339:	89 d1                	mov    ecx,edx
   1433b:	d3 e6                	shl    esi,cl
   1433d:	89 f2                	mov    edx,esi
   1433f:	09 da                	or     edx,ebx
   14341:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:220
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
   14344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14347:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1434a:	83 ec 04             	sub    esp,0x4
   1434d:	50                   	push   eax
   1434e:	68 99 65 04 00       	push   0x46599
   14353:	68 00 20 00 00       	push   0x2000
   14358:	e8 66 35 01 00       	call   278c3 <printd>
   1435d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:221
    waitMS = 1000;
   14360:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/src/os/chrisOS/src/block/ahci.c:223
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   14367:	eb 11                	jmp    1437a <ahciSpinupDrive+0x14d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:224
        wait(10);
   14369:	83 ec 0c             	sub    esp,0xc
   1436c:	6a 0a                	push   0xa
   1436e:	e8 6f 47 01 00       	call   28ae2 <wait>
   14373:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:225
        waitMS -= 10;
   14376:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/src/os/chrisOS/src/block/ahci.c:223
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
    waitMS = 1000;
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   1437a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1437d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   14380:	c1 e8 07             	shr    eax,0x7
   14383:	83 e0 01             	and    eax,0x1
   14386:	84 c0                	test   al,al
   14388:	75 0d                	jne    14397 <ahciSpinupDrive+0x16a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:223 (discriminator 2)
   1438a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1438d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   14390:	83 e0 01             	and    eax,0x1
   14393:	84 c0                	test   al,al
   14395:	74 06                	je     1439d <ahciSpinupDrive+0x170>
/home/yogi/src/os/chrisOS/src/block/ahci.c:223 (discriminator 3)
   14397:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1439b:	7f cc                	jg     14369 <ahciSpinupDrive+0x13c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:227
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   1439d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   143a1:	75 62                	jne    14405 <ahciSpinupDrive+0x1d8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:228
        printd(DEBUG_AHCI, "AHCI: Error spinning up device, BSY, DRQ OR ERR not cleared (0x%08X)\n", port->ssts);
   143a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   143a6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   143a9:	83 ec 04             	sub    esp,0x4
   143ac:	50                   	push   eax
   143ad:	68 a8 65 04 00       	push   0x465a8
   143b2:	68 00 20 00 00       	push   0x2000
   143b7:	e8 07 35 01 00       	call   278c3 <printd>
   143bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:230
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   143bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   143c2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   143c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   143c8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   143cb:	83 ec 08             	sub    esp,0x8
   143ce:	52                   	push   edx
   143cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   143d2:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   143d5:	52                   	push   edx
   143d6:	50                   	push   eax
   143d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   143da:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   143dd:	50                   	push   eax
   143de:	68 48 65 04 00       	push   0x46548
   143e3:	68 00 20 00 00       	push   0x2000
   143e8:	e8 d6 34 01 00       	call   278c3 <printd>
   143ed:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:231
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   143f0:	83 ec 08             	sub    esp,0x8
   143f3:	68 7c 65 04 00       	push   0x4657c
   143f8:	68 00 20 00 00       	push   0x2000
   143fd:	e8 c1 34 01 00       	call   278c3 <printd>
   14402:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:233
    }
    port->cmd.ST = 1;
   14405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14408:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   1440b:	83 ca 01             	or     edx,0x1
   1440e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:234
    if (waitMS == 0)
   14411:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   14415:	75 07                	jne    1441e <ahciSpinupDrive+0x1f1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:235
        return false;
   14417:	b8 00 00 00 00       	mov    eax,0x0
   1441c:	eb 05                	jmp    14423 <ahciSpinupDrive+0x1f6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:236
    return true;
   1441e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:237
}
   14423:	8d 65 f8             	lea    esp,[ebp-0x8]
   14426:	5b                   	pop    ebx
   14427:	5e                   	pop    esi
   14428:	5d                   	pop    ebp
   14429:	c3                   	ret    

0001442a <ahciProbePorts>:
ahciProbePorts():
/home/yogi/src/os/chrisOS/src/block/ahci.c:239

void ahciProbePorts(HBA_MEM *abar) {
   1442a:	55                   	push   ebp
   1442b:	89 e5                	mov    ebp,esp
   1442d:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/block/ahci.c:241
    // Search disk in impelemented ports
    uint32_t pi = abar->pi;
   14430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14433:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   14436:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:242
    int i = 0;
   14439:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:243
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
   14440:	a1 44 92 02 00       	mov    eax,ds:0x29244
   14445:	c1 e0 10             	shl    eax,0x10
   14448:	05 00 30 b1 00       	add    eax,0xb13000
   1444d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:244
    if (pi > 0)
   14450:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   14454:	0f 84 4f 02 00 00    	je     146a9 <ahciProbePorts+0x27f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:245
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
   1445a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1445d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   14460:	50                   	push   eax
   14461:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14464:	68 f0 65 04 00       	push   0x465f0
   14469:	68 00 20 00 00       	push   0x2000
   1446e:	e8 50 34 01 00       	call   278c3 <printd>
   14473:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:246
    while (i < 32) {
   14476:	e9 2e 02 00 00       	jmp    146a9 <ahciProbePorts+0x27f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:247
        if (pi & 1) {
   1447b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1447e:	83 e0 01             	and    eax,0x1
   14481:	85 c0                	test   eax,eax
   14483:	0f 84 19 02 00 00    	je     146a2 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:248
        ahci_enable_port(abar,i);
   14489:	83 ec 08             	sub    esp,0x8
   1448c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1448f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14492:	e8 d0 1b 00 00       	call   16067 <ahci_enable_port>
   14497:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:250
        //waitForPortIdle(&abar->ports[i]);
            uint32_t sig = 0;
   1449a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:252
            //Get the SATA device signature
            int dt = check_type(&abar->ports[i], &sig);
   144a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   144a4:	83 c0 02             	add    eax,0x2
   144a7:	c1 e0 07             	shl    eax,0x7
   144aa:	89 c2                	mov    edx,eax
   144ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   144af:	01 c2                	add    edx,eax
   144b1:	83 ec 08             	sub    esp,0x8
   144b4:	8d 45 e4             	lea    eax,[ebp-0x1c]
   144b7:	50                   	push   eax
   144b8:	52                   	push   edx
   144b9:	e8 f1 f9 ff ff       	call   13eaf <check_type>
   144be:	83 c4 10             	add    esp,0x10
   144c1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:253
            printd(DEBUG_AHCI, "AHCI: Checking port %u (0x%08X), sig=%08X\n", i, &abar->ports[i], sig);
   144c4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   144c7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   144ca:	83 c2 02             	add    edx,0x2
   144cd:	89 d1                	mov    ecx,edx
   144cf:	c1 e1 07             	shl    ecx,0x7
   144d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   144d5:	01 ca                	add    edx,ecx
   144d7:	83 ec 0c             	sub    esp,0xc
   144da:	50                   	push   eax
   144db:	52                   	push   edx
   144dc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   144df:	68 24 66 04 00       	push   0x46624
   144e4:	68 00 20 00 00       	push   0x2000
   144e9:	e8 d5 33 01 00       	call   278c3 <printd>
   144ee:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:255
            //Found a SATA disk
            if (dt == AHCI_DEV_SATA) {
   144f1:	83 7d e8 01          	cmp    DWORD PTR [ebp-0x18],0x1
   144f5:	0f 85 a3 00 00 00    	jne    1459e <ahciProbePorts+0x174>
/home/yogi/src/os/chrisOS/src/block/ahci.c:256
                printd(DEBUG_AHCI, "AHCI: SATA drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   144fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   144fe:	83 c0 02             	add    eax,0x2
   14501:	c1 e0 07             	shl    eax,0x7
   14504:	89 c2                	mov    edx,eax
   14506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14509:	01 d0                	add    eax,edx
   1450b:	50                   	push   eax
   1450c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1450f:	68 50 66 04 00       	push   0x46650
   14514:	68 00 20 00 00       	push   0x2000
   14519:	e8 a5 33 01 00       	call   278c3 <printd>
   1451e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:257
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   14521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14524:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   14527:	83 c2 02             	add    edx,0x2
   1452a:	c1 e2 07             	shl    edx,0x7
   1452d:	01 d0                	add    eax,edx
   1452f:	83 c0 08             	add    eax,0x8
   14532:	8b 10                	mov    edx,DWORD PTR [eax]
   14534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14537:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   1453a:	83 c1 02             	add    ecx,0x2
   1453d:	c1 e1 07             	shl    ecx,0x7
   14540:	01 c8                	add    eax,ecx
   14542:	8b 00                	mov    eax,DWORD PTR [eax]
   14544:	52                   	push   edx
   14545:	50                   	push   eax
   14546:	68 7c 66 04 00       	push   0x4667c
   1454b:	68 00 20 00 00       	push   0x2000
   14550:	e8 6e 33 01 00       	call   278c3 <printd>
   14555:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:258
                port_rebase(&abar->ports[i], i, rb);
   14558:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1455b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1455e:	83 c2 02             	add    edx,0x2
   14561:	89 d1                	mov    ecx,edx
   14563:	c1 e1 07             	shl    ecx,0x7
   14566:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14569:	01 ca                	add    edx,ecx
   1456b:	83 ec 04             	sub    esp,0x4
   1456e:	50                   	push   eax
   1456f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14572:	52                   	push   edx
   14573:	e8 5c 07 00 00       	call   14cd4 <port_rebase>
   14578:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:261
                	//det reset, disable slumber and Partial state
			//reset port, send COMRESET signal
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATA);
   1457b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1457e:	83 c0 02             	add    eax,0x2
   14581:	c1 e0 07             	shl    eax,0x7
   14584:	89 c2                	mov    edx,eax
   14586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14589:	01 d0                	add    eax,edx
   1458b:	83 ec 08             	sub    esp,0x8
   1458e:	6a 01                	push   0x1
   14590:	50                   	push   eax
   14591:	e8 b6 09 00 00       	call   14f4c <ahciIdentify>
   14596:	83 c4 10             	add    esp,0x10
   14599:	e9 04 01 00 00       	jmp    146a2 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:271
                    printk("AHCI: Successfully read sector 0 from device to 0x%08X\n",ahciReadBuff);
                    printk("AHCI: Read Buffer: %s\n",ahciReadBuff);
                    printk("sig=0x%08X\n",abar->ports[i].sig);
                }
                 */
            } else if (dt == AHCI_DEV_SATAPI) {
   1459e:	83 7d e8 04          	cmp    DWORD PTR [ebp-0x18],0x4
   145a2:	0f 85 a0 00 00 00    	jne    14648 <ahciProbePorts+0x21e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:272
                printd(DEBUG_AHCI, "AHCI:SATAPI drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   145a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   145ab:	83 c0 02             	add    eax,0x2
   145ae:	c1 e0 07             	shl    eax,0x7
   145b1:	89 c2                	mov    edx,eax
   145b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   145b6:	01 d0                	add    eax,edx
   145b8:	50                   	push   eax
   145b9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   145bc:	68 9c 66 04 00       	push   0x4669c
   145c1:	68 00 20 00 00       	push   0x2000
   145c6:	e8 f8 32 01 00       	call   278c3 <printd>
   145cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:273
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   145ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   145d1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   145d4:	83 c2 02             	add    edx,0x2
   145d7:	c1 e2 07             	shl    edx,0x7
   145da:	01 d0                	add    eax,edx
   145dc:	83 c0 08             	add    eax,0x8
   145df:	8b 10                	mov    edx,DWORD PTR [eax]
   145e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   145e4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   145e7:	83 c1 02             	add    ecx,0x2
   145ea:	c1 e1 07             	shl    ecx,0x7
   145ed:	01 c8                	add    eax,ecx
   145ef:	8b 00                	mov    eax,DWORD PTR [eax]
   145f1:	52                   	push   edx
   145f2:	50                   	push   eax
   145f3:	68 7c 66 04 00       	push   0x4667c
   145f8:	68 00 20 00 00       	push   0x2000
   145fd:	e8 c1 32 01 00       	call   278c3 <printd>
   14602:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:274
                port_rebase(&abar->ports[i], i, rb);
   14605:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14608:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1460b:	83 c2 02             	add    edx,0x2
   1460e:	89 d1                	mov    ecx,edx
   14610:	c1 e1 07             	shl    ecx,0x7
   14613:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14616:	01 ca                	add    edx,ecx
   14618:	83 ec 04             	sub    esp,0x4
   1461b:	50                   	push   eax
   1461c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1461f:	52                   	push   edx
   14620:	e8 af 06 00 00       	call   14cd4 <port_rebase>
   14625:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:276
                //Run an ATA_IDENTIFY
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATAPI);
   14628:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1462b:	83 c0 02             	add    eax,0x2
   1462e:	c1 e0 07             	shl    eax,0x7
   14631:	89 c2                	mov    edx,eax
   14633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14636:	01 d0                	add    eax,edx
   14638:	83 ec 08             	sub    esp,0x8
   1463b:	6a 04                	push   0x4
   1463d:	50                   	push   eax
   1463e:	e8 09 09 00 00       	call   14f4c <ahciIdentify>
   14643:	83 c4 10             	add    esp,0x10
   14646:	eb 5a                	jmp    146a2 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:277
            } else if (dt == AHCI_DEV_SEMB) {
   14648:	83 7d e8 02          	cmp    DWORD PTR [ebp-0x18],0x2
   1464c:	75 28                	jne    14676 <ahciProbePorts+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:278
                printd(DEBUG_AHCI, "AHCI: SEMB drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   1464e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14651:	83 c0 02             	add    eax,0x2
   14654:	c1 e0 07             	shl    eax,0x7
   14657:	89 c2                	mov    edx,eax
   14659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1465c:	01 d0                	add    eax,edx
   1465e:	50                   	push   eax
   1465f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14662:	68 cc 66 04 00       	push   0x466cc
   14667:	68 00 20 00 00       	push   0x2000
   1466c:	e8 52 32 01 00       	call   278c3 <printd>
   14671:	83 c4 10             	add    esp,0x10
   14674:	eb 2c                	jmp    146a2 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:280
                //port_rebase(abar->ports,i,rb+=0x10000);
            } else if (dt == AHCI_DEV_PM) {
   14676:	83 7d e8 03          	cmp    DWORD PTR [ebp-0x18],0x3
   1467a:	75 26                	jne    146a2 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:281
                printd(DEBUG_AHCI, "AHCI: PM drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   1467c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1467f:	83 c0 02             	add    eax,0x2
   14682:	c1 e0 07             	shl    eax,0x7
   14685:	89 c2                	mov    edx,eax
   14687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1468a:	01 d0                	add    eax,edx
   1468c:	50                   	push   eax
   1468d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14690:	68 f8 66 04 00       	push   0x466f8
   14695:	68 00 20 00 00       	push   0x2000
   1469a:	e8 24 32 01 00       	call   278c3 <printd>
   1469f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:290
            //			{
            //				printk("No drive found at port %d\n", i);
            //			}
        }

        pi >>= 1;
   146a2:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/src/os/chrisOS/src/block/ahci.c:291
        i++;
   146a5:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:246
    uint32_t pi = abar->pi;
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
    if (pi > 0)
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
    while (i < 32) {
   146a9:	83 7d f0 1f          	cmp    DWORD PTR [ebp-0x10],0x1f
   146ad:	0f 8e c8 fd ff ff    	jle    1447b <ahciProbePorts+0x51>
/home/yogi/src/os/chrisOS/src/block/ahci.c:293
        }

        pi >>= 1;
        i++;
    }
}
   146b3:	90                   	nop
   146b4:	c9                   	leave  
   146b5:	c3                   	ret    

000146b6 <printAHCICaps>:
printAHCICaps():
/home/yogi/src/os/chrisOS/src/block/ahci.c:295

void printAHCICaps() {
   146b6:	55                   	push   ebp
   146b7:	89 e5                	mov    ebp,esp
   146b9:	57                   	push   edi
   146ba:	56                   	push   esi
   146bb:	53                   	push   ebx
   146bc:	81 ec 2c 02 00 00    	sub    esp,0x22c
/home/yogi/src/os/chrisOS/src/block/ahci.c:297
    //printk("ahciCaps=0x%08X, sizeof=%u\n",ahciCaps,sizeof(ahcicaps_t));
    terminal_clear();
   146c2:	e8 5b 39 00 00       	call   18022 <terminal_clear>
/home/yogi/src/os/chrisOS/src/block/ahci.c:298
    printk("AHCI Caps:\n");
   146c7:	83 ec 0c             	sub    esp,0xc
   146ca:	68 22 67 04 00       	push   0x46722
   146cf:	e8 cf 31 01 00       	call   278a3 <printk>
   146d4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:299
    printk("\tSupports 64-bit Addressing (S64A):\t\t\t\t%s\n", ahciCaps->S64A ? "Yes" : "No");
   146d7:	a1 24 99 12 00       	mov    eax,ds:0x129924
   146dc:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   146e0:	83 e0 80             	and    eax,0xffffff80
   146e3:	84 c0                	test   al,al
   146e5:	74 07                	je     146ee <printAHCICaps+0x38>
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 1)
   146e7:	b8 2e 67 04 00       	mov    eax,0x4672e
   146ec:	eb 05                	jmp    146f3 <printAHCICaps+0x3d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 2)
   146ee:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 4)
   146f3:	83 ec 08             	sub    esp,0x8
   146f6:	50                   	push   eax
   146f7:	68 38 67 04 00       	push   0x46738
   146fc:	e8 a2 31 01 00       	call   278a3 <printk>
   14701:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 4)
    printk("\tSupprorts Native Command Queueing (SNCQ):\t\t%s\n", ahciCaps->SNCQ ? "Yes" : "No");
   14704:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14709:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1470d:	83 e0 40             	and    eax,0x40
   14710:	84 c0                	test   al,al
   14712:	74 07                	je     1471b <printAHCICaps+0x65>
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 1)
   14714:	b8 2e 67 04 00       	mov    eax,0x4672e
   14719:	eb 05                	jmp    14720 <printAHCICaps+0x6a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 2)
   1471b:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 4)
   14720:	83 ec 08             	sub    esp,0x8
   14723:	50                   	push   eax
   14724:	68 64 67 04 00       	push   0x46764
   14729:	e8 75 31 01 00       	call   278a3 <printk>
   1472e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 4)
    printk("\tSupports SNotification Register (SSNTF):\t\t%s\n", ahciCaps->SSNTF ? "Yes" : "No");
   14731:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14736:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1473a:	83 e0 20             	and    eax,0x20
   1473d:	84 c0                	test   al,al
   1473f:	74 07                	je     14748 <printAHCICaps+0x92>
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 1)
   14741:	b8 2e 67 04 00       	mov    eax,0x4672e
   14746:	eb 05                	jmp    1474d <printAHCICaps+0x97>
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 2)
   14748:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 4)
   1474d:	83 ec 08             	sub    esp,0x8
   14750:	50                   	push   eax
   14751:	68 94 67 04 00       	push   0x46794
   14756:	e8 48 31 01 00       	call   278a3 <printk>
   1475b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 4)
    printk("\tSupports Mechanical Presence Switch (SMPS):\t\t%s\n", ahciCaps->SMPS ? "Yes" : "No");
   1475e:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14763:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14767:	83 e0 10             	and    eax,0x10
   1476a:	84 c0                	test   al,al
   1476c:	74 07                	je     14775 <printAHCICaps+0xbf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 1)
   1476e:	b8 2e 67 04 00       	mov    eax,0x4672e
   14773:	eb 05                	jmp    1477a <printAHCICaps+0xc4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 2)
   14775:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 4)
   1477a:	83 ec 08             	sub    esp,0x8
   1477d:	50                   	push   eax
   1477e:	68 c4 67 04 00       	push   0x467c4
   14783:	e8 1b 31 01 00       	call   278a3 <printk>
   14788:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 4)
    printk("\tSupports Staggered Spin-up (SSS):\t\t\t\t%s\n", ahciCaps->SSS ? "Yes" : "No");
   1478b:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14790:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14794:	83 e0 08             	and    eax,0x8
   14797:	84 c0                	test   al,al
   14799:	74 07                	je     147a2 <printAHCICaps+0xec>
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 1)
   1479b:	b8 2e 67 04 00       	mov    eax,0x4672e
   147a0:	eb 05                	jmp    147a7 <printAHCICaps+0xf1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 2)
   147a2:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 4)
   147a7:	83 ec 08             	sub    esp,0x8
   147aa:	50                   	push   eax
   147ab:	68 f8 67 04 00       	push   0x467f8
   147b0:	e8 ee 30 01 00       	call   278a3 <printk>
   147b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 4)
    printk("\tSupports Aggressive Link Power Management (SALP):\t%s\n", ahciCaps->SALP ? "Yes" : "No");
   147b8:	a1 24 99 12 00       	mov    eax,ds:0x129924
   147bd:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   147c1:	83 e0 04             	and    eax,0x4
   147c4:	84 c0                	test   al,al
   147c6:	74 07                	je     147cf <printAHCICaps+0x119>
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 1)
   147c8:	b8 2e 67 04 00       	mov    eax,0x4672e
   147cd:	eb 05                	jmp    147d4 <printAHCICaps+0x11e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 2)
   147cf:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 4)
   147d4:	83 ec 08             	sub    esp,0x8
   147d7:	50                   	push   eax
   147d8:	68 24 68 04 00       	push   0x46824
   147dd:	e8 c1 30 01 00       	call   278a3 <printk>
   147e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 4)
    printk("\tSupports Active LED (SAL):\t\t\t\t\t%s\n", ahciCaps->SAL ? "Yes" : "No");
   147e5:	a1 24 99 12 00       	mov    eax,ds:0x129924
   147ea:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   147ee:	83 e0 02             	and    eax,0x2
   147f1:	84 c0                	test   al,al
   147f3:	74 07                	je     147fc <printAHCICaps+0x146>
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 1)
   147f5:	b8 2e 67 04 00       	mov    eax,0x4672e
   147fa:	eb 05                	jmp    14801 <printAHCICaps+0x14b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 2)
   147fc:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 4)
   14801:	83 ec 08             	sub    esp,0x8
   14804:	50                   	push   eax
   14805:	68 5c 68 04 00       	push   0x4685c
   1480a:	e8 94 30 01 00       	call   278a3 <printk>
   1480f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 4)
    printk("\tSupports Command List Override (SCLO):\t\t\t%s\n", ahciCaps->SCLO ? "Yes" : "No");
   14812:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14817:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1481b:	83 e0 01             	and    eax,0x1
   1481e:	84 c0                	test   al,al
   14820:	74 07                	je     14829 <printAHCICaps+0x173>
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 1)
   14822:	b8 2e 67 04 00       	mov    eax,0x4672e
   14827:	eb 05                	jmp    1482e <printAHCICaps+0x178>
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 2)
   14829:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 4)
   1482e:	83 ec 08             	sub    esp,0x8
   14831:	50                   	push   eax
   14832:	68 80 68 04 00       	push   0x46880
   14837:	e8 67 30 01 00       	call   278a3 <printk>
   1483c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 4)
    printk("\tInterface Speed Support (ISS):\t\t\t\t%s\n", ahciCaps->ISS == 1 ? "1.5 Gbps" : ahciCaps->ISS == 2 ? "3 Gbps" : ahciCaps->ISS == 3 ? "6 Gbps" : "Reserved");
   1483f:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14844:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14848:	83 e0 f0             	and    eax,0xfffffff0
   1484b:	3c 10                	cmp    al,0x10
   1484d:	74 35                	je     14884 <printAHCICaps+0x1ce>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 1)
   1484f:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14854:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14858:	83 e0 f0             	and    eax,0xfffffff0
   1485b:	3c 20                	cmp    al,0x20
   1485d:	74 1e                	je     1487d <printAHCICaps+0x1c7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 3)
   1485f:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14864:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14868:	83 e0 f0             	and    eax,0xfffffff0
   1486b:	3c 30                	cmp    al,0x30
   1486d:	75 07                	jne    14876 <printAHCICaps+0x1c0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 5)
   1486f:	b8 ae 68 04 00       	mov    eax,0x468ae
   14874:	eb 13                	jmp    14889 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 6)
   14876:	b8 b5 68 04 00       	mov    eax,0x468b5
   1487b:	eb 0c                	jmp    14889 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 4)
   1487d:	b8 be 68 04 00       	mov    eax,0x468be
   14882:	eb 05                	jmp    14889 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 2)
   14884:	b8 c5 68 04 00       	mov    eax,0x468c5
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 12)
   14889:	83 ec 08             	sub    esp,0x8
   1488c:	50                   	push   eax
   1488d:	68 d0 68 04 00       	push   0x468d0
   14892:	e8 0c 30 01 00       	call   278a3 <printk>
   14897:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 12)
    printk("\tSupports AHCI mode only (SAM):\t\t\t\t%s\n", ahciCaps->SAM ? "Yes" : "No");
   1489a:	a1 24 99 12 00       	mov    eax,ds:0x129924
   1489f:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   148a3:	83 e0 04             	and    eax,0x4
   148a6:	84 c0                	test   al,al
   148a8:	74 07                	je     148b1 <printAHCICaps+0x1fb>
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 1)
   148aa:	b8 2e 67 04 00       	mov    eax,0x4672e
   148af:	eb 05                	jmp    148b6 <printAHCICaps+0x200>
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 2)
   148b1:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 4)
   148b6:	83 ec 08             	sub    esp,0x8
   148b9:	50                   	push   eax
   148ba:	68 f8 68 04 00       	push   0x468f8
   148bf:	e8 df 2f 01 00       	call   278a3 <printk>
   148c4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 4)
    printk("\tSupports Port Multiplier (SPM):\t\t\t\t%s\n", ahciCaps->SPM ? "Yes" : "No");
   148c7:	a1 24 99 12 00       	mov    eax,ds:0x129924
   148cc:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   148d0:	83 e0 02             	and    eax,0x2
   148d3:	84 c0                	test   al,al
   148d5:	74 07                	je     148de <printAHCICaps+0x228>
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 1)
   148d7:	b8 2e 67 04 00       	mov    eax,0x4672e
   148dc:	eb 05                	jmp    148e3 <printAHCICaps+0x22d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 2)
   148de:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 4)
   148e3:	83 ec 08             	sub    esp,0x8
   148e6:	50                   	push   eax
   148e7:	68 20 69 04 00       	push   0x46920
   148ec:	e8 b2 2f 01 00       	call   278a3 <printk>
   148f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 4)
    printk("\tFIS-based Switching Support (FBSS):\t\t\t%s\n", ahciCaps->FBSS ? "Yes" : "No");   
   148f4:	a1 24 99 12 00       	mov    eax,ds:0x129924
   148f9:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   148fd:	83 e0 01             	and    eax,0x1
   14900:	84 c0                	test   al,al
   14902:	74 07                	je     1490b <printAHCICaps+0x255>
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 1)
   14904:	b8 2e 67 04 00       	mov    eax,0x4672e
   14909:	eb 05                	jmp    14910 <printAHCICaps+0x25a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 2)
   1490b:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 4)
   14910:	83 ec 08             	sub    esp,0x8
   14913:	50                   	push   eax
   14914:	68 48 69 04 00       	push   0x46948
   14919:	e8 85 2f 01 00       	call   278a3 <printk>
   1491e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 4)
    printk("\tPIO Multiple DRQ Block (PMD):\t\t\t\t\t%s\n", ahciCaps->PMD ? "Yes" : "No");
   14921:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14926:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1492a:	83 e0 80             	and    eax,0xffffff80
   1492d:	84 c0                	test   al,al
   1492f:	74 07                	je     14938 <printAHCICaps+0x282>
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 1)
   14931:	b8 2e 67 04 00       	mov    eax,0x4672e
   14936:	eb 05                	jmp    1493d <printAHCICaps+0x287>
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 2)
   14938:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 4)
   1493d:	83 ec 08             	sub    esp,0x8
   14940:	50                   	push   eax
   14941:	68 74 69 04 00       	push   0x46974
   14946:	e8 58 2f 01 00       	call   278a3 <printk>
   1494b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 4)
    printk("\tSlumber State Capable (SSC):\t\t\t\t\t%s\n", ahciCaps->SSC ? "Yes" : "No");
   1494e:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14953:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   14957:	83 e0 40             	and    eax,0x40
   1495a:	84 c0                	test   al,al
   1495c:	74 07                	je     14965 <printAHCICaps+0x2af>
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 1)
   1495e:	b8 2e 67 04 00       	mov    eax,0x4672e
   14963:	eb 05                	jmp    1496a <printAHCICaps+0x2b4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 2)
   14965:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 4)
   1496a:	83 ec 08             	sub    esp,0x8
   1496d:	50                   	push   eax
   1496e:	68 9c 69 04 00       	push   0x4699c
   14973:	e8 2b 2f 01 00       	call   278a3 <printk>
   14978:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 4)
    printk("\tPartial State Capable (PSC):\t\t\t\t\t%s\n", ahciCaps->PSC ? "Yes" : "No");
   1497b:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14980:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   14984:	83 e0 20             	and    eax,0x20
   14987:	84 c0                	test   al,al
   14989:	74 07                	je     14992 <printAHCICaps+0x2dc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 1)
   1498b:	b8 2e 67 04 00       	mov    eax,0x4672e
   14990:	eb 05                	jmp    14997 <printAHCICaps+0x2e1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 2)
   14992:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 4)
   14997:	83 ec 08             	sub    esp,0x8
   1499a:	50                   	push   eax
   1499b:	68 c4 69 04 00       	push   0x469c4
   149a0:	e8 fe 2e 01 00       	call   278a3 <printk>
   149a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:314 (discriminator 4)
    printk("\tNumber of Command Slots (NSC):\t\t\t\t%u\n", ahciCaps->NCS);
   149a8:	a1 24 99 12 00       	mov    eax,ds:0x129924
   149ad:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   149b1:	83 e0 1f             	and    eax,0x1f
   149b4:	0f b6 c0             	movzx  eax,al
   149b7:	83 ec 08             	sub    esp,0x8
   149ba:	50                   	push   eax
   149bb:	68 ec 69 04 00       	push   0x469ec
   149c0:	e8 de 2e 01 00       	call   278a3 <printk>
   149c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 4)
    printk("\tCommand Completion Coalescing Supported (CCCS):\t%s\n", ahciCaps->CCCS ? "Yes" : "No");
   149c8:	a1 24 99 12 00       	mov    eax,ds:0x129924
   149cd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   149d0:	83 e0 80             	and    eax,0xffffff80
   149d3:	84 c0                	test   al,al
   149d5:	74 07                	je     149de <printAHCICaps+0x328>
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 1)
   149d7:	b8 2e 67 04 00       	mov    eax,0x4672e
   149dc:	eb 05                	jmp    149e3 <printAHCICaps+0x32d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 2)
   149de:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 4)
   149e3:	83 ec 08             	sub    esp,0x8
   149e6:	50                   	push   eax
   149e7:	68 14 6a 04 00       	push   0x46a14
   149ec:	e8 b2 2e 01 00       	call   278a3 <printk>
   149f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 4)
    printk("\tEnclosure Management Supported (EMS):\t\t\t%s\n", ahciCaps->EMS ? "Yes" : "No");
   149f4:	a1 24 99 12 00       	mov    eax,ds:0x129924
   149f9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   149fc:	83 e0 40             	and    eax,0x40
   149ff:	84 c0                	test   al,al
   14a01:	74 07                	je     14a0a <printAHCICaps+0x354>
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 1)
   14a03:	b8 2e 67 04 00       	mov    eax,0x4672e
   14a08:	eb 05                	jmp    14a0f <printAHCICaps+0x359>
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 2)
   14a0a:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 4)
   14a0f:	83 ec 08             	sub    esp,0x8
   14a12:	50                   	push   eax
   14a13:	68 4c 6a 04 00       	push   0x46a4c
   14a18:	e8 86 2e 01 00       	call   278a3 <printk>
   14a1d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 4)
    printk("\tSupports External SATA (SXS):\t\t\t\t\t%s\n", ahciCaps->SXS ? "Yes" : "No");
   14a20:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14a25:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   14a28:	83 e0 20             	and    eax,0x20
   14a2b:	84 c0                	test   al,al
   14a2d:	74 07                	je     14a36 <printAHCICaps+0x380>
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 1)
   14a2f:	b8 2e 67 04 00       	mov    eax,0x4672e
   14a34:	eb 05                	jmp    14a3b <printAHCICaps+0x385>
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 2)
   14a36:	b8 32 67 04 00       	mov    eax,0x46732
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 4)
   14a3b:	83 ec 08             	sub    esp,0x8
   14a3e:	50                   	push   eax
   14a3f:	68 7c 6a 04 00       	push   0x46a7c
   14a44:	e8 5a 2e 01 00       	call   278a3 <printk>
   14a49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:318 (discriminator 4)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
   14a4c:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14a51:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   14a54:	83 e0 1f             	and    eax,0x1f
   14a57:	0f b6 c0             	movzx  eax,al
   14a5a:	83 ec 08             	sub    esp,0x8
   14a5d:	50                   	push   eax
   14a5e:	68 a4 6a 04 00       	push   0x46aa4
   14a63:	e8 3b 2e 01 00       	call   278a3 <printk>
   14a68:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:321 (discriminator 4)
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
   14a6b:	83 ec 0c             	sub    esp,0xc
   14a6e:	68 c4 6a 04 00       	push   0x46ac4
   14a73:	e8 2b 2e 01 00       	call   278a3 <printk>
   14a78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 4)
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   14a7b:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   14a82:	e9 3a 02 00 00       	jmp    14cc1 <printAHCICaps+0x60b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:324
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
   14a87:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14a8d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14a90:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14a96:	01 d0                	add    eax,edx
   14a98:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   14a9f:	84 c0                	test   al,al
   14aa1:	0f 84 16 02 00 00    	je     14cbd <printAHCICaps+0x607>
/home/yogi/src/os/chrisOS/src/block/ahci.c:325
            memset(p1, 0, 512);
   14aa7:	83 ec 04             	sub    esp,0x4
   14aaa:	68 00 02 00 00       	push   0x200
   14aaf:	6a 00                	push   0x0
   14ab1:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14ab7:	50                   	push   eax
   14ab8:	e8 80 0b 01 00       	call   2563d <memset>
   14abd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:326
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
   14ac0:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14ac6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ac9:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14acf:	01 d0                	add    eax,edx
   14ad1:	05 00 02 00 00       	add    eax,0x200
   14ad6:	83 ec 08             	sub    esp,0x8
   14ad9:	50                   	push   eax
   14ada:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14ae0:	50                   	push   eax
   14ae1:	e8 1e 2f 01 00       	call   27a04 <strcpy>
   14ae6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:327
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
   14ae9:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14aef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14af2:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14af8:	01 d0                	add    eax,edx
   14afa:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   14b01:	3c 01                	cmp    al,0x1
   14b03:	75 08                	jne    14b0d <printAHCICaps+0x457>
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 1)
   14b05:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14b0b:	eb 05                	jmp    14b12 <printAHCICaps+0x45c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 2)
   14b0d:	b8 d7 6a 04 00       	mov    eax,0x46ad7
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 4)
   14b12:	83 ec 04             	sub    esp,0x4
   14b15:	50                   	push   eax
   14b16:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   14b19:	68 dd 6a 04 00       	push   0x46add
   14b1e:	e8 80 2d 01 00       	call   278a3 <printk>
   14b23:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:335 (discriminator 4)
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
   14b26:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14b2c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14b2f:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14b35:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14b37:	8b b8 69 02 00 00    	mov    edi,DWORD PTR [eax+0x269]
/home/yogi/src/os/chrisOS/src/block/ahci.c:334 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
   14b3d:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14b43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14b46:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14b4c:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14b4e:	8b b0 6f 02 00 00    	mov    esi,DWORD PTR [eax+0x26f]
/home/yogi/src/os/chrisOS/src/block/ahci.c:333 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
   14b54:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14b5a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14b5d:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14b63:	01 d0                	add    eax,edx
   14b65:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14b6c:	84 c0                	test   al,al
   14b6e:	74 0c                	je     14b7c <printAHCICaps+0x4c6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 1)
   14b70:	c7 85 d4 fd ff ff f2 	mov    DWORD PTR [ebp-0x22c],0x46af2
   14b77:	6a 04 00 
   14b7a:	eb 0a                	jmp    14b86 <printAHCICaps+0x4d0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 2)
   14b7c:	c7 85 d4 fd ff ff f7 	mov    DWORD PTR [ebp-0x22c],0x46af7
   14b83:	6a 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:332 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
   14b86:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14b8c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14b8f:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14b95:	01 d0                	add    eax,edx
   14b97:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14b9e:	84 c0                	test   al,al
   14ba0:	74 0c                	je     14bae <printAHCICaps+0x4f8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 5)
   14ba2:	c7 85 d0 fd ff ff f8 	mov    DWORD PTR [ebp-0x230],0x46af8
   14ba9:	6a 04 00 
   14bac:	eb 0a                	jmp    14bb8 <printAHCICaps+0x502>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 6)
   14bae:	c7 85 d0 fd ff ff f7 	mov    DWORD PTR [ebp-0x230],0x46af7
   14bb5:	6a 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:331 (discriminator 8)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
   14bb8:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14bbe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14bc1:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14bc7:	01 d0                	add    eax,edx
   14bc9:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 8)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14bd0:	84 c0                	test   al,al
   14bd2:	74 0c                	je     14be0 <printAHCICaps+0x52a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 9)
   14bd4:	c7 85 cc fd ff ff ff 	mov    DWORD PTR [ebp-0x234],0x46aff
   14bdb:	6a 04 00 
   14bde:	eb 0a                	jmp    14bea <printAHCICaps+0x534>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 10)
   14be0:	c7 85 cc fd ff ff f7 	mov    DWORD PTR [ebp-0x234],0x46af7
   14be7:	6a 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:330
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
   14bea:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14bf0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14bf3:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14bf9:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14bfb:	8b 98 5a 02 00 00    	mov    ebx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOS/src/block/ahci.c:329
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
   14c01:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14c07:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c0a:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14c10:	01 d0                	add    eax,edx
   14c12:	8b 88 56 02 00 00    	mov    ecx,DWORD PTR [eax+0x256]
   14c18:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14c1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c21:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14c27:	01 d0                	add    eax,edx
   14c29:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   14c2f:	0f af c1             	imul   eax,ecx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14c32:	c1 e8 14             	shr    eax,0x14
   14c35:	57                   	push   edi
   14c36:	56                   	push   esi
   14c37:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
   14c3d:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
   14c43:	ff b5 cc fd ff ff    	push   DWORD PTR [ebp-0x234]
   14c49:	53                   	push   ebx
   14c4a:	50                   	push   eax
   14c4b:	68 04 6b 04 00       	push   0x46b04
   14c50:	e8 4e 2c 01 00       	call   278a3 <printk>
   14c55:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:336
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
            volatile HBA_PORT* port = (HBA_PORT*) kATADeviceInfo[cnt].ioPort;
   14c58:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14c5e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c61:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14c67:	01 d0                	add    eax,edx
   14c69:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   14c6f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:337
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   14c72:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14c75:	8b 00                	mov    eax,DWORD PTR [eax]
   14c77:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:338
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14c7a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   14c7d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14c80:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:339
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
   14c83:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14c86:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14c89:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14c8c:	8b 00                	mov    eax,DWORD PTR [eax]
   14c8e:	83 ec 04             	sub    esp,0x4
   14c91:	52                   	push   edx
   14c92:	50                   	push   eax
   14c93:	68 36 6b 04 00       	push   0x46b36
   14c98:	e8 06 2c 01 00       	call   278a3 <printk>
   14c9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:340
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
   14ca0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   14ca3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14ca6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14ca9:	8b 00                	mov    eax,DWORD PTR [eax]
   14cab:	83 ec 04             	sub    esp,0x4
   14cae:	52                   	push   edx
   14caf:	50                   	push   eax
   14cb0:	68 50 6b 04 00       	push   0x46b50
   14cb5:	e8 e9 2b 01 00       	call   278a3 <printk>
   14cba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 2)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   14cbd:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 1)
   14cc1:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   14cc5:	0f 8e bc fd ff ff    	jle    14a87 <printAHCICaps+0x3d1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:342
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
        }
}
   14ccb:	90                   	nop
   14ccc:	8d 65 f4             	lea    esp,[ebp-0xc]
   14ccf:	5b                   	pop    ebx
   14cd0:	5e                   	pop    esi
   14cd1:	5f                   	pop    edi
   14cd2:	5d                   	pop    ebp
   14cd3:	c3                   	ret    

00014cd4 <port_rebase>:
port_rebase():
/home/yogi/src/os/chrisOS/src/block/ahci.c:344

void port_rebase(volatile HBA_PORT *port, int portno, uintptr_t remapBase) {
   14cd4:	55                   	push   ebp
   14cd5:	89 e5                	mov    ebp,esp
   14cd7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:346
    //each command list is 1k (32k possible per port))
    printd(DEBUG_AHCI, "AHCI: Rebasing port %u (0x%08X) clb/fb from 0x%08X/0x%08X\n\t", portno, port, port->clb, port->fb);
   14cda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14cdd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ce3:	8b 00                	mov    eax,DWORD PTR [eax]
   14ce5:	83 ec 08             	sub    esp,0x8
   14ce8:	52                   	push   edx
   14ce9:	50                   	push   eax
   14cea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14ced:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   14cf0:	68 78 6b 04 00       	push   0x46b78
   14cf5:	68 00 20 00 00       	push   0x2000
   14cfa:	e8 c4 2b 01 00       	call   278c3 <printd>
   14cff:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:347
    stop_cmd(port); // Stop command engine
   14d02:	83 ec 0c             	sub    esp,0xc
   14d05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14d08:	e8 eb 01 00 00       	call   14ef8 <stop_cmd>
   14d0d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:353

    // Command list offset: 1K*portno
    // Command list entry size = 32
    // Command list entry maxim count = 32
    // Command list maxim size = 32*32 = 1K per port
    port->clbu = 0;
   14d10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:354
    port->clb = (remapBase + (portno<<15) + 0x1000) & 0xFFFFF000;
   14d1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   14d1d:	c1 e0 0f             	shl    eax,0xf
   14d20:	89 c2                	mov    edx,eax
   14d22:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   14d25:	01 d0                	add    eax,edx
   14d27:	05 00 10 00 00       	add    eax,0x1000
   14d2c:	25 00 f0 ff ff       	and    eax,0xfffff000
   14d31:	89 c2                	mov    edx,eax
   14d33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d36:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:355
    memset((void*) (port->clb), 0, 1024);
   14d38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d3b:	8b 00                	mov    eax,DWORD PTR [eax]
   14d3d:	83 ec 04             	sub    esp,0x4
   14d40:	68 00 04 00 00       	push   0x400
   14d45:	6a 00                	push   0x0
   14d47:	50                   	push   eax
   14d48:	e8 f0 08 01 00       	call   2563d <memset>
   14d4d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:356
    kMapPage(port->clb,port->clb,0x73); //make un-cached
   14d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d53:	8b 10                	mov    edx,DWORD PTR [eax]
   14d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d58:	8b 00                	mov    eax,DWORD PTR [eax]
   14d5a:	83 ec 04             	sub    esp,0x4
   14d5d:	6a 73                	push   0x73
   14d5f:	52                   	push   edx
   14d60:	50                   	push   eax
   14d61:	e8 4a ca ff ff       	call   117b0 <kMapPage>
   14d66:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:361
    
    //each FIS is 256 bytes
    // FIS offset: 32K+256*portno
    // FIS entry size = 256 bytes per port
    port->fbu = 0;
   14d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d6c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:363
//    port->fb = (remapBase + (32 << 10) + (portno << 12) + 0x1000) & 0xFFFFF000;
    port->fb = (port->clb + 0x1000);
   14d73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d76:	8b 00                	mov    eax,DWORD PTR [eax]
   14d78:	8d 90 00 10 00 00    	lea    edx,[eax+0x1000]
   14d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d81:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:364
    memset((void*) (port->fb), 0, 256);
   14d84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14d8a:	83 ec 04             	sub    esp,0x4
   14d8d:	68 00 01 00 00       	push   0x100
   14d92:	6a 00                	push   0x0
   14d94:	50                   	push   eax
   14d95:	e8 a3 08 01 00       	call   2563d <memset>
   14d9a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:365
    kMapPage(port->fb,port->fb,0x73); //make un-cached
   14d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14da0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14da3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14da6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14da9:	83 ec 04             	sub    esp,0x4
   14dac:	6a 73                	push   0x73
   14dae:	52                   	push   edx
   14daf:	50                   	push   eax
   14db0:	e8 fb c9 ff ff       	call   117b0 <kMapPage>
   14db5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:370


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
   14db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14dbb:	8b 00                	mov    eax,DWORD PTR [eax]
   14dbd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:371
    for (int i = 0; i < 32; i++) {
   14dc0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   14dc7:	eb 79                	jmp    14e42 <port_rebase+0x16e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:372 (discriminator 3)
        cmdheader[i].prdtl = 8; // 8 prdt entries per command table
   14dc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14dcc:	c1 e0 05             	shl    eax,0x5
   14dcf:	89 c2                	mov    edx,eax
   14dd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14dd4:	01 d0                	add    eax,edx
   14dd6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:375 (discriminator 3)
        // 256 bytes per command table, 64+16+48+16*8
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
   14ddc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14ddf:	c1 e0 05             	shl    eax,0x5
   14de2:	89 c2                	mov    edx,eax
   14de4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14de7:	01 d0                	add    eax,edx
   14de9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   14dec:	c1 e2 0d             	shl    edx,0xd
   14def:	89 d1                	mov    ecx,edx
   14df1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   14df4:	01 d1                	add    ecx,edx
   14df6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   14df9:	c1 e2 08             	shl    edx,0x8
   14dfc:	01 ca                	add    edx,ecx
   14dfe:	81 c2 00 a0 00 00    	add    edx,0xa000
   14e04:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:376 (discriminator 3)
        cmdheader[i].ctbau = 0;
   14e07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14e0a:	c1 e0 05             	shl    eax,0x5
   14e0d:	89 c2                	mov    edx,eax
   14e0f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14e12:	01 d0                	add    eax,edx
   14e14:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:377 (discriminator 3)
        memset((void*) cmdheader[i].ctba, 0, 256);
   14e1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14e1e:	c1 e0 05             	shl    eax,0x5
   14e21:	89 c2                	mov    edx,eax
   14e23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14e26:	01 d0                	add    eax,edx
   14e28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14e2b:	83 ec 04             	sub    esp,0x4
   14e2e:	68 00 01 00 00       	push   0x100
   14e33:	6a 00                	push   0x0
   14e35:	50                   	push   eax
   14e36:	e8 02 08 01 00       	call   2563d <memset>
   14e3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:371 (discriminator 3)


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
    for (int i = 0; i < 32; i++) {
   14e3e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:371 (discriminator 1)
   14e42:	83 7d f4 1f          	cmp    DWORD PTR [ebp-0xc],0x1f
   14e46:	7e 81                	jle    14dc9 <port_rebase+0xf5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:379
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
        cmdheader[i].ctbau = 0;
        memset((void*) cmdheader[i].ctba, 0, 256);
    }
    printd(DEBUG_AHCI, " to 0x%08X/0x%08X\n", port->clb, port->fb);
   14e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e4b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14e4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e51:	8b 00                	mov    eax,DWORD PTR [eax]
   14e53:	52                   	push   edx
   14e54:	50                   	push   eax
   14e55:	68 b4 6b 04 00       	push   0x46bb4
   14e5a:	68 00 20 00 00       	push   0x2000
   14e5f:	e8 5f 2a 01 00       	call   278c3 <printd>
   14e64:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:380
    start_cmd(port); // Start command engine
   14e67:	83 ec 0c             	sub    esp,0xc
   14e6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14e6d:	e8 06 00 00 00       	call   14e78 <start_cmd>
   14e72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:381
}
   14e75:	90                   	nop
   14e76:	c9                   	leave  
   14e77:	c3                   	ret    

00014e78 <start_cmd>:
start_cmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:385

// Start command engine

void start_cmd(volatile HBA_PORT *port) {
   14e78:	55                   	push   ebp
   14e79:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:387
    // Wait until CR (bit15) is cleared
    while (port->cmd.CR);
   14e7b:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:387 (discriminator 1)
   14e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e7f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14e82:	c1 e8 0f             	shr    eax,0xf
   14e85:	83 e0 01             	and    eax,0x1
   14e88:	84 c0                	test   al,al
   14e8a:	75 f0                	jne    14e7c <start_cmd+0x4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:390

    // Set FRE (bit4) and ST (bit0)
    port->cmd.FRE = 1;
   14e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e8f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14e92:	83 ca 10             	or     edx,0x10
   14e95:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:391
    port->cmd.ST = 1;
   14e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e9b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14e9e:	83 ca 01             	or     edx,0x1
   14ea1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:392
}
   14ea4:	90                   	nop
   14ea5:	5d                   	pop    ebp
   14ea6:	c3                   	ret    

00014ea7 <waitForPortIdle>:
waitForPortIdle():
/home/yogi/src/os/chrisOS/src/block/ahci.c:394

void waitForPortIdle(volatile HBA_PORT *port) {
   14ea7:	55                   	push   ebp
   14ea8:	89 e5                	mov    ebp,esp
   14eaa:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:395
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14ead:	eb 0d                	jmp    14ebc <waitForPortIdle+0x15>
/home/yogi/src/os/chrisOS/src/block/ahci.c:396
        waitTicks(20);
   14eaf:	83 ec 0c             	sub    esp,0xc
   14eb2:	6a 14                	push   0x14
   14eb4:	e8 0e 3c 01 00       	call   28ac7 <waitTicks>
   14eb9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:395
    port->cmd.FRE = 1;
    port->cmd.ST = 1;
}

void waitForPortIdle(volatile HBA_PORT *port) {
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ebf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ec2:	83 e0 01             	and    eax,0x1
   14ec5:	89 c2                	mov    edx,eax
   14ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14eca:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ecd:	c1 e8 0f             	shr    eax,0xf
   14ed0:	83 e0 01             	and    eax,0x1
   14ed3:	09 c2                	or     edx,eax
   14ed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ed8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14edb:	c1 e8 04             	shr    eax,0x4
   14ede:	83 e0 01             	and    eax,0x1
   14ee1:	09 c2                	or     edx,eax
   14ee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ee6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ee9:	c1 e8 0e             	shr    eax,0xe
   14eec:	83 e0 01             	and    eax,0x1
   14eef:	09 d0                	or     eax,edx
   14ef1:	84 c0                	test   al,al
   14ef3:	75 ba                	jne    14eaf <waitForPortIdle+0x8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:398
        waitTicks(20);
    }
}
   14ef5:	90                   	nop
   14ef6:	c9                   	leave  
   14ef7:	c3                   	ret    

00014ef8 <stop_cmd>:
stop_cmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:402

// Stop command engine

void stop_cmd(volatile volatile HBA_PORT *port) {
   14ef8:	55                   	push   ebp
   14ef9:	89 e5                	mov    ebp,esp
   14efb:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:404
    // Clear ST (bit0)
    port->cmd.ST = 0;
   14efe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f01:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14f04:	83 e2 fe             	and    edx,0xfffffffe
   14f07:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:407
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
   14f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f0d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14f10:	c1 e8 0e             	shr    eax,0xe
   14f13:	83 e0 01             	and    eax,0x1
   14f16:	84 c0                	test   al,al
   14f18:	74 1f                	je     14f39 <stop_cmd+0x41>
/home/yogi/src/os/chrisOS/src/block/ahci.c:409
            break;
        if (!(port->cmd.CR))
   14f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f1d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14f20:	c1 e8 0f             	shr    eax,0xf
   14f23:	83 e0 01             	and    eax,0x1
   14f26:	84 c0                	test   al,al
   14f28:	74 12                	je     14f3c <stop_cmd+0x44>
/home/yogi/src/os/chrisOS/src/block/ahci.c:411
            break;
        waitTicks(20);
   14f2a:	83 ec 0c             	sub    esp,0xc
   14f2d:	6a 14                	push   0x14
   14f2f:	e8 93 3b 01 00       	call   28ac7 <waitTicks>
   14f34:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:412
    }
   14f37:	eb d1                	jmp    14f0a <stop_cmd+0x12>
/home/yogi/src/os/chrisOS/src/block/ahci.c:408
    // Clear ST (bit0)
    port->cmd.ST = 0;
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
            break;
   14f39:	90                   	nop
   14f3a:	eb 01                	jmp    14f3d <stop_cmd+0x45>
/home/yogi/src/os/chrisOS/src/block/ahci.c:410
        if (!(port->cmd.CR))
            break;
   14f3c:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:415
        waitTicks(20);
    }

    // Clear FRE (bit4)
    port->cmd.FRE = 0;
   14f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14f43:	83 e2 ef             	and    edx,0xffffffef
   14f46:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:416
}
   14f49:	90                   	nop
   14f4a:	c9                   	leave  
   14f4b:	c3                   	ret    

00014f4c <ahciIdentify>:
ahciIdentify():
/home/yogi/src/os/chrisOS/src/block/ahci.c:418

void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
   14f4c:	55                   	push   ebp
   14f4d:	89 e5                	mov    ebp,esp
   14f4f:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/block/ahci.c:419
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
   14f52:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14f55:	a1 04 98 12 00       	mov    eax,ds:0x129804
   14f5a:	83 ec 0c             	sub    esp,0xc
   14f5d:	52                   	push   edx
   14f5e:	50                   	push   eax
   14f5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14f62:	68 c8 6b 04 00       	push   0x46bc8
   14f67:	68 00 20 00 00       	push   0x2000
   14f6c:	e8 52 29 01 00       	call   278c3 <printd>
   14f71:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:420
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
   14f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f77:	8b 00                	mov    eax,DWORD PTR [eax]
   14f79:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:421
    int slot = find_cmdslot(port);
   14f7c:	83 ec 0c             	sub    esp,0xc
   14f7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14f82:	e8 66 03 00 00       	call   152ed <find_cmdslot>
   14f87:	83 c4 10             	add    esp,0x10
   14f8a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:422
    if (slot == -1)
   14f8d:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   14f91:	0f 84 53 03 00 00    	je     152ea <ahciIdentify+0x39e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:424
        return;
    port->ie.AsUlong = 0xFFFFFFFF;
   14f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f9a:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:425
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   14fa1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14fa4:	c1 e0 05             	shl    eax,0x5
   14fa7:	89 c2                	mov    edx,eax
   14fa9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14fac:	01 d0                	add    eax,edx
   14fae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:426
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   14fb1:	83 ec 04             	sub    esp,0x4
   14fb4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14fb7:	68 d0 64 04 00       	push   0x464d0
   14fbc:	68 00 20 00 00       	push   0x2000
   14fc1:	e8 fd 28 01 00       	call   278c3 <printd>
   14fc6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:427
    cmdheader->prdtl = 1;
   14fc9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14fcc:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:428
    cmdheader->cfl = 5; //sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   14fd2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14fd5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14fd8:	83 e2 e0             	and    edx,0xffffffe0
   14fdb:	83 ca 05             	or     edx,0x5
   14fde:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:429
    cmdheader->w = 0;
   14fe0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14fe3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14fe6:	83 e2 bf             	and    edx,0xffffffbf
   14fe9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:430
    cmdheader->a = 0;
   14feb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14fee:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14ff1:	83 e2 df             	and    edx,0xffffffdf
   14ff4:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:431
    cmdheader->c = 0;
   14ff6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14ff9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14ffd:	83 e2 fb             	and    edx,0xfffffffb
   15000:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:432
    cmdheader->p = 0;
   15003:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   15006:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   15009:	83 e2 7f             	and    edx,0x7f
   1500c:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:433
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   1500e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   15011:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   15014:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:435
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   15017:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1501a:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/ahci.c:434
    cmdheader->w = 0;
    cmdheader->a = 0;
    cmdheader->c = 0;
    cmdheader->p = 0;
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   1501e:	0f b7 c0             	movzx  eax,ax
   15021:	83 c0 08             	add    eax,0x8
   15024:	c1 e0 04             	shl    eax,0x4
   15027:	83 ec 04             	sub    esp,0x4
   1502a:	50                   	push   eax
   1502b:	6a 00                	push   0x0
   1502d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   15030:	e8 08 06 01 00       	call   2563d <memset>
   15035:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:436
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   15038:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1503b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1503e:	50                   	push   eax
   1503f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   15042:	68 e8 64 04 00       	push   0x464e8
   15047:	68 00 20 00 00       	push   0x2000
   1504c:	e8 72 28 01 00       	call   278c3 <printd>
   15051:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:437
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   15054:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   15057:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xc53000
   1505e:	30 c5 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:438
    cmdtbl->prdt_entry[0].dbc = 0x1ff;
   15061:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   15064:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   1506a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   15070:	81 ca ff 01 00 00    	or     edx,0x1ff
   15076:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:439
    cmdtbl->prdt_entry[0].i = 1;
   1507c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1507f:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   15086:	83 ca 80             	or     edx,0xffffff80
   15089:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:441

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   1508f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   15092:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:442
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   15095:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15098:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:443
    cmdfis->c = 1; // Command
   1509b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1509e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   150a2:	83 ca 80             	or     edx,0xffffff80
   150a5:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:444
    if (deviceType == AHCI_DEV_SATAPI)
   150a8:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   150ac:	75 09                	jne    150b7 <ahciIdentify+0x16b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:445
        cmdfis->command = ATA_IDENTIFY_CDROM_COMMAND;
   150ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150b1:	c6 40 02 a1          	mov    BYTE PTR [eax+0x2],0xa1
   150b5:	eb 07                	jmp    150be <ahciIdentify+0x172>
/home/yogi/src/os/chrisOS/src/block/ahci.c:447
    else
        cmdfis->command = ATA_IDENTIFY_COMMAND;
   150b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150ba:	c6 40 02 ec          	mov    BYTE PTR [eax+0x2],0xec
/home/yogi/src/os/chrisOS/src/block/ahci.c:448
    cmdfis->lba0 = 0;
   150be:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150c1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:449
    cmdfis->lba1 = 0;
   150c5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150c8:	c6 40 05 00          	mov    BYTE PTR [eax+0x5],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:450
    cmdfis->lba2 = 0;
   150cc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150cf:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:451
    cmdfis->lba3 = 0;
   150d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150d6:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:452
    cmdfis->lba4 = 0;
   150da:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150dd:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:453
    cmdfis->lba5 = 0;
   150e1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150e4:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:454
    cmdfis->lba5 = 0;
   150e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150eb:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:455
    cmdfis->pmport = 0;
   150ef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150f2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   150f6:	83 e2 f0             	and    edx,0xfffffff0
   150f9:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:456
    cmdfis->device = 0;
   150fc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150ff:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:457
    cmdfis->countl = 1;
   15103:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15106:	c6 40 0c 01          	mov    BYTE PTR [eax+0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:458
    cmdfis->counth = 0;
   1510a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1510d:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:459
    int lCmdVal = AhciIssueCmd(port, slot);
   15111:	83 ec 08             	sub    esp,0x8
   15114:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15117:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1511a:	e8 fd ea ff ff       	call   13c1c <AhciIssueCmd>
   1511f:	83 c4 10             	add    esp,0x10
   15122:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:460
    if (!lCmdVal) {
   15125:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   15129:	75 18                	jne    15143 <ahciIdentify+0x1f7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:461
        printk("AHCI: ***Error identifying device (%u)***\n",lCmdVal);
   1512b:	83 ec 08             	sub    esp,0x8
   1512e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   15131:	68 f8 6b 04 00       	push   0x46bf8
   15136:	e8 68 27 01 00       	call   278a3 <printk>
   1513b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:462
        return;
   1513e:	e9 a8 01 00 00       	jmp    152eb <ahciIdentify+0x39f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:464
    }
    kATADeviceInfo[kATADeviceInfoCount].ATADeviceAvailable = true;
   15143:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   15149:	a1 04 98 12 00       	mov    eax,ds:0x129804
   1514e:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   15154:	01 d0                	add    eax,edx
   15156:	c6 80 51 02 00 00 01 	mov    BYTE PTR [eax+0x251],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:465
    kATADeviceInfo[kATADeviceInfoCount].bus = SATA;
   1515d:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   15163:	a1 04 98 12 00       	mov    eax,ds:0x129804
   15168:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1516e:	01 d0                	add    eax,edx
   15170:	c7 80 61 02 00 00 02 	mov    DWORD PTR [eax+0x261],0x2
   15177:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:466
    kATADeviceInfo[kATADeviceInfoCount].driveNo = kATADeviceInfoCount;
   1517a:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   15180:	a1 04 98 12 00       	mov    eax,ds:0x129804
   15185:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1518b:	01 d0                	add    eax,edx
   1518d:	8b 15 04 98 12 00    	mov    edx,DWORD PTR ds:0x129804
   15193:	89 90 65 02 00 00    	mov    DWORD PTR [eax+0x265],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:467
    kATADeviceInfo[kATADeviceInfoCount].ioPort = (uintptr_t) port;
   15199:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   1519f:	a1 04 98 12 00       	mov    eax,ds:0x129804
   151a4:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   151aa:	01 c2                	add    edx,eax
   151ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   151af:	89 82 69 02 00 00    	mov    DWORD PTR [edx+0x269],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:468
    kATADeviceInfo[kATADeviceInfoCount].irqNum = 0;
   151b5:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   151bb:	a1 04 98 12 00       	mov    eax,ds:0x129804
   151c0:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   151c6:	01 d0                	add    eax,edx
   151c8:	c6 80 6d 02 00 00 00 	mov    BYTE PTR [eax+0x26d],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:469
    kATADeviceInfo[kATADeviceInfoCount].driveHeadPortDesignation = 0x0;
   151cf:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   151d5:	a1 04 98 12 00       	mov    eax,ds:0x129804
   151da:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   151e0:	01 d0                	add    eax,edx
   151e2:	c6 80 6e 02 00 00 00 	mov    BYTE PTR [eax+0x26e],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:470
    kATADeviceInfo[kATADeviceInfoCount].queryATAData = false;
   151e9:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   151ef:	a1 04 98 12 00       	mov    eax,ds:0x129804
   151f4:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   151fa:	01 d0                	add    eax,edx
   151fc:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:471
    if (deviceType == AHCI_DEV_SATAPI)
   15203:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   15207:	75 1f                	jne    15228 <ahciIdentify+0x2dc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:472
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_CD;
   15209:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   1520f:	a1 04 98 12 00       	mov    eax,ds:0x129804
   15214:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1521a:	01 d0                	add    eax,edx
   1521c:	c7 80 52 02 00 00 03 	mov    DWORD PTR [eax+0x252],0x3
   15223:	00 00 00 
   15226:	eb 1d                	jmp    15245 <ahciIdentify+0x2f9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:474
    else
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
   15228:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   1522e:	a1 04 98 12 00       	mov    eax,ds:0x129804
   15233:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   15239:	01 d0                	add    eax,edx
   1523b:	c7 80 52 02 00 00 02 	mov    DWORD PTR [eax+0x252],0x2
   15242:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:475
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
   15245:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   1524b:	a1 04 98 12 00       	mov    eax,ds:0x129804
   15250:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   15256:	01 c2                	add    edx,eax
   15258:	a1 94 99 12 00       	mov    eax,ds:0x129994
   1525d:	89 82 6f 02 00 00    	mov    DWORD PTR [edx+0x26f],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:476
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
   15263:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   15269:	a1 04 98 12 00       	mov    eax,ds:0x129804
   1526e:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   15274:	01 d0                	add    eax,edx
   15276:	83 ec 04             	sub    esp,0x4
   15279:	68 00 02 00 00       	push   0x200
   1527e:	68 00 30 c5 00       	push   0xc53000
   15283:	50                   	push   eax
   15284:	e8 7b 0f 01 00       	call   26204 <memcpy>
   15289:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:477
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
   1528c:	8b 0d 00 98 12 00    	mov    ecx,DWORD PTR ds:0x129800
   15292:	a1 04 98 12 00       	mov    eax,ds:0x129804
   15297:	8d 50 01             	lea    edx,[eax+0x1]
   1529a:	89 15 04 98 12 00    	mov    DWORD PTR ds:0x129804,edx
   152a0:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   152a6:	01 c8                	add    eax,ecx
   152a8:	83 ec 0c             	sub    esp,0xc
   152ab:	50                   	push   eax
   152ac:	e8 9d d7 00 00       	call   22a4e <ataIdentify>
   152b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:478
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
   152b4:	a1 00 98 12 00       	mov    eax,ds:0x129800
   152b9:	8b 15 04 98 12 00    	mov    edx,DWORD PTR ds:0x129804
   152bf:	69 d2 73 02 00 00    	imul   edx,edx,0x273
   152c5:	81 ea 73 02 00 00    	sub    edx,0x273
   152cb:	01 d0                	add    eax,edx
   152cd:	05 00 02 00 00       	add    eax,0x200
   152d2:	83 ec 04             	sub    esp,0x4
   152d5:	50                   	push   eax
   152d6:	68 24 6c 04 00       	push   0x46c24
   152db:	68 00 20 00 00       	push   0x2000
   152e0:	e8 de 25 01 00       	call   278c3 <printd>
   152e5:	83 c4 10             	add    esp,0x10
   152e8:	eb 01                	jmp    152eb <ahciIdentify+0x39f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:423
void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   152ea:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:479
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
}
   152eb:	c9                   	leave  
   152ec:	c3                   	ret    

000152ed <find_cmdslot>:
find_cmdslot():
/home/yogi/src/os/chrisOS/src/block/ahci.c:482
// Find a free command list slot

int find_cmdslot(volatile HBA_PORT *port) {
   152ed:	55                   	push   ebp
   152ee:	89 e5                	mov    ebp,esp
   152f0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:483
    printd(DEBUG_AHCI, "AHCI: find_cmdslot - finding a slot to use to execute a command\n");
   152f3:	83 ec 08             	sub    esp,0x8
   152f6:	68 48 6c 04 00       	push   0x46c48
   152fb:	68 00 20 00 00       	push   0x2000
   15300:	e8 be 25 01 00       	call   278c3 <printd>
   15305:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:487
    // An empty command slot has its respective bit cleared to �0� in both the PxCI and PxSACT registers.
    // If not set in SACT and CI, the slot is free // Checked
    
    uint32_t slots = (/*port->sact | */port->ci);
   15308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1530b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1530e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:488
    int num_of_slots = ahciABAR->cap.NCS;
   15311:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15316:	8b 00                	mov    eax,DWORD PTR [eax]
   15318:	c1 e8 08             	shr    eax,0x8
   1531b:	83 e0 1f             	and    eax,0x1f
   1531e:	0f b6 c0             	movzx  eax,al
   15321:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:489
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
   15324:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15329:	8b 00                	mov    eax,DWORD PTR [eax]
   1532b:	c1 e8 08             	shr    eax,0x8
   1532e:	83 e0 1f             	and    eax,0x1f
   15331:	0f b6 d0             	movzx  edx,al
   15334:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15339:	52                   	push   edx
   1533a:	50                   	push   eax
   1533b:	68 8c 6c 04 00       	push   0x46c8c
   15340:	68 00 20 00 00       	push   0x2000
   15345:	e8 79 25 01 00       	call   278c3 <printd>
   1534a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:491
    int i;
    for (i = 0; i < num_of_slots; i++) {
   1534d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   15354:	eb 46                	jmp    1539c <find_cmdslot+0xaf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:493

        if ((slots & 1) == 0) {
   15356:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   15359:	83 e0 01             	and    eax,0x1
   1535c:	85 c0                	test   eax,eax
   1535e:	75 1d                	jne    1537d <find_cmdslot+0x90>
/home/yogi/src/os/chrisOS/src/block/ahci.c:494
            printd(DEBUG_AHCI, "AHCI: [command slot is : %d]\n", i);
   15360:	83 ec 04             	sub    esp,0x4
   15363:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15366:	68 b8 6c 04 00       	push   0x46cb8
   1536b:	68 00 20 00 00       	push   0x2000
   15370:	e8 4e 25 01 00       	call   278c3 <printd>
   15375:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:495
            return i;
   15378:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1537b:	eb 44                	jmp    153c1 <find_cmdslot+0xd4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:498 (discriminator 2)

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
   1537d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   15380:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15383:	68 d6 6c 04 00       	push   0x46cd6
   15388:	68 00 20 00 00       	push   0x2000
   1538d:	e8 31 25 01 00       	call   278c3 <printd>
   15392:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:499 (discriminator 2)
        slots >>= 1;
   15395:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/src/os/chrisOS/src/block/ahci.c:491 (discriminator 2)
    
    uint32_t slots = (/*port->sact | */port->ci);
    int num_of_slots = ahciABAR->cap.NCS;
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
    int i;
    for (i = 0; i < num_of_slots; i++) {
   15398:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:491 (discriminator 1)
   1539c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1539f:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   153a2:	7c b2                	jl     15356 <find_cmdslot+0x69>
/home/yogi/src/os/chrisOS/src/block/ahci.c:501

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
        slots >>= 1;
    }
    printd(DEBUG_AHCI, "AHCI: Cannot find free command list entry, count=%u, slots=0x%08X\n", num_of_slots, slots);
   153a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   153a7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   153aa:	68 f0 6c 04 00       	push   0x46cf0
   153af:	68 00 20 00 00       	push   0x2000
   153b4:	e8 0a 25 01 00       	call   278c3 <printd>
   153b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:502
    return -1;
   153bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:503
}
   153c1:	c9                   	leave  
   153c2:	c3                   	ret    

000153c3 <ahciSetCurrentDisk>:
ahciSetCurrentDisk():
/home/yogi/src/os/chrisOS/src/block/ahci.c:508

#define ATA_DEV_BUSY 0x80
#define ATA_DEV_DRQ 0x08

void ahciSetCurrentDisk(volatile HBA_PORT* port) {
   153c3:	55                   	push   ebp
   153c4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:509
    kAHCICurrentDisk = port;
   153c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   153c9:	a3 4c 99 12 00       	mov    ds:0x12994c,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:510
}
   153ce:	90                   	nop
   153cf:	5d                   	pop    ebp
   153d0:	c3                   	ret    

000153d1 <ahciSetCurrentPart>:
ahciSetCurrentPart():
/home/yogi/src/os/chrisOS/src/block/ahci.c:513

void ahciSetCurrentPart(partEntry_t part) 
{
   153d1:	55                   	push   ebp
   153d2:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:514
    kAHCICurrentPart = part;
   153d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   153d7:	a3 50 99 12 00       	mov    ds:0x129950,eax
   153dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   153df:	a3 54 99 12 00       	mov    ds:0x129954,eax
   153e4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   153e7:	a3 58 99 12 00       	mov    ds:0x129958,eax
   153ec:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   153ef:	a3 5c 99 12 00       	mov    ds:0x12995c,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:515
}
   153f4:	90                   	nop
   153f5:	5d                   	pop    ebp
   153f6:	c3                   	ret    

000153f7 <ahciRead>:
ahciRead():
/home/yogi/src/os/chrisOS/src/block/ahci.c:517

int ahciRead(volatile HBA_PORT* port, int sector, uint8_t* buffer, int sector_count) {
   153f7:	55                   	push   ebp
   153f8:	89 e5                	mov    ebp,esp
   153fa:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:518
    ahciSetCurrentDisk(port);
   153fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   15400:	e8 be ff ff ff       	call   153c3 <ahciSetCurrentDisk>
   15405:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/block/ahci.c:519
    if (ahciBlockingRead28(sector, buffer, sector_count))
   15408:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1540b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1540e:	83 ec 04             	sub    esp,0x4
   15411:	52                   	push   edx
   15412:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   15415:	50                   	push   eax
   15416:	e8 13 00 00 00       	call   1542e <ahciBlockingRead28>
   1541b:	83 c4 10             	add    esp,0x10
   1541e:	85 c0                	test   eax,eax
   15420:	74 05                	je     15427 <ahciRead+0x30>
/home/yogi/src/os/chrisOS/src/block/ahci.c:520
        return sector_count;
   15422:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   15425:	eb 05                	jmp    1542c <ahciRead+0x35>
/home/yogi/src/os/chrisOS/src/block/ahci.c:522
    else
        return 0;
   15427:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:523
}
   1542c:	c9                   	leave  
   1542d:	c3                   	ret    

0001542e <ahciBlockingRead28>:
ahciBlockingRead28():
/home/yogi/src/os/chrisOS/src/block/ahci.c:526

///Read the current disk *partition* 
int ahciBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   1542e:	55                   	push   ebp
   1542f:	89 e5                	mov    ebp,esp
   15431:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/block/ahci.c:527
    int prdCntr = 0;
   15434:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:530

    //CLR 06/07/2016 - Must add partition start sector
    sector+=kAHCICurrentPart.partStartSector;
   1543b:	a1 50 99 12 00       	mov    eax,ds:0x129950
   15440:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:532
    
    memset(buffer,0,sector_count*512);
   15443:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   15446:	c1 e0 09             	shl    eax,0x9
   15449:	83 ec 04             	sub    esp,0x4
   1544c:	50                   	push   eax
   1544d:	6a 00                	push   0x0
   1544f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15452:	e8 e6 01 01 00       	call   2563d <memset>
   15457:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:534
    
    printd(DEBUG_AHCI, "AHCI: read on port=0x%08X,sector=0x%08X,buffer=0x%08X,sector_count=%u\n", kAHCICurrentDisk,sector,buffer,sector_count);
   1545a:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   1545f:	83 ec 08             	sub    esp,0x8
   15462:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   15465:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15468:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1546b:	50                   	push   eax
   1546c:	68 34 6d 04 00       	push   0x46d34
   15471:	68 00 20 00 00       	push   0x2000
   15476:	e8 48 24 01 00       	call   278c3 <printd>
   1547b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:536

    kAHCICurrentDisk->pxis.AsUlong = (uint32_t) - 1; // Clear pending interrupt bits
   1547e:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   15483:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:537
    int spin = 0; // Spin lock timeout counter
   1548a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:539

    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) kAHCICurrentDisk->clb;
   15491:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   15496:	8b 00                	mov    eax,DWORD PTR [eax]
   15498:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:540
    int slot = find_cmdslot(kAHCICurrentDisk);
   1549b:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   154a0:	83 ec 0c             	sub    esp,0xc
   154a3:	50                   	push   eax
   154a4:	e8 44 fe ff ff       	call   152ed <find_cmdslot>
   154a9:	83 c4 10             	add    esp,0x10
   154ac:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:541
    if (slot == -1)
   154af:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   154b3:	75 0a                	jne    154bf <ahciBlockingRead28+0x91>
/home/yogi/src/os/chrisOS/src/block/ahci.c:542
        return false;
   154b5:	b8 00 00 00 00       	mov    eax,0x0
   154ba:	e9 41 02 00 00       	jmp    15700 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:543
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   154bf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   154c2:	c1 e0 05             	shl    eax,0x5
   154c5:	89 c2                	mov    edx,eax
   154c7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   154ca:	01 d0                	add    eax,edx
   154cc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:544
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   154cf:	83 ec 04             	sub    esp,0x4
   154d2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   154d5:	68 d0 64 04 00       	push   0x464d0
   154da:	68 00 20 00 00       	push   0x2000
   154df:	e8 df 23 01 00       	call   278c3 <printd>
   154e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:545
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count
   154e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   154ea:	83 e8 01             	sub    eax,0x1
   154ed:	c1 e8 04             	shr    eax,0x4
   154f0:	8d 50 01             	lea    edx,[eax+0x1]
   154f3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   154f6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/block/ahci.c:547

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
   154fa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   154fd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   15500:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:549
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   15503:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15506:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/ahci.c:548
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   1550a:	0f b7 c0             	movzx  eax,ax
   1550d:	83 c0 08             	add    eax,0x8
   15510:	c1 e0 04             	shl    eax,0x4
   15513:	83 ec 04             	sub    esp,0x4
   15516:	50                   	push   eax
   15517:	6a 00                	push   0x0
   15519:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1551c:	e8 1c 01 01 00       	call   2563d <memset>
   15521:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:550
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   15524:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1552a:	50                   	push   eax
   1552b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1552e:	68 7c 6d 04 00       	push   0x46d7c
   15533:	68 00 20 00 00       	push   0x2000
   15538:	e8 86 23 01 00       	call   278c3 <printd>
   1553d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:553

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   15540:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   15547:	eb 5b                	jmp    155a4 <ahciBlockingRead28+0x176>
/home/yogi/src/os/chrisOS/src/block/ahci.c:554 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   15549:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1554c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   1554f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   15552:	83 c1 08             	add    ecx,0x8
   15555:	c1 e1 04             	shl    ecx,0x4
   15558:	01 ca                	add    edx,ecx
   1555a:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:555 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dbc = 8 * 1024; // 8K bytes
   1555c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1555f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   15562:	83 c2 08             	add    edx,0x8
   15565:	c1 e2 04             	shl    edx,0x4
   15568:	01 d0                	add    eax,edx
   1556a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1556d:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   15573:	80 ce 20             	or     dh,0x20
   15576:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:556 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].i = 1;
   15579:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1557c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1557f:	83 c2 08             	add    edx,0x8
   15582:	c1 e2 04             	shl    edx,0x4
   15585:	01 d0                	add    eax,edx
   15587:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   1558b:	83 ca 80             	or     edx,0xffffff80
   1558e:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:557 (discriminator 3)
        buffer += 4 * 1024; // 4K words
   15591:	81 45 0c 00 10 00 00 	add    DWORD PTR [ebp+0xc],0x1000
/home/yogi/src/os/chrisOS/src/block/ahci.c:558 (discriminator 3)
        sector_count -= 16; // 16 sectors
   15598:	83 6d 10 10          	sub    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:559 (discriminator 3)
        prdCntr++;
   1559c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:553 (discriminator 3)
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   155a0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:553 (discriminator 1)
   155a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   155a7:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   155ab:	0f b7 c0             	movzx  eax,ax
   155ae:	83 e8 01             	sub    eax,0x1
   155b1:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   155b4:	7f 93                	jg     15549 <ahciBlockingRead28+0x11b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:562
        buffer += 4 * 1024; // 4K words
        sector_count -= 16; // 16 sectors
        prdCntr++;
    }
    // Last entry
    cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   155b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   155b9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   155bc:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   155bf:	83 c1 08             	add    ecx,0x8
   155c2:	c1 e1 04             	shl    ecx,0x4
   155c5:	01 ca                	add    edx,ecx
   155c7:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:563
    cmdtbl->prdt_entry[prdCntr].dbc = sector_count << 9; // 512 bytes per sector
   155c9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   155cc:	c1 e0 09             	shl    eax,0x9
   155cf:	25 ff ff 3f 00       	and    eax,0x3fffff
   155d4:	89 c1                	mov    ecx,eax
   155d6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   155d9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   155dc:	83 c2 08             	add    edx,0x8
   155df:	c1 e2 04             	shl    edx,0x4
   155e2:	01 d0                	add    eax,edx
   155e4:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
   155ea:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   155ed:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   155f3:	09 ca                	or     edx,ecx
   155f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:564
    cmdtbl->prdt_entry[prdCntr].i = 1;
   155f8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   155fb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   155fe:	83 c2 08             	add    edx,0x8
   15601:	c1 e2 04             	shl    edx,0x4
   15604:	01 d0                	add    eax,edx
   15606:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   1560a:	83 ca 80             	or     edx,0xffffff80
   1560d:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:567

    // Setup command
    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   15610:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   15613:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:569

    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   15616:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15619:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:570
    cmdfis->c = 1; // Command
   1561c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1561f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   15623:	83 ca 80             	or     edx,0xffffff80
   15626:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:571
    cmdfis->command = ATA_CMD_READ_DMA_EX;
   15629:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1562c:	c6 40 02 25          	mov    BYTE PTR [eax+0x2],0x25
/home/yogi/src/os/chrisOS/src/block/ahci.c:572
    cmdfis->lba0 = (uint8_t) sector;
   15630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15633:	89 c2                	mov    edx,eax
   15635:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15638:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:573
    cmdfis->lba1 = (uint8_t) (sector >> 8);
   1563b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1563e:	c1 e8 08             	shr    eax,0x8
   15641:	89 c2                	mov    edx,eax
   15643:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15646:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:574
    cmdfis->lba2 = (uint8_t) (sector >> 16);
   15649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1564c:	c1 e8 10             	shr    eax,0x10
   1564f:	89 c2                	mov    edx,eax
   15651:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15654:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:575
    cmdfis->device = 1 << 6; // LBA mode
   15657:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1565a:	c6 40 07 40          	mov    BYTE PTR [eax+0x7],0x40
/home/yogi/src/os/chrisOS/src/block/ahci.c:577

    cmdfis->lba3 = (uint8_t) (sector >> 24);
   1565e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15661:	c1 e8 18             	shr    eax,0x18
   15664:	89 c2                	mov    edx,eax
   15666:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15669:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:578
    cmdfis->lba4 = (uint8_t) 0;
   1566c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1566f:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:579
    cmdfis->lba5 = (uint8_t) 0;
   15673:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15676:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:581

    cmdfis->countl = LOBYTE((uint16_t) sector_count);
   1567a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1567d:	89 c2                	mov    edx,eax
   1567f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15682:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:582
    cmdfis->counth = HIBYTE((uint16_t) sector_count);
   15685:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   15688:	0f b7 c0             	movzx  eax,ax
   1568b:	c1 f8 08             	sar    eax,0x8
   1568e:	89 c2                	mov    edx,eax
   15690:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15693:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:584

    int lCMdVal = AhciIssueCmd(kAHCICurrentDisk, slot);
   15696:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   1569b:	83 ec 08             	sub    esp,0x8
   1569e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   156a1:	50                   	push   eax
   156a2:	e8 75 e5 ff ff       	call   13c1c <AhciIssueCmd>
   156a7:	83 c4 10             	add    esp,0x10
   156aa:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:585
    if (!lCMdVal) {
   156ad:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   156b1:	75 1c                	jne    156cf <ahciBlockingRead28+0x2a1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:586
        printd(DEBUG_AHCI, "AHCI: ***Error reading from disk***\n");
   156b3:	83 ec 08             	sub    esp,0x8
   156b6:	68 a8 6d 04 00       	push   0x46da8
   156bb:	68 00 20 00 00       	push   0x2000
   156c0:	e8 fe 21 01 00       	call   278c3 <printd>
   156c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:587
        return -1;
   156c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
   156cd:	eb 31                	jmp    15700 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:591
    }

    // Check again
    if (kAHCICurrentDisk->pxis.TFES) {
   156cf:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   156d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   156d7:	c1 e8 1e             	shr    eax,0x1e
   156da:	83 e0 01             	and    eax,0x1
   156dd:	84 c0                	test   al,al
   156df:	74 1c                	je     156fd <ahciBlockingRead28+0x2cf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:592
        printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   156e1:	83 ec 08             	sub    esp,0x8
   156e4:	68 8f 64 04 00       	push   0x4648f
   156e9:	68 00 20 00 00       	push   0x2000
   156ee:	e8 d0 21 01 00       	call   278c3 <printd>
   156f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:593
        return false;
   156f6:	b8 00 00 00 00       	mov    eax,0x0
   156fb:	eb 03                	jmp    15700 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:596
    }

    return sector_count;
   156fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/block/ahci.c:597
}
   15700:	c9                   	leave  
   15701:	c3                   	ret    

00015702 <ahciBlockingWrite28>:
ahciBlockingWrite28():
/home/yogi/src/os/chrisOS/src/block/ahci.c:599

int ahciBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   15702:	55                   	push   ebp
   15703:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:600
    return 0;
   15705:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:601
}
   1570a:	5d                   	pop    ebp
   1570b:	c3                   	ret    

0001570c <ahciInit>:
ahciInit():
/home/yogi/src/os/chrisOS/src/block/ahci.c:603

bool ahciInit() {
   1570c:	55                   	push   ebp
   1570d:	89 e5                	mov    ebp,esp
   1570f:	56                   	push   esi
   15710:	53                   	push   ebx
   15711:	81 ec b0 00 00 00    	sub    esp,0xb0
/home/yogi/src/os/chrisOS/src/block/ahci.c:604
    kATADeviceInfoCount = 4;
   15717:	c7 05 04 98 12 00 04 	mov    DWORD PTR ds:0x129804,0x4
   1571e:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:605
    bool ahciDeviceFound = false;
   15721:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:608
    char buffer[150];

    memset(buffer, 0, 150);
   15725:	83 ec 04             	sub    esp,0x4
   15728:	68 96 00 00 00       	push   0x96
   1572d:	6a 00                	push   0x0
   1572f:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   15735:	50                   	push   eax
   15736:	e8 02 ff 00 00       	call   2563d <memset>
   1573b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:610

    if (!kPCIDeviceCount) {
   1573e:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   15745:	84 c0                	test   al,al
   15747:	75 1f                	jne    15768 <ahciInit+0x5c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:611
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
   15749:	83 ec 08             	sub    esp,0x8
   1574c:	68 d0 6d 04 00       	push   0x46dd0
   15751:	68 00 20 00 00       	push   0x2000
   15756:	e8 68 21 01 00       	call   278c3 <printd>
   1575b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:612
        return false;
   1575e:	b8 00 00 00 00       	mov    eax,0x0
   15763:	e9 b1 04 00 00       	jmp    15c19 <ahciInit+0x50d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:615
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15768:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1576f:	e9 35 02 00 00       	jmp    159a9 <ahciInit+0x29d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:616
        if (kPCIDeviceHeaders[cnt].class == 1 && kPCIDeviceHeaders[cnt].subClass == 6) 
   15774:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   1577a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1577d:	89 d0                	mov    eax,edx
   1577f:	c1 e0 02             	shl    eax,0x2
   15782:	01 d0                	add    eax,edx
   15784:	c1 e0 04             	shl    eax,0x4
   15787:	01 c8                	add    eax,ecx
   15789:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1578c:	83 f8 01             	cmp    eax,0x1
   1578f:	0f 85 10 02 00 00    	jne    159a5 <ahciInit+0x299>
/home/yogi/src/os/chrisOS/src/block/ahci.c:616 (discriminator 1)
   15795:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   1579b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1579e:	89 d0                	mov    eax,edx
   157a0:	c1 e0 02             	shl    eax,0x2
   157a3:	01 d0                	add    eax,edx
   157a5:	c1 e0 04             	shl    eax,0x4
   157a8:	01 c8                	add    eax,ecx
   157aa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   157ad:	83 f8 06             	cmp    eax,0x6
   157b0:	0f 85 ef 01 00 00    	jne    159a5 <ahciInit+0x299>
/home/yogi/src/os/chrisOS/src/block/ahci.c:618
        {
            memcpy(&kPCISATADevice, &kPCIDeviceHeaders[cnt], sizeof (struct pci_device_t));
   157b6:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   157bc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   157bf:	89 d0                	mov    eax,edx
   157c1:	c1 e0 02             	shl    eax,0x2
   157c4:	01 d0                	add    eax,edx
   157c6:	c1 e0 04             	shl    eax,0x4
   157c9:	01 c8                	add    eax,ecx
   157cb:	83 ec 04             	sub    esp,0x4
   157ce:	6a 50                	push   0x50
   157d0:	50                   	push   eax
   157d1:	68 20 98 12 00       	push   0x129820
   157d6:	e8 29 0a 01 00       	call   26204 <memcpy>
   157db:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:619
            ahciDeviceFound = true;
   157de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:620
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (D) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceHeaders[cnt].class, kPCIDeviceHeaders[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   157e2:	83 ec 08             	sub    esp,0x8
   157e5:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   157eb:	50                   	push   eax
   157ec:	68 20 98 12 00       	push   0x129820
   157f1:	e8 d8 14 00 00       	call   16cce <getDeviceNameP>
   157f6:	83 c4 10             	add    esp,0x10
   157f9:	89 c6                	mov    esi,eax
   157fb:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   15801:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   15804:	89 d0                	mov    eax,edx
   15806:	c1 e0 02             	shl    eax,0x2
   15809:	01 d0                	add    eax,edx
   1580b:	c1 e0 04             	shl    eax,0x4
   1580e:	01 c8                	add    eax,ecx
   15810:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   15813:	8b 1d f4 97 12 00    	mov    ebx,DWORD PTR ds:0x1297f4
   15819:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1581c:	89 d0                	mov    eax,edx
   1581e:	c1 e0 02             	shl    eax,0x2
   15821:	01 d0                	add    eax,edx
   15823:	c1 e0 04             	shl    eax,0x4
   15826:	01 d8                	add    eax,ebx
   15828:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1582b:	83 ec 08             	sub    esp,0x8
   1582e:	56                   	push   esi
   1582f:	51                   	push   ecx
   15830:	50                   	push   eax
   15831:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15834:	68 04 6e 04 00       	push   0x46e04
   15839:	68 00 20 00 00       	push   0x2000
   1583e:	e8 80 20 01 00       	call   278c3 <printd>
   15843:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:621
            printd(DEBUG_AHCI, "ABAR is at: before/remapped - 0x%08X/", kPCISATADevice.baseAdd[5]);
   15846:	a1 54 98 12 00       	mov    eax,ds:0x129854
   1584b:	83 ec 04             	sub    esp,0x4
   1584e:	50                   	push   eax
   1584f:	68 3c 6e 04 00       	push   0x46e3c
   15854:	68 00 20 00 00       	push   0x2000
   15859:	e8 65 20 01 00       	call   278c3 <printd>
   1585e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:622
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   15861:	a1 44 92 02 00       	mov    eax,ds:0x29244
   15866:	c1 e0 0c             	shl    eax,0xc
   15869:	89 c2                	mov    edx,eax
   1586b:	c1 e2 04             	shl    edx,0x4
   1586e:	01 d0                	add    eax,edx
   15870:	05 00 30 ad 00       	add    eax,0xad3000
   15875:	a3 94 99 12 00       	mov    ds:0x129994,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:623
                kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5] , 0x73); //0x63 + cache disabled
   1587a:	a1 54 98 12 00       	mov    eax,ds:0x129854
   1587f:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   15885:	83 ec 04             	sub    esp,0x4
   15888:	6a 73                	push   0x73
   1588a:	50                   	push   eax
   1588b:	52                   	push   edx
   1588c:	e8 1f bf ff ff       	call   117b0 <kMapPage>
   15891:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:624
                kMapPage(kPCISATADevice.baseAdd[5],kPCISATADevice.baseAdd[5],0x73);
   15894:	8b 15 54 98 12 00    	mov    edx,DWORD PTR ds:0x129854
   1589a:	a1 54 98 12 00       	mov    eax,ds:0x129854
   1589f:	83 ec 04             	sub    esp,0x4
   158a2:	6a 73                	push   0x73
   158a4:	52                   	push   edx
   158a5:	50                   	push   eax
   158a6:	e8 05 bf ff ff       	call   117b0 <kMapPage>
   158ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:625
            RELOAD_CR3
   158ae:	0f 20 d8             	mov    eax,cr3
   158b1:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:626
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   158b4:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   158ba:	a1 44 92 02 00       	mov    eax,ds:0x29244
   158bf:	8d 48 01             	lea    ecx,[eax+0x1]
   158c2:	89 0d 44 92 02 00    	mov    DWORD PTR ds:0x29244,ecx
   158c8:	c1 e0 08             	shl    eax,0x8
   158cb:	89 c1                	mov    ecx,eax
   158cd:	c1 e1 04             	shl    ecx,0x4
   158d0:	01 c8                	add    eax,ecx
   158d2:	05 40 b5 08 00       	add    eax,0x8b540
   158d7:	83 ec 04             	sub    esp,0x4
   158da:	68 00 11 00 00       	push   0x1100
   158df:	52                   	push   edx
   158e0:	50                   	push   eax
   158e1:	e8 1e 09 01 00       	call   26204 <memcpy>
   158e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:627
            printd(DEBUG_AHCI, "0x%08X\n", ahciABAR);
   158e9:	a1 94 99 12 00       	mov    eax,ds:0x129994
   158ee:	83 ec 04             	sub    esp,0x4
   158f1:	50                   	push   eax
   158f2:	68 62 6e 04 00       	push   0x46e62
   158f7:	68 00 20 00 00       	push   0x2000
   158fc:	e8 c2 1f 01 00       	call   278c3 <printd>
   15901:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:628
            memcpy(&ahciCaps[ahciCapsCount++], (void*) ahciABAR, sizeof (ahcicaps_t));
   15904:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   1590a:	8b 1d 24 99 12 00    	mov    ebx,DWORD PTR ds:0x129924
   15910:	a1 28 99 12 00       	mov    eax,ds:0x129928
   15915:	8d 48 01             	lea    ecx,[eax+0x1]
   15918:	89 0d 28 99 12 00    	mov    DWORD PTR ds:0x129928,ecx
   1591e:	c1 e0 02             	shl    eax,0x2
   15921:	01 d8                	add    eax,ebx
   15923:	83 ec 04             	sub    esp,0x4
   15926:	6a 04                	push   0x4
   15928:	52                   	push   edx
   15929:	50                   	push   eax
   1592a:	e8 d5 08 01 00       	call   26204 <memcpy>
   1592f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:629
            if (!(ahciABAR->ghc.AE)) {
   15932:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15937:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1593a:	c1 e8 1f             	shr    eax,0x1f
   1593d:	84 c0                	test   al,al
   1593f:	75 26                	jne    15967 <ahciInit+0x25b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:630
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   15941:	83 ec 08             	sub    esp,0x8
   15944:	68 6a 6e 04 00       	push   0x46e6a
   15949:	68 00 20 00 00       	push   0x2000
   1594e:	e8 70 1f 01 00       	call   278c3 <printd>
   15953:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:631
                ahciABAR->ghc.AE=1;
   15956:	a1 94 99 12 00       	mov    eax,ds:0x129994
   1595b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1595e:	81 ca 00 00 00 80    	or     edx,0x80000000
   15964:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:633
            }
            ahciABAR->ghc.IE=1;
   15967:	a1 94 99 12 00       	mov    eax,ds:0x129994
   1596c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1596f:	83 ca 02             	or     edx,0x2
   15972:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:634
            if (ahciABAR->cap2 & 1) {
   15975:	a1 94 99 12 00       	mov    eax,ds:0x129994
   1597a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   1597d:	83 e0 01             	and    eax,0x1
   15980:	85 c0                	test   eax,eax
   15982:	74 10                	je     15994 <ahciInit+0x288>
/home/yogi/src/os/chrisOS/src/block/ahci.c:635
                panic("Write support for BIOS handoff!!!");
   15984:	83 ec 0c             	sub    esp,0xc
   15987:	68 84 6e 04 00       	push   0x46e84
   1598c:	e8 93 1a 01 00       	call   27424 <panic>
   15991:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:637
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   15994:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15999:	83 ec 0c             	sub    esp,0xc
   1599c:	50                   	push   eax
   1599d:	e8 88 ea ff ff       	call   1442a <ahciProbePorts>
   159a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:615 (discriminator 2)
    if (!kPCIDeviceCount) {
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
        return false;
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   159a5:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:615 (discriminator 1)
   159a9:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   159b0:	0f b6 c0             	movzx  eax,al
   159b3:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   159b6:	0f 8f b8 fd ff ff    	jg     15774 <ahciInit+0x68>
/home/yogi/src/os/chrisOS/src/block/ahci.c:639
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   159bc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   159c3:	e9 12 02 00 00       	jmp    15bda <ahciInit+0x4ce>
/home/yogi/src/os/chrisOS/src/block/ahci.c:640
        if (kPCIDeviceFunctions[cnt].class == 1 && kPCIDeviceFunctions[cnt].subClass == 6) 
   159c8:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   159ce:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   159d1:	89 d0                	mov    eax,edx
   159d3:	c1 e0 02             	shl    eax,0x2
   159d6:	01 d0                	add    eax,edx
   159d8:	c1 e0 04             	shl    eax,0x4
   159db:	01 c8                	add    eax,ecx
   159dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   159e0:	83 f8 01             	cmp    eax,0x1
   159e3:	0f 85 ed 01 00 00    	jne    15bd6 <ahciInit+0x4ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:640 (discriminator 1)
   159e9:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   159ef:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   159f2:	89 d0                	mov    eax,edx
   159f4:	c1 e0 02             	shl    eax,0x2
   159f7:	01 d0                	add    eax,edx
   159f9:	c1 e0 04             	shl    eax,0x4
   159fc:	01 c8                	add    eax,ecx
   159fe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   15a01:	83 f8 06             	cmp    eax,0x6
   15a04:	0f 85 cc 01 00 00    	jne    15bd6 <ahciInit+0x4ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:642
        {
            memcpy(&kPCISATADevice, &kPCIDeviceFunctions[cnt], sizeof (struct pci_device_t));
   15a0a:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   15a10:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15a13:	89 d0                	mov    eax,edx
   15a15:	c1 e0 02             	shl    eax,0x2
   15a18:	01 d0                	add    eax,edx
   15a1a:	c1 e0 04             	shl    eax,0x4
   15a1d:	01 c8                	add    eax,ecx
   15a1f:	83 ec 04             	sub    esp,0x4
   15a22:	6a 50                	push   0x50
   15a24:	50                   	push   eax
   15a25:	68 20 98 12 00       	push   0x129820
   15a2a:	e8 d5 07 01 00       	call   26204 <memcpy>
   15a2f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:643
            ahciDeviceFound = true;
   15a32:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:644
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (F) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceFunctions[cnt].class, kPCIDeviceFunctions[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   15a36:	83 ec 08             	sub    esp,0x8
   15a39:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   15a3f:	50                   	push   eax
   15a40:	68 20 98 12 00       	push   0x129820
   15a45:	e8 84 12 00 00       	call   16cce <getDeviceNameP>
   15a4a:	83 c4 10             	add    esp,0x10
   15a4d:	89 c6                	mov    esi,eax
   15a4f:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   15a55:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15a58:	89 d0                	mov    eax,edx
   15a5a:	c1 e0 02             	shl    eax,0x2
   15a5d:	01 d0                	add    eax,edx
   15a5f:	c1 e0 04             	shl    eax,0x4
   15a62:	01 c8                	add    eax,ecx
   15a64:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   15a67:	8b 1d fc 97 12 00    	mov    ebx,DWORD PTR ds:0x1297fc
   15a6d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15a70:	89 d0                	mov    eax,edx
   15a72:	c1 e0 02             	shl    eax,0x2
   15a75:	01 d0                	add    eax,edx
   15a77:	c1 e0 04             	shl    eax,0x4
   15a7a:	01 d8                	add    eax,ebx
   15a7c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   15a7f:	83 ec 08             	sub    esp,0x8
   15a82:	56                   	push   esi
   15a83:	51                   	push   ecx
   15a84:	50                   	push   eax
   15a85:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   15a88:	68 a8 6e 04 00       	push   0x46ea8
   15a8d:	68 00 20 00 00       	push   0x2000
   15a92:	e8 2c 1e 01 00       	call   278c3 <printd>
   15a97:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:645
            printd(DEBUG_AHCI, "ABAR is at: 0x%08X\n", kPCISATADevice.baseAdd[5]);
   15a9a:	a1 54 98 12 00       	mov    eax,ds:0x129854
   15a9f:	83 ec 04             	sub    esp,0x4
   15aa2:	50                   	push   eax
   15aa3:	68 df 6e 04 00       	push   0x46edf
   15aa8:	68 00 20 00 00       	push   0x2000
   15aad:	e8 11 1e 01 00       	call   278c3 <printd>
   15ab2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:646
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   15ab5:	a1 44 92 02 00       	mov    eax,ds:0x29244
   15aba:	c1 e0 0c             	shl    eax,0xc
   15abd:	89 c2                	mov    edx,eax
   15abf:	c1 e2 04             	shl    edx,0x4
   15ac2:	01 d0                	add    eax,edx
   15ac4:	05 00 30 ad 00       	add    eax,0xad3000
   15ac9:	a3 94 99 12 00       	mov    ds:0x129994,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:647
            kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5], 0x73); //0x63 + cache disabled
   15ace:	a1 54 98 12 00       	mov    eax,ds:0x129854
   15ad3:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   15ad9:	83 ec 04             	sub    esp,0x4
   15adc:	6a 73                	push   0x73
   15ade:	50                   	push   eax
   15adf:	52                   	push   edx
   15ae0:	e8 cb bc ff ff       	call   117b0 <kMapPage>
   15ae5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:648
            RELOAD_CR3
   15ae8:	0f 20 d8             	mov    eax,cr3
   15aeb:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:649
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   15aee:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   15af4:	a1 44 92 02 00       	mov    eax,ds:0x29244
   15af9:	8d 48 01             	lea    ecx,[eax+0x1]
   15afc:	89 0d 44 92 02 00    	mov    DWORD PTR ds:0x29244,ecx
   15b02:	c1 e0 08             	shl    eax,0x8
   15b05:	89 c1                	mov    ecx,eax
   15b07:	c1 e1 04             	shl    ecx,0x4
   15b0a:	01 c8                	add    eax,ecx
   15b0c:	05 40 b5 08 00       	add    eax,0x8b540
   15b11:	83 ec 04             	sub    esp,0x4
   15b14:	68 00 11 00 00       	push   0x1100
   15b19:	52                   	push   edx
   15b1a:	50                   	push   eax
   15b1b:	e8 e4 06 01 00       	call   26204 <memcpy>
   15b20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:650
            printd(DEBUG_AHCI, "Remapped ABAR is now at: 0x%08X\n", ahciABAR);
   15b23:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15b28:	83 ec 04             	sub    esp,0x4
   15b2b:	50                   	push   eax
   15b2c:	68 f4 6e 04 00       	push   0x46ef4
   15b31:	68 00 20 00 00       	push   0x2000
   15b36:	e8 88 1d 01 00       	call   278c3 <printd>
   15b3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:651
            memcpy(&ahciCaps[ahciCapsCount], (void*) ahciABAR, sizeof (ahcicaps_t));
   15b3e:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15b43:	8b 15 24 99 12 00    	mov    edx,DWORD PTR ds:0x129924
   15b49:	8b 0d 28 99 12 00    	mov    ecx,DWORD PTR ds:0x129928
   15b4f:	c1 e1 02             	shl    ecx,0x2
   15b52:	01 ca                	add    edx,ecx
   15b54:	83 ec 04             	sub    esp,0x4
   15b57:	6a 04                	push   0x4
   15b59:	50                   	push   eax
   15b5a:	52                   	push   edx
   15b5b:	e8 a4 06 01 00       	call   26204 <memcpy>
   15b60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:652
            if (!(ahciABAR->ghc.AE)) {
   15b63:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   15b6b:	c1 e8 1f             	shr    eax,0x1f
   15b6e:	84 c0                	test   al,al
   15b70:	75 26                	jne    15b98 <ahciInit+0x48c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:653
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   15b72:	83 ec 08             	sub    esp,0x8
   15b75:	68 6a 6e 04 00       	push   0x46e6a
   15b7a:	68 00 20 00 00       	push   0x2000
   15b7f:	e8 3f 1d 01 00       	call   278c3 <printd>
   15b84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:654
                ahciABAR->ghc.AE=1;
   15b87:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15b8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   15b8f:	81 ca 00 00 00 80    	or     edx,0x80000000
   15b95:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:656
            }
            ahciABAR->ghc.IE=1;
   15b98:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15b9d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   15ba0:	83 ca 02             	or     edx,0x2
   15ba3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:657
            if (ahciABAR->cap2 & 1) {
   15ba6:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15bab:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   15bae:	83 e0 01             	and    eax,0x1
   15bb1:	85 c0                	test   eax,eax
   15bb3:	74 10                	je     15bc5 <ahciInit+0x4b9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:658
                panic("Write support for BIOS handoff!!!");
   15bb5:	83 ec 0c             	sub    esp,0xc
   15bb8:	68 84 6e 04 00       	push   0x46e84
   15bbd:	e8 62 18 01 00       	call   27424 <panic>
   15bc2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:660
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   15bc5:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15bca:	83 ec 0c             	sub    esp,0xc
   15bcd:	50                   	push   eax
   15bce:	e8 57 e8 ff ff       	call   1442a <ahciProbePorts>
   15bd3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:639 (discriminator 2)
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15bd6:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:639 (discriminator 1)
   15bda:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   15be1:	0f b6 c0             	movzx  eax,al
   15be4:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   15be7:	0f 8f db fd ff ff    	jg     159c8 <ahciInit+0x2bc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:662
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    if (!ahciDeviceFound) {
   15bed:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   15bf1:	83 f0 01             	xor    eax,0x1
   15bf4:	84 c0                	test   al,al
   15bf6:	74 1c                	je     15c14 <ahciInit+0x508>
/home/yogi/src/os/chrisOS/src/block/ahci.c:663
        printd(DEBUG_AHCI, "AHCI: No AHCI devices found.");
   15bf8:	83 ec 08             	sub    esp,0x8
   15bfb:	68 15 6f 04 00       	push   0x46f15
   15c00:	68 00 20 00 00       	push   0x2000
   15c05:	e8 b9 1c 01 00       	call   278c3 <printd>
   15c0a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:664
        return false;
   15c0d:	b8 00 00 00 00       	mov    eax,0x0
   15c12:	eb 05                	jmp    15c19 <ahciInit+0x50d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:668
    }


    return true;
   15c14:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:669 (discriminator 1)
}
   15c19:	8d 65 f8             	lea    esp,[ebp-0x8]
   15c1c:	5b                   	pop    ebx
   15c1d:	5e                   	pop    esi
   15c1e:	5d                   	pop    ebp
   15c1f:	c3                   	ret    

00015c20 <ahci_port_activate_device>:
ahci_port_activate_device():
/home/yogi/src/os/chrisOS/src/block/ahci.c:672

void ahci_port_activate_device(HBA_MEM* h, HBA_PORT* p)
{
   15c20:	55                   	push   ebp
   15c21:	89 e5                	mov    ebp,esp
   15c23:	53                   	push   ebx
   15c24:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:673
    printd(DEBUG_AHCI,"activate port %d @ 0x%08X:\n", p - h->ports,p);
   15c27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c2a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15c2d:	81 c2 00 01 00 00    	add    edx,0x100
   15c33:	29 d0                	sub    eax,edx
   15c35:	c1 f8 07             	sar    eax,0x7
   15c38:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15c3b:	50                   	push   eax
   15c3c:	68 32 6f 04 00       	push   0x46f32
   15c41:	68 00 20 00 00       	push   0x2000
   15c46:	e8 78 1c 01 00       	call   278c3 <printd>
   15c4b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:675
    /* first check the presence flag */
    if ( (p->ssts & 0x7) == HBA_PORT_DET_NOT_PRESENT) { //check DET status
   15c4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c51:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15c54:	83 e0 07             	and    eax,0x7
   15c57:	85 c0                	test   eax,eax
   15c59:	0f 85 38 02 00 00    	jne    15e97 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:676
                    printd(DEBUG_AHCI,"activate: DET_NOT_PRESENT\n");
   15c5f:	83 ec 08             	sub    esp,0x8
   15c62:	68 4e 6f 04 00       	push   0x46f4e
   15c67:	68 00 20 00 00       	push   0x2000
   15c6c:	e8 52 1c 01 00       	call   278c3 <printd>
   15c71:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:678
                    /* nothing attached? */
                    if (p->cmd.CPD) { /* we rely on CPD */
   15c74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c77:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15c7a:	c1 e8 14             	shr    eax,0x14
   15c7d:	83 e0 01             	and    eax,0x1
   15c80:	84 c0                	test   al,al
   15c82:	74 65                	je     15ce9 <ahci_port_activate_device+0xc9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:679
                                    if (!p->cmd.CPS) {
   15c84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c87:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15c8a:	c1 e8 10             	shr    eax,0x10
   15c8d:	83 e0 01             	and    eax,0x1
   15c90:	84 c0                	test   al,al
   15c92:	75 1a                	jne    15cae <ahci_port_activate_device+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:680
                                                    printd(DEBUG_AHCI,"confirmed by CPD\n");
   15c94:	83 ec 08             	sub    esp,0x8
   15c97:	68 69 6f 04 00       	push   0x46f69
   15c9c:	68 00 20 00 00       	push   0x2000
   15ca1:	e8 1d 1c 01 00       	call   278c3 <printd>
   15ca6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:681
                                                    return;
   15ca9:	e9 b4 03 00 00       	jmp    16062 <ahci_port_activate_device+0x442>
/home/yogi/src/os/chrisOS/src/block/ahci.c:684
                                    }
                                    /* there's something */
                                    if (!p->cmd.POD) {
   15cae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15cb1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15cb4:	c1 e8 02             	shr    eax,0x2
   15cb7:	83 e0 01             	and    eax,0x1
   15cba:	84 c0                	test   al,al
   15cbc:	75 19                	jne    15cd7 <ahci_port_activate_device+0xb7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:685
                                                    p->cmd.POD = 1; /* power it */
   15cbe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15cc1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15cc4:	83 ca 04             	or     edx,0x4
   15cc7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:686
                                                    wait(20);
   15cca:	83 ec 0c             	sub    esp,0xc
   15ccd:	6a 14                	push   0x14
   15ccf:	e8 0e 2e 01 00       	call   28ae2 <wait>
   15cd4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:688
                                    }
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15cd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15cda:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15cdd:	83 e0 07             	and    eax,0x7
   15ce0:	85 c0                	test   eax,eax
   15ce2:	74 05                	je     15ce9 <ahci_port_activate_device+0xc9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:689
                                                    goto next_step;
   15ce4:	e9 ae 01 00 00       	jmp    15e97 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:692
                    }
                    /* spin-up? */
                    if (!p->cmd.SUD) { /* always !1 if cap.sss == 0 */
   15ce9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15cec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15cef:	d1 e8                	shr    eax,1
   15cf1:	83 e0 01             	and    eax,0x1
   15cf4:	84 c0                	test   al,al
   15cf6:	0f 85 f7 00 00 00    	jne    15df3 <ahci_port_activate_device+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:693
                                    printd(DEBUG_AHCI,"not spun-up yet?\n");
   15cfc:	83 ec 08             	sub    esp,0x8
   15cff:	68 7b 6f 04 00       	push   0x46f7b
   15d04:	68 00 20 00 00       	push   0x2000
   15d09:	e8 b5 1b 01 00       	call   278c3 <printd>
   15d0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:694
                                    if (p->serr.AsUlong & (1 << 26)) /* eXchange bit */
   15d11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d14:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15d17:	25 00 00 00 04       	and    eax,0x4000000
   15d1c:	85 c0                	test   eax,eax
   15d1e:	74 13                	je     15d33 <ahci_port_activate_device+0x113>
/home/yogi/src/os/chrisOS/src/block/ahci.c:695
                                                    p->serr.AsUlong |= (1 << 26); /* RWC */
   15d20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d23:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15d26:	0d 00 00 00 04       	or     eax,0x4000000
   15d2b:	89 c2                	mov    edx,eax
   15d2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d30:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:696
                                    if ((p->ssts & 0x7) != 0) { /* set to 0 prior sud */
   15d33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d36:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15d39:	83 e0 07             	and    eax,0x7
   15d3c:	85 c0                	test   eax,eax
   15d3e:	74 19                	je     15d59 <ahci_port_activate_device+0x139>
/home/yogi/src/os/chrisOS/src/block/ahci.c:697
                                                    p->sctl.DET = 0;
   15d40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d43:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15d46:	83 e2 f0             	and    edx,0xfffffff0
   15d49:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:698
                                                    wait(20);
   15d4c:	83 ec 0c             	sub    esp,0xc
   15d4f:	6a 14                	push   0x14
   15d51:	e8 8c 2d 01 00       	call   28ae2 <wait>
   15d56:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:700
                                    }
                                    p->cmd.SUD = 1;
   15d59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d5c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15d5f:	83 ca 02             	or     edx,0x2
   15d62:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:701
                                    waitTicks(5); /* wait 50 mus */
   15d65:	83 ec 0c             	sub    esp,0xc
   15d68:	6a 05                	push   0x5
   15d6a:	e8 58 2d 01 00       	call   28ac7 <waitTicks>
   15d6f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:702
                                    if (p->serr.AsUlong & ((1 << 26) | (1 << 18))) { /* received sth. */
   15d72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d75:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15d78:	25 00 00 04 04       	and    eax,0x4040000
   15d7d:	85 c0                	test   eax,eax
   15d7f:	74 05                	je     15d86 <ahci_port_activate_device+0x166>
/home/yogi/src/os/chrisOS/src/block/ahci.c:704
                                                    /* COMRESET, COMWAKE */
                                                    goto next_step;
   15d81:	e9 11 01 00 00       	jmp    15e97 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:707
                                    }
                                    /* send the reset */
                                    p->sctl.DET = 1;
   15d86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d89:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15d8c:	83 e2 f0             	and    edx,0xfffffff0
   15d8f:	83 ca 01             	or     edx,0x1
   15d92:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:708
                                    waitTicks(100);
   15d95:	83 ec 0c             	sub    esp,0xc
   15d98:	6a 64                	push   0x64
   15d9a:	e8 28 2d 01 00       	call   28ac7 <waitTicks>
   15d9f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:709
                                    p->sctl.DET = 0;
   15da2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15da5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15da8:	83 e2 f0             	and    edx,0xfffffff0
   15dab:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:710
                                    wait(20);
   15dae:	83 ec 0c             	sub    esp,0xc
   15db1:	6a 14                	push   0x14
   15db3:	e8 2a 2d 01 00       	call   28ae2 <wait>
   15db8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:711
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15dbb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15dbe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15dc1:	83 e0 07             	and    eax,0x7
   15dc4:	85 c0                	test   eax,eax
   15dc6:	74 05                	je     15dcd <ahci_port_activate_device+0x1ad>
/home/yogi/src/os/chrisOS/src/block/ahci.c:712
                                                    goto next_step;
   15dc8:	e9 ca 00 00 00       	jmp    15e97 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:713
                                    p->cmd.SUD = 0; /* we're done enter listening mode */
   15dcd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15dd0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15dd3:	83 e2 fd             	and    edx,0xfffffffd
   15dd6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:714
                                    printd(DEBUG_AHCI,"not present\n");
   15dd9:	83 ec 08             	sub    esp,0x8
   15ddc:	68 8d 6f 04 00       	push   0x46f8d
   15de1:	68 00 20 00 00       	push   0x2000
   15de6:	e8 d8 1a 01 00       	call   278c3 <printd>
   15deb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:715
                                    goto exit;
   15dee:	e9 47 02 00 00       	jmp    1603a <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:718
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
   15df3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15df6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15df9:	c1 e8 08             	shr    eax,0x8
   15dfc:	83 e0 0f             	and    eax,0xf
   15dff:	3c 01                	cmp    al,0x1
   15e01:	0f 84 90 00 00 00    	je     15e97 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:719
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
   15e07:	83 ec 08             	sub    esp,0x8
   15e0a:	68 9a 6f 04 00       	push   0x46f9a
   15e0f:	68 00 20 00 00       	push   0x2000
   15e14:	e8 aa 1a 01 00       	call   278c3 <printd>
   15e19:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:720
                                    int ct = 50;
   15e1c:	c7 45 f4 32 00 00 00 	mov    DWORD PTR [ebp-0xc],0x32
/home/yogi/src/os/chrisOS/src/block/ahci.c:721
                                    while (p->cmd.ICC && ct--)
   15e23:	eb 0d                	jmp    15e32 <ahci_port_activate_device+0x212>
/home/yogi/src/os/chrisOS/src/block/ahci.c:722
                                                    waitTicks(1);
   15e25:	83 ec 0c             	sub    esp,0xc
   15e28:	6a 01                	push   0x1
   15e2a:	e8 98 2c 01 00       	call   28ac7 <waitTicks>
   15e2f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:721
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
                                    int ct = 50;
                                    while (p->cmd.ICC && ct--)
   15e32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e35:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15e38:	c1 e8 1c             	shr    eax,0x1c
   15e3b:	84 c0                	test   al,al
   15e3d:	74 0d                	je     15e4c <ahci_port_activate_device+0x22c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:721 (discriminator 1)
   15e3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   15e42:	8d 50 ff             	lea    edx,[eax-0x1]
   15e45:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   15e48:	85 c0                	test   eax,eax
   15e4a:	75 d9                	jne    15e25 <ahci_port_activate_device+0x205>
/home/yogi/src/os/chrisOS/src/block/ahci.c:723
                                                    waitTicks(1);
                                    p->cmd.ICC = 1;
   15e4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e4f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15e52:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   15e58:	81 ca 00 00 00 10    	or     edx,0x10000000
   15e5e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:724
                                    wait(10);
   15e61:	83 ec 0c             	sub    esp,0xc
   15e64:	6a 0a                	push   0xa
   15e66:	e8 77 2c 01 00       	call   28ae2 <wait>
   15e6b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:725
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15e6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e71:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15e74:	83 e0 07             	and    eax,0x7
   15e77:	85 c0                	test   eax,eax
   15e79:	74 02                	je     15e7d <ahci_port_activate_device+0x25d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:726
                                                    goto next_step;
   15e7b:	eb 1a                	jmp    15e97 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:727
                                    printd(DEBUG_AHCI,"unable to set to active\n");
   15e7d:	83 ec 08             	sub    esp,0x8
   15e80:	68 a9 6f 04 00       	push   0x46fa9
   15e85:	68 00 20 00 00       	push   0x2000
   15e8a:	e8 34 1a 01 00       	call   278c3 <printd>
   15e8f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:728
                                    goto exit;
   15e92:	e9 a3 01 00 00       	jmp    1603a <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:734
                    }
    }

    /* det != 1*/
next_step:
    if ((p->ssts & 0x7) == HBA_PORT_DET_PRESENT) {
   15e97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e9a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15e9d:	83 e0 07             	and    eax,0x7
   15ea0:	83 f8 03             	cmp    eax,0x3
   15ea3:	0f 85 41 01 00 00    	jne    15fea <ahci_port_activate_device+0x3ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:736
                    /* almost done */
                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE) {
   15ea9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15eac:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15eaf:	c1 e8 08             	shr    eax,0x8
   15eb2:	83 e0 0f             	and    eax,0xf
   15eb5:	3c 01                	cmp    al,0x1
   15eb7:	0f 84 b8 00 00 00    	je     15f75 <ahci_port_activate_device+0x355>
/home/yogi/src/os/chrisOS/src/block/ahci.c:738
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
   15ebd:	83 ec 08             	sub    esp,0x8
   15ec0:	68 c2 6f 04 00       	push   0x46fc2
   15ec5:	68 00 20 00 00       	push   0x2000
   15eca:	e8 f4 19 01 00       	call   278c3 <printd>
   15ecf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:740
activ:
                                    ct = 50, wc = 0;
   15ed2:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
   15ed9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:742
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15ee0:	eb 0d                	jmp    15eef <ahci_port_activate_device+0x2cf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:743
                                                    waitTicks(1);
   15ee2:	83 ec 0c             	sub    esp,0xc
   15ee5:	6a 01                	push   0x1
   15ee7:	e8 db 2b 01 00       	call   28ac7 <waitTicks>
   15eec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:742
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
activ:
                                    ct = 50, wc = 0;
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15eef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ef2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15ef5:	c1 e8 1c             	shr    eax,0x1c
   15ef8:	84 c0                	test   al,al
   15efa:	74 0d                	je     15f09 <ahci_port_activate_device+0x2e9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:742 (discriminator 1)
   15efc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15eff:	8d 50 ff             	lea    edx,[eax-0x1]
   15f02:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   15f05:	85 c0                	test   eax,eax
   15f07:	75 d9                	jne    15ee2 <ahci_port_activate_device+0x2c2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:744
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
   15f09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f0c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15f0f:	c1 e8 08             	shr    eax,0x8
   15f12:	83 e0 0f             	and    eax,0xf
   15f15:	3c 01                	cmp    al,0x1
   15f17:	74 35                	je     15f4e <ahci_port_activate_device+0x32e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:744 (discriminator 1)
   15f19:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15f1d:	75 2f                	jne    15f4e <ahci_port_activate_device+0x32e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:745
                                                    p->cmd.ICC = 1;
   15f1f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f22:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15f25:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   15f2b:	81 ca 00 00 00 10    	or     edx,0x10000000
   15f31:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:746
                                                    waitTicks(1);
   15f34:	83 ec 0c             	sub    esp,0xc
   15f37:	6a 01                	push   0x1
   15f39:	e8 89 2b 01 00       	call   28ac7 <waitTicks>
   15f3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:747
                                                    wc++; ct = 50;
   15f41:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   15f45:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
/home/yogi/src/os/chrisOS/src/block/ahci.c:748
                                                    goto rewait;
   15f4c:	eb 92                	jmp    15ee0 <ahci_port_activate_device+0x2c0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:750
                                    }
                                    if (wc) {
   15f4e:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15f52:	74 21                	je     15f75 <ahci_port_activate_device+0x355>
/home/yogi/src/os/chrisOS/src/block/ahci.c:752
                                                    /* reset */
                                                    p->sctl.DET = 1;
   15f54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f57:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15f5a:	83 e2 f0             	and    edx,0xfffffff0
   15f5d:	83 ca 01             	or     edx,0x1
   15f60:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:753
                                                    waitTicks(100);
   15f63:	83 ec 0c             	sub    esp,0xc
   15f66:	6a 64                	push   0x64
   15f68:	e8 5a 2b 01 00       	call   28ac7 <waitTicks>
   15f6d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:754
                                                    goto next_step;
   15f70:	e9 22 ff ff ff       	jmp    15e97 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:758
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
   15f75:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f78:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15f7b:	81 c2 00 01 00 00    	add    edx,0x100
   15f81:	29 d0                	sub    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:757
                                                    p->sctl.DET = 1;
                                                    waitTicks(100);
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
   15f83:	c1 f8 07             	sar    eax,0x7
   15f86:	83 ec 04             	sub    esp,0x4
   15f89:	50                   	push   eax
   15f8a:	68 dc 6f 04 00       	push   0x46fdc
   15f8f:	68 00 20 00 00       	push   0x2000
   15f94:	e8 2a 19 01 00       	call   278c3 <printd>
   15f99:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15f9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f9f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15fa2:	c1 e8 08             	shr    eax,0x8
   15fa5:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15fa8:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15fab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15fae:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15fb1:	83 e0 07             	and    eax,0x7
   15fb4:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15fb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15fb9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15fbc:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15fbf:	0f b6 d0             	movzx  edx,al
   15fc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15fc5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15fc8:	83 ec 04             	sub    esp,0x4
   15fcb:	51                   	push   ecx
   15fcc:	53                   	push   ebx
   15fcd:	52                   	push   edx
   15fce:	50                   	push   eax
   15fcf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15fd2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15fd5:	50                   	push   eax
   15fd6:	68 06 70 04 00       	push   0x47006
   15fdb:	68 00 20 00 00       	push   0x2000
   15fe0:	e8 de 18 01 00       	call   278c3 <printd>
   15fe5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:761
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
                    return;
   15fe8:	eb 78                	jmp    16062 <ahci_port_activate_device+0x442>
/home/yogi/src/os/chrisOS/src/block/ahci.c:762
    } else if ((p->ssts & 0x7) == 4/*?*/) {
   15fea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15fed:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15ff0:	83 e0 07             	and    eax,0x7
   15ff3:	83 f8 04             	cmp    eax,0x4
   15ff6:	75 1a                	jne    16012 <ahci_port_activate_device+0x3f2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:764
                    /* just deactivated */
                    printd(DEBUG_AHCI,"PHY offline mode\n");
   15ff8:	83 ec 08             	sub    esp,0x8
   15ffb:	68 1f 70 04 00       	push   0x4701f
   16000:	68 00 20 00 00       	push   0x2000
   16005:	e8 b9 18 01 00       	call   278c3 <printd>
   1600a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:765
                    goto activ;
   1600d:	e9 c0 fe ff ff       	jmp    15ed2 <ahci_port_activate_device+0x2b2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:766
    } else if ((p->ssts & 0x7) == 5/*DET_PRESENT_NO_PHY*/) {
   16012:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   16015:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   16018:	83 e0 07             	and    eax,0x7
   1601b:	83 f8 05             	cmp    eax,0x5
   1601e:	75 1a                	jne    1603a <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:767
                    printd(DEBUG_AHCI,"PRESENT_NO_PHY mode\n");
   16020:	83 ec 08             	sub    esp,0x8
   16023:	68 31 70 04 00       	push   0x47031
   16028:	68 00 20 00 00       	push   0x2000
   1602d:	e8 91 18 01 00       	call   278c3 <printd>
   16032:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:768
                    goto activ; /* try the same */
   16035:	e9 98 fe ff ff       	jmp    15ed2 <ahci_port_activate_device+0x2b2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:772
    }
exit:
                    /* we're really done */
                    printd(DEBUG_AHCI,"Not present at port %d\n", p - h->ports);
   1603a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1603d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16040:	81 c2 00 01 00 00    	add    edx,0x100
   16046:	29 d0                	sub    eax,edx
   16048:	c1 f8 07             	sar    eax,0x7
   1604b:	83 ec 04             	sub    esp,0x4
   1604e:	50                   	push   eax
   1604f:	68 46 70 04 00       	push   0x47046
   16054:	68 00 20 00 00       	push   0x2000
   16059:	e8 65 18 01 00       	call   278c3 <printd>
   1605e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:773
                    return;
   16061:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:774
}
   16062:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16065:	c9                   	leave  
   16066:	c3                   	ret    

00016067 <ahci_enable_port>:
ahci_enable_port():
/home/yogi/src/os/chrisOS/src/block/ahci.c:777

void ahci_enable_port(HBA_MEM* ad, int pt)
{
   16067:	55                   	push   ebp
   16068:	89 e5                	mov    ebp,esp
   1606a:	53                   	push   ebx
   1606b:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:778
        HBA_PORT* p = &ad->ports[pt];
   1606e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   16071:	83 c0 02             	add    eax,0x2
   16074:	c1 e0 07             	shl    eax,0x7
   16077:	89 c2                	mov    edx,eax
   16079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1607c:	01 d0                	add    eax,edx
   1607e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:779
        int reset_ct = 0;
   16081:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:782
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
   16088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1608b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1608e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   16091:	bb 01 00 00 00       	mov    ebx,0x1
   16096:	89 c1                	mov    ecx,eax
   16098:	d3 e3                	shl    ebx,cl
   1609a:	89 d8                	mov    eax,ebx
   1609c:	21 d0                	and    eax,edx
   1609e:	85 c0                	test   eax,eax
   160a0:	0f 84 0c 02 00 00    	je     162b2 <ahci_enable_port+0x24b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:787
                return;
 
Pos1:
        /* clear old data */
        p->serr.AsUlong = 0xffffffff; /* 10.1.2 -> 6. */
   160a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   160a9:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:788
        p->pxis.AsUlong = 0xffffffff; /* clear all pending interrupts */
   160b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   160b3:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:791
 
        /* first allow for the reception of FISes */
        p->cmd.FRE = 1;
   160ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   160bd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   160c0:	83 ca 10             	or     edx,0x10
   160c3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:792
        wait(20); /* wait for BSY to show up */
   160c6:	83 ec 0c             	sub    esp,0xc
   160c9:	6a 14                	push   0x14
   160cb:	e8 12 2a 01 00       	call   28ae2 <wait>
   160d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:794
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
   160d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   160d6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   160d9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:795
                if (sts & 1) {
   160dc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   160e0:	83 e0 01             	and    eax,0x1
   160e3:	85 c0                	test   eax,eax
   160e5:	0f 84 da 00 00 00    	je     161c5 <ahci_enable_port+0x15e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:797
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
   160eb:	80 7d ef 7f          	cmp    BYTE PTR [ebp-0x11],0x7f
   160ef:	0f 84 ef 00 00 00    	je     161e4 <ahci_enable_port+0x17d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:799
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
   160f5:	80 7d ef 41          	cmp    BYTE PTR [ebp-0x11],0x41
   160f9:	75 22                	jne    1611d <ahci_enable_port+0xb6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:799 (discriminator 1)
   160fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   160fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   16101:	83 e0 01             	and    eax,0x1
   16104:	0f b6 c0             	movzx  eax,al
   16107:	83 f8 20             	cmp    eax,0x20
   1610a:	75 11                	jne    1611d <ahci_enable_port+0xb6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:800
                                if (p->sig == SATA_SIG_ATAPI)
   1610c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1610f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   16112:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   16117:	0f 84 ca 00 00 00    	je     161e7 <ahci_enable_port+0x180>
/home/yogi/src/os/chrisOS/src/block/ahci.c:804
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
                                " while starting up.\n", pt, p->tfd.ERR);
   1611d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16120:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   16123:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:803
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
   16126:	0f b6 c0             	movzx  eax,al
   16129:	83 ec 04             	sub    esp,0x4
   1612c:	50                   	push   eax
   1612d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16130:	68 60 70 04 00       	push   0x47060
   16135:	e8 69 17 01 00       	call   278a3 <printk>
   1613a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:805
                                " while starting up.\n", pt, p->tfd.ERR);
                        printd(DEBUG_AHCI,"AHCI: scr1: %x %x\n", p->serr.AsUlong, p->tfd.ERR);
   1613d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16140:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   16143:	83 e0 01             	and    eax,0x1
   16146:	0f b6 d0             	movzx  edx,al
   16149:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1614c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1614f:	52                   	push   edx
   16150:	50                   	push   eax
   16151:	68 98 70 04 00       	push   0x47098
   16156:	68 00 20 00 00       	push   0x2000
   1615b:	e8 63 17 01 00       	call   278c3 <printd>
   16160:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:806
                        printd(DEBUG_AHCI,"AHCI: tfd: %x %x\n", p->tfd.AsUchar, p->tfd.ERR);
   16163:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16166:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   16169:	83 e0 01             	and    eax,0x1
   1616c:	0f b6 d0             	movzx  edx,al
   1616f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16172:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   16175:	52                   	push   edx
   16176:	50                   	push   eax
   16177:	68 ab 70 04 00       	push   0x470ab
   1617c:	68 00 20 00 00       	push   0x2000
   16181:	e8 3d 17 01 00       	call   278c3 <printd>
   16186:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:807
                        p->serr.AsUlong = 0xffffffff;
   16189:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1618c:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:808
                        if (!reset_ct++) {
   16193:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16196:	8d 50 01             	lea    edx,[eax+0x1]
   16199:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1619c:	85 c0                	test   eax,eax
   1619e:	75 16                	jne    161b6 <ahci_enable_port+0x14f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:809
                                ahci_port_activate_device(ad, p);
   161a0:	83 ec 08             	sub    esp,0x8
   161a3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   161a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   161a9:	e8 72 fa ff ff       	call   15c20 <ahci_port_activate_device>
   161ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:810
                                goto Pos1;
   161b1:	e9 f0 fe ff ff       	jmp    160a6 <ahci_enable_port+0x3f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:811
                        } else if (reset_ct == 1) {
   161b6:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   161ba:	0f 85 c7 00 00 00    	jne    16287 <ahci_enable_port+0x220>
/home/yogi/src/os/chrisOS/src/block/ahci.c:813
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
   161c0:	e9 e1 fe ff ff       	jmp    160a6 <ahci_enable_port+0x3f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:817
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
   161c5:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   161c9:	25 88 00 00 00       	and    eax,0x88
   161ce:	85 c0                	test   eax,eax
   161d0:	74 18                	je     161ea <ahci_enable_port+0x183>
/home/yogi/src/os/chrisOS/src/block/ahci.c:819
                        break;
                wait(50);
   161d2:	83 ec 0c             	sub    esp,0xc
   161d5:	6a 32                	push   0x32
   161d7:	e8 06 29 01 00       	call   28ae2 <wait>
   161dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:820
        }
   161df:	e9 ef fe ff ff       	jmp    160d3 <ahci_enable_port+0x6c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:798
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
                if (sts & 1) {
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
                                break;
   161e4:	90                   	nop
   161e5:	eb 04                	jmp    161eb <ahci_enable_port+0x184>
/home/yogi/src/os/chrisOS/src/block/ahci.c:801
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
   161e7:	90                   	nop
   161e8:	eb 01                	jmp    161eb <ahci_enable_port+0x184>
/home/yogi/src/os/chrisOS/src/block/ahci.c:818
                                goto Pos1;
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
                        break;
   161ea:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:823
                wait(50);
        }
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
   161eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   161ee:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   161f1:	83 e0 07             	and    eax,0x7
   161f4:	83 f8 03             	cmp    eax,0x3
   161f7:	74 11                	je     1620a <ahci_enable_port+0x1a3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:824
                ahci_port_activate_device(ad, p);
   161f9:	83 ec 08             	sub    esp,0x8
   161fc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   161ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   16202:	e8 19 fa ff ff       	call   15c20 <ahci_port_activate_device>
   16207:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:825
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
   1620a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1620d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   16210:	25 88 00 00 00       	and    eax,0x88
   16215:	85 c0                	test   eax,eax
   16217:	75 71                	jne    1628a <ahci_enable_port+0x223>
/home/yogi/src/os/chrisOS/src/block/ahci.c:827
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   16219:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1621c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   1621f:	83 e0 07             	and    eax,0x7
   16222:	83 f8 03             	cmp    eax,0x3
   16225:	74 30                	je     16257 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 1)
   16227:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1622a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   1622d:	c1 e8 08             	shr    eax,0x8
   16230:	83 e0 0f             	and    eax,0xf
   16233:	3c 02                	cmp    al,0x2
   16235:	74 20                	je     16257 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:828 (discriminator 2)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   16237:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1623a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   1623d:	c1 e8 08             	shr    eax,0x8
   16240:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 2)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   16243:	3c 06                	cmp    al,0x6
   16245:	74 10                	je     16257 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:828 (discriminator 3)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   16247:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1624a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   1624d:	c1 e8 08             	shr    eax,0x8
   16250:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 3)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   16253:	3c 08                	cmp    al,0x8
   16255:	75 36                	jne    1628d <ahci_enable_port+0x226>
/home/yogi/src/os/chrisOS/src/block/ahci.c:831
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
        /* we're allowed so set it */
        p->cmd.ST = 1;
   16257:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1625a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   1625d:	83 ca 01             	or     edx,0x1
   16260:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:833
        /* Change in PhyRdy, CPS, TFS.err, PCS, DPS(I=1), UFS, HBFS, HBDS, IFS */
        p->ie.AsUlong = (1 << 22) | (1 << 6) | (1 << 31) | (1 << 30)
   16263:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16266:	c7 40 14 70 00 40 f8 	mov    DWORD PTR [eax+0x14],0xf8400070
/home/yogi/src/os/chrisOS/src/block/ahci.c:839
                | (1 << 5) | (1 << 4) | (1 << 29) | (1 << 28) | (1 << 27);
 
        ///* issue the IDENTIFY_(PACKET)_DEVICE command */
        //ahci_issue_command(ad, pt, 0, disk_cmd_identify, 0, 0, NULL, NULL /* wq_worker_ad*/);
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
   1626d:	83 ec 04             	sub    esp,0x4
   16270:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16273:	68 c0 70 04 00       	push   0x470c0
   16278:	68 00 20 00 00       	push   0x2000
   1627d:	e8 41 16 01 00       	call   278c3 <printd>
   16282:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:840
        return;
   16285:	eb 2c                	jmp    162b3 <ahci_enable_port+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:815
                                goto Pos1;
                        } else if (reset_ct == 1) {
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
                        } else
                                goto defer;
   16287:	90                   	nop
   16288:	eb 04                	jmp    1628e <ahci_enable_port+0x227>
/home/yogi/src/os/chrisOS/src/block/ahci.c:826
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
   1628a:	90                   	nop
   1628b:	eb 01                	jmp    1628e <ahci_enable_port+0x227>
/home/yogi/src/os/chrisOS/src/block/ahci.c:829
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
   1628d:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:843
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
   1628e:	83 ec 04             	sub    esp,0x4
   16291:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16294:	68 ec 70 04 00       	push   0x470ec
   16299:	68 00 20 00 00       	push   0x2000
   1629e:	e8 20 16 01 00       	call   278c3 <printd>
   162a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:844
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
   162a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   162a9:	c7 40 14 40 00 40 80 	mov    DWORD PTR [eax+0x14],0x80400040
   162b0:	eb 01                	jmp    162b3 <ahci_enable_port+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:783
        HBA_PORT* p = &ad->ports[pt];
        int reset_ct = 0;
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
                return;
   162b2:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:845
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
}
   162b3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   162b6:	c9                   	leave  
   162b7:	c3                   	ret    

000162b8 <outl>:
outl():
/home/yogi/src/os/chrisOS/include/io.h:32
{
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline void outl(unsigned short __port, unsigned int __val)
{
   162b8:	55                   	push   ebp
   162b9:	89 e5                	mov    ebp,esp
   162bb:	83 ec 04             	sub    esp,0x4
   162be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   162c1:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   162c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   162c8:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   162cc:	ef                   	out    dx,eax
/home/yogi/src/os/chrisOS/include/io.h:34
}
   162cd:	90                   	nop
   162ce:	c9                   	leave  
   162cf:	c3                   	ret    

000162d0 <inl>:
inl():
/home/yogi/src/os/chrisOS/include/io.h:51
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
	return __val;
}

static __inline unsigned int inl(unsigned short __port)
{
   162d0:	55                   	push   ebp
   162d1:	89 e5                	mov    ebp,esp
   162d3:	83 ec 14             	sub    esp,0x14
   162d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   162d9:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   162dd:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   162e1:	89 c2                	mov    edx,eax
   162e3:	ed                   	in     eax,dx
   162e4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/include/io.h:54
	return __val;
   162e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/io.h:55
}
   162ea:	c9                   	leave  
   162eb:	c3                   	ret    

000162ec <printPCIConfig>:
printPCIConfig():
/home/yogi/src/os/chrisOS/src/block/pci.c:26
extern struct pci_bridge_t* kPCIBridgeHeaders;
extern struct pci_device_t* kPCIDeviceFunctions;
extern uint32_t kDebugLevel;

void printPCIConfig()
{
   162ec:	55                   	push   ebp
   162ed:	89 e5                	mov    ebp,esp
   162ef:	57                   	push   edi
   162f0:	56                   	push   esi
   162f1:	53                   	push   ebx
   162f2:	81 ec dc 00 00 00    	sub    esp,0xdc
/home/yogi/src/os/chrisOS/src/block/pci.c:28
    char buffer[150];
    int totalCnt=0;
   162f8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:30
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
   162ff:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   16306:	0f b6 d0             	movzx  edx,al
   16309:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
   16310:	0f b6 c0             	movzx  eax,al
   16313:	01 d0                	add    eax,edx
   16315:	83 ec 08             	sub    esp,0x8
   16318:	50                   	push   eax
   16319:	68 b4 26 08 00       	push   0x826b4
   1631e:	e8 80 15 01 00       	call   278a3 <printk>
   16323:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:31
    puts("Devices:\n");
   16326:	83 ec 0c             	sub    esp,0xc
   16329:	68 db 26 08 00       	push   0x826db
   1632e:	e8 33 21 00 00       	call   18466 <puts>
   16333:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:32
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   16336:	83 ec 0c             	sub    esp,0xc
   16339:	68 e8 26 08 00       	push   0x826e8
   1633e:	e8 60 15 01 00       	call   278a3 <printk>
   16343:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:33
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   16346:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   1634d:	e9 ed 01 00 00       	jmp    1653f <printPCIConfig+0x253>
/home/yogi/src/os/chrisOS/src/block/pci.c:37
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
   16352:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   16358:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1635b:	89 d0                	mov    eax,edx
   1635d:	c1 e0 02             	shl    eax,0x2
   16360:	01 d0                	add    eax,edx
   16362:	c1 e0 04             	shl    eax,0x4
   16365:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   16367:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1636a:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   16370:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   16376:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16379:	89 d0                	mov    eax,edx
   1637b:	c1 e0 02             	shl    eax,0x2
   1637e:	01 d0                	add    eax,edx
   16380:	c1 e0 04             	shl    eax,0x4
   16383:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   16385:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   16388:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   1638e:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   16394:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16397:	89 d0                	mov    eax,edx
   16399:	c1 e0 02             	shl    eax,0x2
   1639c:	01 d0                	add    eax,edx
   1639e:	c1 e0 04             	shl    eax,0x4
   163a1:	01 c8                	add    eax,ecx
   163a3:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   163a7:	0f b7 f8             	movzx  edi,ax
   163aa:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   163b0:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   163b6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   163b9:	89 d0                	mov    eax,edx
   163bb:	c1 e0 02             	shl    eax,0x2
   163be:	01 d0                	add    eax,edx
   163c0:	c1 e0 04             	shl    eax,0x4
   163c3:	01 c8                	add    eax,ecx
   163c5:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   163c9:	0f b7 d8             	movzx  ebx,ax
   163cc:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   163d2:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   163d8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   163db:	89 d0                	mov    eax,edx
   163dd:	c1 e0 02             	shl    eax,0x2
   163e0:	01 d0                	add    eax,edx
   163e2:	c1 e0 04             	shl    eax,0x4
   163e5:	01 c8                	add    eax,ecx
   163e7:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   163eb:	0f b6 c8             	movzx  ecx,al
   163ee:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   163f4:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   163fa:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   163fd:	89 d0                	mov    eax,edx
   163ff:	c1 e0 02             	shl    eax,0x2
   16402:	01 d0                	add    eax,edx
   16404:	c1 e0 04             	shl    eax,0x4
   16407:	01 c8                	add    eax,ecx
   16409:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   1640d:	0f b6 f8             	movzx  edi,al
   16410:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   16416:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16419:	89 d0                	mov    eax,edx
   1641b:	c1 e0 02             	shl    eax,0x2
   1641e:	01 d0                	add    eax,edx
   16420:	c1 e0 04             	shl    eax,0x4
   16423:	01 c8                	add    eax,ecx
   16425:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   16429:	0f b6 f0             	movzx  esi,al
   1642c:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   16432:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16435:	89 d0                	mov    eax,edx
   16437:	c1 e0 02             	shl    eax,0x2
   1643a:	01 d0                	add    eax,edx
   1643c:	c1 e0 04             	shl    eax,0x4
   1643f:	01 c8                	add    eax,ecx
   16441:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   16445:	0f b6 d8             	movzx  ebx,al
   16448:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   1644e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16451:	89 d0                	mov    eax,edx
   16453:	c1 e0 02             	shl    eax,0x2
   16456:	01 d0                	add    eax,edx
   16458:	c1 e0 04             	shl    eax,0x4
   1645b:	01 c8                	add    eax,ecx
   1645d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16460:	0f b6 c0             	movzx  eax,al
   16463:	83 ec 08             	sub    esp,0x8
   16466:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   1646c:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   16472:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   16478:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   1647e:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   16484:	57                   	push   edi
   16485:	56                   	push   esi
   16486:	53                   	push   ebx
   16487:	50                   	push   eax
   16488:	68 24 27 08 00       	push   0x82724
   1648d:	e8 11 14 01 00       	call   278a3 <printk>
   16492:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:40
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //printk("%s",buffer);
        getDeviceName(kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, buffer);
   16495:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   1649b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1649e:	89 d0                	mov    eax,edx
   164a0:	c1 e0 02             	shl    eax,0x2
   164a3:	01 d0                	add    eax,edx
   164a5:	c1 e0 04             	shl    eax,0x4
   164a8:	01 c8                	add    eax,ecx
   164aa:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   164ae:	0f b7 c8             	movzx  ecx,ax
   164b1:	8b 1d f4 97 12 00    	mov    ebx,DWORD PTR ds:0x1297f4
   164b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   164ba:	89 d0                	mov    eax,edx
   164bc:	c1 e0 02             	shl    eax,0x2
   164bf:	01 d0                	add    eax,edx
   164c1:	c1 e0 04             	shl    eax,0x4
   164c4:	01 d8                	add    eax,ebx
   164c6:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   164ca:	0f b7 c0             	movzx  eax,ax
   164cd:	83 ec 04             	sub    esp,0x4
   164d0:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   164d6:	52                   	push   edx
   164d7:	51                   	push   ecx
   164d8:	50                   	push   eax
   164d9:	e8 63 07 00 00       	call   16c41 <getDeviceName>
   164de:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:41
        strleft(buffer,28);
   164e1:	83 ec 08             	sub    esp,0x8
   164e4:	6a 1c                	push   0x1c
   164e6:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   164ec:	50                   	push   eax
   164ed:	e8 1e 17 01 00       	call   27c10 <strleft>
   164f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:42
        printk("%s\n",buffer);
   164f5:	83 ec 08             	sub    esp,0x8
   164f8:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   164fe:	50                   	push   eax
   164ff:	68 58 27 08 00       	push   0x82758
   16504:	e8 9a 13 01 00       	call   278a3 <printk>
   16509:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:43
        totalCnt++;
   1650c:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:44
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   16510:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   16514:	7e 25                	jle    1653b <printPCIConfig+0x24f>
/home/yogi/src/os/chrisOS/src/block/pci.c:44 (discriminator 1)
   16516:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16519:	8d 58 04             	lea    ebx,[eax+0x4]
   1651c:	e8 86 1e 00 00       	call   183a7 <cursorGetMaxY>
   16521:	89 c1                	mov    ecx,eax
   16523:	89 d8                	mov    eax,ebx
   16525:	99                   	cdq    
   16526:	f7 f9                	idiv   ecx
   16528:	89 d0                	mov    eax,edx
   1652a:	85 c0                	test   eax,eax
   1652c:	75 0d                	jne    1653b <printPCIConfig+0x24f>
/home/yogi/src/os/chrisOS/src/block/pci.c:45
            pauseDisplay(false);
   1652e:	83 ec 0c             	sub    esp,0xc
   16531:	6a 00                	push   0x0
   16533:	e8 23 fa 00 00       	call   25f5b <pauseDisplay>
   16538:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:33 (discriminator 2)
    int totalCnt=0;
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   1653b:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:33 (discriminator 1)
   1653f:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   16546:	0f b6 c0             	movzx  eax,al
   16549:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1654c:	0f 8f 00 fe ff ff    	jg     16352 <printPCIConfig+0x66>
/home/yogi/src/os/chrisOS/src/block/pci.c:47
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
   16552:	83 ec 0c             	sub    esp,0xc
   16555:	68 5c 27 08 00       	push   0x8275c
   1655a:	e8 07 1f 00 00       	call   18466 <puts>
   1655f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:48
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   16562:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   16569:	e9 ef 01 00 00       	jmp    1675d <printPCIConfig+0x471>
/home/yogi/src/os/chrisOS/src/block/pci.c:55
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1656e:	a1 f8 97 12 00       	mov    eax,ds:0x1297f8
   16573:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16577:	0f b6 c0             	movzx  eax,al
   1657a:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16580:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   16586:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16589:	6b c0 4e             	imul   eax,eax,0x4e
   1658c:	01 d0                	add    eax,edx
   1658e:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16592:	0f b6 f0             	movzx  esi,al
   16595:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1659b:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   165a1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   165a4:	6b c0 4e             	imul   eax,eax,0x4e
   165a7:	01 d0                	add    eax,edx
   165a9:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   165ad:	0f b6 f8             	movzx  edi,al
   165b0:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   165b6:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   165bc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   165bf:	6b c0 4e             	imul   eax,eax,0x4e
   165c2:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   165c4:	8b 58 0d             	mov    ebx,DWORD PTR [eax+0xd]
   165c7:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   165cd:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   165d3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   165d6:	6b c0 4e             	imul   eax,eax,0x4e
   165d9:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   165db:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   165de:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   165e4:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   165ea:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   165ed:	6b c0 4e             	imul   eax,eax,0x4e
   165f0:	01 d0                	add    eax,edx
   165f2:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   165f6:	0f b7 d0             	movzx  edx,ax
   165f9:	89 95 20 ff ff ff    	mov    DWORD PTR [ebp-0xe0],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   165ff:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   16605:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16608:	6b c0 4e             	imul   eax,eax,0x4e
   1660b:	01 d0                	add    eax,edx
   1660d:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16611:	0f b7 c0             	movzx  eax,ax
   16614:	89 85 1c ff ff ff    	mov    DWORD PTR [ebp-0xe4],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   1661a:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   16620:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16623:	6b c0 4e             	imul   eax,eax,0x4e
   16626:	01 d0                	add    eax,edx
   16628:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1662c:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   1662f:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   16635:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16638:	6b c0 4e             	imul   eax,eax,0x4e
   1663b:	01 d0                	add    eax,edx
   1663d:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16641:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   16644:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   1664a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1664d:	6b c0 4e             	imul   eax,eax,0x4e
   16650:	01 d0                	add    eax,edx
   16652:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16656:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   16659:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   1665f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16662:	6b c0 4e             	imul   eax,eax,0x4e
   16665:	01 d0                	add    eax,edx
   16667:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1666b:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   1666e:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   16674:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16677:	6b c0 4e             	imul   eax,eax,0x4e
   1667a:	01 d0                	add    eax,edx
   1667c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1667f:	0f b6 c0             	movzx  eax,al
   16682:	83 ec 0c             	sub    esp,0xc
   16685:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   1668b:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   16691:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   16697:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   1669d:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   166a3:	ff b5 20 ff ff ff    	push   DWORD PTR [ebp-0xe0]
   166a9:	ff b5 1c ff ff ff    	push   DWORD PTR [ebp-0xe4]
   166af:	57                   	push   edi
   166b0:	56                   	push   esi
   166b1:	53                   	push   ebx
   166b2:	51                   	push   ecx
   166b3:	50                   	push   eax
   166b4:	68 68 27 08 00       	push   0x82768
   166b9:	e8 e5 11 01 00       	call   278a3 <printk>
   166be:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/block/pci.c:60
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //strleft(buffer,10);
        //printk("%s",buffer);
//        strleft(buffer,20);
        getDeviceName(kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, buffer);
   166c1:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   166c7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   166ca:	6b c0 4e             	imul   eax,eax,0x4e
   166cd:	01 d0                	add    eax,edx
   166cf:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   166d3:	0f b7 d0             	movzx  edx,ax
   166d6:	8b 0d f8 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f8
   166dc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   166df:	6b c0 4e             	imul   eax,eax,0x4e
   166e2:	01 c8                	add    eax,ecx
   166e4:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   166e8:	0f b7 c0             	movzx  eax,ax
   166eb:	83 ec 04             	sub    esp,0x4
   166ee:	8d 8d 42 ff ff ff    	lea    ecx,[ebp-0xbe]
   166f4:	51                   	push   ecx
   166f5:	52                   	push   edx
   166f6:	50                   	push   eax
   166f7:	e8 45 05 00 00       	call   16c41 <getDeviceName>
   166fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:61
        strleft(buffer,28);
   166ff:	83 ec 08             	sub    esp,0x8
   16702:	6a 1c                	push   0x1c
   16704:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1670a:	50                   	push   eax
   1670b:	e8 00 15 01 00       	call   27c10 <strleft>
   16710:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:62
        printk("%s\n",buffer);
   16713:	83 ec 08             	sub    esp,0x8
   16716:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1671c:	50                   	push   eax
   1671d:	68 58 27 08 00       	push   0x82758
   16722:	e8 7c 11 01 00       	call   278a3 <printk>
   16727:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:63
        totalCnt++;
   1672a:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:64
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   1672e:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   16732:	7e 25                	jle    16759 <printPCIConfig+0x46d>
/home/yogi/src/os/chrisOS/src/block/pci.c:64 (discriminator 1)
   16734:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16737:	8d 58 04             	lea    ebx,[eax+0x4]
   1673a:	e8 68 1c 00 00       	call   183a7 <cursorGetMaxY>
   1673f:	89 c1                	mov    ecx,eax
   16741:	89 d8                	mov    eax,ebx
   16743:	99                   	cdq    
   16744:	f7 f9                	idiv   ecx
   16746:	89 d0                	mov    eax,edx
   16748:	85 c0                	test   eax,eax
   1674a:	75 0d                	jne    16759 <printPCIConfig+0x46d>
/home/yogi/src/os/chrisOS/src/block/pci.c:65
            pauseDisplay(false);
   1674c:	83 ec 0c             	sub    esp,0xc
   1674f:	6a 00                	push   0x0
   16751:	e8 05 f8 00 00       	call   25f5b <pauseDisplay>
   16756:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:48 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   16759:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:48 (discriminator 1)
   1675d:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
   16764:	0f b6 c0             	movzx  eax,al
   16767:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   1676a:	0f 8f fe fd ff ff    	jg     1656e <printPCIConfig+0x282>
/home/yogi/src/os/chrisOS/src/block/pci.c:67
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
   16770:	83 ec 0c             	sub    esp,0xc
   16773:	68 ac 27 08 00       	push   0x827ac
   16778:	e8 e9 1c 00 00       	call   18466 <puts>
   1677d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:68
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   16780:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
   16787:	e9 ed 01 00 00       	jmp    16979 <printPCIConfig+0x68d>
/home/yogi/src/os/chrisOS/src/block/pci.c:74
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
   1678c:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   16792:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16795:	89 d0                	mov    eax,edx
   16797:	c1 e0 02             	shl    eax,0x2
   1679a:	01 d0                	add    eax,edx
   1679c:	c1 e0 04             	shl    eax,0x4
   1679f:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   167a1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   167a4:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   167aa:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   167b0:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   167b3:	89 d0                	mov    eax,edx
   167b5:	c1 e0 02             	shl    eax,0x2
   167b8:	01 d0                	add    eax,edx
   167ba:	c1 e0 04             	shl    eax,0x4
   167bd:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   167bf:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   167c2:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   167c8:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   167ce:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   167d1:	89 d0                	mov    eax,edx
   167d3:	c1 e0 02             	shl    eax,0x2
   167d6:	01 d0                	add    eax,edx
   167d8:	c1 e0 04             	shl    eax,0x4
   167db:	01 c8                	add    eax,ecx
   167dd:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   167e1:	0f b7 f8             	movzx  edi,ax
   167e4:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   167ea:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   167f0:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   167f3:	89 d0                	mov    eax,edx
   167f5:	c1 e0 02             	shl    eax,0x2
   167f8:	01 d0                	add    eax,edx
   167fa:	c1 e0 04             	shl    eax,0x4
   167fd:	01 c8                	add    eax,ecx
   167ff:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16803:	0f b7 d8             	movzx  ebx,ax
   16806:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1680c:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   16812:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16815:	89 d0                	mov    eax,edx
   16817:	c1 e0 02             	shl    eax,0x2
   1681a:	01 d0                	add    eax,edx
   1681c:	c1 e0 04             	shl    eax,0x4
   1681f:	01 c8                	add    eax,ecx
   16821:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16825:	0f b6 c8             	movzx  ecx,al
   16828:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1682e:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   16834:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16837:	89 d0                	mov    eax,edx
   16839:	c1 e0 02             	shl    eax,0x2
   1683c:	01 d0                	add    eax,edx
   1683e:	c1 e0 04             	shl    eax,0x4
   16841:	01 c8                	add    eax,ecx
   16843:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16847:	0f b6 f8             	movzx  edi,al
   1684a:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   16850:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16853:	89 d0                	mov    eax,edx
   16855:	c1 e0 02             	shl    eax,0x2
   16858:	01 d0                	add    eax,edx
   1685a:	c1 e0 04             	shl    eax,0x4
   1685d:	01 c8                	add    eax,ecx
   1685f:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   16863:	0f b6 f0             	movzx  esi,al
   16866:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   1686c:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   1686f:	89 d0                	mov    eax,edx
   16871:	c1 e0 02             	shl    eax,0x2
   16874:	01 d0                	add    eax,edx
   16876:	c1 e0 04             	shl    eax,0x4
   16879:	01 c8                	add    eax,ecx
   1687b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1687f:	0f b6 d8             	movzx  ebx,al
   16882:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   16888:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   1688b:	89 d0                	mov    eax,edx
   1688d:	c1 e0 02             	shl    eax,0x2
   16890:	01 d0                	add    eax,edx
   16892:	c1 e0 04             	shl    eax,0x4
   16895:	01 c8                	add    eax,ecx
   16897:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1689a:	0f b6 c0             	movzx  eax,al
   1689d:	83 ec 08             	sub    esp,0x8
   168a0:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   168a6:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   168ac:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   168b2:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   168b8:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   168be:	57                   	push   edi
   168bf:	56                   	push   esi
   168c0:	53                   	push   ebx
   168c1:	50                   	push   eax
   168c2:	68 24 27 08 00       	push   0x82724
   168c7:	e8 d7 0f 01 00       	call   278a3 <printk>
   168cc:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:77
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
            //getVendorLongName(kPCIDeviceFunctions[cnt].vendor, buffer);
            //printk("%s",buffer);
            getDeviceName(kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, buffer);
   168cf:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   168d5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   168d8:	89 d0                	mov    eax,edx
   168da:	c1 e0 02             	shl    eax,0x2
   168dd:	01 d0                	add    eax,edx
   168df:	c1 e0 04             	shl    eax,0x4
   168e2:	01 c8                	add    eax,ecx
   168e4:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   168e8:	0f b7 c8             	movzx  ecx,ax
   168eb:	8b 1d fc 97 12 00    	mov    ebx,DWORD PTR ds:0x1297fc
   168f1:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   168f4:	89 d0                	mov    eax,edx
   168f6:	c1 e0 02             	shl    eax,0x2
   168f9:	01 d0                	add    eax,edx
   168fb:	c1 e0 04             	shl    eax,0x4
   168fe:	01 d8                	add    eax,ebx
   16900:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   16904:	0f b7 c0             	movzx  eax,ax
   16907:	83 ec 04             	sub    esp,0x4
   1690a:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   16910:	52                   	push   edx
   16911:	51                   	push   ecx
   16912:	50                   	push   eax
   16913:	e8 29 03 00 00       	call   16c41 <getDeviceName>
   16918:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:78
            strleft(buffer,28);
   1691b:	83 ec 08             	sub    esp,0x8
   1691e:	6a 1c                	push   0x1c
   16920:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   16926:	50                   	push   eax
   16927:	e8 e4 12 01 00       	call   27c10 <strleft>
   1692c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:79
            printk("%s\n",buffer);
   1692f:	83 ec 08             	sub    esp,0x8
   16932:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   16938:	50                   	push   eax
   16939:	68 58 27 08 00       	push   0x82758
   1693e:	e8 60 0f 01 00       	call   278a3 <printk>
   16943:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:80
            totalCnt++;
   16946:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:81
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   1694a:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1694e:	7e 25                	jle    16975 <printPCIConfig+0x689>
/home/yogi/src/os/chrisOS/src/block/pci.c:81 (discriminator 1)
   16950:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16953:	8d 58 04             	lea    ebx,[eax+0x4]
   16956:	e8 4c 1a 00 00       	call   183a7 <cursorGetMaxY>
   1695b:	89 c1                	mov    ecx,eax
   1695d:	89 d8                	mov    eax,ebx
   1695f:	99                   	cdq    
   16960:	f7 f9                	idiv   ecx
   16962:	89 d0                	mov    eax,edx
   16964:	85 c0                	test   eax,eax
   16966:	75 0d                	jne    16975 <printPCIConfig+0x689>
/home/yogi/src/os/chrisOS/src/block/pci.c:82
            pauseDisplay(false);
   16968:	83 ec 0c             	sub    esp,0xc
   1696b:	6a 00                	push   0x0
   1696d:	e8 e9 f5 00 00       	call   25f5b <pauseDisplay>
   16972:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:68 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   16975:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:68 (discriminator 1)
   16979:	0f b6 05 ee 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ee
   16980:	0f b6 c0             	movzx  eax,al
   16983:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   16986:	0f 8f 00 fe ff ff    	jg     1678c <printPCIConfig+0x4a0>
/home/yogi/src/os/chrisOS/src/block/pci.c:85
            totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
        }
    }
}
   1698c:	90                   	nop
   1698d:	8d 65 f4             	lea    esp,[ebp-0xc]
   16990:	5b                   	pop    ebx
   16991:	5e                   	pop    esi
   16992:	5f                   	pop    edi
   16993:	5d                   	pop    ebp
   16994:	c3                   	ret    

00016995 <pciConfigReadWord>:
pciConfigReadWord():
/home/yogi/src/os/chrisOS/src/block/pci.c:90

//struct pci_device_id* pci_deviceList = (struct pci_device_id*)PCI_DEVICE_LIST_ADDRESS;
  uint16_t pciConfigReadWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   16995:	55                   	push   ebp
   16996:	89 e5                	mov    ebp,esp
   16998:	53                   	push   ebx
   16999:	83 ec 30             	sub    esp,0x30
   1699c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1699f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   169a2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   169a5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   169a8:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   169ab:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   169ae:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   169b1:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:92
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   169b4:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   169b8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:93
    uint32_t lslot = (uint32_t)slot;
   169bb:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   169bf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:94
    uint32_t lfunc = (uint32_t)func;
   169c2:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   169c6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:95
    uint16_t tmp = 0;
   169c9:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   169cf:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   169d2:	c1 e0 10             	shl    eax,0x10
   169d5:	89 c2                	mov    edx,eax
   169d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   169da:	c1 e0 0b             	shl    eax,0xb
   169dd:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   169df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   169e2:	c1 e0 08             	shl    eax,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   169e5:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   169e7:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   169eb:	25 fc 00 00 00       	and    eax,0xfc
   169f0:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   169f2:	0d 00 00 00 80       	or     eax,0x80000000
   169f7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:101
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   169fa:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   169fd:	68 f8 0c 00 00       	push   0xcf8
   16a02:	e8 b1 f8 ff ff       	call   162b8 <outl>
   16a07:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:104
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    tmp = (uint16_t)((inl (0xCFC) >> ((offset & 2) * 8)) & 0xffff);
   16a0a:	68 fc 0c 00 00       	push   0xcfc
   16a0f:	e8 bc f8 ff ff       	call   162d0 <inl>
   16a14:	83 c4 04             	add    esp,0x4
   16a17:	89 c2                	mov    edx,eax
   16a19:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   16a1d:	83 e0 02             	and    eax,0x2
   16a20:	c1 e0 03             	shl    eax,0x3
   16a23:	89 c1                	mov    ecx,eax
   16a25:	d3 ea                	shr    edx,cl
   16a27:	89 d0                	mov    eax,edx
   16a29:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:105
    return (tmp);
   16a2d:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
/home/yogi/src/os/chrisOS/src/block/pci.c:106
 }
   16a31:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16a34:	c9                   	leave  
   16a35:	c3                   	ret    

00016a36 <pciConfigReadDWord>:
pciConfigReadDWord():
/home/yogi/src/os/chrisOS/src/block/pci.c:110

 uint32_t pciConfigReadDWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   16a36:	55                   	push   ebp
   16a37:	89 e5                	mov    ebp,esp
   16a39:	53                   	push   ebx
   16a3a:	83 ec 30             	sub    esp,0x30
   16a3d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   16a40:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16a43:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16a46:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16a49:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   16a4c:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   16a4f:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   16a52:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:112
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   16a55:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   16a59:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:113
    uint32_t lslot = (uint32_t)slot;
   16a5c:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16a60:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:114
    uint32_t lfunc = (uint32_t)func;
   16a63:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   16a67:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16a6a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   16a6d:	c1 e0 10             	shl    eax,0x10
   16a70:	89 c2                	mov    edx,eax
   16a72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16a75:	c1 e0 0b             	shl    eax,0xb
   16a78:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   16a7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a7d:	c1 e0 08             	shl    eax,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16a80:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   16a82:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   16a86:	25 fc 00 00 00       	and    eax,0xfc
   16a8b:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16a8d:	0d 00 00 00 80       	or     eax,0x80000000
   16a92:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:122
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   16a95:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   16a98:	68 f8 0c 00 00       	push   0xcf8
   16a9d:	e8 16 f8 ff ff       	call   162b8 <outl>
   16aa2:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:125
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    num = inl (0xCFC);
   16aa5:	68 fc 0c 00 00       	push   0xcfc
   16aaa:	e8 21 f8 ff ff       	call   162d0 <inl>
   16aaf:	83 c4 04             	add    esp,0x4
   16ab2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:127
    //return ((num >> 24)) | ((num & 0x0000FF000) << 8) | ((num & 0x00FF0000)>>8) | ((num << 24));
    return num;
   16ab5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/block/pci.c:128
 }
   16ab8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16abb:	c9                   	leave  
   16abc:	c3                   	ret    

00016abd <pciQueryBDF>:
pciQueryBDF():
/home/yogi/src/os/chrisOS/src/block/pci.c:131

 void pciQueryBDF(uint8_t bus, uint8_t device, uint8_t function)
 {
   16abd:	55                   	push   ebp
   16abe:	89 e5                	mov    ebp,esp
   16ac0:	81 ec b8 00 00 00    	sub    esp,0xb8
   16ac6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   16ac9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   16acc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   16acf:	88 8d 54 ff ff ff    	mov    BYTE PTR [ebp-0xac],cl
   16ad5:	88 95 50 ff ff ff    	mov    BYTE PTR [ebp-0xb0],dl
   16adb:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
/home/yogi/src/os/chrisOS/src/block/pci.c:135
     struct pci_device_t header;
     struct pci_bridge_t bridge;

     printk("Retrieving info for PCI address %02X:%02X:%02X\n",bus,device,function);
   16ae1:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16ae8:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16aef:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16af6:	51                   	push   ecx
   16af7:	52                   	push   edx
   16af8:	50                   	push   eax
   16af9:	68 b8 27 08 00       	push   0x827b8
   16afe:	e8 a0 0d 01 00       	call   278a3 <printk>
   16b03:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:136
    if (!getDeviceHeader(&header, bus, device, function))
   16b06:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16b0d:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16b14:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16b1b:	51                   	push   ecx
   16b1c:	52                   	push   edx
   16b1d:	50                   	push   eax
   16b1e:	8d 45 a8             	lea    eax,[ebp-0x58]
   16b21:	50                   	push   eax
   16b22:	e8 bd 02 00 00       	call   16de4 <getDeviceHeader>
   16b27:	83 c4 10             	add    esp,0x10
   16b2a:	83 f0 01             	xor    eax,0x1
   16b2d:	84 c0                	test   al,al
   16b2f:	74 15                	je     16b46 <pciQueryBDF+0x89>
/home/yogi/src/os/chrisOS/src/block/pci.c:138
    {
        printk("No device at that address\n");
   16b31:	83 ec 0c             	sub    esp,0xc
   16b34:	68 e8 27 08 00       	push   0x827e8
   16b39:	e8 65 0d 01 00       	call   278a3 <printk>
   16b3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:139
        return;
   16b41:	e9 83 00 00 00       	jmp    16bc9 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:141
    }
    if (header.vendor==0xFFFF)
   16b46:	0f b7 45 ae          	movzx  eax,WORD PTR [ebp-0x52]
   16b4a:	66 83 f8 ff          	cmp    ax,0xffff
   16b4e:	75 27                	jne    16b77 <pciQueryBDF+0xba>
/home/yogi/src/os/chrisOS/src/block/pci.c:143
    {
        printk("Nothing found at %02X:%02X:%02X\n",bus,device,function);
   16b50:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16b57:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16b5e:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16b65:	51                   	push   ecx
   16b66:	52                   	push   edx
   16b67:	50                   	push   eax
   16b68:	68 04 28 08 00       	push   0x82804
   16b6d:	e8 31 0d 01 00       	call   278a3 <printk>
   16b72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:144
        return;
   16b75:	eb 52                	jmp    16bc9 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:146
    }
     if (header.class==0x06)
   16b77:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   16b7a:	83 f8 06             	cmp    eax,0x6
   16b7d:	75 3b                	jne    16bba <pciQueryBDF+0xfd>
/home/yogi/src/os/chrisOS/src/block/pci.c:148
     {
         getBridgeHeader(&bridge,bus,device,function);
   16b7f:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16b86:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16b8d:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16b94:	51                   	push   ecx
   16b95:	52                   	push   edx
   16b96:	50                   	push   eax
   16b97:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   16b9d:	50                   	push   eax
   16b9e:	e8 27 04 00 00       	call   16fca <getBridgeHeader>
   16ba3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:149
         printPCIBridgeHeader(&bridge);
   16ba6:	83 ec 0c             	sub    esp,0xc
   16ba9:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   16baf:	50                   	push   eax
   16bb0:	e8 5d 07 00 00       	call   17312 <printPCIBridgeHeader>
   16bb5:	83 c4 10             	add    esp,0x10
   16bb8:	eb 0f                	jmp    16bc9 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:152
     }
     else
         printPCIHeader(&header);
   16bba:	83 ec 0c             	sub    esp,0xc
   16bbd:	8d 45 a8             	lea    eax,[ebp-0x58]
   16bc0:	50                   	push   eax
   16bc1:	e8 a1 09 00 00       	call   17567 <printPCIHeader>
   16bc6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:153
 }
   16bc9:	c9                   	leave  
   16bca:	c3                   	ret    

00016bcb <getVendorLongName>:
getVendorLongName():
/home/yogi/src/os/chrisOS/src/block/pci.c:162
    uint32_t subvendor, subdevice;  // Subsystem ID's or PCI_ANY_ID 
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
   16bcb:	55                   	push   ebp
   16bcc:	89 e5                	mov    ebp,esp
   16bce:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/pci.c:163
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   16bd1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16bd8:	eb 49                	jmp    16c23 <getVendorLongName+0x58>
/home/yogi/src/os/chrisOS/src/block/pci.c:164
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
   16bda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16bdd:	89 d0                	mov    eax,edx
   16bdf:	01 c0                	add    eax,eax
   16be1:	01 d0                	add    eax,edx
   16be3:	c1 e0 02             	shl    eax,0x2
   16be6:	05 60 92 02 00       	add    eax,0x29260
   16beb:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16bee:	0f b7 d0             	movzx  edx,ax
   16bf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16bf4:	0f b7 c0             	movzx  eax,ax
   16bf7:	39 c2                	cmp    edx,eax
   16bf9:	75 24                	jne    16c1f <getVendorLongName+0x54>
/home/yogi/src/os/chrisOS/src/block/pci.c:166
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
   16bfb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16bfe:	89 d0                	mov    eax,edx
   16c00:	01 c0                	add    eax,eax
   16c02:	01 d0                	add    eax,edx
   16c04:	c1 e0 02             	shl    eax,0x2
   16c07:	05 68 92 02 00       	add    eax,0x29268
   16c0c:	8b 00                	mov    eax,DWORD PTR [eax]
   16c0e:	83 ec 08             	sub    esp,0x8
   16c11:	50                   	push   eax
   16c12:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16c15:	e8 ea 0d 01 00       	call   27a04 <strcpy>
   16c1a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:167
            return;
   16c1d:	eb 20                	jmp    16c3f <getVendorLongName+0x74>
/home/yogi/src/os/chrisOS/src/block/pci.c:163 (discriminator 2)
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   16c1f:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:163 (discriminator 1)
   16c23:	81 7d f4 20 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x620
   16c2a:	76 ae                	jbe    16bda <getVendorLongName+0xf>
/home/yogi/src/os/chrisOS/src/block/pci.c:169
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
            return;
        }
    strcpy(vendorLongName,"Not Found");
   16c2c:	83 ec 08             	sub    esp,0x8
   16c2f:	68 25 28 08 00       	push   0x82825
   16c34:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16c37:	e8 c8 0d 01 00       	call   27a04 <strcpy>
   16c3c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:170
}
   16c3f:	c9                   	leave  
   16c40:	c3                   	ret    

00016c41 <getDeviceName>:
getDeviceName():
/home/yogi/src/os/chrisOS/src/block/pci.c:173

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
   16c41:	55                   	push   ebp
   16c42:	89 e5                	mov    ebp,esp
   16c44:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/pci.c:174
    for (int cnt=0; cnt<7000;cnt++)
   16c47:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16c4e:	eb 60                	jmp    16cb0 <getDeviceName+0x6f>
/home/yogi/src/os/chrisOS/src/block/pci.c:175
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
   16c50:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16c53:	89 d0                	mov    eax,edx
   16c55:	01 c0                	add    eax,eax
   16c57:	01 d0                	add    eax,edx
   16c59:	c1 e0 02             	shl    eax,0x2
   16c5c:	05 e0 e2 02 00       	add    eax,0x2e2e0
   16c61:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16c64:	0f b7 c0             	movzx  eax,ax
   16c67:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   16c6a:	75 40                	jne    16cac <getDeviceName+0x6b>
/home/yogi/src/os/chrisOS/src/block/pci.c:175 (discriminator 1)
   16c6c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16c6f:	89 d0                	mov    eax,edx
   16c71:	01 c0                	add    eax,eax
   16c73:	01 d0                	add    eax,edx
   16c75:	c1 e0 02             	shl    eax,0x2
   16c78:	05 e2 e2 02 00       	add    eax,0x2e2e2
   16c7d:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16c80:	0f b7 c0             	movzx  eax,ax
   16c83:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   16c86:	75 24                	jne    16cac <getDeviceName+0x6b>
/home/yogi/src/os/chrisOS/src/block/pci.c:177
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
   16c88:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16c8b:	89 d0                	mov    eax,edx
   16c8d:	01 c0                	add    eax,eax
   16c8f:	01 d0                	add    eax,edx
   16c91:	c1 e0 02             	shl    eax,0x2
   16c94:	05 e8 e2 02 00       	add    eax,0x2e2e8
   16c99:	8b 00                	mov    eax,DWORD PTR [eax]
   16c9b:	83 ec 08             	sub    esp,0x8
   16c9e:	50                   	push   eax
   16c9f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16ca2:	e8 5d 0d 01 00       	call   27a04 <strcpy>
   16ca7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:178
            return;
   16caa:	eb 20                	jmp    16ccc <getDeviceName+0x8b>
/home/yogi/src/os/chrisOS/src/block/pci.c:174 (discriminator 2)
    strcpy(vendorLongName,"Not Found");
}

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
    for (int cnt=0; cnt<7000;cnt++)
   16cac:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:174 (discriminator 1)
   16cb0:	81 7d f4 57 1b 00 00 	cmp    DWORD PTR [ebp-0xc],0x1b57
   16cb7:	7e 97                	jle    16c50 <getDeviceName+0xf>
/home/yogi/src/os/chrisOS/src/block/pci.c:180
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
            return;
        }
    strcpy(deviceName,"Not Found");
   16cb9:	83 ec 08             	sub    esp,0x8
   16cbc:	68 25 28 08 00       	push   0x82825
   16cc1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16cc4:	e8 3b 0d 01 00       	call   27a04 <strcpy>
   16cc9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:181
}
   16ccc:	c9                   	leave  
   16ccd:	c3                   	ret    

00016cce <getDeviceNameP>:
getDeviceNameP():
/home/yogi/src/os/chrisOS/src/block/pci.c:184

char* getDeviceNameP(struct pci_device_t* node, char* buffer)
{
   16cce:	55                   	push   ebp
   16ccf:	89 e5                	mov    ebp,esp
   16cd1:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:185
    getDeviceName(node->vendor, node->device, buffer);
   16cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cd7:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   16cdb:	0f b7 d0             	movzx  edx,ax
   16cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ce1:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   16ce5:	0f b7 c0             	movzx  eax,ax
   16ce8:	83 ec 04             	sub    esp,0x4
   16ceb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16cee:	52                   	push   edx
   16cef:	50                   	push   eax
   16cf0:	e8 4c ff ff ff       	call   16c41 <getDeviceName>
   16cf5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:186
    return buffer;
   16cf8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/block/pci.c:187
}
   16cfb:	c9                   	leave  
   16cfc:	c3                   	ret    

00016cfd <getClass>:
getClass():
/home/yogi/src/os/chrisOS/src/block/pci.c:190

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
   16cfd:	55                   	push   ebp
   16cfe:	89 e5                	mov    ebp,esp
   16d00:	83 ec 28             	sub    esp,0x28
   16d03:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16d06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   16d09:	88 55 e4             	mov    BYTE PTR [ebp-0x1c],dl
   16d0c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
/home/yogi/src/os/chrisOS/src/block/pci.c:192
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   16d0f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16d16:	e9 80 00 00 00       	jmp    16d9b <getClass+0x9e>
/home/yogi/src/os/chrisOS/src/block/pci.c:194
    {
        if (PciClassCodeTable[cnt].BaseClass==class && PciClassCodeTable[cnt].SubClass==subClass /*&& PciClassCodeTable[cnt].ProgIf==prog*/ )
   16d1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16d1e:	c1 e0 04             	shl    eax,0x4
   16d21:	05 00 dc 02 00       	add    eax,0x2dc00
   16d26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16d29:	3a 45 e4             	cmp    al,BYTE PTR [ebp-0x1c]
   16d2c:	75 69                	jne    16d97 <getClass+0x9a>
/home/yogi/src/os/chrisOS/src/block/pci.c:194 (discriminator 1)
   16d2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16d31:	c1 e0 04             	shl    eax,0x4
   16d34:	05 01 dc 02 00       	add    eax,0x2dc01
   16d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16d3c:	3a 45 e0             	cmp    al,BYTE PTR [ebp-0x20]
   16d3f:	75 56                	jne    16d97 <getClass+0x9a>
/home/yogi/src/os/chrisOS/src/block/pci.c:196
        {
            strcpy(BaseDesc,PciClassCodeTable[cnt].BaseDesc);
   16d41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16d44:	c1 e0 04             	shl    eax,0x4
   16d47:	05 04 dc 02 00       	add    eax,0x2dc04
   16d4c:	8b 00                	mov    eax,DWORD PTR [eax]
   16d4e:	83 ec 08             	sub    esp,0x8
   16d51:	50                   	push   eax
   16d52:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16d55:	e8 aa 0c 01 00       	call   27a04 <strcpy>
   16d5a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:197
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
   16d5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16d60:	c1 e0 04             	shl    eax,0x4
   16d63:	05 08 dc 02 00       	add    eax,0x2dc08
   16d68:	8b 00                	mov    eax,DWORD PTR [eax]
   16d6a:	83 ec 08             	sub    esp,0x8
   16d6d:	50                   	push   eax
   16d6e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   16d71:	e8 8e 0c 01 00       	call   27a04 <strcpy>
   16d76:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:198
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
   16d79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16d7c:	c1 e0 04             	shl    eax,0x4
   16d7f:	05 0c dc 02 00       	add    eax,0x2dc0c
   16d84:	8b 00                	mov    eax,DWORD PTR [eax]
   16d86:	83 ec 08             	sub    esp,0x8
   16d89:	50                   	push   eax
   16d8a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   16d8d:	e8 72 0c 01 00       	call   27a04 <strcpy>
   16d92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:199
            return;
   16d95:	eb 4b                	jmp    16de2 <getClass+0xe5>
/home/yogi/src/os/chrisOS/src/block/pci.c:192 (discriminator 2)
}

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   16d97:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:192 (discriminator 1)
   16d9b:	81 7d f4 28 1e 00 00 	cmp    DWORD PTR [ebp-0xc],0x1e28
   16da2:	0f 86 73 ff ff ff    	jbe    16d1b <getClass+0x1e>
/home/yogi/src/os/chrisOS/src/block/pci.c:202
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
            return;
        }
    }
    strcpy(BaseDesc,notFound);
   16da8:	83 ec 08             	sub    esp,0x8
   16dab:	68 40 e1 02 00       	push   0x2e140
   16db0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16db3:	e8 4c 0c 01 00       	call   27a04 <strcpy>
   16db8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:203
    strcpy(SubDesc,notFound);
   16dbb:	83 ec 08             	sub    esp,0x8
   16dbe:	68 40 e1 02 00       	push   0x2e140
   16dc3:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   16dc6:	e8 39 0c 01 00       	call   27a04 <strcpy>
   16dcb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:204
    strcpy(ProgDesc,notFound);
   16dce:	83 ec 08             	sub    esp,0x8
   16dd1:	68 40 e1 02 00       	push   0x2e140
   16dd6:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   16dd9:	e8 26 0c 01 00       	call   27a04 <strcpy>
   16dde:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:205
    return;
   16de1:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:206
}
   16de2:	c9                   	leave  
   16de3:	c3                   	ret    

00016de4 <getDeviceHeader>:
getDeviceHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:209

bool getDeviceHeader(struct pci_device_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   16de4:	55                   	push   ebp
   16de5:	89 e5                	mov    ebp,esp
   16de7:	53                   	push   ebx
   16de8:	83 ec 24             	sub    esp,0x24
   16deb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16dee:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16df1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16df4:	88 4d e4             	mov    BYTE PTR [ebp-0x1c],cl
   16df7:	88 55 e0             	mov    BYTE PTR [ebp-0x20],dl
   16dfa:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
/home/yogi/src/os/chrisOS/src/block/pci.c:212
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
   16dfd:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   16e01:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16e05:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   16e09:	83 ec 0c             	sub    esp,0xc
   16e0c:	51                   	push   ecx
   16e0d:	52                   	push   edx
   16e0e:	50                   	push   eax
   16e0f:	68 30 28 08 00       	push   0x82830
   16e14:	68 00 01 00 00       	push   0x100
   16e19:	e8 a5 0a 01 00       	call   278c3 <printd>
   16e1e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:214
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   16e21:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16e28:	e9 6c 01 00 00       	jmp    16f99 <getDeviceHeader+0x1b5>
/home/yogi/src/os/chrisOS/src/block/pci.c:216
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   16e2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16e30:	c1 e0 02             	shl    eax,0x2
   16e33:	0f b6 d8             	movzx  ebx,al
   16e36:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   16e3a:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16e3e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   16e42:	53                   	push   ebx
   16e43:	51                   	push   ecx
   16e44:	52                   	push   edx
   16e45:	50                   	push   eax
   16e46:	e8 eb fb ff ff       	call   16a36 <pciConfigReadDWord>
   16e4b:	83 c4 10             	add    esp,0x10
   16e4e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:217
        if (value==0xFFFFFFFF)
   16e51:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   16e55:	75 0a                	jne    16e61 <getDeviceHeader+0x7d>
/home/yogi/src/os/chrisOS/src/block/pci.c:218
            return false;
   16e57:	b8 00 00 00 00       	mov    eax,0x0
   16e5c:	e9 64 01 00 00       	jmp    16fc5 <getDeviceHeader+0x1e1>
/home/yogi/src/os/chrisOS/src/block/pci.c:219
        switch(cnt)
   16e61:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   16e65:	0f 87 2a 01 00 00    	ja     16f95 <getDeviceHeader+0x1b1>
   16e6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16e6e:	c1 e0 02             	shl    eax,0x2
   16e71:	05 58 28 08 00       	add    eax,0x82858
   16e76:	8b 00                	mov    eax,DWORD PTR [eax]
   16e78:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/block/pci.c:222
        {
            case 0:
                node->vendor=value;
   16e7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16e7d:	89 c2                	mov    edx,eax
   16e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e82:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:223
                node->device=value >> 16;
   16e86:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16e89:	c1 e8 10             	shr    eax,0x10
   16e8c:	89 c2                	mov    edx,eax
   16e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e91:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:224
                break;
   16e95:	e9 fb 00 00 00       	jmp    16f95 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:226
            case 1:
                node->command=value&0xFFFF;
   16e9a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16e9d:	89 c2                	mov    edx,eax
   16e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ea2:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:227
                node->status=value>>16&0xFFFF;
   16ea6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ea9:	c1 e8 10             	shr    eax,0x10
   16eac:	89 c2                	mov    edx,eax
   16eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16eb1:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:228
                break;
   16eb5:	e9 db 00 00 00       	jmp    16f95 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:230
            case 2:
                node->class=value >> 24;
   16eba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ebd:	c1 e8 18             	shr    eax,0x18
   16ec0:	89 c2                	mov    edx,eax
   16ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ec5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:231
                node->subClass=(value & 0x00FF0000) >> 16;
   16ec8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ecb:	25 00 00 ff 00       	and    eax,0xff0000
   16ed0:	c1 e8 10             	shr    eax,0x10
   16ed3:	89 c2                	mov    edx,eax
   16ed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ed8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:232
                node->prog=(value & 0x0000FF00) >> 8;
   16edb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ede:	25 00 ff 00 00       	and    eax,0xff00
   16ee3:	c1 e8 08             	shr    eax,0x8
   16ee6:	89 c2                	mov    edx,eax
   16ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16eeb:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:233
                break;
   16eee:	e9 a2 00 00 00       	jmp    16f95 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:235
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   16ef3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ef6:	c1 e8 10             	shr    eax,0x10
   16ef9:	83 e0 7f             	and    eax,0x7f
   16efc:	89 c2                	mov    edx,eax
   16efe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f01:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:236
                node->multiFunction=(value & 0x00800000)==0x00800000;
   16f04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16f07:	25 00 00 80 00       	and    eax,0x800000
   16f0c:	85 c0                	test   eax,eax
   16f0e:	0f 95 c2             	setne  dl
   16f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f14:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:237
                node->cacheSize=value&0xFF;
   16f17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16f1a:	89 c2                	mov    edx,eax
   16f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f1f:	88 50 41             	mov    BYTE PTR [eax+0x41],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:238
                node->latencyTimer=value>>8;
   16f22:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16f25:	c1 e8 08             	shr    eax,0x8
   16f28:	89 c2                	mov    edx,eax
   16f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f2d:	88 50 40             	mov    BYTE PTR [eax+0x40],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:239
                break;
   16f30:	eb 63                	jmp    16f95 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:241
            case 4: case 5: case 6: case 7: case 8: case 9:
                node->baseAdd[cnt+1-5]=value;
   16f32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16f35:	8d 50 fc             	lea    edx,[eax-0x4]
   16f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f3b:	8d 4a 08             	lea    ecx,[edx+0x8]
   16f3e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16f41:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:242
                break;
   16f44:	eb 4f                	jmp    16f95 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:244
            case 11:
                node->subdevice=value >> 16;
   16f46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16f49:	c1 e8 10             	shr    eax,0x10
   16f4c:	89 c2                	mov    edx,eax
   16f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f51:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:245
                node->subvendor=value & 0xFFFF;
   16f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16f58:	89 c2                	mov    edx,eax
   16f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f5d:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:246
                break;
   16f61:	eb 32                	jmp    16f95 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:248
            case 12:
                node->expROMAddress=value;
   16f63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f66:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16f69:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:249
                break;
   16f6c:	eb 27                	jmp    16f95 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:251
            case 13:
                node->caps = value & 0xFF;
   16f6e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16f71:	89 c2                	mov    edx,eax
   16f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f76:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:252
                break;
   16f79:	eb 1a                	jmp    16f95 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:254
            case 15:
                node->interrupt_line=value&0xFF;
   16f7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16f7e:	89 c2                	mov    edx,eax
   16f80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f83:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:255
                node->interrupt_pin=(value >> 8)&0xFF;
   16f86:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16f89:	c1 e8 08             	shr    eax,0x8
   16f8c:	89 c2                	mov    edx,eax
   16f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f91:	88 50 3e             	mov    BYTE PTR [eax+0x3e],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:256
                break;
   16f94:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:214 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   16f95:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:214 (discriminator 1)
   16f99:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   16f9d:	0f 8e 8a fe ff ff    	jle    16e2d <getDeviceHeader+0x49>
/home/yogi/src/os/chrisOS/src/block/pci.c:259
                node->interrupt_line=value&0xFF;
                node->interrupt_pin=(value >> 8)&0xFF;
                break;
        }
    }
    node->busNo=bus;
   16fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fa6:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   16faa:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:260
    node->deviceNo=slot;
   16fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16faf:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16fb3:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:261
    node->funcNo=func;
   16fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fb9:	0f b6 55 dc          	movzx  edx,BYTE PTR [ebp-0x24]
   16fbd:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:262
    return true;
   16fc0:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:263
}
   16fc5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16fc8:	c9                   	leave  
   16fc9:	c3                   	ret    

00016fca <getBridgeHeader>:
getBridgeHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:266

bool getBridgeHeader(struct pci_bridge_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   16fca:	55                   	push   ebp
   16fcb:	89 e5                	mov    ebp,esp
   16fcd:	57                   	push   edi
   16fce:	56                   	push   esi
   16fcf:	53                   	push   ebx
   16fd0:	83 ec 4c             	sub    esp,0x4c
   16fd3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16fd6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16fd9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16fdc:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   16fdf:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   16fe2:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:269
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
   16fe5:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   16fe9:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16fed:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16ff1:	83 ec 0c             	sub    esp,0xc
   16ff4:	51                   	push   ecx
   16ff5:	52                   	push   edx
   16ff6:	50                   	push   eax
   16ff7:	68 98 28 08 00       	push   0x82898
   16ffc:	68 00 01 00 00       	push   0x100
   17001:	e8 bd 08 01 00       	call   278c3 <printd>
   17006:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:271
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   17009:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   17010:	e9 c9 02 00 00       	jmp    172de <getBridgeHeader+0x314>
/home/yogi/src/os/chrisOS/src/block/pci.c:273
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   17015:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   17018:	c1 e0 02             	shl    eax,0x2
   1701b:	0f b6 d8             	movzx  ebx,al
   1701e:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   17022:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   17026:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   1702a:	53                   	push   ebx
   1702b:	51                   	push   ecx
   1702c:	52                   	push   edx
   1702d:	50                   	push   eax
   1702e:	e8 03 fa ff ff       	call   16a36 <pciConfigReadDWord>
   17033:	83 c4 10             	add    esp,0x10
   17036:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:274
        if (value==0xFFFFFFFF)
   17039:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   1703d:	75 0a                	jne    17049 <getBridgeHeader+0x7f>
/home/yogi/src/os/chrisOS/src/block/pci.c:275
            return false;
   1703f:	b8 00 00 00 00       	mov    eax,0x0
   17044:	e9 c1 02 00 00       	jmp    1730a <getBridgeHeader+0x340>
/home/yogi/src/os/chrisOS/src/block/pci.c:276
        switch(cnt)
   17049:	83 7d e4 0f          	cmp    DWORD PTR [ebp-0x1c],0xf
   1704d:	0f 87 87 02 00 00    	ja     172da <getBridgeHeader+0x310>
   17053:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   17056:	c1 e0 02             	shl    eax,0x2
   17059:	05 c0 28 08 00       	add    eax,0x828c0
   1705e:	8b 00                	mov    eax,DWORD PTR [eax]
   17060:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/block/pci.c:279
        {
            case 0:
                node->vendor=value;
   17062:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17065:	89 c2                	mov    edx,eax
   17067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1706a:	66 89 50 05          	mov    WORD PTR [eax+0x5],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:280
                node->device=value >> 16;
   1706e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17071:	c1 e8 10             	shr    eax,0x10
   17074:	89 c2                	mov    edx,eax
   17076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17079:	66 89 50 07          	mov    WORD PTR [eax+0x7],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:281
                break;
   1707d:	e9 58 02 00 00       	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:283
            case 1:
                node->command=value&0xFFFF;
   17082:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17085:	89 c2                	mov    edx,eax
   17087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1708a:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:284
                node->status=value>>16&0xFFFF;
   1708e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17091:	c1 e8 10             	shr    eax,0x10
   17094:	89 c2                	mov    edx,eax
   17096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17099:	66 89 50 38          	mov    WORD PTR [eax+0x38],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:285
                break;
   1709d:	e9 38 02 00 00       	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:287
            case 2:
                node->class=value >> 24;
   170a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170a5:	c1 e8 18             	shr    eax,0x18
   170a8:	89 c2                	mov    edx,eax
   170aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170ad:	89 50 09             	mov    DWORD PTR [eax+0x9],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:288
                node->subClass=(value & 0x00FF0000) >> 16;
   170b0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170b3:	25 00 00 ff 00       	and    eax,0xff0000
   170b8:	c1 e8 10             	shr    eax,0x10
   170bb:	89 c2                	mov    edx,eax
   170bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170c0:	89 50 0d             	mov    DWORD PTR [eax+0xd],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:289
                node->prog=(value & 0x0000FF00) >> 8;
   170c3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170c6:	25 00 ff 00 00       	and    eax,0xff00
   170cb:	c1 e8 08             	shr    eax,0x8
   170ce:	89 c2                	mov    edx,eax
   170d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170d3:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:290
                break;
   170d6:	e9 ff 01 00 00       	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:292
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   170db:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170de:	c1 e8 10             	shr    eax,0x10
   170e1:	83 e0 7f             	and    eax,0x7f
   170e4:	89 c2                	mov    edx,eax
   170e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170e9:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:293
                node->multiFunction=(value & 0x00800000)==0x00800000;
   170ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170ef:	25 00 00 80 00       	and    eax,0x800000
   170f4:	85 c0                	test   eax,eax
   170f6:	0f 95 c2             	setne  dl
   170f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170fc:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:294
                node->cacheSize=value&0xFF;
   170ff:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17102:	89 c2                	mov    edx,eax
   17104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17107:	88 50 2e             	mov    BYTE PTR [eax+0x2e],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:295
                node->latencyTimer=value>>8;
   1710a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1710d:	c1 e8 08             	shr    eax,0x8
   17110:	89 c2                	mov    edx,eax
   17112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17115:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:296
                break;
   17118:	e9 bd 01 00 00       	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:298
            case 4: 
                node->baseAdd[0]=value;
   1711d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17120:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17123:	89 42 12             	mov    DWORD PTR [edx+0x12],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:299
                break;
   17126:	e9 af 01 00 00       	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:301
            case 5:
                node->baseAdd[1]=value;
   1712b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1712e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17131:	89 42 16             	mov    DWORD PTR [edx+0x16],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:302
                break;
   17134:	e9 a1 01 00 00       	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:304
            case 6:
                node->secLatencyTimer=(value>>24);
   17139:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1713c:	c1 e8 18             	shr    eax,0x18
   1713f:	89 c2                	mov    edx,eax
   17141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17144:	88 50 31             	mov    BYTE PTR [eax+0x31],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:305
                node->subordinateBusNum=(value>>16) & 0xFF;
   17147:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1714a:	c1 e8 10             	shr    eax,0x10
   1714d:	89 c2                	mov    edx,eax
   1714f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17152:	88 50 28             	mov    BYTE PTR [eax+0x28],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:306
                node->secondaryBusNum=(value >> 8) & 0xFF;
   17155:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17158:	c1 e8 08             	shr    eax,0x8
   1715b:	89 c2                	mov    edx,eax
   1715d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17160:	88 50 26             	mov    BYTE PTR [eax+0x26],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:307
                node->primaryBusNum=value & 0xFF;
   17163:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17166:	89 c2                	mov    edx,eax
   17168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1716b:	88 50 27             	mov    BYTE PTR [eax+0x27],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:309
                //printk("pr:se:su %02X:%02X:%02X\n", node->primaryBusNum, node->secondaryBusNum, node->subordinateBusNum);
                break;
   1716e:	e9 67 01 00 00       	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:311
            case 7:
                node->secStatus=(value>>16);
   17173:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17176:	c1 e8 10             	shr    eax,0x10
   17179:	89 c2                	mov    edx,eax
   1717b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1717e:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:312
                node->ioLimit=(value>>8)&0xFF;
   17182:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17185:	c1 e8 08             	shr    eax,0x8
   17188:	0f b6 d0             	movzx  edx,al
   1718b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1718e:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:313
                node->ioBase=value&0xFF;
   17191:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17194:	0f b6 d0             	movzx  edx,al
   17197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1719a:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:314
                break;
   1719d:	e9 38 01 00 00       	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:316
            case 8:
                node->memoryLimit=value>>16;
   171a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   171a5:	c1 e8 10             	shr    eax,0x10
   171a8:	89 c2                	mov    edx,eax
   171aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171ad:	66 89 50 36          	mov    WORD PTR [eax+0x36],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:317
                node->memoryBase=value;
   171b1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   171b4:	89 c2                	mov    edx,eax
   171b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171b9:	66 89 50 34          	mov    WORD PTR [eax+0x34],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:318
                break;
   171bd:	e9 18 01 00 00       	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:320
            case 9:
                node->prefMemLimit=value>>16;
   171c2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   171c5:	c1 e8 10             	shr    eax,0x10
   171c8:	ba 00 00 00 00       	mov    edx,0x0
   171cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   171d0:	89 41 3e             	mov    DWORD PTR [ecx+0x3e],eax
   171d3:	89 51 42             	mov    DWORD PTR [ecx+0x42],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:321
                node->prefMemBase=value&0xFFFF;
   171d6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   171d9:	ba 00 00 00 00       	mov    edx,0x0
   171de:	0f b7 d8             	movzx  ebx,ax
   171e1:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
   171e4:	89 d0                	mov    eax,edx
   171e6:	83 e0 00             	and    eax,0x0
   171e9:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
   171ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171ef:	8b 5d c0             	mov    ebx,DWORD PTR [ebp-0x40]
   171f2:	8b 75 c4             	mov    esi,DWORD PTR [ebp-0x3c]
   171f5:	89 58 46             	mov    DWORD PTR [eax+0x46],ebx
   171f8:	89 70 4a             	mov    DWORD PTR [eax+0x4a],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:322
                break;
   171fb:	e9 da 00 00 00       	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:324
            case 10:
                node->prefMemLimit|=value<<16;
   17200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17203:	8b 48 3e             	mov    ecx,DWORD PTR [eax+0x3e]
   17206:	8b 58 42             	mov    ebx,DWORD PTR [eax+0x42]
   17209:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1720c:	c1 e0 10             	shl    eax,0x10
   1720f:	ba 00 00 00 00       	mov    edx,0x0
   17214:	89 cf                	mov    edi,ecx
   17216:	09 c7                	or     edi,eax
   17218:	89 7d b8             	mov    DWORD PTR [ebp-0x48],edi
   1721b:	89 de                	mov    esi,ebx
   1721d:	09 d6                	or     esi,edx
   1721f:	89 75 bc             	mov    DWORD PTR [ebp-0x44],esi
   17222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17225:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
   17228:	8b 5d bc             	mov    ebx,DWORD PTR [ebp-0x44]
   1722b:	89 48 3e             	mov    DWORD PTR [eax+0x3e],ecx
   1722e:	89 58 42             	mov    DWORD PTR [eax+0x42],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:325
                break;
   17231:	e9 a4 00 00 00       	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:327
            case 11:
                node->prefMemBase|=value<<16;
   17236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17239:	8b 48 46             	mov    ecx,DWORD PTR [eax+0x46]
   1723c:	8b 58 4a             	mov    ebx,DWORD PTR [eax+0x4a]
   1723f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17242:	c1 e0 10             	shl    eax,0x10
   17245:	ba 00 00 00 00       	mov    edx,0x0
   1724a:	89 cf                	mov    edi,ecx
   1724c:	09 c7                	or     edi,eax
   1724e:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   17251:	89 de                	mov    esi,ebx
   17253:	09 d6                	or     esi,edx
   17255:	89 75 b4             	mov    DWORD PTR [ebp-0x4c],esi
   17258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1725b:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
   1725e:	8b 5d b4             	mov    ebx,DWORD PTR [ebp-0x4c]
   17261:	89 48 46             	mov    DWORD PTR [eax+0x46],ecx
   17264:	89 58 4a             	mov    DWORD PTR [eax+0x4a],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:328
                break;
   17267:	eb 71                	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:330
            case 12:
                node->ioLimit|=(value&0xFFFF0000)>>8;
   17269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1726c:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   1726f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17272:	66 b8 00 00          	mov    ax,0x0
   17276:	c1 e8 08             	shr    eax,0x8
   17279:	09 c2                	or     edx,eax
   1727b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1727e:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:331
                node->ioBase|=value&0xFFFF<<8;
   17281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17284:	8b 50 22             	mov    edx,DWORD PTR [eax+0x22]
   17287:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1728a:	25 00 ff ff 00       	and    eax,0xffff00
   1728f:	09 c2                	or     edx,eax
   17291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17294:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:332
                break;
   17297:	eb 41                	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:334
            case 13:
                node->caps = value & 0xFF;
   17299:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1729c:	89 c2                	mov    edx,eax
   1729e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172a1:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:335
                break;
   172a4:	eb 34                	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:337
            case 14:
                node->expROMAddress=value;
   172a6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   172a9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   172ac:	89 42 1a             	mov    DWORD PTR [edx+0x1a],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:338
                break;
   172af:	eb 29                	jmp    172da <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:340
            case 15:
                node->interrupt_line=value&0xFF;
   172b1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   172b4:	89 c2                	mov    edx,eax
   172b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172b9:	88 50 2a             	mov    BYTE PTR [eax+0x2a],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:341
                node->interrupt_pin=(value >> 8)&0xFF;
   172bc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   172bf:	c1 e8 08             	shr    eax,0x8
   172c2:	89 c2                	mov    edx,eax
   172c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172c7:	88 50 2b             	mov    BYTE PTR [eax+0x2b],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:342
                node->bridgeControl=(value>>16)&0xFFFF;
   172ca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   172cd:	c1 e8 10             	shr    eax,0x10
   172d0:	89 c2                	mov    edx,eax
   172d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172d5:	66 89 50 32          	mov    WORD PTR [eax+0x32],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:343
                break;
   172d9:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:271 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   172da:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:271 (discriminator 1)
   172de:	83 7d e4 0d          	cmp    DWORD PTR [ebp-0x1c],0xd
   172e2:	0f 8e 2d fd ff ff    	jle    17015 <getBridgeHeader+0x4b>
/home/yogi/src/os/chrisOS/src/block/pci.c:347
                node->bridgeControl=(value>>16)&0xFFFF;
                break;

        }
    }
    node->busNo=bus;
   172e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172eb:	0f b6 55 d4          	movzx  edx,BYTE PTR [ebp-0x2c]
   172ef:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:348
    node->deviceNo=slot;
   172f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172f4:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   172f8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:349
    node->funcNo=func;
   172fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172fe:	0f b6 55 cc          	movzx  edx,BYTE PTR [ebp-0x34]
   17302:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:350
    return true;
   17305:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:351
}
   1730a:	8d 65 f4             	lea    esp,[ebp-0xc]
   1730d:	5b                   	pop    ebx
   1730e:	5e                   	pop    esi
   1730f:	5f                   	pop    edi
   17310:	5d                   	pop    ebp
   17311:	c3                   	ret    

00017312 <printPCIBridgeHeader>:
printPCIBridgeHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:353
void printPCIBridgeHeader(struct pci_bridge_t* node)
{          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
   17312:	55                   	push   ebp
   17313:	89 e5                	mov    ebp,esp
   17315:	57                   	push   edi
   17316:	56                   	push   esi
   17317:	53                   	push   ebx
   17318:	81 ec ac 06 00 00    	sub    esp,0x6ac
/home/yogi/src/os/chrisOS/src/block/pci.c:356
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   1731e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17321:	8b 40 0d             	mov    eax,DWORD PTR [eax+0xd]
   17324:	0f b6 d0             	movzx  edx,al
   17327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1732a:	8b 40 09             	mov    eax,DWORD PTR [eax+0x9]
   1732d:	0f b6 c0             	movzx  eax,al
   17330:	83 ec 0c             	sub    esp,0xc
   17333:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   17339:	51                   	push   ecx
   1733a:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   17340:	51                   	push   ecx
   17341:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   17347:	51                   	push   ecx
   17348:	52                   	push   edx
   17349:	50                   	push   eax
   1734a:	e8 ae f9 ff ff       	call   16cfd <getClass>
   1734f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:357
    printk("Bridge:\n");
   17352:	83 ec 0c             	sub    esp,0xc
   17355:	68 00 29 08 00       	push   0x82900
   1735a:	e8 44 05 01 00       	call   278a3 <printk>
   1735f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:358
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   17362:	83 ec 0c             	sub    esp,0xc
   17365:	68 e8 26 08 00       	push   0x826e8
   1736a:	e8 34 05 01 00       	call   278a3 <printk>
   1736f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:364
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   17372:	a1 f8 97 12 00       	mov    eax,ds:0x1297f8
   17377:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   1737b:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1737e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17381:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17385:	0f b6 c0             	movzx  eax,al
   17388:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1738e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17391:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17395:	0f b6 d8             	movzx  ebx,al
   17398:	89 9d 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],ebx
   1739e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173a1:	8b 70 0d             	mov    esi,DWORD PTR [eax+0xd]
   173a4:	89 b5 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],esi
   173aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173ad:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   173b0:	89 8d 58 f9 ff ff    	mov    DWORD PTR [ebp-0x6a8],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   173b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173b9:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   173bd:	0f b7 d0             	movzx  edx,ax
   173c0:	89 95 54 f9 ff ff    	mov    DWORD PTR [ebp-0x6ac],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   173c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173c9:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   173cd:	0f b7 c0             	movzx  eax,ax
   173d0:	89 85 50 f9 ff ff    	mov    DWORD PTR [ebp-0x6b0],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   173d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173d9:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   173dd:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   173e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173e3:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   173e7:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   173ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173ed:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   173f1:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   173f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   173fb:	0f b6 d0             	movzx  edx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   173fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17401:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17404:	0f b6 c0             	movzx  eax,al
   17407:	83 ec 0c             	sub    esp,0xc
   1740a:	57                   	push   edi
   1740b:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   17411:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   17417:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   1741d:	ff b5 58 f9 ff ff    	push   DWORD PTR [ebp-0x6a8]
   17423:	ff b5 54 f9 ff ff    	push   DWORD PTR [ebp-0x6ac]
   17429:	ff b5 50 f9 ff ff    	push   DWORD PTR [ebp-0x6b0]
   1742f:	56                   	push   esi
   17430:	53                   	push   ebx
   17431:	51                   	push   ecx
   17432:	52                   	push   edx
   17433:	50                   	push   eax
   17434:	68 0c 29 08 00       	push   0x8290c
   17439:	e8 65 04 01 00       	call   278a3 <printk>
   1743e:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/block/pci.c:366
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);

    getVendorLongName(node->vendor, tempString);
   17441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17444:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   17448:	0f b7 c0             	movzx  eax,ax
   1744b:	83 ec 08             	sub    esp,0x8
   1744e:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   17454:	52                   	push   edx
   17455:	50                   	push   eax
   17456:	e8 70 f7 ff ff       	call   16bcb <getVendorLongName>
   1745b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:367
    printk("Vendor: %s\t",tempString);
   1745e:	83 ec 08             	sub    esp,0x8
   17461:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17467:	50                   	push   eax
   17468:	68 50 29 08 00       	push   0x82950
   1746d:	e8 31 04 01 00       	call   278a3 <printk>
   17472:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:368
    getDeviceName(node->vendor, node->device, tempString);
   17475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17478:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   1747c:	0f b7 d0             	movzx  edx,ax
   1747f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17482:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   17486:	0f b7 c0             	movzx  eax,ax
   17489:	83 ec 04             	sub    esp,0x4
   1748c:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   17492:	51                   	push   ecx
   17493:	52                   	push   edx
   17494:	50                   	push   eax
   17495:	e8 a7 f7 ff ff       	call   16c41 <getDeviceName>
   1749a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:369
    printk("Device: %s\n",tempString);
   1749d:	83 ec 08             	sub    esp,0x8
   174a0:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   174a6:	50                   	push   eax
   174a7:	68 5c 29 08 00       	push   0x8295c
   174ac:	e8 f2 03 01 00       	call   278a3 <printk>
   174b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:370
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   174b4:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   174ba:	50                   	push   eax
   174bb:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   174c1:	50                   	push   eax
   174c2:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   174c8:	50                   	push   eax
   174c9:	68 68 29 08 00       	push   0x82968
   174ce:	e8 d0 03 01 00       	call   278a3 <printk>
   174d3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:371
    printk("Base addresses:\n");
   174d6:	83 ec 0c             	sub    esp,0xc
   174d9:	68 89 29 08 00       	push   0x82989
   174de:	e8 c0 03 01 00       	call   278a3 <printk>
   174e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:372
    for (int cnt=0;cnt<2;cnt++)
   174e6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   174ed:	eb 25                	jmp    17514 <printPCIBridgeHeader+0x202>
/home/yogi/src/os/chrisOS/src/block/pci.c:373 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   174ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   174f2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   174f5:	83 c2 04             	add    edx,0x4
   174f8:	8b 44 90 02          	mov    eax,DWORD PTR [eax+edx*4+0x2]
   174fc:	83 ec 04             	sub    esp,0x4
   174ff:	50                   	push   eax
   17500:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   17503:	68 9a 29 08 00       	push   0x8299a
   17508:	e8 96 03 01 00       	call   278a3 <printk>
   1750d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:372 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<2;cnt++)
   17510:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:372 (discriminator 1)
   17514:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
   17518:	7e d5                	jle    174ef <printPCIBridgeHeader+0x1dd>
/home/yogi/src/os/chrisOS/src/block/pci.c:374
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("IO Base: 0x%04X\tIO Limit: 0x%04X\n",node->ioBase,node->ioLimit);
   1751a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1751d:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   17520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17523:	8b 40 22             	mov    eax,DWORD PTR [eax+0x22]
   17526:	83 ec 04             	sub    esp,0x4
   17529:	52                   	push   edx
   1752a:	50                   	push   eax
   1752b:	68 ac 29 08 00       	push   0x829ac
   17530:	e8 6e 03 01 00       	call   278a3 <printk>
   17535:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:375
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   17538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1753b:	0f b7 40 38          	movzx  eax,WORD PTR [eax+0x38]
   1753f:	0f b7 d0             	movzx  edx,ax
   17542:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17545:	0f b7 40 3a          	movzx  eax,WORD PTR [eax+0x3a]
   17549:	0f b7 c0             	movzx  eax,ax
   1754c:	83 ec 04             	sub    esp,0x4
   1754f:	52                   	push   edx
   17550:	50                   	push   eax
   17551:	68 d0 29 08 00       	push   0x829d0
   17556:	e8 48 03 01 00       	call   278a3 <printk>
   1755b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:376
}   
   1755e:	90                   	nop
   1755f:	8d 65 f4             	lea    esp,[ebp-0xc]
   17562:	5b                   	pop    ebx
   17563:	5e                   	pop    esi
   17564:	5f                   	pop    edi
   17565:	5d                   	pop    ebp
   17566:	c3                   	ret    

00017567 <printPCIHeader>:
printPCIHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:379

void printPCIHeader(struct pci_device_t* node)
{
   17567:	55                   	push   ebp
   17568:	89 e5                	mov    ebp,esp
   1756a:	57                   	push   edi
   1756b:	56                   	push   esi
   1756c:	53                   	push   ebx
   1756d:	81 ec 9c 06 00 00    	sub    esp,0x69c
/home/yogi/src/os/chrisOS/src/block/pci.c:382
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   17573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17576:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   17579:	0f b6 d0             	movzx  edx,al
   1757c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1757f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   17582:	0f b6 c0             	movzx  eax,al
   17585:	83 ec 0c             	sub    esp,0xc
   17588:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   1758e:	51                   	push   ecx
   1758f:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   17595:	51                   	push   ecx
   17596:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   1759c:	51                   	push   ecx
   1759d:	52                   	push   edx
   1759e:	50                   	push   eax
   1759f:	e8 59 f7 ff ff       	call   16cfd <getClass>
   175a4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:386
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
   175a7:	83 ec 0c             	sub    esp,0xc
   175aa:	68 f1 29 08 00       	push   0x829f1
   175af:	e8 ef 02 01 00       	call   278a3 <printk>
   175b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:387
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   175b7:	83 ec 0c             	sub    esp,0xc
   175ba:	68 e8 26 08 00       	push   0x826e8
   175bf:	e8 df 02 01 00       	call   278a3 <printk>
   175c4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:388
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   175c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175ca:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   175cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175d0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   175d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175d6:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   175da:	0f b7 c0             	movzx  eax,ax
   175dd:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   175e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175e6:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   175ea:	0f b7 f8             	movzx  edi,ax
   175ed:	89 bd 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   175f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175f6:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   175fa:	0f b6 c8             	movzx  ecx,al
   175fd:	89 8d 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17606:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1760a:	0f b6 f8             	movzx  edi,al
   1760d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17610:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   17614:	0f b6 c8             	movzx  ecx,al
   17617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1761a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1761e:	0f b6 d0             	movzx  edx,al
   17621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17624:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   17627:	0f b6 c0             	movzx  eax,al
   1762a:	83 ec 08             	sub    esp,0x8
   1762d:	53                   	push   ebx
   1762e:	56                   	push   esi
   1762f:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   17635:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   1763b:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   17641:	57                   	push   edi
   17642:	51                   	push   ecx
   17643:	52                   	push   edx
   17644:	50                   	push   eax
   17645:	68 fc 29 08 00       	push   0x829fc
   1764a:	e8 54 02 01 00       	call   278a3 <printk>
   1764f:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:391
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
                node->subClass);
    getVendorLongName(node->vendor, tempString);
   17652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17655:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   17659:	0f b7 c0             	movzx  eax,ax
   1765c:	83 ec 08             	sub    esp,0x8
   1765f:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   17665:	52                   	push   edx
   17666:	50                   	push   eax
   17667:	e8 5f f5 ff ff       	call   16bcb <getVendorLongName>
   1766c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:392
    printk("Vendor: %s\t",tempString);
   1766f:	83 ec 08             	sub    esp,0x8
   17672:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17678:	50                   	push   eax
   17679:	68 50 29 08 00       	push   0x82950
   1767e:	e8 20 02 01 00       	call   278a3 <printk>
   17683:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:393
    getDeviceName(node->vendor, node->device, tempString);
   17686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17689:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   1768d:	0f b7 d0             	movzx  edx,ax
   17690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17693:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   17697:	0f b7 c0             	movzx  eax,ax
   1769a:	83 ec 04             	sub    esp,0x4
   1769d:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   176a3:	51                   	push   ecx
   176a4:	52                   	push   edx
   176a5:	50                   	push   eax
   176a6:	e8 96 f5 ff ff       	call   16c41 <getDeviceName>
   176ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:394
    printk("Device: %s\n",tempString);
   176ae:	83 ec 08             	sub    esp,0x8
   176b1:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   176b7:	50                   	push   eax
   176b8:	68 5c 29 08 00       	push   0x8295c
   176bd:	e8 e1 01 01 00       	call   278a3 <printk>
   176c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:395
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   176c5:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   176cb:	50                   	push   eax
   176cc:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   176d2:	50                   	push   eax
   176d3:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   176d9:	50                   	push   eax
   176da:	68 68 29 08 00       	push   0x82968
   176df:	e8 bf 01 01 00       	call   278a3 <printk>
   176e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:396
    printk("Base addresses:\n");
   176e7:	83 ec 0c             	sub    esp,0xc
   176ea:	68 89 29 08 00       	push   0x82989
   176ef:	e8 af 01 01 00       	call   278a3 <printk>
   176f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:397
    for (int cnt=0;cnt<6;cnt++)
   176f7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   176fe:	eb 24                	jmp    17724 <printPCIHeader+0x1bd>
/home/yogi/src/os/chrisOS/src/block/pci.c:398 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   17700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17703:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   17706:	83 c2 08             	add    edx,0x8
   17709:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
   1770c:	83 ec 04             	sub    esp,0x4
   1770f:	50                   	push   eax
   17710:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   17713:	68 9a 29 08 00       	push   0x8299a
   17718:	e8 86 01 01 00       	call   278a3 <printk>
   1771d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:397 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<6;cnt++)
   17720:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:397 (discriminator 1)
   17724:	83 7d e4 05          	cmp    DWORD PTR [ebp-0x1c],0x5
   17728:	7e d6                	jle    17700 <printPCIHeader+0x199>
/home/yogi/src/os/chrisOS/src/block/pci.c:399
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("Subsystem: %04X\tSubsys Vendor: %04X\n",node->subdevice,node->subvendor);
   1772a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1772d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
   17731:	0f b7 d0             	movzx  edx,ax
   17734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17737:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
   1773b:	0f b7 c0             	movzx  eax,ax
   1773e:	83 ec 04             	sub    esp,0x4
   17741:	52                   	push   edx
   17742:	50                   	push   eax
   17743:	68 34 2a 08 00       	push   0x82a34
   17748:	e8 56 01 01 00       	call   278a3 <printk>
   1774d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:400
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   17750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17753:	0f b7 40 4a          	movzx  eax,WORD PTR [eax+0x4a]
   17757:	0f b7 d0             	movzx  edx,ax
   1775a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1775d:	0f b7 40 4c          	movzx  eax,WORD PTR [eax+0x4c]
   17761:	0f b7 c0             	movzx  eax,ax
   17764:	83 ec 04             	sub    esp,0x4
   17767:	52                   	push   edx
   17768:	50                   	push   eax
   17769:	68 d0 29 08 00       	push   0x829d0
   1776e:	e8 30 01 01 00       	call   278a3 <printk>
   17773:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:401
    printk("Interrupt Pin/Line: 0x%04X/0x%04X\n",node->interrupt_pin,node->interrupt_line);
   17776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17779:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
   1777d:	0f b6 d0             	movzx  edx,al
   17780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17783:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
   17787:	0f b6 c0             	movzx  eax,al
   1778a:	83 ec 04             	sub    esp,0x4
   1778d:	52                   	push   edx
   1778e:	50                   	push   eax
   1778f:	68 5c 2a 08 00       	push   0x82a5c
   17794:	e8 0a 01 01 00       	call   278a3 <printk>
   17799:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:402
}
   1779c:	90                   	nop
   1779d:	8d 65 f4             	lea    esp,[ebp-0xc]
   177a0:	5b                   	pop    ebx
   177a1:	5e                   	pop    esi
   177a2:	5f                   	pop    edi
   177a3:	5d                   	pop    ebp
   177a4:	c3                   	ret    

000177a5 <addFunction>:
addFunction():
/home/yogi/src/os/chrisOS/src/block/pci.c:404
void addFunction(struct pci_device_t* node)
{
   177a5:	55                   	push   ebp
   177a6:	89 e5                	mov    ebp,esp
   177a8:	53                   	push   ebx
   177a9:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/block/pci.c:405
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFound function: deviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", node->device, node->vendor, node->class, node->subClass);
   177ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   177af:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   177b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   177b5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   177b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   177bb:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   177bf:	0f b7 d0             	movzx  edx,ax
   177c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   177c5:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   177c9:	0f b7 c0             	movzx  eax,ax
   177cc:	83 ec 08             	sub    esp,0x8
   177cf:	53                   	push   ebx
   177d0:	51                   	push   ecx
   177d1:	52                   	push   edx
   177d2:	50                   	push   eax
   177d3:	68 80 2a 08 00       	push   0x82a80
   177d8:	68 00 01 00 00       	push   0x100
   177dd:	e8 e1 00 01 00       	call   278c3 <printd>
   177e2:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:406
    memcpy(&kPCIDeviceFunctions[kPCIFunctionCount++],node,sizeof(struct pci_bridge_t));
   177e5:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   177eb:	0f b6 05 ee 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ee
   177f2:	8d 50 01             	lea    edx,[eax+0x1]
   177f5:	88 15 ee 97 12 00    	mov    BYTE PTR ds:0x1297ee,dl
   177fb:	0f b6 d0             	movzx  edx,al
   177fe:	89 d0                	mov    eax,edx
   17800:	c1 e0 02             	shl    eax,0x2
   17803:	01 d0                	add    eax,edx
   17805:	c1 e0 04             	shl    eax,0x4
   17808:	01 c8                	add    eax,ecx
   1780a:	83 ec 04             	sub    esp,0x4
   1780d:	6a 4e                	push   0x4e
   1780f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17812:	50                   	push   eax
   17813:	e8 ec e9 00 00       	call   26204 <memcpy>
   17818:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:407
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFunction entry created\n");
   1781b:	83 ec 08             	sub    esp,0x8
   1781e:	68 d5 2a 08 00       	push   0x82ad5
   17823:	68 00 01 00 00       	push   0x100
   17828:	e8 96 00 01 00       	call   278c3 <printd>
   1782d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:408
}
   17830:	90                   	nop
   17831:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17834:	c9                   	leave  
   17835:	c3                   	ret    

00017836 <addBridge>:
addBridge():
/home/yogi/src/os/chrisOS/src/block/pci.c:410
void addBridge(struct pci_device_t* node, uint8_t bus, uint8_t device, uint8_t function)
{
   17836:	55                   	push   ebp
   17837:	89 e5                	mov    ebp,esp
   17839:	57                   	push   edi
   1783a:	56                   	push   esi
   1783b:	53                   	push   ebx
   1783c:	81 ec cc 00 00 00    	sub    esp,0xcc
   17842:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   17845:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   17848:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1784b:	88 8d 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],cl
   17851:	88 95 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],dl
   17857:	88 85 3c ff ff ff    	mov    BYTE PTR [ebp-0xc4],al
/home/yogi/src/os/chrisOS/src/block/pci.c:414
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
   1785d:	0f b6 8d 3c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc4]
   17864:	0f b6 95 40 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xc0]
   1786b:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   17872:	51                   	push   ecx
   17873:	52                   	push   edx
   17874:	50                   	push   eax
   17875:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   1787b:	50                   	push   eax
   1787c:	e8 49 f7 ff ff       	call   16fca <getBridgeHeader>
   17881:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:415
    if (bridge.vendor==0xFFFF)
   17884:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   1788b:	66 83 f8 ff          	cmp    ax,0xffff
   1788f:	0f 84 0e 01 00 00    	je     179a3 <addBridge+0x16d>
/home/yogi/src/os/chrisOS/src/block/pci.c:418
        return;
    //         bridge.busNo=bus;bridge.deviceNo=device;bridge.funcNo=function;
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tFound bridge on %02X:%02X:%02X,Cls#%02XpBus#%02X,sBus#%02X,suBus# %02X,MF=%u\n",bus, device, function, bridge.class, bridge.primaryBusNum, bridge.secondaryBusNum, bridge.subordinateBusNum, bridge.multiFunction);
   17895:	0f b6 85 4e ff ff ff 	movzx  eax,BYTE PTR [ebp-0xb2]
   1789c:	0f b6 d0             	movzx  edx,al
   1789f:	0f b6 85 72 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8e]
   178a6:	0f b6 c0             	movzx  eax,al
   178a9:	89 85 38 ff ff ff    	mov    DWORD PTR [ebp-0xc8],eax
   178af:	0f b6 85 70 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x90]
   178b6:	0f b6 f0             	movzx  esi,al
   178b9:	89 b5 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],esi
   178bf:	0f b6 85 71 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8f]
   178c6:	0f b6 f8             	movzx  edi,al
   178c9:	8b b5 53 ff ff ff    	mov    esi,DWORD PTR [ebp-0xad]
   178cf:	0f b6 9d 3c ff ff ff 	movzx  ebx,BYTE PTR [ebp-0xc4]
   178d6:	0f b6 8d 40 ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc0]
   178dd:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   178e4:	83 ec 08             	sub    esp,0x8
   178e7:	52                   	push   edx
   178e8:	ff b5 38 ff ff ff    	push   DWORD PTR [ebp-0xc8]
   178ee:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   178f4:	57                   	push   edi
   178f5:	56                   	push   esi
   178f6:	53                   	push   ebx
   178f7:	51                   	push   ecx
   178f8:	50                   	push   eax
   178f9:	68 f4 2a 08 00       	push   0x82af4
   178fe:	68 00 01 00 00       	push   0x100
   17903:	e8 bb ff 00 00       	call   278c3 <printd>
   17908:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:419
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tdeviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", bridge.device, bridge.vendor, bridge.class, bridge.subClass);
   1790b:	8b 9d 57 ff ff ff    	mov    ebx,DWORD PTR [ebp-0xa9]
   17911:	8b 8d 53 ff ff ff    	mov    ecx,DWORD PTR [ebp-0xad]
   17917:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   1791e:	0f b7 d0             	movzx  edx,ax
   17921:	0f b7 85 51 ff ff ff 	movzx  eax,WORD PTR [ebp-0xaf]
   17928:	0f b7 c0             	movzx  eax,ax
   1792b:	83 ec 08             	sub    esp,0x8
   1792e:	53                   	push   ebx
   1792f:	51                   	push   ecx
   17930:	52                   	push   edx
   17931:	50                   	push   eax
   17932:	68 48 2b 08 00       	push   0x82b48
   17937:	68 00 01 00 00       	push   0x100
   1793c:	e8 82 ff 00 00       	call   278c3 <printd>
   17941:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:420
    memcpy(&kPCIBridgeHeaders[kPCIBridgeCount++],&bridge,sizeof(struct pci_bridge_t));
   17944:	8b 0d f8 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f8
   1794a:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
   17951:	8d 50 01             	lea    edx,[eax+0x1]
   17954:	88 15 ed 97 12 00    	mov    BYTE PTR ds:0x1297ed,dl
   1795a:	0f b6 c0             	movzx  eax,al
   1795d:	6b c0 4e             	imul   eax,eax,0x4e
   17960:	8d 14 01             	lea    edx,[ecx+eax*1]
   17963:	83 ec 04             	sub    esp,0x4
   17966:	6a 4e                	push   0x4e
   17968:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   1796e:	50                   	push   eax
   1796f:	52                   	push   edx
   17970:	e8 8f e8 00 00       	call   26204 <memcpy>
   17975:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:421
    memcpy(&newNode,node,sizeof(struct pci_device_t));
   17978:	83 ec 04             	sub    esp,0x4
   1797b:	6a 50                	push   0x50
   1797d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17980:	8d 45 98             	lea    eax,[ebp-0x68]
   17983:	50                   	push   eax
   17984:	e8 7b e8 00 00       	call   26204 <memcpy>
   17989:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:422
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tbridge entry created\n");
   1798c:	83 ec 08             	sub    esp,0x8
   1798f:	68 8c 2b 08 00       	push   0x82b8c
   17994:	68 00 01 00 00       	push   0x100
   17999:	e8 25 ff 00 00       	call   278c3 <printd>
   1799e:	83 c4 10             	add    esp,0x10
   179a1:	eb 01                	jmp    179a4 <addBridge+0x16e>
/home/yogi/src/os/chrisOS/src/block/pci.c:416
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
    if (bridge.vendor==0xFFFF)
        return;
   179a3:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:438
//       checkBus(&newNode, bridge.secondaryBusNum);
//#ifndef DEBUG_NONE
//       printd(DEBUG_PCI_DISCOVERY,"Done checking bus %02X\n",bridge.secondaryBusNum);
//#endif
    }
}
   179a4:	8d 65 f4             	lea    esp,[ebp-0xc]
   179a7:	5b                   	pop    ebx
   179a8:	5e                   	pop    esi
   179a9:	5f                   	pop    edi
   179aa:	5d                   	pop    ebp
   179ab:	c3                   	ret    

000179ac <checkFunctions>:
checkFunctions():
/home/yogi/src/os/chrisOS/src/block/pci.c:440

void checkFunctions(uint8_t bus, uint8_t device) {
   179ac:	55                   	push   ebp
   179ad:	89 e5                	mov    ebp,esp
   179af:	83 ec 78             	sub    esp,0x78
   179b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   179b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   179b8:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   179bb:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/src/os/chrisOS/src/block/pci.c:443
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   179be:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   179c5:	eb 4e                	jmp    17a15 <checkFunctions+0x69>
/home/yogi/src/os/chrisOS/src/block/pci.c:445
    {
        getDeviceHeader(&funcDevice, bus, device, function);
   179c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   179ca:	0f b6 c8             	movzx  ecx,al
   179cd:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   179d1:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   179d5:	51                   	push   ecx
   179d6:	52                   	push   edx
   179d7:	50                   	push   eax
   179d8:	8d 45 a4             	lea    eax,[ebp-0x5c]
   179db:	50                   	push   eax
   179dc:	e8 03 f4 ff ff       	call   16de4 <getDeviceHeader>
   179e1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:446
        if (funcDevice.vendor!=0xFFFF)
   179e4:	0f b7 45 aa          	movzx  eax,WORD PTR [ebp-0x56]
   179e8:	66 83 f8 ff          	cmp    ax,0xffff
   179ec:	74 23                	je     17a11 <checkFunctions+0x65>
/home/yogi/src/os/chrisOS/src/block/pci.c:448
        {
            funcDevice.busNo=bus;
   179ee:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   179f2:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/src/os/chrisOS/src/block/pci.c:449
            funcDevice.deviceNo=device;
   179f5:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   179f9:	88 45 a5             	mov    BYTE PTR [ebp-0x5b],al
/home/yogi/src/os/chrisOS/src/block/pci.c:450
            funcDevice.funcNo=function;
   179fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   179ff:	88 45 a6             	mov    BYTE PTR [ebp-0x5a],al
/home/yogi/src/os/chrisOS/src/block/pci.c:451
            addFunction(&funcDevice);
   17a02:	83 ec 0c             	sub    esp,0xc
   17a05:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17a08:	50                   	push   eax
   17a09:	e8 97 fd ff ff       	call   177a5 <addFunction>
   17a0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:443 (discriminator 2)
}

void checkFunctions(uint8_t bus, uint8_t device) {
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   17a11:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:443 (discriminator 1)
   17a15:	83 7d f4 07          	cmp    DWORD PTR [ebp-0xc],0x7
   17a19:	7e ac                	jle    179c7 <checkFunctions+0x1b>
/home/yogi/src/os/chrisOS/src/block/pci.c:455
            funcDevice.funcNo=function;
            addFunction(&funcDevice);
        }
    }

 }
   17a1b:	90                   	nop
   17a1c:	c9                   	leave  
   17a1d:	c3                   	ret    

00017a1e <addDevice>:
addDevice():
/home/yogi/src/os/chrisOS/src/block/pci.c:458

void addDevice(struct pci_device_t* node)
{
   17a1e:	55                   	push   ebp
   17a1f:	89 e5                	mov    ebp,esp
   17a21:	57                   	push   edi
   17a22:	56                   	push   esi
   17a23:	53                   	push   ebx
   17a24:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/block/pci.c:460
#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\tFound device #%u on %02X:%02X:0, Ven# %04X Dev# %04X Cls# %02X MF=%u\n",kPCIDeviceCount, node->busNo, node->deviceNo, node->vendor, node->device, node->class, node->multiFunction);
   17a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17a2a:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   17a2e:	0f b6 c0             	movzx  eax,al
   17a31:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   17a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17a37:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
   17a3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17a3d:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   17a41:	0f b7 f0             	movzx  esi,ax
   17a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17a47:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   17a4b:	0f b7 d8             	movzx  ebx,ax
   17a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17a51:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   17a55:	0f b6 c8             	movzx  ecx,al
   17a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17a5b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   17a5e:	0f b6 d0             	movzx  edx,al
   17a61:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   17a68:	0f b6 c0             	movzx  eax,al
   17a6b:	83 ec 0c             	sub    esp,0xc
   17a6e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   17a71:	57                   	push   edi
   17a72:	56                   	push   esi
   17a73:	53                   	push   ebx
   17a74:	51                   	push   ecx
   17a75:	52                   	push   edx
   17a76:	50                   	push   eax
   17a77:	68 a8 2b 08 00       	push   0x82ba8
   17a7c:	68 00 01 00 00       	push   0x100
   17a81:	e8 3d fe 00 00       	call   278c3 <printd>
   17a86:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:462
#endif
    memcpy(&kPCIDeviceHeaders[kPCIDeviceCount++],node,sizeof(struct pci_device_t));
   17a89:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   17a8f:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   17a96:	8d 50 01             	lea    edx,[eax+0x1]
   17a99:	88 15 ec 97 12 00    	mov    BYTE PTR ds:0x1297ec,dl
   17a9f:	0f b6 d0             	movzx  edx,al
   17aa2:	89 d0                	mov    eax,edx
   17aa4:	c1 e0 02             	shl    eax,0x2
   17aa7:	01 d0                	add    eax,edx
   17aa9:	c1 e0 04             	shl    eax,0x4
   17aac:	01 c8                	add    eax,ecx
   17aae:	83 ec 04             	sub    esp,0x4
   17ab1:	6a 50                	push   0x50
   17ab3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17ab6:	50                   	push   eax
   17ab7:	e8 48 e7 00 00       	call   26204 <memcpy>
   17abc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:463
    printd(DEBUG_PCI_DISCOVERY,"\tdevice entry created\n");
   17abf:	83 ec 08             	sub    esp,0x8
   17ac2:	68 ef 2b 08 00       	push   0x82bef
   17ac7:	68 00 01 00 00       	push   0x100
   17acc:	e8 f2 fd 00 00       	call   278c3 <printd>
   17ad1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:464
}
   17ad4:	90                   	nop
   17ad5:	8d 65 f4             	lea    esp,[ebp-0xc]
   17ad8:	5b                   	pop    ebx
   17ad9:	5e                   	pop    esi
   17ada:	5f                   	pop    edi
   17adb:	5d                   	pop    ebp
   17adc:	c3                   	ret    

00017add <checkDevice>:
checkDevice():
/home/yogi/src/os/chrisOS/src/block/pci.c:467

bool checkDevice(struct pci_device_t* node, uint8_t bus, uint8_t device)
{
   17add:	55                   	push   ebp
   17ade:	89 e5                	mov    ebp,esp
   17ae0:	83 ec 78             	sub    esp,0x78
   17ae3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   17ae6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   17ae9:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   17aec:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/src/os/chrisOS/src/block/pci.c:468
    int func=0;
   17aef:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:471
    struct pci_device_t newNode;

    memcpy(&newNode,node,sizeof(struct pci_device_t));
   17af6:	83 ec 04             	sub    esp,0x4
   17af9:	6a 50                	push   0x50
   17afb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17afe:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17b01:	50                   	push   eax
   17b02:	e8 fd e6 00 00       	call   26204 <memcpy>
   17b07:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:472
    if (getDeviceHeader(&newNode, bus, device, 0))
   17b0a:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17b0e:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17b12:	6a 00                	push   0x0
   17b14:	52                   	push   edx
   17b15:	50                   	push   eax
   17b16:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17b19:	50                   	push   eax
   17b1a:	e8 c5 f2 ff ff       	call   16de4 <getDeviceHeader>
   17b1f:	83 c4 10             	add    esp,0x10
   17b22:	84 c0                	test   al,al
   17b24:	74 6c                	je     17b92 <checkDevice+0xb5>
/home/yogi/src/os/chrisOS/src/block/pci.c:474
    {
        if (newNode.class!=6)
   17b26:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   17b29:	83 f8 06             	cmp    eax,0x6
   17b2c:	74 11                	je     17b3f <checkDevice+0x62>
/home/yogi/src/os/chrisOS/src/block/pci.c:476
        {
            addDevice(&newNode);
   17b2e:	83 ec 0c             	sub    esp,0xc
   17b31:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17b34:	50                   	push   eax
   17b35:	e8 e4 fe ff ff       	call   17a1e <addDevice>
   17b3a:	83 c4 10             	add    esp,0x10
   17b3d:	eb 1d                	jmp    17b5c <checkDevice+0x7f>
/home/yogi/src/os/chrisOS/src/block/pci.c:480
        }
        else
        {
            addBridge(&newNode, bus, device,func);
   17b3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17b42:	0f b6 c8             	movzx  ecx,al
   17b45:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17b49:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17b4d:	51                   	push   ecx
   17b4e:	52                   	push   edx
   17b4f:	50                   	push   eax
   17b50:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17b53:	50                   	push   eax
   17b54:	e8 dd fc ff ff       	call   17836 <addBridge>
   17b59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:483
        }
#ifndef DEBUG_NONE
        printd(DEBUG_PCI_DISCOVERY,"\tChecking functions\n",device);
   17b5c:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   17b60:	83 ec 04             	sub    esp,0x4
   17b63:	50                   	push   eax
   17b64:	68 06 2c 08 00       	push   0x82c06
   17b69:	68 00 01 00 00       	push   0x100
   17b6e:	e8 50 fd 00 00       	call   278c3 <printd>
   17b73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:485
#endif
        checkFunctions(bus, device);
   17b76:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17b7a:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17b7e:	83 ec 08             	sub    esp,0x8
   17b81:	52                   	push   edx
   17b82:	50                   	push   eax
   17b83:	e8 24 fe ff ff       	call   179ac <checkFunctions>
   17b88:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:486
        return true;
   17b8b:	b8 01 00 00 00       	mov    eax,0x1
   17b90:	eb 05                	jmp    17b97 <checkDevice+0xba>
/home/yogi/src/os/chrisOS/src/block/pci.c:488
    }
    return false;
   17b92:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:489 (discriminator 1)
}
   17b97:	c9                   	leave  
   17b98:	c3                   	ret    

00017b99 <checkBus>:
checkBus():
/home/yogi/src/os/chrisOS/src/block/pci.c:491

void checkBus(struct pci_device_t* node, uint8_t bus) {
   17b99:	55                   	push   ebp
   17b9a:	89 e5                	mov    ebp,esp
   17b9c:	83 ec 28             	sub    esp,0x28
   17b9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17ba2:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/block/pci.c:495
 uint8_t device;

#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\n");
   17ba5:	83 ec 08             	sub    esp,0x8
   17ba8:	68 1b 2c 08 00       	push   0x82c1b
   17bad:	68 00 01 00 00       	push   0x100
   17bb2:	e8 0c fd 00 00       	call   278c3 <printd>
   17bb7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:496
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
   17bba:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   17bbe:	83 ec 04             	sub    esp,0x4
   17bc1:	50                   	push   eax
   17bc2:	68 1d 2c 08 00       	push   0x82c1d
   17bc7:	68 00 01 00 00       	push   0x100
   17bcc:	e8 f2 fc 00 00       	call   278c3 <printd>
   17bd1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:500
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   17bd4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   17bd8:	eb 22                	jmp    17bfc <checkBus+0x63>
/home/yogi/src/os/chrisOS/src/block/pci.c:508 (discriminator 2)
        if ((kDebugLevel & DEBUG_PCI_DISCOVERY) == DEBUG_PCI_DISCOVERY)
        {
            //waitForKeyboardKey();
        }
#endif
        checkDevice(node, bus, device);
   17bda:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   17bde:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   17be2:	83 ec 04             	sub    esp,0x4
   17be5:	52                   	push   edx
   17be6:	50                   	push   eax
   17be7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17bea:	e8 ee fe ff ff       	call   17add <checkDevice>
   17bef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:500 (discriminator 2)
    printd(DEBUG_PCI_DISCOVERY,"\n");
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   17bf2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   17bf6:	83 c0 01             	add    eax,0x1
   17bf9:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/block/pci.c:500 (discriminator 1)
   17bfc:	80 7d f7 1f          	cmp    BYTE PTR [ebp-0x9],0x1f
   17c00:	76 d8                	jbe    17bda <checkBus+0x41>
/home/yogi/src/os/chrisOS/src/block/pci.c:511
        }
#endif
        checkDevice(node, bus, device);
     }
 }
}
   17c02:	90                   	nop
   17c03:	c9                   	leave  
   17c04:	c3                   	ret    

00017c05 <pciInitialize>:
pciInitialize():
/home/yogi/src/os/chrisOS/src/block/pci.c:514
    
 void pciInitialize()
 {
   17c05:	55                   	push   ebp
   17c06:	89 e5                	mov    ebp,esp
   17c08:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/src/os/chrisOS/src/block/pci.c:517
    //Iterate Busses/Slots
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;
   17c0e:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
   17c14:	66 c7 45 f4 00 00    	mov    WORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:519

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
   17c1a:	c6 05 ef 97 12 00 00 	mov    BYTE PTR ds:0x1297ef,0x0
   17c21:	0f b6 05 ef 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ef
   17c28:	a2 ee 97 12 00       	mov    ds:0x1297ee,al
   17c2d:	0f b6 05 ee 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ee
   17c34:	a2 ed 97 12 00       	mov    ds:0x1297ed,al
   17c39:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
   17c40:	a2 ec 97 12 00       	mov    ds:0x1297ec,al
/home/yogi/src/os/chrisOS/src/block/pci.c:520
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
   17c45:	83 ec 08             	sub    esp,0x8
   17c48:	68 30 2c 08 00       	push   0x82c30
   17c4d:	68 00 01 00 00       	push   0x100
   17c52:	e8 6c fc 00 00       	call   278c3 <printd>
   17c57:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:521
     for (currBus=0;currBus<50;currBus++)
   17c5a:	c7 05 98 a4 09 00 00 	mov    DWORD PTR ds:0x9a498,0x0
   17c61:	00 00 00 
   17c64:	e9 cc 01 00 00       	jmp    17e35 <pciInitialize+0x230>
/home/yogi/src/os/chrisOS/src/block/pci.c:523
     {
         for (currSlot=0;currSlot<32;currSlot++)
   17c69:	c7 05 9c a4 09 00 00 	mov    DWORD PTR ds:0x9a49c,0x0
   17c70:	00 00 00 
   17c73:	e9 a2 01 00 00       	jmp    17e1a <pciInitialize+0x215>
/home/yogi/src/os/chrisOS/src/block/pci.c:526
         {
            //if device found print it
            currFunc=0;
   17c78:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   17c7f:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/pci.c:527
            prevDev=0;
   17c82:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:528
            printd(DEBUG_PCI_DISCOVERY,"Current bus=%u, slot=%u\n",currBus,currSlot);
   17c88:	8b 15 9c a4 09 00    	mov    edx,DWORD PTR ds:0x9a49c
   17c8e:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17c93:	52                   	push   edx
   17c94:	50                   	push   eax
   17c95:	68 4e 2c 08 00       	push   0x82c4e
   17c9a:	68 00 01 00 00       	push   0x100
   17c9f:	e8 1f fc 00 00       	call   278c3 <printd>
   17ca4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:529
            if (getDeviceHeader(&device, currBus, currSlot, currFunc)==true)
   17ca7:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17cac:	0f b6 c8             	movzx  ecx,al
   17caf:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17cb4:	0f b6 d0             	movzx  edx,al
   17cb7:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17cbc:	0f b6 c0             	movzx  eax,al
   17cbf:	51                   	push   ecx
   17cc0:	52                   	push   edx
   17cc1:	50                   	push   eax
   17cc2:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17cc5:	50                   	push   eax
   17cc6:	e8 19 f1 ff ff       	call   16de4 <getDeviceHeader>
   17ccb:	83 c4 10             	add    esp,0x10
   17cce:	84 c0                	test   al,al
   17cd0:	0f 84 37 01 00 00    	je     17e0d <pciInitialize+0x208>
/home/yogi/src/os/chrisOS/src/block/pci.c:531
            {
                if (prevBus!=currBus)
   17cd6:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   17cda:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17cdf:	39 c2                	cmp    edx,eax
   17ce1:	74 18                	je     17cfb <pciInitialize+0xf6>
/home/yogi/src/os/chrisOS/src/block/pci.c:533
                {
                    prevBus=currBus;
   17ce3:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17ce8:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:534
                    kPCIBusCount++;
   17cec:	0f b6 05 ef 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ef
   17cf3:	83 c0 01             	add    eax,0x1
   17cf6:	a2 ef 97 12 00       	mov    ds:0x1297ef,al
/home/yogi/src/os/chrisOS/src/block/pci.c:537
                }
                //printPCIHeader(&device);
                if (device.class==0x06)
   17cfb:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   17cfe:	83 f8 06             	cmp    eax,0x6
   17d01:	75 29                	jne    17d2c <pciInitialize+0x127>
/home/yogi/src/os/chrisOS/src/block/pci.c:539
                {
                    addBridge(&device, currBus, currSlot, currFunc);
   17d03:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17d08:	0f b6 c8             	movzx  ecx,al
   17d0b:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17d10:	0f b6 d0             	movzx  edx,al
   17d13:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17d18:	0f b6 c0             	movzx  eax,al
   17d1b:	51                   	push   ecx
   17d1c:	52                   	push   edx
   17d1d:	50                   	push   eax
   17d1e:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17d21:	50                   	push   eax
   17d22:	e8 0f fb ff ff       	call   17836 <addBridge>
   17d27:	83 c4 10             	add    esp,0x10
   17d2a:	eb 0f                	jmp    17d3b <pciInitialize+0x136>
/home/yogi/src/os/chrisOS/src/block/pci.c:542
                }
                else
                    addDevice(&device);
   17d2c:	83 ec 0c             	sub    esp,0xc
   17d2f:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17d32:	50                   	push   eax
   17d33:	e8 e6 fc ff ff       	call   17a1e <addDevice>
   17d38:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:544
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   17d3b:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   17d42:	00 00 00 
   17d45:	e9 b5 00 00 00       	jmp    17dff <pciInitialize+0x1fa>
/home/yogi/src/os/chrisOS/src/block/pci.c:547
                {
                    //printd(DEBUG_PCI_DISCOVERY,"Current function=%u\n",currFunc);
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
   17d4a:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17d4f:	0f b6 c8             	movzx  ecx,al
   17d52:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17d57:	0f b6 d0             	movzx  edx,al
   17d5a:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17d5f:	0f b6 c0             	movzx  eax,al
   17d62:	51                   	push   ecx
   17d63:	52                   	push   edx
   17d64:	50                   	push   eax
   17d65:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17d6b:	50                   	push   eax
   17d6c:	e8 73 f0 ff ff       	call   16de4 <getDeviceHeader>
   17d71:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:548
                    if (funcDevice.vendor!=0xFFFF)
   17d74:	0f b7 85 5a ff ff ff 	movzx  eax,WORD PTR [ebp-0xa6]
   17d7b:	66 83 f8 ff          	cmp    ax,0xffff
   17d7f:	74 71                	je     17df2 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:549
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
   17d81:	0f b7 95 5c ff ff ff 	movzx  edx,WORD PTR [ebp-0xa4]
   17d88:	0f b7 45 ac          	movzx  eax,WORD PTR [ebp-0x54]
   17d8c:	66 39 c2             	cmp    dx,ax
   17d8f:	74 61                	je     17df2 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:549 (discriminator 1)
   17d91:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   17d98:	66 3b 45 f6          	cmp    ax,WORD PTR [ebp-0xa]
   17d9c:	74 54                	je     17df2 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:552
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
   17d9e:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   17da5:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:553
                            if (funcDevice.class == 0x06)
   17da9:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
   17daf:	83 f8 06             	cmp    eax,0x6
   17db2:	75 2c                	jne    17de0 <pciInitialize+0x1db>
/home/yogi/src/os/chrisOS/src/block/pci.c:554
                                addBridge(&funcDevice, currBus, currSlot, currFunc);
   17db4:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17db9:	0f b6 c8             	movzx  ecx,al
   17dbc:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17dc1:	0f b6 d0             	movzx  edx,al
   17dc4:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17dc9:	0f b6 c0             	movzx  eax,al
   17dcc:	51                   	push   ecx
   17dcd:	52                   	push   edx
   17dce:	50                   	push   eax
   17dcf:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17dd5:	50                   	push   eax
   17dd6:	e8 5b fa ff ff       	call   17836 <addBridge>
   17ddb:	83 c4 10             	add    esp,0x10
   17dde:	eb 12                	jmp    17df2 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:556
                            else
                                addFunction(&funcDevice);
   17de0:	83 ec 0c             	sub    esp,0xc
   17de3:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17de9:	50                   	push   eax
   17dea:	e8 b6 f9 ff ff       	call   177a5 <addFunction>
   17def:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:544 (discriminator 2)
                    addBridge(&device, currBus, currSlot, currFunc);
                }
                else
                    addDevice(&device);
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   17df2:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17df7:	83 c0 01             	add    eax,0x1
   17dfa:	a3 a0 a4 09 00       	mov    ds:0x9a4a0,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:544 (discriminator 1)
   17dff:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17e04:	83 f8 07             	cmp    eax,0x7
   17e07:	0f 8e 3d ff ff ff    	jle    17d4a <pciInitialize+0x145>
/home/yogi/src/os/chrisOS/src/block/pci.c:523 (discriminator 2)

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
     {
         for (currSlot=0;currSlot<32;currSlot++)
   17e0d:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17e12:	83 c0 01             	add    eax,0x1
   17e15:	a3 9c a4 09 00       	mov    ds:0x9a49c,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:523 (discriminator 1)
   17e1a:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17e1f:	83 f8 1f             	cmp    eax,0x1f
   17e22:	0f 8e 50 fe ff ff    	jle    17c78 <pciInitialize+0x73>
/home/yogi/src/os/chrisOS/src/block/pci.c:521 (discriminator 2)
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
   17e28:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17e2d:	83 c0 01             	add    eax,0x1
   17e30:	a3 98 a4 09 00       	mov    ds:0x9a498,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:521 (discriminator 1)
   17e35:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17e3a:	83 f8 31             	cmp    eax,0x31
   17e3d:	0f 8e 26 fe ff ff    	jle    17c69 <pciInitialize+0x64>
/home/yogi/src/os/chrisOS/src/block/pci.c:563
                    }
            }
 
        }
     }
   17e43:	90                   	nop
   17e44:	c9                   	leave  
   17e45:	c3                   	ret    
   17e46:	66 90                	xchg   ax,ax

00017e48 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   17e48:	55                   	push   ebp
   17e49:	89 e5                	mov    ebp,esp
   17e4b:	83 ec 08             	sub    esp,0x8
   17e4e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17e51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17e54:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   17e58:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   17e5b:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   17e5f:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   17e63:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   17e64:	90                   	nop
   17e65:	c9                   	leave  
   17e66:	c3                   	ret    

00017e67 <update_cursor>:
update_cursor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:25
KERNEL_DATA_SECTION uint8_t savedPosY[10];
KERNEL_DATA_SECTION int8_t savedPosPointer=0;
KERNEL_DATA_SECTION uint8_t kTerminalHeight;

void update_cursor()
 {
   17e67:	55                   	push   ebp
   17e68:	89 e5                	mov    ebp,esp
   17e6a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:26
    unsigned short position=(terminal_row*VGA_WIDTH) + terminal_column;
   17e6d:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17e72:	89 c2                	mov    edx,eax
   17e74:	b8 50 00 00 00       	mov    eax,0x50
   17e79:	0f af c2             	imul   eax,edx
   17e7c:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17e82:	01 d0                	add    eax,edx
   17e84:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:29
 
    // cursor LOW port to vga INDEX register
    outb(0x3D4, 0x0F);
   17e88:	6a 0f                	push   0xf
   17e8a:	68 d4 03 00 00       	push   0x3d4
   17e8f:	e8 b4 ff ff ff       	call   17e48 <outb>
   17e94:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:30
    outb(0x3D5, (unsigned char)(position&0xFF));
   17e97:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17e9b:	0f b6 c0             	movzx  eax,al
   17e9e:	50                   	push   eax
   17e9f:	68 d5 03 00 00       	push   0x3d5
   17ea4:	e8 9f ff ff ff       	call   17e48 <outb>
   17ea9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:32
    // cursor HIGH port to vga INDEX register
    outb(0x3D4, 0x0E);
   17eac:	6a 0e                	push   0xe
   17eae:	68 d4 03 00 00       	push   0x3d4
   17eb3:	e8 90 ff ff ff       	call   17e48 <outb>
   17eb8:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:33
    outb(0x3D5, (unsigned char )((position>>8)&0xFF));
   17ebb:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17ebf:	66 c1 e8 08          	shr    ax,0x8
   17ec3:	0f b6 c0             	movzx  eax,al
   17ec6:	50                   	push   eax
   17ec7:	68 d5 03 00 00       	push   0x3d5
   17ecc:	e8 77 ff ff ff       	call   17e48 <outb>
   17ed1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:35
    //Move the cursor in the bios data area
 }
   17ed4:	90                   	nop
   17ed5:	c9                   	leave  
   17ed6:	c3                   	ret    

00017ed7 <make_color>:
make_color():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:37

uint8_t make_color(enum vga_color fg, enum vga_color bg) {
   17ed7:	55                   	push   ebp
   17ed8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:38
        return fg | bg << 4;
   17eda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17edd:	c1 e0 04             	shl    eax,0x4
   17ee0:	89 c2                	mov    edx,eax
   17ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17ee5:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:39
}
   17ee7:	5d                   	pop    ebp
   17ee8:	c3                   	ret    

00017ee9 <make_vgaentry>:
make_vgaentry():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:41

uint16_t make_vgaentry(char c, uint8_t color) {
   17ee9:	55                   	push   ebp
   17eea:	89 e5                	mov    ebp,esp
   17eec:	83 ec 18             	sub    esp,0x18
   17eef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17ef2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17ef5:	88 55 ec             	mov    BYTE PTR [ebp-0x14],dl
   17ef8:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:42
        uint16_t c16 = c;
   17efb:	66 0f be 45 ec       	movsx  ax,BYTE PTR [ebp-0x14]
   17f00:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:43
        uint16_t color16 = color;
   17f04:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   17f08:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:44
        return c16 | color16 << 8;
   17f0c:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   17f10:	c1 e0 08             	shl    eax,0x8
   17f13:	89 c2                	mov    edx,eax
   17f15:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17f19:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:45
}
   17f1b:	c9                   	leave  
   17f1c:	c3                   	ret    

00017f1d <terminal_setcolor>:
terminal_setcolor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:48


void terminal_setcolor(uint8_t color) {
   17f1d:	55                   	push   ebp
   17f1e:	89 e5                	mov    ebp,esp
   17f20:	83 ec 04             	sub    esp,0x4
   17f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17f26:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:49
        terminal_color = color;
   17f29:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17f2d:	a2 08 00 12 00       	mov    ds:0x120008,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:50
}
   17f32:	90                   	nop
   17f33:	c9                   	leave  
   17f34:	c3                   	ret    

00017f35 <terminal_putentryat>:
terminal_putentryat():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:52

void terminal_putentryat(char c, uint8_t color, size_t x, size_t y) {
   17f35:	55                   	push   ebp
   17f36:	89 e5                	mov    ebp,esp
   17f38:	53                   	push   ebx
   17f39:	83 ec 18             	sub    esp,0x18
   17f3c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17f3f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17f42:	88 55 e8             	mov    BYTE PTR [ebp-0x18],dl
   17f45:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:53
    const size_t index = y * VGA_WIDTH + x;
   17f48:	b8 50 00 00 00       	mov    eax,0x50
   17f4d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
   17f51:	89 c2                	mov    edx,eax
   17f53:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   17f56:	01 d0                	add    eax,edx
   17f58:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:54
        terminal_buffer[index] = make_vgaentry(c, color);
   17f5b:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17f60:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   17f63:	01 d2                	add    edx,edx
   17f65:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17f68:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   17f6c:	0f be 45 e8          	movsx  eax,BYTE PTR [ebp-0x18]
   17f70:	52                   	push   edx
   17f71:	50                   	push   eax
   17f72:	e8 72 ff ff ff       	call   17ee9 <make_vgaentry>
   17f77:	83 c4 08             	add    esp,0x8
   17f7a:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:55
}
   17f7d:	90                   	nop
   17f7e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17f81:	c9                   	leave  
   17f82:	c3                   	ret    

00017f83 <cursorSavePosition>:
cursorSavePosition():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:58

void cursorSavePosition()
{
   17f83:	55                   	push   ebp
   17f84:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:59
    if (savedPosPointer < 10)
   17f86:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17f8d:	3c 09                	cmp    al,0x9
   17f8f:	7f 3b                	jg     17fcc <cursorSavePosition+0x49>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:61
    {
        savedPosX[++savedPosPointer] = terminal_column;
   17f91:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17f98:	83 c0 01             	add    eax,0x1
   17f9b:	a2 26 00 12 00       	mov    ds:0x120026,al
   17fa0:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17fa7:	0f be c0             	movsx  eax,al
   17faa:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17fb0:	88 90 10 00 12 00    	mov    BYTE PTR [eax+0x120010],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:62
        savedPosY[savedPosPointer] = terminal_row;
   17fb6:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17fbd:	0f be c0             	movsx  eax,al
   17fc0:	8b 15 00 00 12 00    	mov    edx,DWORD PTR ds:0x120000
   17fc6:	88 90 1c 00 12 00    	mov    BYTE PTR [eax+0x12001c],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:64
    }
}
   17fcc:	90                   	nop
   17fcd:	5d                   	pop    ebp
   17fce:	c3                   	ret    

00017fcf <cursorRestorePosition>:
cursorRestorePosition():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:67

void cursorRestorePosition()
{
   17fcf:	55                   	push   ebp
   17fd0:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:68
    if (savedPosPointer > 0)
   17fd2:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17fd9:	84 c0                	test   al,al
   17fdb:	7e 42                	jle    1801f <cursorRestorePosition+0x50>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:70
    {
        terminal_column = savedPosX[savedPosPointer];
   17fdd:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17fe4:	0f be c0             	movsx  eax,al
   17fe7:	0f b6 80 10 00 12 00 	movzx  eax,BYTE PTR [eax+0x120010]
   17fee:	0f b6 c0             	movzx  eax,al
   17ff1:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:71
        terminal_row = savedPosY[savedPosPointer--];
   17ff6:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17ffd:	89 c2                	mov    edx,eax
   17fff:	83 ea 01             	sub    edx,0x1
   18002:	88 15 26 00 12 00    	mov    BYTE PTR ds:0x120026,dl
   18008:	0f be c0             	movsx  eax,al
   1800b:	0f b6 80 1c 00 12 00 	movzx  eax,BYTE PTR [eax+0x12001c]
   18012:	0f b6 c0             	movzx  eax,al
   18015:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:72
        update_cursor();
   1801a:	e8 48 fe ff ff       	call   17e67 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:74
    }
}
   1801f:	90                   	nop
   18020:	5d                   	pop    ebp
   18021:	c3                   	ret    

00018022 <terminal_clear>:
terminal_clear():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:77

void terminal_clear()
{
   18022:	55                   	push   ebp
   18023:	89 e5                	mov    ebp,esp
   18025:	53                   	push   ebx
   18026:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   18029:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   18030:	eb 53                	jmp    18085 <terminal_clear+0x63>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   18032:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18039:	eb 3c                	jmp    18077 <terminal_clear+0x55>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:81 (discriminator 3)
                        const size_t index = y * VGA_WIDTH + x;
   1803b:	b8 50 00 00 00       	mov    eax,0x50
   18040:	0f af 45 f8          	imul   eax,DWORD PTR [ebp-0x8]
   18044:	89 c2                	mov    edx,eax
   18046:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18049:	01 d0                	add    eax,edx
   1804b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:82 (discriminator 3)
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   1804e:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   18053:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18056:	01 d2                	add    edx,edx
   18058:	8d 1c 10             	lea    ebx,[eax+edx*1]
   1805b:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   18062:	0f b6 c0             	movzx  eax,al
   18065:	50                   	push   eax
   18066:	6a 20                	push   0x20
   18068:	e8 7c fe ff ff       	call   17ee9 <make_vgaentry>
   1806d:	83 c4 08             	add    esp,0x8
   18070:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80 (discriminator 3)

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   18073:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80 (discriminator 1)
   18077:	b8 50 00 00 00       	mov    eax,0x50
   1807c:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   1807f:	72 ba                	jb     1803b <terminal_clear+0x19>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79 (discriminator 2)
}

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   18081:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79 (discriminator 1)
   18085:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   1808c:	0f b6 c0             	movzx  eax,al
   1808f:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   18092:	77 9e                	ja     18032 <terminal_clear+0x10>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:85
                for (size_t x = 0; x < VGA_WIDTH; x++) {
                        const size_t index = y * VGA_WIDTH + x;
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
                }
        }
    terminal_column=0;
   18094:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   1809b:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:86
    terminal_row=0;
   1809e:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
   180a5:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:87
    update_cursor();
   180a8:	e8 ba fd ff ff       	call   17e67 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:88
}
   180ad:	90                   	nop
   180ae:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   180b1:	c9                   	leave  
   180b2:	c3                   	ret    

000180b3 <terminal_clear_line>:
terminal_clear_line():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:91

void terminal_clear_line(unsigned lineNo)
{
   180b3:	55                   	push   ebp
   180b4:	89 e5                	mov    ebp,esp
   180b6:	53                   	push   ebx
   180b7:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:92
    if (lineNo>SYS_VGA_HEIGHT-1)
   180ba:	83 7d 08 31          	cmp    DWORD PTR [ebp+0x8],0x31
   180be:	77 51                	ja     18111 <terminal_clear_line+0x5e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   180c0:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   180c7:	eb 3c                	jmp    18105 <terminal_clear_line+0x52>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:96 (discriminator 3)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
   180c9:	b8 50 00 00 00       	mov    eax,0x50
   180ce:	0f af 45 08          	imul   eax,DWORD PTR [ebp+0x8]
   180d2:	89 c2                	mov    edx,eax
   180d4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   180d7:	01 d0                	add    eax,edx
   180d9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:97 (discriminator 3)
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   180dc:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   180e1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   180e4:	01 d2                	add    edx,edx
   180e6:	8d 1c 10             	lea    ebx,[eax+edx*1]
   180e9:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   180f0:	0f b6 c0             	movzx  eax,al
   180f3:	50                   	push   eax
   180f4:	6a 20                	push   0x20
   180f6:	e8 ee fd ff ff       	call   17ee9 <make_vgaentry>
   180fb:	83 c4 08             	add    esp,0x8
   180fe:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94 (discriminator 3)

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   18101:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94 (discriminator 1)
   18105:	b8 50 00 00 00       	mov    eax,0x50
   1810a:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   1810d:	72 ba                	jb     180c9 <terminal_clear_line+0x16>
   1810f:	eb 01                	jmp    18112 <terminal_clear_line+0x5f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:93
}

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
   18111:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:99
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
    }
}
   18112:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   18115:	c9                   	leave  
   18116:	c3                   	ret    

00018117 <terminal_copyline>:
terminal_copyline():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:102

void terminal_copyline(unsigned dstLine, unsigned srcLine)
{
   18117:	55                   	push   ebp
   18118:	89 e5                	mov    ebp,esp
   1811a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:103
    unsigned rowBytes = VGA_WIDTH*2;
   1811d:	b8 50 00 00 00       	mov    eax,0x50
   18122:	01 c0                	add    eax,eax
   18124:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:104
    uintptr_t dest=(uintptr_t)TEXTMODE_MEMORY_START+(dstLine*rowBytes);
   18127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1812a:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   1812e:	05 00 80 0b 00       	add    eax,0xb8000
   18133:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:105
    uintptr_t src=(uintptr_t)TEXTMODE_MEMORY_START+(srcLine*rowBytes);
   18136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18139:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   1813d:	05 00 80 0b 00       	add    eax,0xb8000
   18142:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:107
    
    memcpy((void*)dest,(void*)src,rowBytes);
   18145:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   18148:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1814b:	83 ec 04             	sub    esp,0x4
   1814e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18151:	52                   	push   edx
   18152:	50                   	push   eax
   18153:	e8 ac e0 00 00       	call   26204 <memcpy>
   18158:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:108
}
   1815b:	90                   	nop
   1815c:	c9                   	leave  
   1815d:	c3                   	ret    

0001815e <terminal_putchar>:
terminal_putchar():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:110

void terminal_putchar(char c) {
   1815e:	55                   	push   ebp
   1815f:	89 e5                	mov    ebp,esp
   18161:	53                   	push   ebx
   18162:	83 ec 24             	sub    esp,0x24
   18165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18168:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:111
    if (c=='\n')
   1816b:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
   1816f:	75 1c                	jne    1818d <terminal_putchar+0x2f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:113
    {
            terminal_column = 0;
   18171:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   18178:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:114
            terminal_row += 1;
   1817b:	a1 00 00 12 00       	mov    eax,ds:0x120000
   18180:	83 c0 01             	add    eax,0x1
   18183:	a3 00 00 12 00       	mov    ds:0x120000,eax
   18188:	e9 1f 01 00 00       	jmp    182ac <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:116
    }
    else if (c=='\b')
   1818d:	80 7d e4 08          	cmp    BYTE PTR [ebp-0x1c],0x8
   18191:	75 58                	jne    181eb <terminal_putchar+0x8d>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:118
    {
        if (terminal_column > 1)
   18193:	a1 04 00 12 00       	mov    eax,ds:0x120004
   18198:	83 f8 01             	cmp    eax,0x1
   1819b:	76 0f                	jbe    181ac <terminal_putchar+0x4e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:119
            terminal_column--;
   1819d:	a1 04 00 12 00       	mov    eax,ds:0x120004
   181a2:	83 e8 01             	sub    eax,0x1
   181a5:	a3 04 00 12 00       	mov    ds:0x120004,eax
   181aa:	eb 17                	jmp    181c3 <terminal_putchar+0x65>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:122
        else
        {
            terminal_row--;
   181ac:	a1 00 00 12 00       	mov    eax,ds:0x120000
   181b1:	83 e8 01             	sub    eax,0x1
   181b4:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:123
            terminal_column=VGA_WIDTH;
   181b9:	b8 50 00 00 00       	mov    eax,0x50
   181be:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:125
        }
        terminal_putentryat(' ', terminal_color, terminal_column, terminal_row);
   181c3:	8b 0d 00 00 12 00    	mov    ecx,DWORD PTR ds:0x120000
   181c9:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   181cf:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   181d6:	0f b6 c0             	movzx  eax,al
   181d9:	51                   	push   ecx
   181da:	52                   	push   edx
   181db:	50                   	push   eax
   181dc:	6a 20                	push   0x20
   181de:	e8 52 fd ff ff       	call   17f35 <terminal_putentryat>
   181e3:	83 c4 10             	add    esp,0x10
   181e6:	e9 c1 00 00 00       	jmp    182ac <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:128
        
    }
    else if (c=='\t')
   181eb:	80 7d e4 09          	cmp    BYTE PTR [ebp-0x1c],0x9
   181ef:	75 59                	jne    1824a <terminal_putchar+0xec>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:130
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
   181f1:	8b 1d 04 00 12 00    	mov    ebx,DWORD PTR ds:0x120004
   181f7:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
   181fd:	ba cd cc cc cc       	mov    edx,0xcccccccd
   18202:	89 c8                	mov    eax,ecx
   18204:	f7 e2                	mul    edx
   18206:	c1 ea 02             	shr    edx,0x2
   18209:	89 d0                	mov    eax,edx
   1820b:	c1 e0 02             	shl    eax,0x2
   1820e:	01 d0                	add    eax,edx
   18210:	29 c1                	sub    ecx,eax
   18212:	89 ca                	mov    edx,ecx
   18214:	89 d8                	mov    eax,ebx
   18216:	29 d0                	sub    eax,edx
   18218:	83 c0 05             	add    eax,0x5
   1821b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:131
        if (goTo==terminal_column)
   1821e:	a1 04 00 12 00       	mov    eax,ds:0x120004
   18223:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   18226:	75 16                	jne    1823e <terminal_putchar+0xe0>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:132
            goTo=SCREEN_SPACES_PER_TAB;
   18228:	c7 45 f4 05 00 00 00 	mov    DWORD PTR [ebp-0xc],0x5
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:134
        
        while (terminal_column < goTo)
   1822f:	eb 0d                	jmp    1823e <terminal_putchar+0xe0>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:135
            terminal_putchar(' ');;
   18231:	83 ec 0c             	sub    esp,0xc
   18234:	6a 20                	push   0x20
   18236:	e8 23 ff ff ff       	call   1815e <terminal_putchar>
   1823b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:134
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
        if (goTo==terminal_column)
            goTo=SCREEN_SPACES_PER_TAB;
        
        while (terminal_column < goTo)
   1823e:	a1 04 00 12 00       	mov    eax,ds:0x120004
   18243:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   18246:	72 e9                	jb     18231 <terminal_putchar+0xd3>
   18248:	eb 62                	jmp    182ac <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:141
    
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
   1824a:	80 7d e4 0d          	cmp    BYTE PTR [ebp-0x1c],0xd
   1824e:	0f 84 b0 00 00 00    	je     18304 <terminal_putchar+0x1a6>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:146
        return;

        else
        {
                terminal_putentryat(c, terminal_color, terminal_column, terminal_row);
   18254:	8b 1d 00 00 12 00    	mov    ebx,DWORD PTR ds:0x120000
   1825a:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
   18260:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   18267:	0f b6 d0             	movzx  edx,al
   1826a:	0f be 45 e4          	movsx  eax,BYTE PTR [ebp-0x1c]
   1826e:	53                   	push   ebx
   1826f:	51                   	push   ecx
   18270:	52                   	push   edx
   18271:	50                   	push   eax
   18272:	e8 be fc ff ff       	call   17f35 <terminal_putentryat>
   18277:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:147
                if (++terminal_column == VGA_WIDTH) {
   1827a:	a1 04 00 12 00       	mov    eax,ds:0x120004
   1827f:	83 c0 01             	add    eax,0x1
   18282:	a3 04 00 12 00       	mov    ds:0x120004,eax
   18287:	a1 04 00 12 00       	mov    eax,ds:0x120004
   1828c:	ba 50 00 00 00       	mov    edx,0x50
   18291:	39 d0                	cmp    eax,edx
   18293:	75 17                	jne    182ac <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:148
                        terminal_column = 0;
   18295:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   1829c:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:149
                        terminal_row++;
   1829f:	a1 00 00 12 00       	mov    eax,ds:0x120000
   182a4:	83 c0 01             	add    eax,0x1
   182a7:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:152
                }
        }
    if (terminal_row == kTerminalHeight)
   182ac:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   182b3:	0f b6 d0             	movzx  edx,al
   182b6:	a1 00 00 12 00       	mov    eax,ds:0x120000
   182bb:	39 c2                	cmp    edx,eax
   182bd:	75 3e                	jne    182fd <terminal_putchar+0x19f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   182bf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   182c6:	eb 19                	jmp    182e1 <terminal_putchar+0x183>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:155 (discriminator 3)
            terminal_copyline(row, row+1);
   182c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   182cb:	83 c0 01             	add    eax,0x1
   182ce:	83 ec 08             	sub    esp,0x8
   182d1:	50                   	push   eax
   182d2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   182d5:	e8 3d fe ff ff       	call   18117 <terminal_copyline>
   182da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154 (discriminator 3)
                        terminal_row++;
                }
        }
    if (terminal_row == kTerminalHeight)
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   182dd:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154 (discriminator 1)
   182e1:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   182e8:	0f b6 c0             	movzx  eax,al
   182eb:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   182ee:	77 d8                	ja     182c8 <terminal_putchar+0x16a>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:157
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
   182f0:	a1 00 00 12 00       	mov    eax,ds:0x120000
   182f5:	83 e8 01             	sub    eax,0x1
   182f8:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:159
    }
    update_cursor();
   182fd:	e8 65 fb ff ff       	call   17e67 <update_cursor>
   18302:	eb 01                	jmp    18305 <terminal_putchar+0x1a7>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:142
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
        return;
   18304:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:160
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
    }
    update_cursor();
}
   18305:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   18308:	c9                   	leave  
   18309:	c3                   	ret    

0001830a <cursorUpdateBiosCursor>:
cursorUpdateBiosCursor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:163

void cursorUpdateBiosCursor()
{
   1830a:	55                   	push   ebp
   1830b:	89 e5                	mov    ebp,esp
   1830d:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:164
    uint8_t* bda=(uint8_t*)0x450;
   18310:	c7 45 fc 50 04 00 00 	mov    DWORD PTR [ebp-0x4],0x450
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:165
    *bda=(uint8_t)(terminal_column & 0xFF);
   18317:	a1 04 00 12 00       	mov    eax,ds:0x120004
   1831c:	89 c2                	mov    edx,eax
   1831e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   18321:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:166
    bda++;
   18323:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:167
    *bda=(uint8_t)((terminal_row+3) & 0xFF);
   18327:	a1 00 00 12 00       	mov    eax,ds:0x120000
   1832c:	8d 50 03             	lea    edx,[eax+0x3]
   1832f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   18332:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:168
}
   18334:	90                   	nop
   18335:	c9                   	leave  
   18336:	c3                   	ret    

00018337 <cursorMoveTo>:
cursorMoveTo():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:171

void cursorMoveTo(uint8_t x, uint8_t y)
{
   18337:	55                   	push   ebp
   18338:	89 e5                	mov    ebp,esp
   1833a:	83 ec 08             	sub    esp,0x8
   1833d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18340:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18343:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   18346:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:172
    terminal_row = y;
   18349:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   1834d:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:173
    terminal_column = x;
   18352:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18356:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:174
    update_cursor();
   1835b:	e8 07 fb ff ff       	call   17e67 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:175
}
   18360:	90                   	nop
   18361:	c9                   	leave  
   18362:	c3                   	ret    

00018363 <cursorMoveToX>:
cursorMoveToX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:178

void cursorMoveToX(uint8_t x)
{
   18363:	55                   	push   ebp
   18364:	89 e5                	mov    ebp,esp
   18366:	83 ec 04             	sub    esp,0x4
   18369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1836c:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:179
    terminal_column = x;
   1836f:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18373:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:180
}
   18378:	90                   	nop
   18379:	c9                   	leave  
   1837a:	c3                   	ret    

0001837b <cursorMoveToY>:
cursorMoveToY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:183

void cursorMoveToY(uint8_t y)
{
   1837b:	55                   	push   ebp
   1837c:	89 e5                	mov    ebp,esp
   1837e:	83 ec 04             	sub    esp,0x4
   18381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18384:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:184
    terminal_row = y;
   18387:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   1838b:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:185
}
   18390:	90                   	nop
   18391:	c9                   	leave  
   18392:	c3                   	ret    

00018393 <cursorGetPosX>:
cursorGetPosX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:188

uint8_t cursorGetPosX()
{
   18393:	55                   	push   ebp
   18394:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:189
    return terminal_column;
   18396:	a1 04 00 12 00       	mov    eax,ds:0x120004
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:190
}
   1839b:	5d                   	pop    ebp
   1839c:	c3                   	ret    

0001839d <cursorGetMaxX>:
cursorGetMaxX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:192
int cursorGetMaxX()
{
   1839d:	55                   	push   ebp
   1839e:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:193
    return VGA_WIDTH;
   183a0:	b8 50 00 00 00       	mov    eax,0x50
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:194
}
   183a5:	5d                   	pop    ebp
   183a6:	c3                   	ret    

000183a7 <cursorGetMaxY>:
cursorGetMaxY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:197

int cursorGetMaxY()
{
   183a7:	55                   	push   ebp
   183a8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:198
    return kTerminalHeight;
   183aa:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   183b1:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:199
}
   183b4:	5d                   	pop    ebp
   183b5:	c3                   	ret    

000183b6 <displayGetMaxXY>:
displayGetMaxXY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:202

void displayGetMaxXY(int* maxX, int* maxY)
{
   183b6:	55                   	push   ebp
   183b7:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:203
    *maxX=VGA_WIDTH;
   183b9:	b8 50 00 00 00       	mov    eax,0x50
   183be:	89 c2                	mov    edx,eax
   183c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   183c3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:204
    *maxY=kTerminalHeight;
   183c5:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   183cc:	0f b6 d0             	movzx  edx,al
   183cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   183d2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:205
    return;
   183d4:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:206
}
   183d5:	5d                   	pop    ebp
   183d6:	c3                   	ret    

000183d7 <cursorGetPosY>:
cursorGetPosY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:209

uint8_t cursorGetPosY()
{
   183d7:	55                   	push   ebp
   183d8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:210
    return terminal_row;
   183da:	a1 00 00 12 00       	mov    eax,ds:0x120000
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:211
}
   183df:	5d                   	pop    ebp
   183e0:	c3                   	ret    

000183e1 <kTermPrint>:
kTermPrint():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:213

void kTermPrint(const char* data) {
   183e1:	55                   	push   ebp
   183e2:	89 e5                	mov    ebp,esp
   183e4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:214
        size_t datalen = strlen(data);
   183e7:	83 ec 0c             	sub    esp,0xc
   183ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   183ed:	e8 82 f6 00 00       	call   27a74 <strlen>
   183f2:	83 c4 10             	add    esp,0x10
   183f5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215
        for (size_t i = 0; i < datalen; i++)
   183f8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   183ff:	eb 1e                	jmp    1841f <kTermPrint+0x3e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:216 (discriminator 3)
                terminal_putchar(data[i]);
   18401:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18404:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18407:	01 d0                	add    eax,edx
   18409:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1840c:	0f be c0             	movsx  eax,al
   1840f:	83 ec 0c             	sub    esp,0xc
   18412:	50                   	push   eax
   18413:	e8 46 fd ff ff       	call   1815e <terminal_putchar>
   18418:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215 (discriminator 3)
    return terminal_row;
}

void kTermPrint(const char* data) {
        size_t datalen = strlen(data);
        for (size_t i = 0; i < datalen; i++)
   1841b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215 (discriminator 1)
   1841f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18422:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   18425:	72 da                	jb     18401 <kTermPrint+0x20>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:217
                terminal_putchar(data[i]);
}
   18427:	90                   	nop
   18428:	c9                   	leave  
   18429:	c3                   	ret    

0001842a <kTermInit>:
kTermInit():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:220


void kTermInit() {
   1842a:	55                   	push   ebp
   1842b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:221
    kTerminalHeight=SYS_VGA_HEIGHT;
   1842d:	c6 05 27 00 12 00 32 	mov    BYTE PTR ds:0x120027,0x32
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:222
    terminal_row = 0;
   18434:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
   1843b:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:223
    terminal_column = 0;
   1843e:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   18445:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:224
    terminal_color = make_color(COLOR_LIGHT_BROWN, COLOR_BLACK);
   18448:	6a 00                	push   0x0
   1844a:	6a 0e                	push   0xe
   1844c:	e8 86 fa ff ff       	call   17ed7 <make_color>
   18451:	83 c4 08             	add    esp,0x8
   18454:	a2 08 00 12 00       	mov    ds:0x120008,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:225
    terminal_buffer = (uint16_t*) TEXTMODE_MEMORY_START;
   18459:	c7 05 0c 00 12 00 00 	mov    DWORD PTR ds:0x12000c,0xb8000
   18460:	80 0b 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:227
    //terminal_clear();
}
   18463:	90                   	nop
   18464:	c9                   	leave  
   18465:	c3                   	ret    

00018466 <puts>:
puts():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:230

void puts(char* in)
{
   18466:	55                   	push   ebp
   18467:	89 e5                	mov    ebp,esp
   18469:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:231
    while (*in>'\0')
   1846c:	eb 1b                	jmp    18489 <puts+0x23>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:233
    {
        terminal_putchar(*in++);
   1846e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18471:	8d 50 01             	lea    edx,[eax+0x1]
   18474:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   18477:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1847a:	0f be c0             	movsx  eax,al
   1847d:	83 ec 0c             	sub    esp,0xc
   18480:	50                   	push   eax
   18481:	e8 d8 fc ff ff       	call   1815e <terminal_putchar>
   18486:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:231
    //terminal_clear();
}

void puts(char* in)
{
    while (*in>'\0')
   18489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1848c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1848f:	84 c0                	test   al,al
   18491:	7f db                	jg     1846e <puts+0x8>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:235
    {
        terminal_putchar(*in++);
    }
}
   18493:	90                   	nop
   18494:	c9                   	leave  
   18495:	c3                   	ret    

00018496 <putc>:
putc():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:238

void putc(char c)
{
   18496:	55                   	push   ebp
   18497:	89 e5                	mov    ebp,esp
   18499:	83 ec 18             	sub    esp,0x18
   1849c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1849f:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:239
    terminal_putchar(c);
   184a2:	0f be 45 f4          	movsx  eax,BYTE PTR [ebp-0xc]
   184a6:	83 ec 0c             	sub    esp,0xc
   184a9:	50                   	push   eax
   184aa:	e8 af fc ff ff       	call   1815e <terminal_putchar>
   184af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:240
   184b2:	90                   	nop
   184b3:	c9                   	leave  
   184b4:	c3                   	ret    
   184b5:	66 90                	xchg   ax,ax
   184b7:	90                   	nop

000184b8 <doRSDPSearch>:
doRSDPSearch():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:8
#include "i386/bits/types.h"

extern uint32_t kDebugLevel;

uint32_t doRSDPSearch(int from, int count)
{
   184b8:	55                   	push   ebp
   184b9:	89 e5                	mov    ebp,esp
   184bb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:9
    uint8_t* fromPtr=(uint8_t*)from;
   184be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   184c1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:12
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   184c4:	a1 78 98 12 00       	mov    eax,ds:0x129878
   184c9:	25 00 04 00 00       	and    eax,0x400
   184ce:	85 c0                	test   eax,eax
   184d0:	74 1c                	je     184ee <doRSDPSearch+0x36>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:13
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
   184d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   184d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   184d8:	01 d0                	add    eax,edx
   184da:	50                   	push   eax
   184db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   184de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   184e1:	68 88 2d 08 00       	push   0x82d88
   184e6:	e8 b8 f3 00 00       	call   278a3 <printk>
   184eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15
#endif
    for (int cnt=0;cnt<count;cnt++)
   184ee:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   184f5:	e9 9f 00 00 00       	jmp    18599 <doRSDPSearch+0xe1>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
   184fa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   184fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18500:	01 d0                	add    eax,edx
   18502:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18505:	3c 52                	cmp    al,0x52
   18507:	0f 85 88 00 00 00    	jne    18595 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 1)
   1850d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18510:	8d 50 01             	lea    edx,[eax+0x1]
   18513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18516:	01 d0                	add    eax,edx
   18518:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1851b:	3c 53                	cmp    al,0x53
   1851d:	75 76                	jne    18595 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 2)
   1851f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18522:	8d 50 02             	lea    edx,[eax+0x2]
   18525:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18528:	01 d0                	add    eax,edx
   1852a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1852d:	3c 44                	cmp    al,0x44
   1852f:	75 64                	jne    18595 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 3)
   18531:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18534:	8d 50 03             	lea    edx,[eax+0x3]
   18537:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1853a:	01 d0                	add    eax,edx
   1853c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1853f:	3c 20                	cmp    al,0x20
   18541:	75 52                	jne    18595 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 4)
   18543:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18546:	8d 50 04             	lea    edx,[eax+0x4]
   18549:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1854c:	01 d0                	add    eax,edx
   1854e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18551:	3c 50                	cmp    al,0x50
   18553:	75 40                	jne    18595 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 5)
   18555:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18558:	8d 50 05             	lea    edx,[eax+0x5]
   1855b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1855e:	01 d0                	add    eax,edx
   18560:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18563:	3c 54                	cmp    al,0x54
   18565:	75 2e                	jne    18595 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 6)
   18567:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1856a:	8d 50 06             	lea    edx,[eax+0x6]
   1856d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18570:	01 d0                	add    eax,edx
   18572:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18575:	3c 52                	cmp    al,0x52
   18577:	75 1c                	jne    18595 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 7)
   18579:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1857c:	8d 50 07             	lea    edx,[eax+0x7]
   1857f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18582:	01 d0                	add    eax,edx
   18584:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18587:	3c 20                	cmp    al,0x20
   18589:	75 0a                	jne    18595 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:18
        {
            return (uint32_t)&fromPtr[cnt];
   1858b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1858e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18591:	01 d0                	add    eax,edx
   18593:	eb 15                	jmp    185aa <doRSDPSearch+0xf2>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15 (discriminator 2)
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
#endif
    for (int cnt=0;cnt<count;cnt++)
   18595:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15 (discriminator 1)
   18599:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1859c:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   1859f:	0f 8c 55 ff ff ff    	jl     184fa <doRSDPSearch+0x42>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:20
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
        {
            return (uint32_t)&fromPtr[cnt];
        }
    return 0xFFFFFFFF;
   185a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:21
}
   185aa:	c9                   	leave  
   185ab:	c3                   	ret    

000185ac <acpiFindTable>:
acpiFindTable():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:24

acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
   185ac:	55                   	push   ebp
   185ad:	89 e5                	mov    ebp,esp
   185af:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:25
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
   185b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   185b5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:26
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
   185b8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   185bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   185be:	83 e8 24             	sub    eax,0x24
   185c1:	c1 e8 02             	shr    eax,0x2
   185c4:	83 c0 0a             	add    eax,0xa
   185c7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28
 
    for (int i = 0; i < entries; i++)
   185ca:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   185d1:	eb 48                	jmp    1861b <acpiFindTable+0x6f>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:30
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t*)rsdt->PointerToOtherSDT[i];
   185d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   185d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   185d9:	83 c2 08             	add    edx,0x8
   185dc:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   185e0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:31
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   185e3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   185e6:	83 ec 04             	sub    esp,0x4
   185e9:	50                   	push   eax
   185ea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   185ed:	68 b0 2d 08 00       	push   0x82db0
   185f2:	e8 ac f2 00 00       	call   278a3 <printk>
   185f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:32
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   185fa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   185fd:	83 ec 04             	sub    esp,0x4
   18600:	6a 04                	push   0x4
   18602:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18605:	50                   	push   eax
   18606:	e8 75 96 ff ff       	call   11c80 <strncmp>
   1860b:	83 c4 10             	add    esp,0x10
   1860e:	85 c0                	test   eax,eax
   18610:	75 05                	jne    18617 <acpiFindTable+0x6b>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:33
            return (acpiFADT_t*)nextRSDT;
   18612:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18615:	eb 11                	jmp    18628 <acpiFindTable+0x7c>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28 (discriminator 2)
acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
 
    for (int i = 0; i < entries; i++)
   18617:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28 (discriminator 1)
   1861b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1861e:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   18621:	7c b0                	jl     185d3 <acpiFindTable+0x27>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:37
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (acpiFADT_t*)nextRSDT;
    }
 
    // No FACP found
    return NULL;
   18623:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:38
}
   18628:	c9                   	leave  
   18629:	c3                   	ret    

0001862a <acpiFindTable2>:
acpiFindTable2():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:40
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
   1862a:	55                   	push   ebp
   1862b:	89 e5                	mov    ebp,esp
   1862d:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:41
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
   18630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18633:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:42
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
   18636:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18639:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1863c:	83 e8 24             	sub    eax,0x24
   1863f:	c1 e8 02             	shr    eax,0x2
   18642:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44
 
    for (int i = 0; i < entries; i++)
   18645:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1864c:	eb 48                	jmp    18696 <acpiFindTable2+0x6c>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:46
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t *) rsdt->PointerToOtherSDT[i];
   1864e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18651:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18654:	83 c2 08             	add    edx,0x8
   18657:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   1865b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:47
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   1865e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18661:	83 ec 04             	sub    esp,0x4
   18664:	50                   	push   eax
   18665:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18668:	68 b0 2d 08 00       	push   0x82db0
   1866d:	e8 31 f2 00 00       	call   278a3 <printk>
   18672:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:48
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   18675:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18678:	83 ec 04             	sub    esp,0x4
   1867b:	6a 04                	push   0x4
   1867d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18680:	50                   	push   eax
   18681:	e8 fa 95 ff ff       	call   11c80 <strncmp>
   18686:	83 c4 10             	add    esp,0x10
   18689:	85 c0                	test   eax,eax
   1868b:	75 05                	jne    18692 <acpiFindTable2+0x68>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:49
            return (void *) nextRSDT;
   1868d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18690:	eb 11                	jmp    186a3 <acpiFindTable2+0x79>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44 (discriminator 2)
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
 
    for (int i = 0; i < entries; i++)
   18692:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44 (discriminator 1)
   18696:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18699:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1869c:	7c b0                	jl     1864e <acpiFindTable2+0x24>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:53
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (void *) nextRSDT;
    }
 
    // No FACP found
    return NULL;
   1869e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:54
}
   186a3:	c9                   	leave  
   186a4:	c3                   	ret    

000186a5 <acpiFindTables>:
acpiFindTables():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:56
void acpiFindTables()
{
   186a5:	55                   	push   ebp
   186a6:	89 e5                	mov    ebp,esp
   186a8:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:61
    acpiRSDPHeader_t* lRSDPTable;
    acpiRSDT_t* lRootSDP;
    acpiFADT_t* lFADTSDP;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   186ab:	a1 78 98 12 00       	mov    eax,ds:0x129878
   186b0:	25 00 04 00 00       	and    eax,0x400
   186b5:	85 c0                	test   eax,eax
   186b7:	74 10                	je     186c9 <acpiFindTables+0x24>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:62
             printk("acpiFindTables: Looking for ACPI tables\n");
   186b9:	83 ec 0c             	sub    esp,0xc
   186bc:	68 d8 2d 08 00       	push   0x82dd8
   186c1:	e8 dd f1 00 00       	call   278a3 <printk>
   186c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:64
#endif
             uint16_t* lEBDABIOSPtr=(uint16_t*)0x40e;
   186c9:	c7 45 e8 0e 04 00 00 	mov    DWORD PTR [ebp-0x18],0x40e
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:65
    int32_t lRSDPPtr, lRSDPBaseAddress=0xFFFFFFFF;
   186d0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:68
    
    //Start by looking in the bios for the extended bios data area (EBDA) segment address, and search there
    if (lEBDABIOSPtr != 0)
   186d7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   186db:	74 2b                	je     18708 <acpiFindTables+0x63>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:70
    {
        lRSDPPtr=*lEBDABIOSPtr*10;
   186dd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   186e0:	0f b7 00             	movzx  eax,WORD PTR [eax]
   186e3:	0f b7 d0             	movzx  edx,ax
   186e6:	89 d0                	mov    eax,edx
   186e8:	c1 e0 02             	shl    eax,0x2
   186eb:	01 d0                	add    eax,edx
   186ed:	01 c0                	add    eax,eax
   186ef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:71
        lRSDPBaseAddress = doRSDPSearch(lRSDPPtr, 0xFFFF);
   186f2:	83 ec 08             	sub    esp,0x8
   186f5:	68 ff ff 00 00       	push   0xffff
   186fa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   186fd:	e8 b6 fd ff ff       	call   184b8 <doRSDPSearch>
   18702:	83 c4 10             	add    esp,0x10
   18705:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:74
    }
    //If we didn't find the RSDP table there, look from 0xE0000->0xFFFFF
    if (lRSDPBaseAddress==0xFFFFFFFF)
   18708:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   1870c:	75 18                	jne    18726 <acpiFindTables+0x81>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:76
    {
        lRSDPBaseAddress=doRSDPSearch(0xE0000, 0x1FFFF);
   1870e:	83 ec 08             	sub    esp,0x8
   18711:	68 ff ff 01 00       	push   0x1ffff
   18716:	68 00 00 0e 00       	push   0xe0000
   1871b:	e8 98 fd ff ff       	call   184b8 <doRSDPSearch>
   18720:	83 c4 10             	add    esp,0x10
   18723:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:78
    }
    if (lRSDPBaseAddress==-1)
   18726:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   1872a:	75 2a                	jne    18756 <acpiFindTables+0xb1>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:81
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   1872c:	a1 78 98 12 00       	mov    eax,ds:0x129878
   18731:	25 00 04 00 00       	and    eax,0x400
   18736:	85 c0                	test   eax,eax
   18738:	0f 84 51 01 00 00    	je     1888f <acpiFindTables+0x1ea>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:82
           printk(" table not found\n", lRSDPPtr);
   1873e:	83 ec 08             	sub    esp,0x8
   18741:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18744:	68 01 2e 08 00       	push   0x82e01
   18749:	e8 55 f1 00 00       	call   278a3 <printk>
   1874e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:84
#endif
        return;
   18751:	e9 39 01 00 00       	jmp    1888f <acpiFindTables+0x1ea>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:86
    }
    lRSDPTable=(acpiRSDPHeader_t*)lRSDPBaseAddress;
   18756:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   18759:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:88
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   1875c:	a1 78 98 12 00       	mov    eax,ds:0x129878
   18761:	25 00 04 00 00       	and    eax,0x400
   18766:	85 c0                	test   eax,eax
   18768:	74 42                	je     187ac <acpiFindTables+0x107>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:90
    {
        printk(" table found at 0x%08X\n", lRSDPBaseAddress);
   1876a:	83 ec 08             	sub    esp,0x8
   1876d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   18770:	68 13 2e 08 00       	push   0x82e13
   18775:	e8 29 f1 00 00       	call   278a3 <printk>
   1877a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91
        printk("ACPI version %s, RSPD OEM Id: %s\n", lRSDPTable->firstPart.Revision==0?"1.0":"2+", lRSDPTable->firstPart.OEMID);
   1877d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   18780:	8d 50 09             	lea    edx,[eax+0x9]
   18783:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   18786:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1878a:	84 c0                	test   al,al
   1878c:	75 07                	jne    18795 <acpiFindTables+0xf0>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 1)
   1878e:	b8 2b 2e 08 00       	mov    eax,0x82e2b
   18793:	eb 05                	jmp    1879a <acpiFindTables+0xf5>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 2)
   18795:	b8 2f 2e 08 00       	mov    eax,0x82e2f
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 4)
   1879a:	83 ec 04             	sub    esp,0x4
   1879d:	52                   	push   edx
   1879e:	50                   	push   eax
   1879f:	68 34 2e 08 00       	push   0x82e34
   187a4:	e8 fa f0 00 00       	call   278a3 <printk>
   187a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:93
    }
    if (lRSDPTable->firstPart.Revision==0)
   187ac:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   187af:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   187b3:	84 c0                	test   al,al
   187b5:	75 29                	jne    187e0 <acpiFindTables+0x13b>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:95
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->firstPart.RsdtAddress;
   187b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   187ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   187bd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:96
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   187c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   187c3:	8d 50 24             	lea    edx,[eax+0x24]
   187c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   187c9:	83 c0 0a             	add    eax,0xa
   187cc:	52                   	push   edx
   187cd:	50                   	push   eax
   187ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   187d1:	68 58 2e 08 00       	push   0x82e58
   187d6:	e8 c8 f0 00 00       	call   278a3 <printk>
   187db:	83 c4 10             	add    esp,0x10
   187de:	eb 2a                	jmp    1880a <acpiFindTables+0x165>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:100
    }
    else
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->XsdtAddress;
   187e0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   187e3:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   187e6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   187e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:101
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   187ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   187ef:	8d 50 24             	lea    edx,[eax+0x24]
   187f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   187f5:	83 c0 0a             	add    eax,0xa
   187f8:	52                   	push   edx
   187f9:	50                   	push   eax
   187fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   187fd:	68 58 2e 08 00       	push   0x82e58
   18802:	e8 9c f0 00 00       	call   278a3 <printk>
   18807:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:103
    }
    lFADTSDP=acpiFindTable(lRootSDP,"FACP");
   1880a:	83 ec 08             	sub    esp,0x8
   1880d:	68 84 2e 08 00       	push   0x82e84
   18812:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18815:	e8 92 fd ff ff       	call   185ac <acpiFindTable>
   1881a:	83 c4 10             	add    esp,0x10
   1881d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:104
    if (lFADTSDP!=NULL)
   18820:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   18824:	74 2e                	je     18854 <acpiFindTables+0x1af>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:106
    {
        printk("FACP found at 0x%08X. resetReg=0x%08X\n", lFADTSDP, lFADTSDP->ResetReg);
   18826:	83 ec 0c             	sub    esp,0xc
   18829:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1882c:	83 ec 0c             	sub    esp,0xc
   1882f:	89 e2                	mov    edx,esp
   18831:	8b 48 74             	mov    ecx,DWORD PTR [eax+0x74]
   18834:	89 0a                	mov    DWORD PTR [edx],ecx
   18836:	8b 48 78             	mov    ecx,DWORD PTR [eax+0x78]
   18839:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   1883c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
   1883f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
   18842:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   18845:	68 8c 2e 08 00       	push   0x82e8c
   1884a:	e8 54 f0 00 00       	call   278a3 <printk>
   1884f:	83 c4 20             	add    esp,0x20
   18852:	eb 10                	jmp    18864 <acpiFindTables+0x1bf>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:110
    }
    else
    {
        printk("Failed to find FACP table, cannot continue ACPI discovery.\n");
   18854:	83 ec 0c             	sub    esp,0xc
   18857:	68 b4 2e 08 00       	push   0x82eb4
   1885c:	e8 42 f0 00 00       	call   278a3 <printk>
   18861:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:112
    }
    uint32_t* ltemp=acpiFindTable(lFADTSDP,"DSDT");
   18864:	83 ec 08             	sub    esp,0x8
   18867:	68 f0 2e 08 00       	push   0x82ef0
   1886c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1886f:	e8 38 fd ff ff       	call   185ac <acpiFindTable>
   18874:	83 c4 10             	add    esp,0x10
   18877:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:113
    printk("lTemp=0x%08X\n", ltemp);
   1887a:	83 ec 08             	sub    esp,0x8
   1887d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   18880:	68 f5 2e 08 00       	push   0x82ef5
   18885:	e8 19 f0 00 00       	call   278a3 <printk>
   1888a:	83 c4 10             	add    esp,0x10
   1888d:	eb 01                	jmp    18890 <acpiFindTables+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:84
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
           printk(" table not found\n", lRSDPPtr);
#endif
        return;
   1888f:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:118
    printk("lTemp=0x%08X\n", ltemp);
    
#endif
    
   
}
   18890:	c9                   	leave  
   18891:	c3                   	ret    

00018892 <acpiInitialize>:
acpiInitialize():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:122
    
   
void acpiInitialize()
{
   18892:	55                   	push   ebp
   18893:	89 e5                	mov    ebp,esp
   18895:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:123
    acpiFindTables();
   18898:	e8 08 fe ff ff       	call   186a5 <acpiFindTables>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:125
    
}
   1889d:	90                   	nop
   1889e:	c9                   	leave  
   1889f:	c3                   	ret    

000188a0 <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   188a0:	55                   	push   ebp
   188a1:	89 e5                	mov    ebp,esp
   188a3:	53                   	push   ebx
   188a4:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   188a7:	9c                   	pushf  
   188a8:	9c                   	pushf  
   188a9:	5a                   	pop    edx
   188aa:	89 d0                	mov    eax,edx
   188ac:	81 f2 00 00 20 00    	xor    edx,0x200000
   188b2:	52                   	push   edx
   188b3:	9d                   	popf   
   188b4:	9c                   	pushf  
   188b5:	5a                   	pop    edx
   188b6:	9d                   	popf   
   188b7:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   188ba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   188bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   188c0:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   188c3:	25 00 00 20 00       	and    eax,0x200000
   188c8:	85 c0                	test   eax,eax
   188ca:	75 07                	jne    188d3 <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   188cc:	b8 00 00 00 00       	mov    eax,0x0
   188d1:	eb 22                	jmp    188f5 <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   188d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   188d6:	0f a2                	cpuid  
   188d8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   188db:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   188de:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   188e1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   188e4:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   188e8:	74 08                	je     188f2 <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   188ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   188ed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   188f0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   188f2:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   188f5:	83 c4 10             	add    esp,0x10
   188f8:	5b                   	pop    ebx
   188f9:	5d                   	pop    ebp
   188fa:	c3                   	ret    

000188fb <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   188fb:	55                   	push   ebp
   188fc:	89 e5                	mov    ebp,esp
   188fe:	56                   	push   esi
   188ff:	53                   	push   ebx
   18900:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   18903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18906:	25 00 00 00 80       	and    eax,0x80000000
   1890b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   1890e:	6a 00                	push   0x0
   18910:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18913:	e8 88 ff ff ff       	call   188a0 <__get_cpuid_max>
   18918:	83 c4 08             	add    esp,0x8
   1891b:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1891e:	73 07                	jae    18927 <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   18920:	b8 00 00 00 00       	mov    eax,0x0
   18925:	eb 1e                	jmp    18945 <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   18927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1892a:	0f a2                	cpuid  
   1892c:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   1892f:	89 06                	mov    DWORD PTR [esi],eax
   18931:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18934:	89 18                	mov    DWORD PTR [eax],ebx
   18936:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   18939:	89 08                	mov    DWORD PTR [eax],ecx
   1893b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   1893e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   18940:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   18945:	8d 65 f8             	lea    esp,[ebp-0x8]
   18948:	5b                   	pop    ebx
   18949:	5e                   	pop    esi
   1894a:	5d                   	pop    ebp
   1894b:	c3                   	ret    

0001894c <rdtsc>:
rdtsc():
/home/yogi/src/os/chrisOS/include/utility.h:57
void displayGDTTable();

#if defined(__i386__)

static __inline__ unsigned long long rdtsc(void)
{
   1894c:	55                   	push   ebp
   1894d:	89 e5                	mov    ebp,esp
   1894f:	83 ec 10             	sub    esp,0x10
   18952:	0f 31                	rdtsc  
/home/yogi/src/os/chrisOS/include/utility.h:59
    unsigned long long int x;
    __asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
   18954:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18957:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/include/utility.h:60
    return x;
   1895a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1895d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/utility.h:61
}
   18960:	c9                   	leave  
   18961:	c3                   	ret    

00018962 <apicCheckFor>:
apicCheckFor():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:12
 *  and if the local APIC hasn't been disabled in MSRs
 *  note that this requires CPUID to be supported.
 */

extern cpu_t kCPU[];
bool apicCheckFor() {
   18962:	55                   	push   ebp
   18963:	89 e5                	mov    ebp,esp
   18965:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:13
   uint32_t eax=0, edx=0, notused=0;
   18968:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1896f:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   18976:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:14
   __get_cpuid(1, &eax, &notused, &notused, &edx);
   1897d:	8d 45 f8             	lea    eax,[ebp-0x8]
   18980:	50                   	push   eax
   18981:	8d 45 f4             	lea    eax,[ebp-0xc]
   18984:	50                   	push   eax
   18985:	8d 45 f4             	lea    eax,[ebp-0xc]
   18988:	50                   	push   eax
   18989:	8d 45 fc             	lea    eax,[ebp-0x4]
   1898c:	50                   	push   eax
   1898d:	6a 01                	push   0x1
   1898f:	e8 67 ff ff ff       	call   188fb <__get_cpuid>
   18994:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/apic.c:15
   return edx & CPUID_FLAG_APIC;
   18997:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1899a:	25 00 02 00 00       	and    eax,0x200
   1899f:	85 c0                	test   eax,eax
   189a1:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/apic.c:16
}
   189a4:	c9                   	leave  
   189a5:	c3                   	ret    

000189a6 <acpiGetAPICVersion>:
acpiGetAPICVersion():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:19

uint8_t acpiGetAPICVersion()
{
   189a6:	55                   	push   ebp
   189a7:	89 e5                	mov    ebp,esp
   189a9:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/apic.c:20
    return apicReadRegister(APIC_REGISTER_VERSION);
   189ac:	83 ec 0c             	sub    esp,0xc
   189af:	6a 30                	push   0x30
   189b1:	e8 3f 00 00 00       	call   189f5 <apicReadRegister>
   189b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:21
}
   189b9:	c9                   	leave  
   189ba:	c3                   	ret    

000189bb <apciGetAPICID>:
apciGetAPICID():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:24

uint8_t apciGetAPICID(unsigned whichAPIC)
{
   189bb:	55                   	push   ebp
   189bc:	89 e5                	mov    ebp,esp
   189be:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/apic.c:25
    return apicReadRegister(APIC_REGISTER_APIC_ID_OFFSET);
   189c1:	83 ec 0c             	sub    esp,0xc
   189c4:	6a 20                	push   0x20
   189c6:	e8 2a 00 00 00       	call   189f5 <apicReadRegister>
   189cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:26
}
   189ce:	c9                   	leave  
   189cf:	c3                   	ret    

000189d0 <apicGetAPICBase>:
apicGetAPICBase():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:29

uint32_t apicGetAPICBase(void)
{
   189d0:	55                   	push   ebp
   189d1:	89 e5                	mov    ebp,esp
   189d3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:31
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   189d6:	83 ec 04             	sub    esp,0x4
   189d9:	8d 45 f0             	lea    eax,[ebp-0x10]
   189dc:	50                   	push   eax
   189dd:	8d 45 f4             	lea    eax,[ebp-0xc]
   189e0:	50                   	push   eax
   189e1:	6a 1b                	push   0x1b
   189e3:	e8 37 13 00 00       	call   19d1f <rdmsr32>
   189e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:33

   return (eax & 0xfffff000);
   189eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   189ee:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOS/src/cpu/apic.c:34
}
   189f3:	c9                   	leave  
   189f4:	c3                   	ret    

000189f5 <apicReadRegister>:
apicReadRegister():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:37

uint32_t apicReadRegister(uint32_t reg) 
{
   189f5:	55                   	push   ebp
   189f6:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/apic.c:38
    return *((volatile uint32_t *) (kCPU[0].registerBase + reg));
   189f8:	8b 15 a4 98 12 00    	mov    edx,DWORD PTR ds:0x1298a4
   189fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a01:	01 d0                	add    eax,edx
   18a03:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/cpu/apic.c:39
}
   18a05:	5d                   	pop    ebp
   18a06:	c3                   	ret    

00018a07 <apicWriteRegister>:
apicWriteRegister():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:41

void apicWriteRegister(uint32_t reg, uint32_t value) {
   18a07:	55                   	push   ebp
   18a08:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/apic.c:42
    *((volatile uint32_t *) (kCPU[0].registerBase + reg)) = value;
   18a0a:	8b 15 a4 98 12 00    	mov    edx,DWORD PTR ds:0x1298a4
   18a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a13:	01 d0                	add    eax,edx
   18a15:	89 c2                	mov    edx,eax
   18a17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18a1a:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:43
}
   18a1c:	90                   	nop
   18a1d:	5d                   	pop    ebp
   18a1e:	c3                   	ret    

00018a1f <apicSetAPICBase>:
apicSetAPICBase():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:46

/* Set the physical address for local APIC registers */
void apicSetAPICBase(uintptr_t apic) {
   18a1f:	55                   	push   ebp
   18a20:	89 e5                	mov    ebp,esp
   18a22:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:47
   uint32_t edx = 0;
   18a25:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:48
   uint32_t eax = (apic & 0xfffff100) | IA32_APIC_BASE_MSR_ENABLE;
   18a2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a2f:	25 00 f1 ff ff       	and    eax,0xfffff100
   18a34:	80 cc 08             	or     ah,0x8
   18a37:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:54
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   edx = (apic >> 32) & 0x0f;
#endif
 
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   18a3a:	83 ec 04             	sub    esp,0x4
   18a3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18a40:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18a43:	6a 1b                	push   0x1b
   18a45:	e8 2b 13 00 00       	call   19d75 <wrmsr32>
   18a4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:55
   kCPU[0].registerBase=apic;
   18a4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a50:	a3 a4 98 12 00       	mov    ds:0x1298a4,eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:56
}
   18a55:	90                   	nop
   18a56:	c9                   	leave  
   18a57:	c3                   	ret    

00018a58 <cpu_get_apic_base>:
cpu_get_apic_base():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:62
 
/**
 * Get the physical address of the APIC registers page
 * make sure you map it to virtual memory ;)
 */
uintptr_t cpu_get_apic_base() {
   18a58:	55                   	push   ebp
   18a59:	89 e5                	mov    ebp,esp
   18a5b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:64
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18a5e:	83 ec 04             	sub    esp,0x4
   18a61:	8d 45 f0             	lea    eax,[ebp-0x10]
   18a64:	50                   	push   eax
   18a65:	8d 45 f4             	lea    eax,[ebp-0xc]
   18a68:	50                   	push   eax
   18a69:	6a 1b                	push   0x1b
   18a6b:	e8 af 12 00 00       	call   19d1f <rdmsr32>
   18a70:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:69
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   return (eax & 0xfffff000) | ((edx & 0x0f) << 32);
#else
   return (eax & 0xfffff000);
   18a73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18a76:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOS/src/cpu/apic.c:71
#endif
}
   18a7b:	c9                   	leave  
   18a7c:	c3                   	ret    

00018a7d <apicIsEnabled>:
apicIsEnabled():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:73

bool apicIsEnabled() {
   18a7d:	55                   	push   ebp
   18a7e:	89 e5                	mov    ebp,esp
   18a80:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:75
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18a83:	83 ec 04             	sub    esp,0x4
   18a86:	8d 45 f0             	lea    eax,[ebp-0x10]
   18a89:	50                   	push   eax
   18a8a:	8d 45 f4             	lea    eax,[ebp-0xc]
   18a8d:	50                   	push   eax
   18a8e:	6a 1b                	push   0x1b
   18a90:	e8 8a 12 00 00       	call   19d1f <rdmsr32>
   18a95:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:76
   return (eax & (1<<11)) == (1<11);
   18a98:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:77
} 
   18a9d:	c9                   	leave  
   18a9e:	c3                   	ret    

00018a9f <apicEnable>:
apicEnable():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:79

void apicEnable() {
   18a9f:	55                   	push   ebp
   18aa0:	89 e5                	mov    ebp,esp
   18aa2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:81
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18aa5:	83 ec 04             	sub    esp,0x4
   18aa8:	8d 45 f0             	lea    eax,[ebp-0x10]
   18aab:	50                   	push   eax
   18aac:	8d 45 f4             	lea    eax,[ebp-0xc]
   18aaf:	50                   	push   eax
   18ab0:	6a 1b                	push   0x1b
   18ab2:	e8 68 12 00 00       	call   19d1f <rdmsr32>
   18ab7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:82
   eax |=IA32_APIC_BASE_MSR_ENABLE;
   18aba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18abd:	80 cc 08             	or     ah,0x8
   18ac0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:83
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   18ac3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18ac6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18ac9:	83 ec 04             	sub    esp,0x4
   18acc:	52                   	push   edx
   18acd:	50                   	push   eax
   18ace:	6a 1b                	push   0x1b
   18ad0:	e8 a0 12 00 00       	call   19d75 <wrmsr32>
   18ad5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:84
} 
   18ad8:	90                   	nop
   18ad9:	c9                   	leave  
   18ada:	c3                   	ret    

00018adb <apicDisable>:
apicDisable():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:86

void apicDisable() {
   18adb:	55                   	push   ebp
   18adc:	89 e5                	mov    ebp,esp
   18ade:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:88
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18ae1:	83 ec 04             	sub    esp,0x4
   18ae4:	8d 45 f0             	lea    eax,[ebp-0x10]
   18ae7:	50                   	push   eax
   18ae8:	8d 45 f4             	lea    eax,[ebp-0xc]
   18aeb:	50                   	push   eax
   18aec:	6a 1b                	push   0x1b
   18aee:	e8 2c 12 00 00       	call   19d1f <rdmsr32>
   18af3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:89
   eax&=!IA32_APIC_BASE_MSR_ENABLE;
   18af6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:90
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   18afd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18b00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18b03:	83 ec 04             	sub    esp,0x4
   18b06:	52                   	push   edx
   18b07:	50                   	push   eax
   18b08:	6a 1b                	push   0x1b
   18b0a:	e8 66 12 00 00       	call   19d75 <wrmsr32>
   18b0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:91
} 
   18b12:	90                   	nop
   18b13:	c9                   	leave  
   18b14:	c3                   	ret    

00018b15 <apicGetHZ>:
apicGetHZ():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:92
uint32_t apicGetHZ() {
   18b15:	55                   	push   ebp
   18b16:	89 e5                	mov    ebp,esp
   18b18:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:94

    int timerTimeout=500;
   18b1b:	c7 45 f4 f4 01 00 00 	mov    DWORD PTR [ebp-0xc],0x1f4
/home/yogi/src/os/chrisOS/src/cpu/apic.c:106
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
*/

    // Prepare the PIT to sleep for 10ms (10000µs)

    apicEnable();
   18b22:	e8 78 ff ff ff       	call   18a9f <apicEnable>
/home/yogi/src/os/chrisOS/src/cpu/apic.c:107
    apicWriteRegister(APIC_REGISTER_SPURIOUS, 39+APIC_SW_ENABLE);
   18b27:	83 ec 08             	sub    esp,0x8
   18b2a:	68 27 01 00 00       	push   0x127
   18b2f:	68 f0 00 00 00       	push   0xf0
   18b34:	e8 ce fe ff ff       	call   18a07 <apicWriteRegister>
   18b39:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:109
    // Set APIC init counter to -1
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32 | APIC_TIMER_MODE_ONESHOT );
   18b3c:	83 ec 08             	sub    esp,0x8
   18b3f:	6a 20                	push   0x20
   18b41:	68 20 03 00 00       	push   0x320
   18b46:	e8 bc fe ff ff       	call   18a07 <apicWriteRegister>
   18b4b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:111
    // Tell APIC timer to use divider 16
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x11);
   18b4e:	83 ec 08             	sub    esp,0x8
   18b51:	6a 11                	push   0x11
   18b53:	68 e0 03 00 00       	push   0x3e0
   18b58:	e8 aa fe ff ff       	call   18a07 <apicWriteRegister>
   18b5d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:112
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, 0xFFFFFFFF);
   18b60:	83 ec 08             	sub    esp,0x8
   18b63:	6a ff                	push   0xffffffff
   18b65:	68 80 03 00 00       	push   0x380
   18b6a:	e8 98 fe ff ff       	call   18a07 <apicWriteRegister>
   18b6f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:115

    // Perform PIT-supported sleep
    wait(timerTimeout);
   18b72:	83 ec 0c             	sub    esp,0xc
   18b75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18b78:	e8 65 ff 00 00       	call   28ae2 <wait>
   18b7d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:117

    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
   18b80:	83 ec 08             	sub    esp,0x8
   18b83:	68 00 00 01 00       	push   0x10000
   18b88:	68 20 03 00 00       	push   0x320
   18b8d:	e8 75 fe ff ff       	call   18a07 <apicWriteRegister>
   18b92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:119
    // Now we know how often the APIC timer has ticked in 10ms
    uint64_t ticksPer10ms = 0xFFFFFFFF - apicReadRegister(APIC_REGISTER_TIMER_CURRENT);
   18b95:	83 ec 0c             	sub    esp,0xc
   18b98:	68 90 03 00 00       	push   0x390
   18b9d:	e8 53 fe ff ff       	call   189f5 <apicReadRegister>
   18ba2:	83 c4 10             	add    esp,0x10
   18ba5:	f7 d0                	not    eax
   18ba7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   18baa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:120
    ticksPer10ms=ticksPer10ms/(timerTimeout/10);
   18bb1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   18bb4:	ba 67 66 66 66       	mov    edx,0x66666667
   18bb9:	89 c8                	mov    eax,ecx
   18bbb:	f7 ea                	imul   edx
   18bbd:	c1 fa 02             	sar    edx,0x2
   18bc0:	89 c8                	mov    eax,ecx
   18bc2:	c1 f8 1f             	sar    eax,0x1f
   18bc5:	29 c2                	sub    edx,eax
   18bc7:	89 d0                	mov    eax,edx
   18bc9:	99                   	cdq    
   18bca:	52                   	push   edx
   18bcb:	50                   	push   eax
   18bcc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   18bcf:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   18bd2:	e8 59 00 01 00       	call   28c30 <__udivdi3>
   18bd7:	83 c4 10             	add    esp,0x10
   18bda:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   18bdd:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:124
    
    // Start timer as periodic on IRQ 0, divider 16, with the number of ticks we counted
//    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32  | APIC_TIMER_MODE_PERIODIC ); //clears the INT DISABLE pin
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x3);
   18be0:	83 ec 08             	sub    esp,0x8
   18be3:	6a 03                	push   0x3
   18be5:	68 e0 03 00 00       	push   0x3e0
   18bea:	e8 18 fe ff ff       	call   18a07 <apicWriteRegister>
   18bef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:125
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, ticksPer10ms);
   18bf2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18bf5:	83 ec 08             	sub    esp,0x8
   18bf8:	50                   	push   eax
   18bf9:	68 80 03 00 00       	push   0x380
   18bfe:	e8 04 fe ff ff       	call   18a07 <apicWriteRegister>
   18c03:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:126
    return ticksPer10ms;
   18c06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/cpu/apic.c:127
}
   18c09:	c9                   	leave  
   18c0a:	c3                   	ret    

00018c0b <tscGetTicksPerSecond>:
tscGetTicksPerSecond():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:130

int tscGetTicksPerSecond()
{
   18c0b:	55                   	push   ebp
   18c0c:	89 e5                	mov    ebp,esp
   18c0e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:131
    uint64_t ticksBefore=rdtsc();
   18c11:	e8 36 fd ff ff       	call   1894c <rdtsc>
   18c16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   18c19:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:132
    wait(1000);
   18c1c:	83 ec 0c             	sub    esp,0xc
   18c1f:	68 e8 03 00 00       	push   0x3e8
   18c24:	e8 b9 fe 00 00       	call   28ae2 <wait>
   18c29:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:133
    return rdtsc()-ticksBefore;
   18c2c:	e8 1b fd ff ff       	call   1894c <rdtsc>
   18c31:	89 c2                	mov    edx,eax
   18c33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c36:	29 c2                	sub    edx,eax
   18c38:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:134
   18c3a:	c9                   	leave  
   18c3b:	c3                   	ret    

00018c3c <bitsSet>:
bitsSet():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:5
#include <stdint.h>
#include <stdbool.h>

bool bitsSet(volatile uint32_t* array, uint32_t bit)
{
   18c3c:	55                   	push   ebp
   18c3d:	89 e5                	mov    ebp,esp
   18c3f:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:6
    int lRetVal=0;
   18c42:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:7
    __asm__ volatile ("bts [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18c49:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18c4f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18c52:	0f ab 02             	bts    DWORD PTR [edx],eax
   18c55:	b8 00 00 00 00       	mov    eax,0x0
   18c5a:	0f 92 c0             	setb   al
   18c5d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:8
    return lRetVal;
   18c60:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18c64:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:9
}
   18c67:	c9                   	leave  
   18c68:	c3                   	ret    

00018c69 <bitsReset>:
bitsReset():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:11
bool bitsReset(volatile uint32_t* array, uint32_t bit)
{
   18c69:	55                   	push   ebp
   18c6a:	89 e5                	mov    ebp,esp
   18c6c:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:12
    int lRetVal=0;
   18c6f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:13
    __asm__ volatile ("btr [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18c76:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18c79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18c7c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18c7f:	0f b3 02             	btr    DWORD PTR [edx],eax
   18c82:	b8 00 00 00 00       	mov    eax,0x0
   18c87:	0f 92 c0             	setb   al
   18c8a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:14
    return lRetVal;
   18c8d:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18c91:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:15
}
   18c94:	c9                   	leave  
   18c95:	c3                   	ret    

00018c96 <bitsTest>:
bitsTest():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:17
bool bitsTest(volatile uint32_t* array, uint32_t bit)
{
   18c96:	55                   	push   ebp
   18c97:	89 e5                	mov    ebp,esp
   18c99:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:18
    int lRetVal=0;
   18c9c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:19
    __asm__ volatile ("bt [%[array]],%[bit]\nmov eax,0\nsetc al\n" :[array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18ca3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18ca6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18ca9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18cac:	0f a3 02             	bt     DWORD PTR [edx],eax
   18caf:	b8 00 00 00 00       	mov    eax,0x0
   18cb4:	0f 92 c0             	setb   al
   18cb7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:20
    return lRetVal;
   18cba:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18cbe:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:21
}
   18cc1:	c9                   	leave  
   18cc2:	c3                   	ret    

00018cc3 <bitsScanF>:
bitsScanF():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:24

int bitsScanF(volatile uint32_t* array)
{
   18cc3:	55                   	push   ebp
   18cc4:	89 e5                	mov    ebp,esp
   18cc6:	53                   	push   ebx
   18cc7:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:25
    int lRetVal=0;
   18cca:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:26
    bool lErr=false;
   18cd1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:27
    __asm__ volatile ("bsf %[ret],[%[array]]\nsetz cl\n" : [ret] "=b" (lRetVal), [lErr] "=c" (lErr) : [array] "m" (*array));
   18cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18cd8:	0f bc 18             	bsf    ebx,DWORD PTR [eax]
   18cdb:	0f 94 c1             	sete   cl
   18cde:	89 c8                	mov    eax,ecx
   18ce0:	89 da                	mov    edx,ebx
   18ce2:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   18ce5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:28
    if (lErr==false)
   18ce8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   18cec:	83 f0 01             	xor    eax,0x1
   18cef:	84 c0                	test   al,al
   18cf1:	74 05                	je     18cf8 <bitsScanF+0x35>
/home/yogi/src/os/chrisOS/src/cpu/bits.c:29
        return lRetVal;
   18cf3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   18cf6:	eb 05                	jmp    18cfd <bitsScanF+0x3a>
/home/yogi/src/os/chrisOS/src/cpu/bits.c:31
    else
        return -1;
   18cf8:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/bits.c:32
   18cfd:	83 c4 10             	add    esp,0x10
   18d00:	5b                   	pop    ebx
   18d01:	5d                   	pop    ebp
   18d02:	c3                   	ret    
   18d03:	90                   	nop

00018d04 <getNonKernelCodeGDTIndex>:
getNonKernelCodeGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:11
extern sGDT* rmGdt;
extern sGDT* bootGdt;
extern uint32_t* kGDTSlotAvailableInd;

uint16_t HIGH_CODE_SECTION getNonKernelCodeGDTIndex()
{
   18d04:	55                   	push   ebp
   18d05:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:12
    return 7<<3;
   18d07:	b8 38 00 00 00       	mov    eax,0x38
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:13
}
   18d0c:	5d                   	pop    ebp
   18d0d:	c3                   	ret    

00018d0e <getNonKernelDataGDTIndex>:
getNonKernelDataGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:16

uint16_t HIGH_CODE_SECTION getNonKernelDataGDTIndex()
{
   18d0e:	55                   	push   ebp
   18d0f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:17
    return 6<<3;
   18d11:	b8 30 00 00 00       	mov    eax,0x30
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:18
}
   18d16:	5d                   	pop    ebp
   18d17:	c3                   	ret    

00018d18 <getKernelCodeGDTIndex>:
getKernelCodeGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:21

uint16_t HIGH_CODE_SECTION getKernelCodeGDTIndex()
{
   18d18:	55                   	push   ebp
   18d19:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:22
    return 4<<3;
   18d1b:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:23
}
   18d20:	5d                   	pop    ebp
   18d21:	c3                   	ret    

00018d22 <getKernelDataGDTIndex>:
getKernelDataGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:26

uint16_t HIGH_CODE_SECTION getKernelDataGDTIndex()
{
   18d22:	55                   	push   ebp
   18d23:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:27
    return 2<<3;
   18d25:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:28
}
   18d2a:	5d                   	pop    ebp
   18d2b:	c3                   	ret    

00018d2c <getNewGDTEntry>:
getNewGDTEntry():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:31

sGDT* HIGH_CODE_SECTION getNewGDTEntry()
{
   18d2c:	55                   	push   ebp
   18d2d:	89 e5                	mov    ebp,esp
   18d2f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:32
   int cnt=0,slot=0;
   18d32:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18d39:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:33
   uint32_t* ptr=kGDTSlotAvailableInd;
   18d40:	a1 2c 99 12 00       	mov    eax,ds:0x12992c
   18d45:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:34
    slot=bitsScanF(ptr);
   18d48:	83 ec 0c             	sub    esp,0xc
   18d4b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   18d4e:	e8 70 ff ff ff       	call   18cc3 <bitsScanF>
   18d53:	83 c4 10             	add    esp,0x10
   18d56:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:35
   sGDT* gdt=bootGdt+slot; 
   18d59:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18d5e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18d61:	c1 e2 03             	shl    edx,0x3
   18d64:	01 d0                	add    eax,edx
   18d66:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:36
   return gdt;
   18d69:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:37
}
   18d6c:	c9                   	leave  
   18d6d:	c3                   	ret    

00018d6e <gdtEntry>:
gdtEntry():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:41

//Create/modify entries in the protected mode GDT
void HIGH_CODE_SECTION gdtEntry(int entryNo, int base, int limit, char access, char flags,bool inUse)
{
   18d6e:	55                   	push   ebp
   18d6f:	89 e5                	mov    ebp,esp
   18d71:	83 ec 18             	sub    esp,0x18
   18d74:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
   18d77:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
   18d7a:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   18d7d:	88 4d f4             	mov    BYTE PTR [ebp-0xc],cl
   18d80:	88 55 f0             	mov    BYTE PTR [ebp-0x10],dl
   18d83:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:42
    bootGdt[entryNo].base_low        = base & 0xFFFF;
   18d86:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18d8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18d8e:	c1 e2 03             	shl    edx,0x3
   18d91:	01 d0                	add    eax,edx
   18d93:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18d96:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:43
    bootGdt[entryNo].base_middle     = (base >> 16) & 0xFF;
   18d9a:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18d9f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18da2:	c1 e2 03             	shl    edx,0x3
   18da5:	01 d0                	add    eax,edx
   18da7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18daa:	c1 fa 10             	sar    edx,0x10
   18dad:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:44
    bootGdt[entryNo].base_high       = (base >> 24) & 0xFF;
   18db0:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18db5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18db8:	c1 e2 03             	shl    edx,0x3
   18dbb:	01 d0                	add    eax,edx
   18dbd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18dc0:	c1 ea 18             	shr    edx,0x18
   18dc3:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:45
    bootGdt[entryNo].limit_low       = limit & 0xFFFF;
   18dc6:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18dcb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18dce:	c1 e2 03             	shl    edx,0x3
   18dd1:	01 d0                	add    eax,edx
   18dd3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   18dd6:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:46
    bootGdt[entryNo].flags_and_limit = flags | (((limit >> 16) & 0xF));
   18dd9:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18dde:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18de1:	c1 e2 03             	shl    edx,0x3
   18de4:	01 c2                	add    edx,eax
   18de6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18de9:	c1 f8 10             	sar    eax,0x10
   18dec:	83 e0 0f             	and    eax,0xf
   18def:	0a 45 f0             	or     al,BYTE PTR [ebp-0x10]
   18df2:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:47
    bootGdt[entryNo].access          = access;
   18df5:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18dfa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18dfd:	c1 e2 03             	shl    edx,0x3
   18e00:	01 c2                	add    edx,eax
   18e02:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   18e06:	88 42 05             	mov    BYTE PTR [edx+0x5],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:48
    if (inUse)
   18e09:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   18e0d:	74 17                	je     18e26 <gdtEntry+0xb8>
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:49
        bitsReset(kGDTSlotAvailableInd,entryNo);
   18e0f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18e12:	a1 2c 99 12 00       	mov    eax,ds:0x12992c
   18e17:	83 ec 08             	sub    esp,0x8
   18e1a:	52                   	push   edx
   18e1b:	50                   	push   eax
   18e1c:	e8 48 fe ff ff       	call   18c69 <bitsReset>
   18e21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:52
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
}
   18e24:	eb 15                	jmp    18e3b <gdtEntry+0xcd>
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:51
    bootGdt[entryNo].flags_and_limit = flags | (((limit >> 16) & 0xF));
    bootGdt[entryNo].access          = access;
    if (inUse)
        bitsReset(kGDTSlotAvailableInd,entryNo);
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
   18e26:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18e29:	a1 2c 99 12 00       	mov    eax,ds:0x12992c
   18e2e:	83 ec 08             	sub    esp,0x8
   18e31:	52                   	push   edx
   18e32:	50                   	push   eax
   18e33:	e8 04 fe ff ff       	call   18c3c <bitsSet>
   18e38:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:52
}
   18e3b:	90                   	nop
   18e3c:	c9                   	leave  
   18e3d:	c3                   	ret    

00018e3e <gdtEntryRM>:
gdtEntryRM():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:56

//Create entries in the real mode GDT table
void HIGH_CODE_SECTION gdtEntryRM(int entryNo, int base, int limit, char access, char flags)
{
   18e3e:	55                   	push   ebp
   18e3f:	89 e5                	mov    ebp,esp
   18e41:	83 ec 08             	sub    esp,0x8
   18e44:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   18e47:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   18e4a:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   18e4d:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:57
    rmGdt[entryNo].base_low        = base & 0xFFFF;
   18e50:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18e55:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18e58:	c1 e2 03             	shl    edx,0x3
   18e5b:	01 d0                	add    eax,edx
   18e5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18e60:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:58
    rmGdt[entryNo].base_middle     = base >> 16 & 0xFF;
   18e64:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18e69:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18e6c:	c1 e2 03             	shl    edx,0x3
   18e6f:	01 d0                	add    eax,edx
   18e71:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18e74:	c1 fa 10             	sar    edx,0x10
   18e77:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:59
    rmGdt[entryNo].base_high       = base >> 24 & 0xFF;
   18e7a:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18e7f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18e82:	c1 e2 03             	shl    edx,0x3
   18e85:	01 d0                	add    eax,edx
   18e87:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18e8a:	c1 ea 18             	shr    edx,0x18
   18e8d:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:60
    rmGdt[entryNo].limit_low       = limit & 0xFFFF;
   18e90:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18e95:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18e98:	c1 e2 03             	shl    edx,0x3
   18e9b:	01 d0                	add    eax,edx
   18e9d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   18ea0:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:61
    rmGdt[entryNo].flags_and_limit = flags | (limit >> 16 & 0xF);
   18ea3:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18ea8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18eab:	c1 e2 03             	shl    edx,0x3
   18eae:	01 c2                	add    edx,eax
   18eb0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18eb3:	c1 f8 10             	sar    eax,0x10
   18eb6:	83 e0 0f             	and    eax,0xf
   18eb9:	0a 45 f8             	or     al,BYTE PTR [ebp-0x8]
   18ebc:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:62
    rmGdt[entryNo].access          = access | 0x10;
   18ebf:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18ec4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18ec7:	c1 e2 03             	shl    edx,0x3
   18eca:	01 d0                	add    eax,edx
   18ecc:	0f b6 55 fc          	movzx  edx,BYTE PTR [ebp-0x4]
   18ed0:	83 ca 10             	or     edx,0x10
   18ed3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:63
}
   18ed6:	90                   	nop
   18ed7:	c9                   	leave  
   18ed8:	c3                   	ret    
   18ed9:	66 90                	xchg   ax,ax
   18edb:	90                   	nop

00018edc <identifyCPUFeatures>:
identifyCPUFeatures():
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:8

extern cpuid_features_t kCPUFeatures;


void identifyCPUFeatures(cpuid_features_t* cpuFeatures)
{
   18edc:	55                   	push   ebp
   18edd:	89 e5                	mov    ebp,esp
   18edf:	53                   	push   ebx
   18ee0:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:11
    uint32_t eax, ebx, ecx, edx;

    __cpuid(1, eax, ebx, cpuFeatures->cpuid_feature_bits_2.cpuid_feature_bits_ecx_reg, cpuFeatures->cpuid_feature_bits.cpuid_features_edx_reg);
   18ee3:	b8 01 00 00 00       	mov    eax,0x1
   18ee8:	0f a2                	cpuid  
   18eea:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18eed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   18ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18ef3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
   18ef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18ef9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:12
    __cpuid(7, eax, cpuFeatures->cpuid_extended_feature_bits_3.cpuid_extended_feature_bits_ebx_reg , ecx, edx);
   18efb:	b8 07 00 00 00       	mov    eax,0x7
   18f00:	0f a2                	cpuid  
   18f02:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18f08:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
   18f0b:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   18f0e:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:13
}
   18f11:	90                   	nop
   18f12:	83 c4 10             	add    esp,0x10
   18f15:	5b                   	pop    ebx
   18f16:	5d                   	pop    ebp
   18f17:	c3                   	ret    

00018f18 <idt_set_gate>:
idt_set_gate():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:10
//extern void idt_load();//Defined in CPU.h

/* Use this function to set an entry in the IDT. Alot simpler
*  than twiddling with the GDT ;) */
void idt_set_gate(struct idt_entry *idt, unsigned short sel, uint32_t base, unsigned char flags)
{
   18f18:	55                   	push   ebp
   18f19:	89 e5                	mov    ebp,esp
   18f1b:	83 ec 08             	sub    esp,0x8
   18f1e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18f21:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   18f24:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   18f28:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/cpu/idt.c:11
  idt->base_lo = base & 0xFFFF;
   18f2b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18f2e:	89 c2                	mov    edx,eax
   18f30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18f33:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:12
  idt->sel = sel;
   18f36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18f39:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   18f3d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:13
  idt->flags = flags | 0x80;
   18f41:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   18f45:	83 c8 80             	or     eax,0xffffff80
   18f48:	89 c2                	mov    edx,eax
   18f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18f4d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/idt.c:14
  idt->base_hi = (base >> 16) & 0xFFFF;}
   18f50:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18f53:	c1 e8 10             	shr    eax,0x10
   18f56:	89 c2                	mov    edx,eax
   18f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18f5b:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
   18f5f:	90                   	nop
   18f60:	c9                   	leave  
   18f61:	c3                   	ret    

00018f62 <idt_install>:
idt_install():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:18

/* Installs the IDT */
void idt_install(struct idt_ptr* idtp)
{
   18f62:	55                   	push   ebp
   18f63:	89 e5                	mov    ebp,esp
   18f65:	57                   	push   edi
   18f66:	56                   	push   esi
   18f67:	53                   	push   ebx
   18f68:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/cpu/idt.c:20
    /* Sets the special IDT pointer up, just like in 'gdt.c' */
    idtp->limit = (sizeof (struct idt_entry) * 256) - 1;
   18f6b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18f6e:	66 c7 01 ff 07       	mov    WORD PTR [ecx],0x7ff
/home/yogi/src/os/chrisOS/src/cpu/idt.c:21
    idtp->base = (int)IDT_TABLE_ADDRESS;
   18f73:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18f76:	c7 41 02 00 30 16 00 	mov    DWORD PTR [ecx+0x2],0x163000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:29
    //memset(&idt, 0, sizeof(struct idt_entry) * 256);

    /* Add any new ISRs to the IDT here using idt_set_gate */

    /* Points the processor's internal register to the new IDT */
    idt_load((uint64_t)((uint64_t)(idtp->limit)<<32 | idtp->base));
   18f7d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18f80:	0f b7 31             	movzx  esi,WORD PTR [ecx]
   18f83:	0f b7 ce             	movzx  ecx,si
   18f86:	bb 00 00 00 00       	mov    ebx,0x0
   18f8b:	89 cb                	mov    ebx,ecx
   18f8d:	b9 00 00 00 00       	mov    ecx,0x0
   18f92:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
   18f95:	8b 76 02             	mov    esi,DWORD PTR [esi+0x2]
   18f98:	bf 00 00 00 00       	mov    edi,0x0
   18f9d:	89 c8                	mov    eax,ecx
   18f9f:	09 f0                	or     eax,esi
   18fa1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   18fa4:	89 d8                	mov    eax,ebx
   18fa6:	09 f8                	or     eax,edi
   18fa8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   18fab:	83 ec 08             	sub    esp,0x8
   18fae:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   18fb1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   18fb4:	e8 a7 81 fe ff       	call   1160 <idt_load>
   18fb9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:30
}
   18fbc:	90                   	nop
   18fbd:	8d 65 f4             	lea    esp,[ebp-0xc]
   18fc0:	5b                   	pop    ebx
   18fc1:	5e                   	pop    esi
   18fc2:	5f                   	pop    edi
   18fc3:	5d                   	pop    ebp
   18fc4:	c3                   	ret    

00018fc5 <idt_init>:
idt_init():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:33

void idt_init(struct idt_ptr* idtp, int remap_offset)
{
   18fc5:	55                   	push   ebp
   18fc6:	89 e5                	mov    ebp,esp
   18fc8:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/idt.c:36
    //CLR 05/02/2016 - Left off here, ITD stuff isn't working, have an endless loop in cpuFunc.s idt_load
/* setting up the exception handlers and timer, keyboard ISRs */
    struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   18fcb:	c7 45 f0 00 30 16 00 	mov    DWORD PTR [ebp-0x10],0x163000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:37
    idt_set_gate (&idtTable[0], 0x08, (int)&_isr_00_wrapper, ACS_INT); //Move this out of the way of the exception handlers
   18fd2:	b8 20 00 01 00       	mov    eax,0x10020
   18fd7:	68 8e 00 00 00       	push   0x8e
   18fdc:	50                   	push   eax
   18fdd:	6a 08                	push   0x8
   18fdf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18fe2:	e8 31 ff ff ff       	call   18f18 <idt_set_gate>
   18fe7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:38
    idt_set_gate (&idtTable[0+remap_offset], 0x08, (int)&_irq0_handler, ACS_INT); //Move this out of the way of the exception handlers
   18fea:	b9 94 05 01 00       	mov    ecx,0x10594
   18fef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18ff2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18ff9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18ffc:	01 d0                	add    eax,edx
   18ffe:	68 8e 00 00 00       	push   0x8e
   19003:	51                   	push   ecx
   19004:	6a 08                	push   0x8
   19006:	50                   	push   eax
   19007:	e8 0c ff ff ff       	call   18f18 <idt_set_gate>
   1900c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:39
    idt_set_gate (&idtTable[1+remap_offset], 0x08, (int)&_isr_01_wrapper, ACS_INT); //move this out of the way of the exception handlers
   1900f:	b9 db 05 01 00       	mov    ecx,0x105db
   19014:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19017:	83 c0 01             	add    eax,0x1
   1901a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19021:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19024:	01 d0                	add    eax,edx
   19026:	68 8e 00 00 00       	push   0x8e
   1902b:	51                   	push   ecx
   1902c:	6a 08                	push   0x8
   1902e:	50                   	push   eax
   1902f:	e8 e4 fe ff ff       	call   18f18 <idt_set_gate>
   19034:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:40
    idt_set_gate (&idtTable[1], 0x08, (int)&_isr_31_wrapper, ACS_INT); //move this out of the way of the exception handlers
   19037:	ba b2 04 01 00       	mov    edx,0x104b2
   1903c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1903f:	83 c0 08             	add    eax,0x8
   19042:	68 8e 00 00 00       	push   0x8e
   19047:	52                   	push   edx
   19048:	6a 08                	push   0x8
   1904a:	50                   	push   eax
   1904b:	e8 c8 fe ff ff       	call   18f18 <idt_set_gate>
   19050:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:41
    idt_set_gate (&idtTable[2], 0x08, (int)&_isr_02_wrapper, ACS_INT);
   19053:	ba 3c 00 01 00       	mov    edx,0x1003c
   19058:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1905b:	83 c0 10             	add    eax,0x10
   1905e:	68 8e 00 00 00       	push   0x8e
   19063:	52                   	push   edx
   19064:	6a 08                	push   0x8
   19066:	50                   	push   eax
   19067:	e8 ac fe ff ff       	call   18f18 <idt_set_gate>
   1906c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:42
    idt_set_gate (&idtTable[3], 0x08, (int)&_isr_03_wrapper, ACS_INT);
   1906f:	ba 58 00 01 00       	mov    edx,0x10058
   19074:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19077:	83 c0 18             	add    eax,0x18
   1907a:	68 8e 00 00 00       	push   0x8e
   1907f:	52                   	push   edx
   19080:	6a 08                	push   0x8
   19082:	50                   	push   eax
   19083:	e8 90 fe ff ff       	call   18f18 <idt_set_gate>
   19088:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:43
    idt_set_gate (&idtTable[4], 0x08, (int)&_isr_04_wrapper, ACS_INT);
   1908b:	ba 68 00 01 00       	mov    edx,0x10068
   19090:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19093:	83 c0 20             	add    eax,0x20
   19096:	68 8e 00 00 00       	push   0x8e
   1909b:	52                   	push   edx
   1909c:	6a 08                	push   0x8
   1909e:	50                   	push   eax
   1909f:	e8 74 fe ff ff       	call   18f18 <idt_set_gate>
   190a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:44
    idt_set_gate (&idtTable[5], 0x08, (int)&_isr_05_wrapper, ACS_INT);
   190a7:	ba 84 00 01 00       	mov    edx,0x10084
   190ac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   190af:	83 c0 28             	add    eax,0x28
   190b2:	68 8e 00 00 00       	push   0x8e
   190b7:	52                   	push   edx
   190b8:	6a 08                	push   0x8
   190ba:	50                   	push   eax
   190bb:	e8 58 fe ff ff       	call   18f18 <idt_set_gate>
   190c0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:45
    idt_set_gate (&idtTable[0x6], 0x08, (int)&_isr_06_wrapper, ACS_INT);    //Invalid Opcode
   190c3:	ba a0 00 01 00       	mov    edx,0x100a0
   190c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   190cb:	83 c0 30             	add    eax,0x30
   190ce:	68 8e 00 00 00       	push   0x8e
   190d3:	52                   	push   edx
   190d4:	6a 08                	push   0x8
   190d6:	50                   	push   eax
   190d7:	e8 3c fe ff ff       	call   18f18 <idt_set_gate>
   190dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:46
    idt_set_gate (&idtTable[0x7], 0x08, (int)&_isr_07_wrapper, ACS_INT);
   190df:	ba bc 00 01 00       	mov    edx,0x100bc
   190e4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   190e7:	83 c0 38             	add    eax,0x38
   190ea:	68 8e 00 00 00       	push   0x8e
   190ef:	52                   	push   edx
   190f0:	6a 08                	push   0x8
   190f2:	50                   	push   eax
   190f3:	e8 20 fe ff ff       	call   18f18 <idt_set_gate>
   190f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:47
    idt_set_gate (&idtTable[0x8], 0x08, (int)&_isr_08_wrapper, ACS_INT);   //Double Fault
   190fb:	ba d8 00 01 00       	mov    edx,0x100d8
   19100:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19103:	83 c0 40             	add    eax,0x40
   19106:	68 8e 00 00 00       	push   0x8e
   1910b:	52                   	push   edx
   1910c:	6a 08                	push   0x8
   1910e:	50                   	push   eax
   1910f:	e8 04 fe ff ff       	call   18f18 <idt_set_gate>
   19114:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:48
    idt_set_gate (&idtTable[0x9], 0x08, (int)&_isr_09_wrapper, ACS_INT);
   19117:	ba 05 01 01 00       	mov    edx,0x10105
   1911c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1911f:	83 c0 48             	add    eax,0x48
   19122:	68 8e 00 00 00       	push   0x8e
   19127:	52                   	push   edx
   19128:	6a 08                	push   0x8
   1912a:	50                   	push   eax
   1912b:	e8 e8 fd ff ff       	call   18f18 <idt_set_gate>
   19130:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:49
    idt_set_gate (&idtTable[0xa], 0x08, (int)&_isr_10_wrapper, ACS_INT);
   19133:	ba 1e 01 01 00       	mov    edx,0x1011e
   19138:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1913b:	83 c0 50             	add    eax,0x50
   1913e:	68 8e 00 00 00       	push   0x8e
   19143:	52                   	push   edx
   19144:	6a 08                	push   0x8
   19146:	50                   	push   eax
   19147:	e8 cc fd ff ff       	call   18f18 <idt_set_gate>
   1914c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:50
    idt_set_gate (&idtTable[0xb], 0x08, (int)&_isr_11_wrapper, ACS_INT);
   1914f:	ba 37 01 01 00       	mov    edx,0x10137
   19154:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19157:	83 c0 58             	add    eax,0x58
   1915a:	68 8e 00 00 00       	push   0x8e
   1915f:	52                   	push   edx
   19160:	6a 08                	push   0x8
   19162:	50                   	push   eax
   19163:	e8 b0 fd ff ff       	call   18f18 <idt_set_gate>
   19168:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:51
    idt_set_gate (&idtTable[0xc], 0x08, (int)&_isr_12_wrapper, ACS_INT);
   1916b:	ba 50 01 01 00       	mov    edx,0x10150
   19170:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19173:	83 c0 60             	add    eax,0x60
   19176:	68 8e 00 00 00       	push   0x8e
   1917b:	52                   	push   edx
   1917c:	6a 08                	push   0x8
   1917e:	50                   	push   eax
   1917f:	e8 94 fd ff ff       	call   18f18 <idt_set_gate>
   19184:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:52
    idt_set_gate (&idtTable[0xd/*+remap_offset*/], 0x08, (int)&_isr_13_wrapper, ACS_INT);
   19187:	ba 69 01 01 00       	mov    edx,0x10169
   1918c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1918f:	83 c0 68             	add    eax,0x68
   19192:	68 8e 00 00 00       	push   0x8e
   19197:	52                   	push   edx
   19198:	6a 08                	push   0x8
   1919a:	50                   	push   eax
   1919b:	e8 78 fd ff ff       	call   18f18 <idt_set_gate>
   191a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:53
    idt_set_gate (&idtTable[0xe/*+remap_offset*/], 0x08, (int)&_isr_14_wrapper, ACS_INT);   //paging exception
   191a3:	ba 83 01 01 00       	mov    edx,0x10183
   191a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   191ab:	83 c0 70             	add    eax,0x70
   191ae:	68 8e 00 00 00       	push   0x8e
   191b3:	52                   	push   edx
   191b4:	6a 08                	push   0x8
   191b6:	50                   	push   eax
   191b7:	e8 5c fd ff ff       	call   18f18 <idt_set_gate>
   191bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:54
    idt_set_gate (&idtTable[0xf], 0x08, (int)&_isr_15_wrapper, ACS_INT);
   191bf:	ba f2 02 01 00       	mov    edx,0x102f2
   191c4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   191c7:	83 c0 78             	add    eax,0x78
   191ca:	68 8e 00 00 00       	push   0x8e
   191cf:	52                   	push   edx
   191d0:	6a 08                	push   0x8
   191d2:	50                   	push   eax
   191d3:	e8 40 fd ff ff       	call   18f18 <idt_set_gate>
   191d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:55
    idt_set_gate (&idtTable[0x10], 0x08, (int)&_isr_16_wrapper, ACS_INT);
   191db:	ba 0e 03 01 00       	mov    edx,0x1030e
   191e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   191e3:	83 e8 80             	sub    eax,0xffffff80
   191e6:	68 8e 00 00 00       	push   0x8e
   191eb:	52                   	push   edx
   191ec:	6a 08                	push   0x8
   191ee:	50                   	push   eax
   191ef:	e8 24 fd ff ff       	call   18f18 <idt_set_gate>
   191f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:56
    idt_set_gate (&idtTable[0x11], 0x08, (int)&_isr_17_wrapper, ACS_INT);
   191f7:	ba 2a 03 01 00       	mov    edx,0x1032a
   191fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   191ff:	05 88 00 00 00       	add    eax,0x88
   19204:	68 8e 00 00 00       	push   0x8e
   19209:	52                   	push   edx
   1920a:	6a 08                	push   0x8
   1920c:	50                   	push   eax
   1920d:	e8 06 fd ff ff       	call   18f18 <idt_set_gate>
   19212:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:57
    idt_set_gate (&idtTable[0x12], 0x08, (int)&_isr_18_wrapper, ACS_INT);
   19215:	ba 46 03 01 00       	mov    edx,0x10346
   1921a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1921d:	05 90 00 00 00       	add    eax,0x90
   19222:	68 8e 00 00 00       	push   0x8e
   19227:	52                   	push   edx
   19228:	6a 08                	push   0x8
   1922a:	50                   	push   eax
   1922b:	e8 e8 fc ff ff       	call   18f18 <idt_set_gate>
   19230:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:58
    idt_set_gate (&idtTable[0x13], 0x08, (int)&_isr_19_wrapper, ACS_INT);
   19233:	ba 62 03 01 00       	mov    edx,0x10362
   19238:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1923b:	05 98 00 00 00       	add    eax,0x98
   19240:	68 8e 00 00 00       	push   0x8e
   19245:	52                   	push   edx
   19246:	6a 08                	push   0x8
   19248:	50                   	push   eax
   19249:	e8 ca fc ff ff       	call   18f18 <idt_set_gate>
   1924e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:59
    idt_set_gate (&idtTable[0x14+remap_offset], 0x08, (int)&_isr_20_wrapper, ACS_INT);   
   19251:	b9 7e 03 01 00       	mov    ecx,0x1037e
   19256:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19259:	83 c0 14             	add    eax,0x14
   1925c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19263:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19266:	01 d0                	add    eax,edx
   19268:	68 8e 00 00 00       	push   0x8e
   1926d:	51                   	push   ecx
   1926e:	6a 08                	push   0x8
   19270:	50                   	push   eax
   19271:	e8 a2 fc ff ff       	call   18f18 <idt_set_gate>
   19276:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:60
    idt_set_gate (&idtTable[0x15+remap_offset], 0x08, (int)&_isr_21_wrapper, ACS_INT);  //leave this alone because this is the initially remapped keyboard irq
   19279:	b9 9a 03 01 00       	mov    ecx,0x1039a
   1927e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19281:	83 c0 15             	add    eax,0x15
   19284:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   1928b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1928e:	01 d0                	add    eax,edx
   19290:	68 8e 00 00 00       	push   0x8e
   19295:	51                   	push   ecx
   19296:	6a 08                	push   0x8
   19298:	50                   	push   eax
   19299:	e8 7a fc ff ff       	call   18f18 <idt_set_gate>
   1929e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:61
    idt_set_gate (&idtTable[0x16], 0x08, (int)&_isr_22_wrapper, ACS_INT);
   192a1:	ba b6 03 01 00       	mov    edx,0x103b6
   192a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   192a9:	05 b0 00 00 00       	add    eax,0xb0
   192ae:	68 8e 00 00 00       	push   0x8e
   192b3:	52                   	push   edx
   192b4:	6a 08                	push   0x8
   192b6:	50                   	push   eax
   192b7:	e8 5c fc ff ff       	call   18f18 <idt_set_gate>
   192bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:62
    idt_set_gate (&idtTable[0x17], 0x08, (int)&_isr_23_wrapper, ACS_INT);
   192bf:	ba d2 03 01 00       	mov    edx,0x103d2
   192c4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   192c7:	05 b8 00 00 00       	add    eax,0xb8
   192cc:	68 8e 00 00 00       	push   0x8e
   192d1:	52                   	push   edx
   192d2:	6a 08                	push   0x8
   192d4:	50                   	push   eax
   192d5:	e8 3e fc ff ff       	call   18f18 <idt_set_gate>
   192da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:63
    idt_set_gate (&idtTable[0x18], 0x08, (int)&_isr_24_wrapper, ACS_INT);
   192dd:	ba ee 03 01 00       	mov    edx,0x103ee
   192e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   192e5:	05 c0 00 00 00       	add    eax,0xc0
   192ea:	68 8e 00 00 00       	push   0x8e
   192ef:	52                   	push   edx
   192f0:	6a 08                	push   0x8
   192f2:	50                   	push   eax
   192f3:	e8 20 fc ff ff       	call   18f18 <idt_set_gate>
   192f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:64
    idt_set_gate (&idtTable[0x19], 0x08, (int)&_isr_25_wrapper, ACS_INT);
   192fb:	ba 0a 04 01 00       	mov    edx,0x1040a
   19300:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19303:	05 c8 00 00 00       	add    eax,0xc8
   19308:	68 8e 00 00 00       	push   0x8e
   1930d:	52                   	push   edx
   1930e:	6a 08                	push   0x8
   19310:	50                   	push   eax
   19311:	e8 02 fc ff ff       	call   18f18 <idt_set_gate>
   19316:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:65
    idt_set_gate (&idtTable[0x1a], 0x08, (int)&_isr_26_wrapper, ACS_INT);
   19319:	ba 26 04 01 00       	mov    edx,0x10426
   1931e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19321:	05 d0 00 00 00       	add    eax,0xd0
   19326:	68 8e 00 00 00       	push   0x8e
   1932b:	52                   	push   edx
   1932c:	6a 08                	push   0x8
   1932e:	50                   	push   eax
   1932f:	e8 e4 fb ff ff       	call   18f18 <idt_set_gate>
   19334:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:66
    idt_set_gate (&idtTable[0x1b], 0x08, (int)&_isr_27_wrapper, ACS_INT);
   19337:	ba 42 04 01 00       	mov    edx,0x10442
   1933c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1933f:	05 d8 00 00 00       	add    eax,0xd8
   19344:	68 8e 00 00 00       	push   0x8e
   19349:	52                   	push   edx
   1934a:	6a 08                	push   0x8
   1934c:	50                   	push   eax
   1934d:	e8 c6 fb ff ff       	call   18f18 <idt_set_gate>
   19352:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:67
    idt_set_gate (&idtTable[0x1c], 0x08, (int)&_isr_28_wrapper, ACS_INT);
   19355:	ba 5e 04 01 00       	mov    edx,0x1045e
   1935a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1935d:	05 e0 00 00 00       	add    eax,0xe0
   19362:	68 8e 00 00 00       	push   0x8e
   19367:	52                   	push   edx
   19368:	6a 08                	push   0x8
   1936a:	50                   	push   eax
   1936b:	e8 a8 fb ff ff       	call   18f18 <idt_set_gate>
   19370:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:68
    idt_set_gate (&idtTable[0x1d], 0x08, (int)&_isr_29_wrapper, ACS_INT);
   19373:	ba 7a 04 01 00       	mov    edx,0x1047a
   19378:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1937b:	05 e8 00 00 00       	add    eax,0xe8
   19380:	68 8e 00 00 00       	push   0x8e
   19385:	52                   	push   edx
   19386:	6a 08                	push   0x8
   19388:	50                   	push   eax
   19389:	e8 8a fb ff ff       	call   18f18 <idt_set_gate>
   1938e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:69
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
   19391:	ba 96 04 01 00       	mov    edx,0x10496
   19396:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19399:	05 f0 00 00 00       	add    eax,0xf0
   1939e:	68 8e 00 00 00       	push   0x8e
   193a3:	52                   	push   edx
   193a4:	6a 08                	push   0x8
   193a6:	50                   	push   eax
   193a7:	e8 6c fb ff ff       	call   18f18 <idt_set_gate>
   193ac:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:70
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
   193af:	ba b2 04 01 00       	mov    edx,0x104b2
   193b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   193b7:	05 f8 00 00 00       	add    eax,0xf8
   193bc:	68 8e 00 00 00       	push   0x8e
   193c1:	52                   	push   edx
   193c2:	6a 08                	push   0x8
   193c4:	50                   	push   eax
   193c5:	e8 4e fb ff ff       	call   18f18 <idt_set_gate>
   193ca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:71
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   193cd:	b9 78 05 01 00       	mov    ecx,0x10578
   193d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   193d5:	83 c0 20             	add    eax,0x20
   193d8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   193df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   193e2:	01 d0                	add    eax,edx
   193e4:	68 8e 00 00 00       	push   0x8e
   193e9:	51                   	push   ecx
   193ea:	6a 08                	push   0x8
   193ec:	50                   	push   eax
   193ed:	e8 26 fb ff ff       	call   18f18 <idt_set_gate>
   193f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:72
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   193f5:	b9 78 05 01 00       	mov    ecx,0x10578
   193fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   193fd:	83 c0 21             	add    eax,0x21
   19400:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19407:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1940a:	01 d0                	add    eax,edx
   1940c:	68 8e 00 00 00       	push   0x8e
   19411:	51                   	push   ecx
   19412:	6a 08                	push   0x8
   19414:	50                   	push   eax
   19415:	e8 fe fa ff ff       	call   18f18 <idt_set_gate>
   1941a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74

    for (int cnt=0x22;cnt<0xff;cnt++)
   1941d:	c7 45 f4 22 00 00 00 	mov    DWORD PTR [ebp-0xc],0x22
   19424:	eb 29                	jmp    1944f <idt_init+0x48a>
/home/yogi/src/os/chrisOS/src/cpu/idt.c:75 (discriminator 3)
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
   19426:	b9 78 05 01 00       	mov    ecx,0x10578
   1942b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1942e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19435:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19438:	01 d0                	add    eax,edx
   1943a:	68 8e 00 00 00       	push   0x8e
   1943f:	51                   	push   ecx
   19440:	6a 08                	push   0x8
   19442:	50                   	push   eax
   19443:	e8 d0 fa ff ff       	call   18f18 <idt_set_gate>
   19448:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74 (discriminator 3)
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //

    for (int cnt=0x22;cnt<0xff;cnt++)
   1944b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74 (discriminator 1)
   1944f:	81 7d f4 fe 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xfe
   19456:	7e ce                	jle    19426 <idt_init+0x461>
/home/yogi/src/os/chrisOS/src/cpu/idt.c:76
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
    idt_install(idtp);
   19458:	83 ec 0c             	sub    esp,0xc
   1945b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1945e:	e8 ff fa ff ff       	call   18f62 <idt_install>
   19463:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:78

}
   19466:	90                   	nop
   19467:	c9                   	leave  
   19468:	c3                   	ret    

00019469 <idt_get_gate>:
idt_get_gate():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:82

//void idt_get_gate(struct idt_entry* idtTable, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned *char flags)
void idt_get_gate(struct idt_entry *idt, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned char *flags)
{
   19469:	55                   	push   ebp
   1946a:	89 e5                	mov    ebp,esp
   1946c:	83 ec 04             	sub    esp,0x4
   1946f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19472:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/cpu/idt.c:83
    *sel = idt[idtIndex].sel;
   19475:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   19479:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19483:	01 d0                	add    eax,edx
   19485:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
   19489:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1948c:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:84
    *base = (idt[idtIndex].base_hi << 16) | idt[idtIndex].base_lo;
   1948f:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   19493:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   1949a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1949d:	01 d0                	add    eax,edx
   1949f:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   194a3:	0f b7 c0             	movzx  eax,ax
   194a6:	c1 e0 10             	shl    eax,0x10
   194a9:	89 c2                	mov    edx,eax
   194ab:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   194af:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   194b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   194b9:	01 c8                	add    eax,ecx
   194bb:	0f b7 00             	movzx  eax,WORD PTR [eax]
   194be:	0f b7 c0             	movzx  eax,ax
   194c1:	09 d0                	or     eax,edx
   194c3:	89 c2                	mov    edx,eax
   194c5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   194c8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:85
    *flags = idt[idtIndex].flags;
   194ca:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   194ce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   194d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   194d8:	01 d0                	add    eax,edx
   194da:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
   194de:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   194e1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/idt.c:86
}
   194e3:	90                   	nop
   194e4:	c9                   	leave  
   194e5:	c3                   	ret    

000194e6 <idt_get_gate_address>:
idt_get_gate_address():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:89

uintptr_t idt_get_gate_address(int vector)
{
   194e6:	55                   	push   ebp
   194e7:	89 e5                	mov    ebp,esp
   194e9:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:90
   struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   194ec:	c7 45 fc 00 30 16 00 	mov    DWORD PTR [ebp-0x4],0x163000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:94
    unsigned short sel;
    uint32_t base;
    unsigned char flags;
    idt_get_gate(idtTable,vector,&sel,&base,&flags);
   194f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   194f6:	0f b6 c0             	movzx  eax,al
   194f9:	8d 55 f3             	lea    edx,[ebp-0xd]
   194fc:	52                   	push   edx
   194fd:	8d 55 f4             	lea    edx,[ebp-0xc]
   19500:	52                   	push   edx
   19501:	8d 55 fa             	lea    edx,[ebp-0x6]
   19504:	52                   	push   edx
   19505:	50                   	push   eax
   19506:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   19509:	e8 5b ff ff ff       	call   19469 <idt_get_gate>
   1950e:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/idt.c:95
    return base;
   19511:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/cpu/idt.c:96
   19514:	c9                   	leave  
   19515:	c3                   	ret    
   19516:	66 90                	xchg   ax,ax

00019518 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   19518:	55                   	push   ebp
   19519:	89 e5                	mov    ebp,esp
   1951b:	83 ec 08             	sub    esp,0x8
   1951e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19521:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19524:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   19528:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   1952b:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   1952f:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   19533:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   19534:	90                   	nop
   19535:	c9                   	leave  
   19536:	c3                   	ret    

00019537 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   19537:	55                   	push   ebp
   19538:	89 e5                	mov    ebp,esp
   1953a:	83 ec 14             	sub    esp,0x14
   1953d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19540:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   19544:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   19548:	89 c2                	mov    edx,eax
   1954a:	ec                   	in     al,dx
   1954b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   1954e:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   19552:	c9                   	leave  
   19553:	c3                   	ret    

00019554 <irq0_handler>:
irq0_handler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:42
unsigned volatile char kKeyStatus[11];
extern struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf);
extern void kpagingUpdatePresentFlagA(uint32_t address, bool present);

void irq0_handler()
{
   19554:	55                   	push   ebp
   19555:	89 e5                	mov    ebp,esp
   19557:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:47
#ifndef DEBUG_NONE
static char currTime[50];
static struct tm theDateTime;
#endif
        *kTicksSinceStart=*kTicksSinceStart+1;
   1955a:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   1955f:	8b 15 a4 97 12 00    	mov    edx,DWORD PTR ds:0x1297a4
   19565:	8b 12                	mov    edx,DWORD PTR [edx]
   19567:	83 c2 01             	add    edx,0x1
   1956a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:48
        if (*kTicksSinceStart % kTicksPerSecond == 0)
   1956c:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   19571:	8b 00                	mov    eax,DWORD PTR [eax]
   19573:	8b 15 c0 97 12 00    	mov    edx,DWORD PTR ds:0x1297c0
   19579:	89 d1                	mov    ecx,edx
   1957b:	ba 00 00 00 00       	mov    edx,0x0
   19580:	f7 f1                	div    ecx
   19582:	89 d0                	mov    eax,edx
   19584:	85 c0                	test   eax,eax
   19586:	75 0d                	jne    19595 <irq0_handler+0x41>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:49
            kSystemCurrentTime++;
   19588:	a1 cc 97 12 00       	mov    eax,ds:0x1297cc
   1958d:	83 c0 01             	add    eax,0x1
   19590:	a3 cc 97 12 00       	mov    ds:0x1297cc,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:51
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_EXPANDED_TICK) == DEBUG_EXPANDED_TICK)
   19595:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1959a:	83 e0 04             	and    eax,0x4
   1959d:	85 c0                	test   eax,eax
   1959f:	0f 84 83 00 00 00    	je     19628 <irq0_handler+0xd4>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:53
        {
            cursorSavePosition();
   195a5:	e8 d9 e9 ff ff       	call   17f83 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:54
            gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   195aa:	83 ec 08             	sub    esp,0x8
   195ad:	68 e0 a4 09 00       	push   0x9a4e0
   195b2:	68 cc 97 12 00       	push   0x1297cc
   195b7:	e8 49 e9 00 00       	call   27f05 <gmtime_r>
   195bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:55
            strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   195bf:	68 e0 a4 09 00       	push   0x9a4e0
   195c4:	68 20 30 08 00       	push   0x83020
   195c9:	6a 32                	push   0x32
   195cb:	68 20 a5 09 00       	push   0x9a520
   195d0:	e8 e3 70 ff ff       	call   106b8 <strftime>
   195d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:56
            cursorMoveTo(0,24);
   195d8:	83 ec 08             	sub    esp,0x8
   195db:	6a 18                	push   0x18
   195dd:	6a 00                	push   0x0
   195df:	e8 53 ed ff ff       	call   18337 <cursorMoveTo>
   195e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:57
            printk("The time is currently %s", &currTime);
   195e7:	83 ec 08             	sub    esp,0x8
   195ea:	68 20 a5 09 00       	push   0x9a520
   195ef:	68 32 30 08 00       	push   0x83032
   195f4:	e8 aa e2 00 00       	call   278a3 <printk>
   195f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:58
            cursorMoveTo(65,24);
   195fc:	83 ec 08             	sub    esp,0x8
   195ff:	6a 18                	push   0x18
   19601:	6a 41                	push   0x41
   19603:	e8 2f ed ff ff       	call   18337 <cursorMoveTo>
   19608:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:59
            printk("ticks=%d", *kTicksSinceStart);
   1960b:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   19610:	8b 00                	mov    eax,DWORD PTR [eax]
   19612:	83 ec 08             	sub    esp,0x8
   19615:	50                   	push   eax
   19616:	68 4b 30 08 00       	push   0x8304b
   1961b:	e8 83 e2 00 00       	call   278a3 <printk>
   19620:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:60
            cursorRestorePosition();
   19623:	e8 a7 e9 ff ff       	call   17fcf <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:64
        }
#endif
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_TICK) == DEBUG_TICK)
   19628:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1962d:	83 e0 02             	and    eax,0x2
   19630:	85 c0                	test   eax,eax
   19632:	74 68                	je     1969c <irq0_handler+0x148>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:66
        {
            cursorSavePosition();
   19634:	e8 4a e9 ff ff       	call   17f83 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:67
            cursorMoveTo(55,SYS_VGA_HEIGHT-1);
   19639:	83 ec 08             	sub    esp,0x8
   1963c:	6a 31                	push   0x31
   1963e:	6a 37                	push   0x37
   19640:	e8 f2 ec ff ff       	call   18337 <cursorMoveTo>
   19645:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:70
            //printf("0x%04X:0x%08X 0x%08X",exceptionCS, exceptionEIP, exceptionFlags);
            //kTermMoveTo(65,0);
            printk("%u",*kTicksSinceStart);
   19648:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   1964d:	8b 00                	mov    eax,DWORD PTR [eax]
   1964f:	83 ec 08             	sub    esp,0x8
   19652:	50                   	push   eax
   19653:	68 54 30 08 00       	push   0x83054
   19658:	e8 46 e2 00 00       	call   278a3 <printk>
   1965d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71
            printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   19660:	8b 15 38 97 12 00    	mov    edx,DWORD PTR ds:0x129738
   19666:	a1 3c 97 12 00       	mov    eax,ds:0x12973c
   1966b:	8b 0d 30 97 12 00    	mov    ecx,DWORD PTR ds:0x129730
   19671:	81 e1 00 02 00 00    	and    ecx,0x200
   19677:	85 c9                	test   ecx,ecx
   19679:	74 07                	je     19682 <irq0_handler+0x12e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71 (discriminator 1)
   1967b:	b9 49 00 00 00       	mov    ecx,0x49
   19680:	eb 05                	jmp    19687 <irq0_handler+0x133>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71 (discriminator 2)
   19682:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71 (discriminator 4)
   19687:	52                   	push   edx
   19688:	50                   	push   eax
   19689:	51                   	push   ecx
   1968a:	68 57 30 08 00       	push   0x83057
   1968f:	e8 0f e2 00 00       	call   278a3 <printk>
   19694:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:76 (discriminator 4)
            //gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
            //strftime((char*)&currTime, 50, "%H:%M:%S", &theDateTime);
            //kTermMoveTo(65,0);
            //printf("%s",currTime);
            cursorRestorePosition();
   19697:	e8 33 e9 ff ff       	call   17fcf <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:79
        }
#endif
}
   1969c:	90                   	nop
   1969d:	c9                   	leave  
   1969e:	c3                   	ret    

0001969f <kbd_handler>:
kbd_handler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:82

void kbd_handler()
{
   1969f:	55                   	push   ebp
   196a0:	89 e5                	mov    ebp,esp
   196a2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:83
    unsigned char lKeyControlVal=0;
   196a5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:84
    unsigned char rawKey=0;
   196a9:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:85
    unsigned char translatedKeypress=0;
   196ad:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:89
    static char currTime[50];
    static struct tm theDateTime;
   
    rawKey = inb(KEYB_DATA_PORT);
   196b1:	6a 60                	push   0x60
   196b3:	e8 7f fe ff ff       	call   19537 <inb>
   196b8:	83 c4 04             	add    esp,0x4
   196bb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:90
    kKeyChar = rawKey;//& 0x80;
   196be:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   196c2:	a2 c0 a4 09 00       	mov    ds:0x9a4c0,al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:92

    __asm__("cli\n");
   196c7:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:94
    
    switch(rawKey)  
   196c8:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   196cc:	3d 9d 00 00 00       	cmp    eax,0x9d
   196d1:	74 53                	je     19726 <kbd_handler+0x87>
   196d3:	3d 9d 00 00 00       	cmp    eax,0x9d
   196d8:	7f 11                	jg     196eb <kbd_handler+0x4c>
   196da:	83 f8 2a             	cmp    eax,0x2a
   196dd:	74 23                	je     19702 <kbd_handler+0x63>
   196df:	83 f8 38             	cmp    eax,0x38
   196e2:	74 4e                	je     19732 <kbd_handler+0x93>
   196e4:	83 f8 1d             	cmp    eax,0x1d
   196e7:	74 31                	je     1971a <kbd_handler+0x7b>
   196e9:	eb 75                	jmp    19760 <kbd_handler+0xc1>
   196eb:	3d b8 00 00 00       	cmp    eax,0xb8
   196f0:	74 4c                	je     1973e <kbd_handler+0x9f>
   196f2:	3d ba 00 00 00       	cmp    eax,0xba
   196f7:	74 51                	je     1974a <kbd_handler+0xab>
   196f9:	3d aa 00 00 00       	cmp    eax,0xaa
   196fe:	74 0e                	je     1970e <kbd_handler+0x6f>
   19700:	eb 5e                	jmp    19760 <kbd_handler+0xc1>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:96
    {
        case KEY_SHIFT_DN: kKeyStatus[INDEX_SHIFT]=1;break;
   19702:	c6 05 64 65 09 00 01 	mov    BYTE PTR ds:0x96564,0x1
   19709:	e9 10 03 00 00       	jmp    19a1e <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:97
        case KEY_SHIFT_UP: kKeyStatus[INDEX_SHIFT]=0;break;
   1970e:	c6 05 64 65 09 00 00 	mov    BYTE PTR ds:0x96564,0x0
   19715:	e9 04 03 00 00       	jmp    19a1e <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:98
        case KEY_CTRL_DN: kKeyStatus[INDEX_CTRL]=1;break;
   1971a:	c6 05 65 65 09 00 01 	mov    BYTE PTR ds:0x96565,0x1
   19721:	e9 f8 02 00 00       	jmp    19a1e <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:99
        case KEY_CTRL_UP: kKeyStatus[INDEX_CTRL]=0;break;
   19726:	c6 05 65 65 09 00 00 	mov    BYTE PTR ds:0x96565,0x0
   1972d:	e9 ec 02 00 00       	jmp    19a1e <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:100
        case KEY_ALT_DN: kKeyStatus[INDEX_ALT]=1;break;
   19732:	c6 05 66 65 09 00 01 	mov    BYTE PTR ds:0x96566,0x1
   19739:	e9 e0 02 00 00       	jmp    19a1e <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:101
        case KEY_ALT_UP: kKeyStatus[INDEX_ALT]=0;break;
   1973e:	c6 05 66 65 09 00 00 	mov    BYTE PTR ds:0x96566,0x0
   19745:	e9 d4 02 00 00       	jmp    19a1e <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:102
        case KEY_CAPSLOCK_UP: kKeyStatus[INDEX_CAPSLOCK]=!kKeyStatus[INDEX_CAPSLOCK];break;
   1974a:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   19751:	84 c0                	test   al,al
   19753:	0f 94 c0             	sete   al
   19756:	a2 67 65 09 00       	mov    ds:0x96567,al
   1975b:	e9 be 02 00 00       	jmp    19a1e <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110
//        case MAKE_UP: kKeyStatus[INDEX_UP]=0;break;
//        case MAKE_DOWN: kKeyStatus[INDEX_DOWN]=0;break;
       default:
//printk("%02X",rawKey);
           //changed from if rawkey & 0x80, so that keydown triggers the key being input
           if (rawKey==BREAK_RIGHT || rawKey==BREAK_LEFT || rawKey==BREAK_UP || rawKey==BREAK_DOWN)
   19760:	80 7d f5 cd          	cmp    BYTE PTR [ebp-0xb],0xcd
   19764:	74 12                	je     19778 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 1)
   19766:	80 7d f5 cb          	cmp    BYTE PTR [ebp-0xb],0xcb
   1976a:	74 0c                	je     19778 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 2)
   1976c:	80 7d f5 c8          	cmp    BYTE PTR [ebp-0xb],0xc8
   19770:	74 06                	je     19778 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 3)
   19772:	80 7d f5 d0          	cmp    BYTE PTR [ebp-0xb],0xd0
   19776:	75 2f                	jne    197a7 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:111
               if (kKbdBuffCurrTop<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   19778:	a1 60 99 12 00       	mov    eax,ds:0x129960
   1977d:	3d 2f 25 16 00       	cmp    eax,0x16252f
   19782:	77 23                	ja     197a7 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:111 (discriminator 1)
   19784:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   1978b:	84 c0                	test   al,al
   1978d:	75 18                	jne    197a7 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:114
               //CLR 01/10/2017: Increment the buffer pointer first
               {    
                   kKbdBuffCurrTop++;
   1978f:	a1 60 99 12 00       	mov    eax,ds:0x129960
   19794:	83 c0 01             	add    eax,0x1
   19797:	a3 60 99 12 00       	mov    ds:0x129960,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:115
                   *kKbdBuffCurrTop=rawKey;
   1979c:	a1 60 99 12 00       	mov    eax,ds:0x129960
   197a1:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
   197a5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:117
               }
           if (!(rawKey & 0x80))
   197a7:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   197ab:	84 c0                	test   al,al
   197ad:	0f 88 6a 02 00 00    	js     19a1d <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:121
           {
                //rawKey &= 0x7f;
               //printk("%02X",rawKey); 48=up, 50=down
                 if (kKeyStatus[INDEX_SHIFT] || kKeyStatus[INDEX_CAPSLOCK])
   197b3:	0f b6 05 64 65 09 00 	movzx  eax,BYTE PTR ds:0x96564
   197ba:	84 c0                	test   al,al
   197bc:	75 0b                	jne    197c9 <kbd_handler+0x12a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:121 (discriminator 1)
   197be:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   197c5:	84 c0                	test   al,al
   197c7:	74 10                	je     197d9 <kbd_handler+0x13a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:123
                 {
                     translatedKeypress=keyboard_map_up[rawKey];
   197c9:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   197cd:	0f b6 80 a0 2f 08 00 	movzx  eax,BYTE PTR [eax+0x82fa0]
   197d4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
   197d7:	eb 0e                	jmp    197e7 <kbd_handler+0x148>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:126
                 }
                 else
                     translatedKeypress=keyboard_map[rawKey];
   197d9:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   197dd:	0f b6 80 20 2f 08 00 	movzx  eax,BYTE PTR [eax+0x82f20]
   197e4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:133
//                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
//                 {
//                      printf("%u, %u, %c\n",kKeyChar, rawKey, translatedKeypress);
//                 }
#endif
                if (kKeyStatus[INDEX_CTRL])
   197e7:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   197ee:	84 c0                	test   al,al
   197f0:	74 14                	je     19806 <kbd_handler+0x167>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:135
                {
                    printk("^");
   197f2:	83 ec 0c             	sub    esp,0xc
   197f5:	68 65 30 08 00       	push   0x83065
   197fa:	e8 a4 e0 00 00       	call   278a3 <printk>
   197ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:136
                    translatedKeypress-=32;
   19802:	80 6d f7 20          	sub    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:138
                }
            if (kKbdBuffCurrTop<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   19806:	a1 60 99 12 00       	mov    eax,ds:0x129960
   1980b:	3d 2f 25 16 00       	cmp    eax,0x16252f
   19810:	77 78                	ja     1988a <kbd_handler+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:138 (discriminator 1)
   19812:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   19819:	84 c0                	test   al,al
   1981b:	75 6d                	jne    1988a <kbd_handler+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:142
            {
                //CLR 01/10/2017: Increment the buffer pointer first
                {   
                    kKbdBuffCurrTop++;
   1981d:	a1 60 99 12 00       	mov    eax,ds:0x129960
   19822:	83 c0 01             	add    eax,0x1
   19825:	a3 60 99 12 00       	mov    ds:0x129960,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:143
                    *kKbdBuffCurrTop=translatedKeypress;
   1982a:	a1 60 99 12 00       	mov    eax,ds:0x129960
   1982f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   19833:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:146
                }
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   19835:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1983a:	83 e0 10             	and    eax,0x10
   1983d:	85 c0                	test   eax,eax
   1983f:	74 1c                	je     1985d <kbd_handler+0x1be>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:147
                    printk("kbd_handler: %c-(%08X)\n",translatedKeypress, kKbdBuffCurrTop);
   19841:	8b 15 60 99 12 00    	mov    edx,DWORD PTR ds:0x129960
   19847:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1984b:	83 ec 04             	sub    esp,0x4
   1984e:	52                   	push   edx
   1984f:	50                   	push   eax
   19850:	68 67 30 08 00       	push   0x83067
   19855:	e8 49 e0 00 00       	call   278a3 <printk>
   1985a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:149
#endif
                cursorSavePosition();
   1985d:	e8 21 e7 ff ff       	call   17f83 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:150
                cursorMoveTo(78,0);
   19862:	83 ec 08             	sub    esp,0x8
   19865:	6a 00                	push   0x0
   19867:	6a 4e                	push   0x4e
   19869:	e8 c9 ea ff ff       	call   18337 <cursorMoveTo>
   1986e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:151
                printk("%c",'k');
   19871:	83 ec 08             	sub    esp,0x8
   19874:	6a 6b                	push   0x6b
   19876:	68 7f 30 08 00       	push   0x8307f
   1987b:	e8 23 e0 00 00       	call   278a3 <printk>
   19880:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:152
                cursorRestorePosition();
   19883:	e8 47 e7 ff ff       	call   17fcf <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:139
                {
                    printk("^");
                    translatedKeypress-=32;
                }
            if (kKbdBuffCurrTop<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
            {
   19888:	eb 4d                	jmp    198d7 <kbd_handler+0x238>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:157
                cursorRestorePosition();
            }
            else
            {
#ifndef DEBUG_NONE
                if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   1988a:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1988f:	83 e0 10             	and    eax,0x10
   19892:	85 c0                	test   eax,eax
   19894:	74 16                	je     198ac <kbd_handler+0x20d>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:158
                      printk("noRoomForKey: %c\n",kKbdBuffCurrTop);
   19896:	a1 60 99 12 00       	mov    eax,ds:0x129960
   1989b:	83 ec 08             	sub    esp,0x8
   1989e:	50                   	push   eax
   1989f:	68 82 30 08 00       	push   0x83082
   198a4:	e8 fa df 00 00       	call   278a3 <printk>
   198a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:160
#endif
                cursorSavePosition();
   198ac:	e8 d2 e6 ff ff       	call   17f83 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:161
                cursorMoveTo(78,0);
   198b1:	83 ec 08             	sub    esp,0x8
   198b4:	6a 00                	push   0x0
   198b6:	6a 4e                	push   0x4e
   198b8:	e8 7a ea ff ff       	call   18337 <cursorMoveTo>
   198bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:162
                printk("%c",'K');
   198c0:	83 ec 08             	sub    esp,0x8
   198c3:	6a 4b                	push   0x4b
   198c5:	68 7f 30 08 00       	push   0x8307f
   198ca:	e8 d4 df 00 00       	call   278a3 <printk>
   198cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:163
                cursorRestorePosition();
   198d2:	e8 f8 e6 ff ff       	call   17fcf <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:166
            }
                 //Debug
                 if (kKeyStatus[INDEX_ALT] && translatedKeypress==0x6A)
   198d7:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   198de:	84 c0                	test   al,al
   198e0:	74 07                	je     198e9 <kbd_handler+0x24a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:166 (discriminator 1)
   198e2:	80 7d f7 6a          	cmp    BYTE PTR [ebp-0x9],0x6a
   198e6:	75 01                	jne    198e9 <kbd_handler+0x24a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:168
                 {
                     __asm("int 0x3");
   198e8:	cc                   	int3   
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:170
                 }
            if (kKeyStatus[INDEX_ALT] && kKeyStatus[INDEX_CTRL] && translatedKeypress==0xE0)
   198e9:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   198f0:	84 c0                	test   al,al
   198f2:	74 22                	je     19916 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:170 (discriminator 1)
   198f4:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   198fb:	84 c0                	test   al,al
   198fd:	74 17                	je     19916 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:170 (discriminator 2)
   198ff:	80 7d f7 e0          	cmp    BYTE PTR [ebp-0x9],0xe0
   19903:	75 11                	jne    19916 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:172
            {
                translatedKeypress=0;
   19905:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:173
                reboot(false);
   19909:	83 ec 0c             	sub    esp,0xc
   1990c:	6a 00                	push   0x0
   1990e:	e8 3d c3 00 00       	call   25c50 <reboot>
   19913:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:175
            }
            if (kKeyStatus[INDEX_ALT])
   19916:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   1991d:	84 c0                	test   al,al
   1991f:	0f 84 f8 00 00 00    	je     19a1d <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:177
            {
                if (translatedKeypress=='c')
   19925:	80 7d f7 63          	cmp    BYTE PTR [ebp-0x9],0x63
   19929:	75 4f                	jne    1997a <kbd_handler+0x2db>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:179
                {
                    printk("%u",*kTicksSinceStart);
   1992b:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   19930:	8b 00                	mov    eax,DWORD PTR [eax]
   19932:	83 ec 08             	sub    esp,0x8
   19935:	50                   	push   eax
   19936:	68 54 30 08 00       	push   0x83054
   1993b:	e8 63 df 00 00       	call   278a3 <printk>
   19940:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:180
                    printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   19943:	8b 15 38 97 12 00    	mov    edx,DWORD PTR ds:0x129738
   19949:	a1 3c 97 12 00       	mov    eax,ds:0x12973c
   1994e:	8b 0d 30 97 12 00    	mov    ecx,DWORD PTR ds:0x129730
   19954:	81 e1 00 02 00 00    	and    ecx,0x200
   1995a:	85 c9                	test   ecx,ecx
   1995c:	74 07                	je     19965 <kbd_handler+0x2c6>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:180 (discriminator 1)
   1995e:	b9 49 00 00 00       	mov    ecx,0x49
   19963:	eb 05                	jmp    1996a <kbd_handler+0x2cb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:180 (discriminator 2)
   19965:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:180 (discriminator 4)
   1996a:	52                   	push   edx
   1996b:	50                   	push   eax
   1996c:	51                   	push   ecx
   1996d:	68 57 30 08 00       	push   0x83057
   19972:	e8 2c df 00 00       	call   278a3 <printk>
   19977:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:182
                }
                if (translatedKeypress=='b')
   1997a:	80 7d f7 62          	cmp    BYTE PTR [ebp-0x9],0x62
   1997e:	0f 85 83 00 00 00    	jne    19a07 <kbd_handler+0x368>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:184
                {
                    cursorSavePosition();
   19984:	e8 fa e5 ff ff       	call   17f83 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:185
                    gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   19989:	83 ec 08             	sub    esp,0x8
   1998c:	68 60 a5 09 00       	push   0x9a560
   19991:	68 cc 97 12 00       	push   0x1297cc
   19996:	e8 6a e5 00 00       	call   27f05 <gmtime_r>
   1999b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:186
                    strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   1999e:	68 60 a5 09 00       	push   0x9a560
   199a3:	68 20 30 08 00       	push   0x83020
   199a8:	6a 32                	push   0x32
   199aa:	68 a0 a5 09 00       	push   0x9a5a0
   199af:	e8 04 6d ff ff       	call   106b8 <strftime>
   199b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:187
                    cursorMoveTo(0,SYS_VGA_HEIGHT-1);
   199b7:	83 ec 08             	sub    esp,0x8
   199ba:	6a 31                	push   0x31
   199bc:	6a 00                	push   0x0
   199be:	e8 74 e9 ff ff       	call   18337 <cursorMoveTo>
   199c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:188
                    printk("The time is currently %s", &currTime);
   199c6:	83 ec 08             	sub    esp,0x8
   199c9:	68 a0 a5 09 00       	push   0x9a5a0
   199ce:	68 32 30 08 00       	push   0x83032
   199d3:	e8 cb de 00 00       	call   278a3 <printk>
   199d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:189
                    cursorMoveTo(65,SYS_VGA_HEIGHT-1);
   199db:	83 ec 08             	sub    esp,0x8
   199de:	6a 31                	push   0x31
   199e0:	6a 41                	push   0x41
   199e2:	e8 50 e9 ff ff       	call   18337 <cursorMoveTo>
   199e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:190
                    printk("ticks=%d", *kTicksSinceStart);
   199ea:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   199ef:	8b 00                	mov    eax,DWORD PTR [eax]
   199f1:	83 ec 08             	sub    esp,0x8
   199f4:	50                   	push   eax
   199f5:	68 4b 30 08 00       	push   0x8304b
   199fa:	e8 a4 de 00 00       	call   278a3 <printk>
   199ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:191
                    cursorRestorePosition();
   19a02:	e8 c8 e5 ff ff       	call   17fcf <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:193
                }
                if (translatedKeypress=='d')
   19a07:	80 7d f7 64          	cmp    BYTE PTR [ebp-0x9],0x64
   19a0b:	75 05                	jne    19a12 <kbd_handler+0x373>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:195
                {
                    printDumpedRegs();
   19a0d:	e8 2b bf 00 00       	call   2593d <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:197
                }
                if (translatedKeypress=='e')
   19a12:	80 7d f7 65          	cmp    BYTE PTR [ebp-0x9],0x65
   19a16:	75 05                	jne    19a1d <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:199
                {
                    dumpKernelAddresses();
   19a18:	e8 af c2 00 00       	call   25ccc <dumpKernelAddresses>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:203
                }
            }
        }
        break;
   19a1d:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:206
    }
        
    lKeyControlVal = inb(KEYB_CTRL_PORT);
   19a1e:	83 ec 0c             	sub    esp,0xc
   19a21:	6a 61                	push   0x61
   19a23:	e8 0f fb ff ff       	call   19537 <inb>
   19a28:	83 c4 10             	add    esp,0x10
   19a2b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:207
    lKeyControlVal |= 0x82;
   19a2e:	80 4d f6 82          	or     BYTE PTR [ebp-0xa],0x82
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:208
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   19a32:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   19a36:	83 ec 08             	sub    esp,0x8
   19a39:	50                   	push   eax
   19a3a:	6a 61                	push   0x61
   19a3c:	e8 d7 fa ff ff       	call   19518 <outb>
   19a41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:209
    lKeyControlVal &= 0x7f;
   19a44:	80 65 f6 7f          	and    BYTE PTR [ebp-0xa],0x7f
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:210
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   19a48:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   19a4c:	83 ec 08             	sub    esp,0x8
   19a4f:	50                   	push   eax
   19a50:	6a 61                	push   0x61
   19a52:	e8 c1 fa ff ff       	call   19518 <outb>
   19a57:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:211
    return;
   19a5a:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:212
}
   19a5b:	c9                   	leave  
   19a5c:	c3                   	ret    

00019a5d <pagingExceptionHandler>:
pagingExceptionHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:215

void pagingExceptionHandler()
{
   19a5d:	55                   	push   ebp
   19a5e:	89 e5                	mov    ebp,esp
   19a60:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:216
    uint32_t lPDEValue=0;
   19a63:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:217
    uint32_t lPTEValue=0;
   19a6a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:218
    uint32_t lPDEAddress=0, lPTEAddress=0;
   19a71:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   19a78:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:219
    uint32_t lOldDebugLevel=0;
   19a7f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:221

    if (exceptionNumber==0x0e)
   19a86:	0f b7 05 e4 96 12 00 	movzx  eax,WORD PTR ds:0x1296e4
   19a8d:	66 83 f8 0e          	cmp    ax,0xe
   19a91:	75 14                	jne    19aa7 <pagingExceptionHandler+0x4a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:223
        //Get the address of the page table entry for the exception
        lPTEAddress=kPagingGet4kPTEntryAddress(exceptionCR2);
   19a93:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19a98:	83 ec 0c             	sub    esp,0xc
   19a9b:	50                   	push   eax
   19a9c:	e8 44 7a ff ff       	call   114e5 <kPagingGet4kPTEntryAddress>
   19aa1:	83 c4 10             	add    esp,0x10
   19aa4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:226

#ifndef DEBUG_NONE
    if (!kPagingInitDone)
   19aa7:	0f b6 05 e1 97 12 00 	movzx  eax,BYTE PTR ds:0x1297e1
   19aae:	83 f0 01             	xor    eax,0x1
   19ab1:	84 c0                	test   al,al
   19ab3:	74 12                	je     19ac7 <pagingExceptionHandler+0x6a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:228
    {
        lOldDebugLevel=kDebugLevel;
   19ab5:	a1 78 98 12 00       	mov    eax,ds:0x129878
   19aba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:229
        kDebugLevel&=!DEBUG_EXCEPTIONS;
   19abd:	c7 05 78 98 12 00 00 	mov    DWORD PTR ds:0x129878,0x0
   19ac4:	00 00 00 
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:231
    }
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   19ac7:	a1 78 98 12 00       	mov    eax,ds:0x129878
   19acc:	25 00 10 00 00       	and    eax,0x1000
   19ad1:	85 c0                	test   eax,eax
   19ad3:	0f 84 99 00 00 00    	je     19b72 <pagingExceptionHandler+0x115>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:233
    {
        lPDEValue=kPagingGet4kPDEntryValue(exceptionCR2);
   19ad9:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19ade:	83 ec 0c             	sub    esp,0xc
   19ae1:	50                   	push   eax
   19ae2:	e8 4c 79 ff ff       	call   11433 <kPagingGet4kPDEntryValue>
   19ae7:	83 c4 10             	add    esp,0x10
   19aea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:234
        lPTEValue=kPagingGet4kPTEntryValue(exceptionCR2);
   19aed:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19af2:	83 ec 0c             	sub    esp,0xc
   19af5:	50                   	push   eax
   19af6:	e8 52 7a ff ff       	call   1154d <kPagingGet4kPTEntryValue>
   19afb:	83 c4 10             	add    esp,0x10
   19afe:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:235
        lPDEAddress=kPagingGet4kPDEntryAddress(exceptionCR2);
   19b01:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19b06:	83 ec 0c             	sub    esp,0xc
   19b09:	50                   	push   eax
   19b0a:	e8 82 79 ff ff       	call   11491 <kPagingGet4kPDEntryAddress>
   19b0f:	83 c4 10             	add    esp,0x10
   19b12:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:236
        if (exceptionNumber==0x0e)
   19b15:	0f b7 05 e4 96 12 00 	movzx  eax,WORD PTR ds:0x1296e4
   19b1c:	66 83 f8 0e          	cmp    ax,0xe
   19b20:	75 16                	jne    19b38 <pagingExceptionHandler+0xdb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:237
          printk("\nPaging handler called for virtual address 0x%02X\n",exceptionCR2);
   19b22:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19b27:	83 ec 08             	sub    esp,0x8
   19b2a:	50                   	push   eax
   19b2b:	68 94 30 08 00       	push   0x83094
   19b30:	e8 6e dd 00 00       	call   278a3 <printk>
   19b35:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:238
          printk("PDE@0x%08X=0x%08X, PTE@0x%08X=0x%08X\n", lPDEAddress, lPDEValue, lPTEAddress, lPTEValue);
   19b38:	83 ec 0c             	sub    esp,0xc
   19b3b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   19b3e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   19b41:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   19b44:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   19b47:	68 c8 30 08 00       	push   0x830c8
   19b4c:	e8 52 dd 00 00       	call   278a3 <printk>
   19b51:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:239
          printDumpedRegs();
   19b54:	e8 e4 bd 00 00       	call   2593d <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:240
          printk("handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   19b59:	a1 b8 97 12 00       	mov    eax,ds:0x1297b8
   19b5e:	83 c0 01             	add    eax,0x1
   19b61:	83 ec 08             	sub    esp,0x8
   19b64:	50                   	push   eax
   19b65:	68 f0 30 08 00       	push   0x830f0
   19b6a:	e8 34 dd 00 00       	call   278a3 <printk>
   19b6f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:243
    }
#endif
    if (lOldDebugLevel)
   19b72:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   19b76:	74 08                	je     19b80 <pagingExceptionHandler+0x123>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:244
        kDebugLevel=lOldDebugLevel;
   19b78:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19b7b:	a3 78 98 12 00       	mov    ds:0x129878,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:245
    if ((exceptionCR2&0xFFFFF000)==0xC0000000 && (!kPagingInitDone))
   19b80:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19b85:	25 00 f0 ff ff       	and    eax,0xfffff000
   19b8a:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   19b8f:	75 41                	jne    19bd2 <pagingExceptionHandler+0x175>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:245 (discriminator 1)
   19b91:	0f b6 05 e1 97 12 00 	movzx  eax,BYTE PTR ds:0x1297e1
   19b98:	83 f0 01             	xor    eax,0x1
   19b9b:	84 c0                	test   al,al
   19b9d:	74 33                	je     19bd2 <pagingExceptionHandler+0x175>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:248
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   19b9f:	a1 78 98 12 00       	mov    eax,ds:0x129878
   19ba4:	83 e0 40             	and    eax,0x40
   19ba7:	85 c0                	test   eax,eax
   19ba9:	74 16                	je     19bc1 <pagingExceptionHandler+0x164>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:249
            printk("\n\tpagingExceptionHandler: Updating 0x%08X to read/write for WP test ...\n\t",exceptionCR2);
   19bab:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19bb0:	83 ec 08             	sub    esp,0x8
   19bb3:	50                   	push   eax
   19bb4:	68 1c 31 08 00       	push   0x8311c
   19bb9:	e8 e5 dc 00 00       	call   278a3 <printk>
   19bbe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:251
#endif
        kPagingSetPageReadOnlyFlag((uintptr_t*)lPTEAddress, false);
   19bc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19bc4:	83 ec 08             	sub    esp,0x8
   19bc7:	6a 00                	push   0x0
   19bc9:	50                   	push   eax
   19bca:	e8 99 79 ff ff       	call   11568 <kPagingSetPageReadOnlyFlag>
   19bcf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:254
    }
    
    kPagingExceptionsSinceStart++;
   19bd2:	a1 b8 97 12 00       	mov    eax,ds:0x1297b8
   19bd7:	83 c0 01             	add    eax,0x1
   19bda:	a3 b8 97 12 00       	mov    ds:0x1297b8,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:261
//    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
//    {
//        waitForKeyboardKey();
//    }
#endif
    __asm__("push eax\n mov eax,0\nmov cr2,eax\npop eax\n  #reset CR2 after paging exception handled");
   19bdf:	50                   	push   eax
   19be0:	b8 00 00 00 00       	mov    eax,0x0
   19be5:	0f 22 d0             	mov    cr2,eax
   19be8:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:262
    if ((!kPagingInitDone) && exceptionCR2==0xC0000000)
   19be9:	0f b6 05 e1 97 12 00 	movzx  eax,BYTE PTR ds:0x1297e1
   19bf0:	83 f0 01             	xor    eax,0x1
   19bf3:	84 c0                	test   al,al
   19bf5:	74 18                	je     19c0f <pagingExceptionHandler+0x1b2>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:262 (discriminator 1)
   19bf7:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19bfc:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   19c01:	75 0c                	jne    19c0f <pagingExceptionHandler+0x1b2>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:264
    {
        exceptionCR2=0;
   19c03:	c7 05 40 97 12 00 00 	mov    DWORD PTR ds:0x129740,0x0
   19c0a:	00 00 00 
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:265
        return;
   19c0d:	eb 04                	jmp    19c13 <pagingExceptionHandler+0x1b6>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:267
    }
    __asm__("sti\n");
   19c0f:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:268 (discriminator 1)
    pagingExceptionStop: __asm__("hlt\n"); goto pagingExceptionStop;
   19c10:	f4                   	hlt    
   19c11:	eb fd                	jmp    19c10 <pagingExceptionHandler+0x1b3>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:271
    __asm__("cli");
    __asm__("hlt");
}
   19c13:	c9                   	leave  
   19c14:	c3                   	ret    

00019c15 <defaultISRHandler>:
defaultISRHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:274

void defaultISRHandler()
{
   19c15:	55                   	push   ebp
   19c16:	89 e5                	mov    ebp,esp
   19c18:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:277
    //terminal_clear();
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   19c1b:	a1 78 98 12 00       	mov    eax,ds:0x129878
   19c20:	25 00 10 00 00       	and    eax,0x1000
   19c25:	85 c0                	test   eax,eax
   19c27:	74 3e                	je     19c67 <defaultISRHandler+0x52>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:279
    {
        printk("Exception handler called for exception # 0x%02x\n\n", exceptionNumber);
   19c29:	0f b7 05 e4 96 12 00 	movzx  eax,WORD PTR ds:0x1296e4
   19c30:	0f b7 c0             	movzx  eax,ax
   19c33:	83 ec 08             	sub    esp,0x8
   19c36:	50                   	push   eax
   19c37:	68 68 31 08 00       	push   0x83168
   19c3c:	e8 62 dc 00 00       	call   278a3 <printk>
   19c41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:280
        printDumpedRegs();
   19c44:	e8 f4 bc 00 00       	call   2593d <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:281
        printd(DEBUG_EXCEPTIONS,"handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   19c49:	a1 b8 97 12 00       	mov    eax,ds:0x1297b8
   19c4e:	83 c0 01             	add    eax,0x1
   19c51:	83 ec 04             	sub    esp,0x4
   19c54:	50                   	push   eax
   19c55:	68 f0 30 08 00       	push   0x830f0
   19c5a:	68 00 10 00 00       	push   0x1000
   19c5f:	e8 5f dc 00 00       	call   278c3 <printd>
   19c64:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:295 (discriminator 1)

//    __asm__("mov eax,%0\nmov ebx,%1\n"::"r" (exceptionAX), "r" (exceptionEIP));
//    return;
    
defaultHandlerLoop:
    __asm__("cli");
   19c67:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:296 (discriminator 1)
    __asm__("hlt");
   19c68:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:297 (discriminator 1)
    goto defaultHandlerLoop;
   19c69:	eb fc                	jmp    19c67 <defaultISRHandler+0x52>

00019c6b <doubleFaultHandler>:
doubleFaultHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:301
}

void doubleFaultHandler()
{
   19c6b:	55                   	push   ebp
   19c6c:	89 e5                	mov    ebp,esp
   19c6e:	53                   	push   ebx
   19c6f:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:302
    uint32_t esp = (uint32_t)exceptionSavedESP;
   19c72:	a1 2c 97 12 00       	mov    eax,ds:0x12972c
   19c77:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:303
        terminal_clear();
   19c7a:	e8 a3 e3 ff ff       	call   18022 <terminal_clear>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:304
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
   19c7f:	8b 1d 40 97 12 00    	mov    ebx,DWORD PTR ds:0x129740
   19c85:	8b 0d 38 97 12 00    	mov    ecx,DWORD PTR ds:0x129738
   19c8b:	8b 15 3c 97 12 00    	mov    edx,DWORD PTR ds:0x12973c
   19c91:	0f b7 05 e4 96 12 00 	movzx  eax,WORD PTR ds:0x1296e4
   19c98:	0f b7 c0             	movzx  eax,ax
   19c9b:	83 ec 0c             	sub    esp,0xc
   19c9e:	53                   	push   ebx
   19c9f:	51                   	push   ecx
   19ca0:	52                   	push   edx
   19ca1:	50                   	push   eax
   19ca2:	68 9c 31 08 00       	push   0x8319c
   19ca7:	e8 f7 db 00 00       	call   278a3 <printk>
   19cac:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:305
        printk ("Stack:\n");
   19caf:	83 ec 0c             	sub    esp,0xc
   19cb2:	68 df 31 08 00       	push   0x831df
   19cb7:	e8 e7 db 00 00       	call   278a3 <printk>
   19cbc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:306
        for (int cnt=0;cnt<10;cnt++)
   19cbf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   19cc6:	eb 2b                	jmp    19cf3 <doubleFaultHandler+0x88>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:308 (discriminator 3)
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   19cc8:	a1 e8 96 12 00       	mov    eax,ds:0x1296e8
   19ccd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   19cd0:	c1 e2 02             	shl    edx,0x2
   19cd3:	01 d0                	add    eax,edx
   19cd5:	8b 00                	mov    eax,DWORD PTR [eax]
   19cd7:	83 ec 04             	sub    esp,0x4
   19cda:	50                   	push   eax
   19cdb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   19cde:	68 e7 31 08 00       	push   0x831e7
   19ce3:	e8 bb db 00 00       	call   278a3 <printk>
   19ce8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:309 (discriminator 3)
            esp+=4;
   19ceb:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:306 (discriminator 3)
{
    uint32_t esp = (uint32_t)exceptionSavedESP;
        terminal_clear();
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
        printk ("Stack:\n");
        for (int cnt=0;cnt<10;cnt++)
   19cef:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:306 (discriminator 1)
   19cf3:	83 7d f0 09          	cmp    DWORD PTR [ebp-0x10],0x9
   19cf7:	7e cf                	jle    19cc8 <doubleFaultHandler+0x5d>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:311
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
            esp+=4;
        }
    __asm__("cli");
   19cf9:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:312
    __asm__("hlt");
   19cfa:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:313
   19cfb:	90                   	nop
   19cfc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19cff:	c9                   	leave  
   19d00:	c3                   	ret    
   19d01:	66 90                	xchg   ax,ax
   19d03:	90                   	nop

00019d04 <rdmsr64>:
rdmsr64():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:4
#include "i386/cpu.h"

uint64_t rdmsr64(unsigned index)
{
   19d04:	55                   	push   ebp
   19d05:	89 e5                	mov    ebp,esp
   19d07:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:7
    unsigned long long ret;

    __asm__ ("rdmsr" : "=A"(ret) : "c"(index));
   19d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19d0d:	89 c1                	mov    ecx,eax
   19d0f:	0f 32                	rdmsr  
   19d11:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19d14:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:8
    return ret;
   19d17:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19d1a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/cpu/msr.c:9
}
   19d1d:	c9                   	leave  
   19d1e:	c3                   	ret    

00019d1f <rdmsr32>:
rdmsr32():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:12

void rdmsr32(unsigned index,uint32_t* loVal, uint32_t* hiVal)
{
   19d1f:	55                   	push   ebp
   19d20:	89 e5                	mov    ebp,esp
   19d22:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:13
    unsigned long long lTemp = rdmsr64(index);
   19d25:	83 ec 04             	sub    esp,0x4
   19d28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19d2b:	e8 d4 ff ff ff       	call   19d04 <rdmsr64>
   19d30:	83 c4 08             	add    esp,0x8
   19d33:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19d36:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:14
    *hiVal = lTemp >> 32;
   19d39:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19d3c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   19d3f:	89 d0                	mov    eax,edx
   19d41:	31 d2                	xor    edx,edx
   19d43:	89 c2                	mov    edx,eax
   19d45:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   19d48:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:15
    *loVal = lTemp & 0xFFFFFFFF;
   19d4a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   19d4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19d50:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:16
}
   19d52:	90                   	nop
   19d53:	c9                   	leave  
   19d54:	c3                   	ret    

00019d55 <wrmsr64>:
wrmsr64():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:19

void wrmsr64(unsigned index, uint64_t val)
{
   19d55:	55                   	push   ebp
   19d56:	89 e5                	mov    ebp,esp
   19d58:	83 ec 08             	sub    esp,0x8
   19d5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19d5e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19d61:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   19d64:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/msr.c:20
    __asm__ volatile ("wrmsr" : : "c"(index), "A"(val));
   19d67:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   19d6a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19d6d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   19d70:	0f 30                	wrmsr  
/home/yogi/src/os/chrisOS/src/cpu/msr.c:21
}
   19d72:	90                   	nop
   19d73:	c9                   	leave  
   19d74:	c3                   	ret    

00019d75 <wrmsr32>:
wrmsr32():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:24

void wrmsr32(unsigned index, uint32_t loVal, uint32_t hiVal)
{
   19d75:	55                   	push   ebp
   19d76:	89 e5                	mov    ebp,esp
   19d78:	57                   	push   edi
   19d79:	56                   	push   esi
   19d7a:	53                   	push   ebx
   19d7b:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOS/src/cpu/msr.c:27
    //NOTE: hiVal=EDX, loVal=EAX
    //asm volatile ("wrmsr" : : "c"(index), "a"(eaxVal), "d" edxVal);
    wrmsr64(index, ((uint64_t)hiVal << 32) | loVal);
   19d7e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   19d81:	bb 00 00 00 00       	mov    ebx,0x0
   19d86:	89 cb                	mov    ebx,ecx
   19d88:	b9 00 00 00 00       	mov    ecx,0x0
   19d8d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   19d90:	bf 00 00 00 00       	mov    edi,0x0
   19d95:	89 c8                	mov    eax,ecx
   19d97:	09 f0                	or     eax,esi
   19d99:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   19d9c:	89 d8                	mov    eax,ebx
   19d9e:	09 f8                	or     eax,edi
   19da0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   19da3:	83 ec 04             	sub    esp,0x4
   19da6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   19da9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   19dac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19daf:	e8 a1 ff ff ff       	call   19d55 <wrmsr64>
   19db4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:29
    
}
   19db7:	90                   	nop
   19db8:	8d 65 f4             	lea    esp,[ebp-0xc]
   19dbb:	5b                   	pop    ebx
   19dbc:	5e                   	pop    esi
   19dbd:	5f                   	pop    edi
   19dbe:	5d                   	pop    ebp
   19dbf:	c3                   	ret    

00019dc0 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   19dc0:	55                   	push   ebp
   19dc1:	89 e5                	mov    ebp,esp
   19dc3:	83 ec 08             	sub    esp,0x8
   19dc6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19dc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19dcc:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   19dd0:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   19dd3:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   19dd7:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   19ddb:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   19ddc:	90                   	nop
   19ddd:	c9                   	leave  
   19dde:	c3                   	ret    

00019ddf <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   19ddf:	55                   	push   ebp
   19de0:	89 e5                	mov    ebp,esp
   19de2:	83 ec 14             	sub    esp,0x14
   19de5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19de8:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   19dec:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   19df0:	89 c2                	mov    edx,eax
   19df2:	ec                   	in     al,dx
   19df3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   19df6:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   19dfa:	c9                   	leave  
   19dfb:	c3                   	ret    

00019dfc <IRQ_set_mask>:
IRQ_set_mask():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:4
#include "io.h"
#include "i386/bits/types.h"

void IRQ_set_mask(unsigned char IRQline) {
   19dfc:	55                   	push   ebp
   19dfd:	89 e5                	mov    ebp,esp
   19dff:	53                   	push   ebx
   19e00:	83 ec 14             	sub    esp,0x14
   19e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19e06:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:8
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   19e09:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   19e0d:	77 08                	ja     19e17 <IRQ_set_mask+0x1b>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:9
        port = PIC1_DATA;
   19e0f:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   19e15:	eb 0a                	jmp    19e21 <IRQ_set_mask+0x25>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:11
    } else {
        port = PIC2_DATA;
   19e17:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/src/os/chrisOS/src/cpu/ports.c:12
        IRQline -= 8;
   19e1d:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:14
    }
    value = inb(port) | (1 << IRQline);
   19e21:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19e25:	50                   	push   eax
   19e26:	e8 b4 ff ff ff       	call   19ddf <inb>
   19e2b:	83 c4 04             	add    esp,0x4
   19e2e:	89 c3                	mov    ebx,eax
   19e30:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   19e34:	ba 01 00 00 00       	mov    edx,0x1
   19e39:	89 c1                	mov    ecx,eax
   19e3b:	d3 e2                	shl    edx,cl
   19e3d:	89 d0                	mov    eax,edx
   19e3f:	09 d8                	or     eax,ebx
   19e41:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:15
    outb(port, value);        
   19e44:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   19e48:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19e4c:	52                   	push   edx
   19e4d:	50                   	push   eax
   19e4e:	e8 6d ff ff ff       	call   19dc0 <outb>
   19e53:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:16
}
   19e56:	90                   	nop
   19e57:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19e5a:	c9                   	leave  
   19e5b:	c3                   	ret    

00019e5c <IRQ_clear_mask>:
IRQ_clear_mask():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:18
 
void IRQ_clear_mask(unsigned char IRQline) {
   19e5c:	55                   	push   ebp
   19e5d:	89 e5                	mov    ebp,esp
   19e5f:	53                   	push   ebx
   19e60:	83 ec 14             	sub    esp,0x14
   19e63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19e66:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:22
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   19e69:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   19e6d:	77 08                	ja     19e77 <IRQ_clear_mask+0x1b>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:23
        port = PIC1_DATA;
   19e6f:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   19e75:	eb 0a                	jmp    19e81 <IRQ_clear_mask+0x25>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:25
    } else {
        port = PIC2_DATA;
   19e77:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/src/os/chrisOS/src/cpu/ports.c:26
        IRQline -= 8;
   19e7d:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:28
    }
    value = inb(port) & ~(1 << IRQline);
   19e81:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19e85:	50                   	push   eax
   19e86:	e8 54 ff ff ff       	call   19ddf <inb>
   19e8b:	83 c4 04             	add    esp,0x4
   19e8e:	89 c2                	mov    edx,eax
   19e90:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   19e94:	bb 01 00 00 00       	mov    ebx,0x1
   19e99:	89 c1                	mov    ecx,eax
   19e9b:	d3 e3                	shl    ebx,cl
   19e9d:	89 d8                	mov    eax,ebx
   19e9f:	f7 d0                	not    eax
   19ea1:	21 d0                	and    eax,edx
   19ea3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:29
    outb(port, value);        
   19ea6:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   19eaa:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19eae:	52                   	push   edx
   19eaf:	50                   	push   eax
   19eb0:	e8 0b ff ff ff       	call   19dc0 <outb>
   19eb5:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:30
}
   19eb8:	90                   	nop
   19eb9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19ebc:	c9                   	leave  
   19ebd:	c3                   	ret    

00019ebe <PIC_remap>:
PIC_remap():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:54
	offset1 - vector offset for master PIC
		vectors on the master become offset1..offset1+7
	offset2 - same for slave PIC: offset2..offset2+7
*/
void PIC_remap(int offset1, int offset2)
{
   19ebe:	55                   	push   ebp
   19ebf:	89 e5                	mov    ebp,esp
   19ec1:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/ports.c:57
	unsigned char a1, a2;
 
	a1 = inb(PIC1_DATA);                        // save masks
   19ec4:	6a 21                	push   0x21
   19ec6:	e8 14 ff ff ff       	call   19ddf <inb>
   19ecb:	83 c4 04             	add    esp,0x4
   19ece:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:58
	a2 = inb(PIC2_DATA);
   19ed1:	68 a1 00 00 00       	push   0xa1
   19ed6:	e8 04 ff ff ff       	call   19ddf <inb>
   19edb:	83 c4 04             	add    esp,0x4
   19ede:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:60
 
	outb(PIC1_CMD, ICW1_INIT+ICW1_ICW4);  // starts the initialization sequence (in cascade mode)
   19ee1:	6a 11                	push   0x11
   19ee3:	6a 20                	push   0x20
   19ee5:	e8 d6 fe ff ff       	call   19dc0 <outb>
   19eea:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:61
	__asm__("nop;");
   19eed:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:62
	outb(PIC2_CMD, ICW1_INIT+ICW1_ICW4);
   19eee:	6a 11                	push   0x11
   19ef0:	68 a0 00 00 00       	push   0xa0
   19ef5:	e8 c6 fe ff ff       	call   19dc0 <outb>
   19efa:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:63
	__asm__("nop;");
   19efd:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:64
	outb(PIC1_DATA, offset1);                 // ICW2: Master PIC vector offset
   19efe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19f01:	0f b6 c0             	movzx  eax,al
   19f04:	50                   	push   eax
   19f05:	6a 21                	push   0x21
   19f07:	e8 b4 fe ff ff       	call   19dc0 <outb>
   19f0c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:65
	__asm__("nop;");
   19f0f:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:66
	outb(PIC2_DATA, offset2);                 // ICW2: Slave PIC vector offset
   19f10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19f13:	0f b6 c0             	movzx  eax,al
   19f16:	50                   	push   eax
   19f17:	68 a1 00 00 00       	push   0xa1
   19f1c:	e8 9f fe ff ff       	call   19dc0 <outb>
   19f21:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:67
	__asm__("nop;");
   19f24:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:68
	outb(PIC1_DATA, 4);                       // ICW3: tell Master PIC that there is a slave PIC at IRQ2 (0000 0100)
   19f25:	6a 04                	push   0x4
   19f27:	6a 21                	push   0x21
   19f29:	e8 92 fe ff ff       	call   19dc0 <outb>
   19f2e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:69
	__asm__("nop;");
   19f31:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:70
	outb(PIC2_DATA, 2);                       // ICW3: tell Slave PIC its cascade identity (0000 0010)
   19f32:	6a 02                	push   0x2
   19f34:	68 a1 00 00 00       	push   0xa1
   19f39:	e8 82 fe ff ff       	call   19dc0 <outb>
   19f3e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:71
	__asm__("nop;");
   19f41:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:73
 
	outb(PIC1_DATA, ICW4_8086);
   19f42:	6a 01                	push   0x1
   19f44:	6a 21                	push   0x21
   19f46:	e8 75 fe ff ff       	call   19dc0 <outb>
   19f4b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:74
	__asm__("nop;");
   19f4e:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:75
	outb(PIC2_DATA, ICW4_8086);
   19f4f:	6a 01                	push   0x1
   19f51:	68 a1 00 00 00       	push   0xa1
   19f56:	e8 65 fe ff ff       	call   19dc0 <outb>
   19f5b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:76
	__asm__("nop;");
   19f5e:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:78
 
	outb(PIC1_DATA, a1);   // restore saved masks.
   19f5f:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   19f63:	50                   	push   eax
   19f64:	6a 21                	push   0x21
   19f66:	e8 55 fe ff ff       	call   19dc0 <outb>
   19f6b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:79
	outb(PIC2_DATA, a2);
   19f6e:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   19f72:	50                   	push   eax
   19f73:	68 a1 00 00 00       	push   0xa1
   19f78:	e8 43 fe ff ff       	call   19dc0 <outb>
   19f7d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:80
   19f80:	90                   	nop
   19f81:	c9                   	leave  
   19f82:	c3                   	ret    
   19f83:	90                   	nop

00019f84 <mpScanForConfig>:
mpScanForConfig():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:19
extern uint32_t kDebugLevel;
extern mpConfig_t* kMPConfigTable;
extern uintptr_t* kIOAPICPtr;

bool HIGH_CODE_SECTION mpScanForConfig(int start, int length)
{
   19f84:	55                   	push   ebp
   19f85:	89 e5                	mov    ebp,esp
   19f87:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/smp.c:22
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19f8a:	a1 78 98 12 00       	mov    eax,ds:0x129878
   19f8f:	25 00 08 00 00       	and    eax,0x800
   19f94:	85 c0                	test   eax,eax
   19f96:	74 1e                	je     19fb6 <mpScanForConfig+0x32>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:23
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
   19f98:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19f9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19f9e:	01 d0                	add    eax,edx
   19fa0:	50                   	push   eax
   19fa1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19fa4:	68 00 33 08 00       	push   0x83300
   19fa9:	68 00 08 00 00       	push   0x800
   19fae:	e8 10 d9 00 00       	call   278c3 <printd>
   19fb3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19fb9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   19fbc:	eb 33                	jmp    19ff1 <mpScanForConfig+0x6d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:27
    {
        lMP=(struct mpf_intel*)cnt;
   19fbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19fc1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:28
        if(!strncmp(lMP->signature,"_MP_",4))
   19fc4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19fc7:	83 ec 04             	sub    esp,0x4
   19fca:	6a 04                	push   0x4
   19fcc:	68 22 33 08 00       	push   0x83322
   19fd1:	50                   	push   eax
   19fd2:	e8 a9 7c ff ff       	call   11c80 <strncmp>
   19fd7:	83 c4 10             	add    esp,0x10
   19fda:	85 c0                	test   eax,eax
   19fdc:	75 0f                	jne    19fed <mpScanForConfig+0x69>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:30
        {
            mp=(struct mpf_intel*)cnt;
   19fde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19fe1:	a3 70 65 09 00       	mov    ds:0x96570,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:31
            return true;
   19fe6:	b8 01 00 00 00       	mov    eax,0x1
   19feb:	eb 16                	jmp    1a003 <mpScanForConfig+0x7f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25 (discriminator 2)
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19fed:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25 (discriminator 1)
   19ff1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19ff4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19ff7:	01 d0                	add    eax,edx
   19ff9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   19ffc:	7f c0                	jg     19fbe <mpScanForConfig+0x3a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:34
        {
            mp=(struct mpf_intel*)cnt;
            return true;
        }
    }
    return false;
   19ffe:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:35
}
   1a003:	c9                   	leave  
   1a004:	c3                   	ret    

0001a005 <mpFindTables>:
mpFindTables():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:38

bool HIGH_CODE_SECTION  mpFindTables()
{
   1a005:	55                   	push   ebp
   1a006:	89 e5                	mov    ebp,esp
   1a008:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/smp.c:39
    uint16_t* lEBDAPtr=(uint16_t*)0x40e;
   1a00b:	c7 45 f0 0e 04 00 00 	mov    DWORD PTR [ebp-0x10],0x40e
/home/yogi/src/os/chrisOS/src/cpu/smp.c:42
    bool lResult;
    
    if (lEBDAPtr != 0)
   1a012:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1a016:	74 20                	je     1a038 <mpFindTables+0x33>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:43
        lResult=mpScanForConfig(*lEBDAPtr<<4, 0x400);
   1a018:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1a01b:	0f b7 00             	movzx  eax,WORD PTR [eax]
   1a01e:	0f b7 c0             	movzx  eax,ax
   1a021:	c1 e0 04             	shl    eax,0x4
   1a024:	83 ec 08             	sub    esp,0x8
   1a027:	68 00 04 00 00       	push   0x400
   1a02c:	50                   	push   eax
   1a02d:	e8 52 ff ff ff       	call   19f84 <mpScanForConfig>
   1a032:	83 c4 10             	add    esp,0x10
   1a035:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:44
    if (!lResult)
   1a038:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1a03c:	83 f0 01             	xor    eax,0x1
   1a03f:	84 c0                	test   al,al
   1a041:	74 62                	je     1a0a5 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:45
        if (!mpScanForConfig(0x9fc00, 0x400))
   1a043:	83 ec 08             	sub    esp,0x8
   1a046:	68 00 04 00 00       	push   0x400
   1a04b:	68 00 fc 09 00       	push   0x9fc00
   1a050:	e8 2f ff ff ff       	call   19f84 <mpScanForConfig>
   1a055:	83 c4 10             	add    esp,0x10
   1a058:	83 f0 01             	xor    eax,0x1
   1a05b:	84 c0                	test   al,al
   1a05d:	74 46                	je     1a0a5 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:46
            if (!mpScanForConfig(0xF0000, 0xFFFF))
   1a05f:	83 ec 08             	sub    esp,0x8
   1a062:	68 ff ff 00 00       	push   0xffff
   1a067:	68 00 00 0f 00       	push   0xf0000
   1a06c:	e8 13 ff ff ff       	call   19f84 <mpScanForConfig>
   1a071:	83 c4 10             	add    esp,0x10
   1a074:	83 f0 01             	xor    eax,0x1
   1a077:	84 c0                	test   al,al
   1a079:	74 2a                	je     1a0a5 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:49
            {
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   1a07b:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1a080:	25 00 08 00 00       	and    eax,0x800
   1a085:	85 c0                	test   eax,eax
   1a087:	74 15                	je     1a09e <mpFindTables+0x99>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:50
                    printd(DEBUG_MP,"MP tables not found, MP not allowed, proceeding as single processor.\n");
   1a089:	83 ec 08             	sub    esp,0x8
   1a08c:	68 28 33 08 00       	push   0x83328
   1a091:	68 00 08 00 00       	push   0x800
   1a096:	e8 28 d8 00 00       	call   278c3 <printd>
   1a09b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:52
#endif
                return false;
   1a09e:	b8 00 00 00 00       	mov    eax,0x0
   1a0a3:	eb 38                	jmp    1a0dd <mpFindTables+0xd8>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:55
            }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   1a0a5:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1a0aa:	25 00 08 00 00       	and    eax,0x800
   1a0af:	85 c0                	test   eax,eax
   1a0b1:	74 25                	je     1a0d8 <mpFindTables+0xd3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:56
        printd(DEBUG_MP,"MP tables found at 0x%08X, spec %c\n", mp, mp->specification);
   1a0b3:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0b8:	0f b6 40 09          	movzx  eax,BYTE PTR [eax+0x9]
   1a0bc:	0f b6 d0             	movzx  edx,al
   1a0bf:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0c4:	52                   	push   edx
   1a0c5:	50                   	push   eax
   1a0c6:	68 70 33 08 00       	push   0x83370
   1a0cb:	68 00 08 00 00       	push   0x800
   1a0d0:	e8 ee d7 00 00       	call   278c3 <printd>
   1a0d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:58
#endif
    return true;
   1a0d8:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:60
        
}
   1a0dd:	c9                   	leave  
   1a0de:	c3                   	ret    

0001a0df <printMPTable>:
printMPTable():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:63

void HIGH_CODE_SECTION printMPTable()
{
   1a0df:	55                   	push   ebp
   1a0e0:	89 e5                	mov    ebp,esp
   1a0e2:	57                   	push   edi
   1a0e3:	56                   	push   esi
   1a0e4:	53                   	push   ebx
   1a0e5:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOS/src/cpu/smp.c:64
    mpConfig_t* mpptr=kMPConfigTable;
   1a0e8:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a0ed:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:65
    int cnt=0;
   1a0f0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:67
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   1a0f7:	e9 d5 03 00 00       	jmp    1a4d1 <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:69
    {
        switch (mpptr->recType)
   1a0fc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a0ff:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1a102:	83 f8 04             	cmp    eax,0x4
   1a105:	0f 87 d7 03 00 00    	ja     1a4e2 <printMPTable+0x403>
   1a10b:	8b 04 85 d8 34 08 00 	mov    eax,DWORD PTR [eax*4+0x834d8]
   1a112:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72
        {
            case CPU:
                printk("CPU: APICId=%u, Enabled=%s, %s\n", mpptr->cpu.apicid, (mpptr->cpu.cpuflag&0x1)?"yes":"no", (mpptr->cpu.cpuflag&0x2)?"BSP":"");
   1a114:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a117:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a11b:	0f b6 c0             	movzx  eax,al
   1a11e:	83 e0 02             	and    eax,0x2
   1a121:	85 c0                	test   eax,eax
   1a123:	74 07                	je     1a12c <printMPTable+0x4d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 1)
   1a125:	b9 94 33 08 00       	mov    ecx,0x83394
   1a12a:	eb 05                	jmp    1a131 <printMPTable+0x52>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 2)
   1a12c:	b9 98 33 08 00       	mov    ecx,0x83398
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 4)
   1a131:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a134:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a138:	0f b6 c0             	movzx  eax,al
   1a13b:	83 e0 01             	and    eax,0x1
   1a13e:	85 c0                	test   eax,eax
   1a140:	74 07                	je     1a149 <printMPTable+0x6a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 5)
   1a142:	ba 99 33 08 00       	mov    edx,0x83399
   1a147:	eb 05                	jmp    1a14e <printMPTable+0x6f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 6)
   1a149:	ba 9d 33 08 00       	mov    edx,0x8339d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 8)
   1a14e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a151:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a155:	0f b6 c0             	movzx  eax,al
   1a158:	51                   	push   ecx
   1a159:	52                   	push   edx
   1a15a:	50                   	push   eax
   1a15b:	68 a0 33 08 00       	push   0x833a0
   1a160:	e8 3e d7 00 00       	call   278a3 <printk>
   1a165:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:73 (discriminator 8)
                break;
   1a168:	e9 16 03 00 00       	jmp    1a483 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:75
            case BUS:
                printk("BUS: ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", mpptr->bus.busid, mpptr->bus.bustype[0], mpptr->bus.bustype[1], mpptr->bus.bustype[2], mpptr->bus.bustype[3], mpptr->bus.bustype[4], mpptr->bus.bustype[5], mpptr->bus.type );
   1a16d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a170:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a173:	0f b6 c8             	movzx  ecx,al
   1a176:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a179:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   1a17d:	0f b6 c0             	movzx  eax,al
   1a180:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
   1a183:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a186:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   1a18a:	0f b6 f0             	movzx  esi,al
   1a18d:	89 75 d0             	mov    DWORD PTR [ebp-0x30],esi
   1a190:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a193:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   1a197:	0f b6 f8             	movzx  edi,al
   1a19a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a19d:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   1a1a1:	0f b6 f0             	movzx  esi,al
   1a1a4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1a7:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a1ab:	0f b6 d8             	movzx  ebx,al
   1a1ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1b1:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a1b5:	0f b6 d0             	movzx  edx,al
   1a1b8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1bb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a1bf:	0f b6 c0             	movzx  eax,al
   1a1c2:	83 ec 0c             	sub    esp,0xc
   1a1c5:	51                   	push   ecx
   1a1c6:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1a1c9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   1a1cc:	57                   	push   edi
   1a1cd:	56                   	push   esi
   1a1ce:	53                   	push   ebx
   1a1cf:	52                   	push   edx
   1a1d0:	50                   	push   eax
   1a1d1:	68 c0 33 08 00       	push   0x833c0
   1a1d6:	e8 c8 d6 00 00       	call   278a3 <printk>
   1a1db:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:76
                break;
   1a1de:	e9 a0 02 00 00       	jmp    1a483 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
   1a1e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1e6:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a1ea:	0f b6 c0             	movzx  eax,al
   1a1ed:	83 e0 01             	and    eax,0x1
   1a1f0:	85 c0                	test   eax,eax
   1a1f2:	74 07                	je     1a1fb <printMPTable+0x11c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 1)
   1a1f4:	b9 99 33 08 00       	mov    ecx,0x83399
   1a1f9:	eb 05                	jmp    1a200 <printMPTable+0x121>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 2)
   1a1fb:	b9 9d 33 08 00       	mov    ecx,0x8339d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 4)
   1a200:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a203:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1a206:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a209:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a20d:	0f b6 c0             	movzx  eax,al
   1a210:	51                   	push   ecx
   1a211:	52                   	push   edx
   1a212:	50                   	push   eax
   1a213:	68 ec 33 08 00       	push   0x833ec
   1a218:	e8 86 d6 00 00       	call   278a3 <printk>
   1a21d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:79 (discriminator 4)
                break;
   1a220:	e9 5e 02 00 00       	jmp    1a483 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a225:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a228:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a22c:	0f b6 c0             	movzx  eax,al
   1a22f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a232:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a235:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a239:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a23c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a23f:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a243:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a246:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a249:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a24d:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:90
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
   1a250:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a253:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a257:	0f b7 c0             	movzx  eax,ax
   1a25a:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a25d:	85 c0                	test   eax,eax
   1a25f:	74 39                	je     1a29a <printMPTable+0x1bb>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:91
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
   1a261:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a264:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a268:	0f b7 c0             	movzx  eax,ax
   1a26b:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   1a26e:	83 f8 04             	cmp    eax,0x4
   1a271:	74 20                	je     1a293 <printMPTable+0x1b4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 1)
   1a273:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a276:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a27a:	0f b7 c0             	movzx  eax,ax
   1a27d:	83 e0 0c             	and    eax,0xc
   1a280:	83 f8 08             	cmp    eax,0x8
   1a283:	75 07                	jne    1a28c <printMPTable+0x1ad>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 3)
   1a285:	b9 18 34 08 00       	mov    ecx,0x83418
   1a28a:	eb 13                	jmp    1a29f <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 4)
   1a28c:	b9 1a 34 08 00       	mov    ecx,0x8341a
   1a291:	eb 0c                	jmp    1a29f <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 2)
   1a293:	b9 1c 34 08 00       	mov    ecx,0x8341c
   1a298:	eb 05                	jmp    1a29f <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 1)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a29a:	b9 21 34 08 00       	mov    ecx,0x83421
/home/yogi/src/os/chrisOS/src/cpu/smp.c:87 (discriminator 3)
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
   1a29f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a2a2:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a2a6:	0f b7 c0             	movzx  eax,ax
   1a2a9:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 3)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a2ac:	85 c0                	test   eax,eax
   1a2ae:	74 39                	je     1a2e9 <printMPTable+0x20a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:88
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
   1a2b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a2b3:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a2b7:	0f b7 c0             	movzx  eax,ax
   1a2ba:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1a2bd:	83 f8 01             	cmp    eax,0x1
   1a2c0:	74 20                	je     1a2e2 <printMPTable+0x203>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 1)
   1a2c2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a2c5:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a2c9:	0f b7 c0             	movzx  eax,ax
   1a2cc:	83 e0 03             	and    eax,0x3
   1a2cf:	83 f8 02             	cmp    eax,0x2
   1a2d2:	75 07                	jne    1a2db <printMPTable+0x1fc>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 3)
   1a2d4:	ba 23 34 08 00       	mov    edx,0x83423
   1a2d9:	eb 13                	jmp    1a2ee <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 4)
   1a2db:	ba 27 34 08 00       	mov    edx,0x83427
   1a2e0:	eb 0c                	jmp    1a2ee <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 2)
   1a2e2:	ba 2d 34 08 00       	mov    edx,0x8342d
   1a2e7:	eb 05                	jmp    1a2ee <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 4)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a2e9:	ba 30 34 08 00       	mov    edx,0x83430
/home/yogi/src/os/chrisOS/src/cpu/smp.c:82 (discriminator 6)
                        mpptr->irqSrc.irqtype==0?"INT"                      
   1a2ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a2f1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 6)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a2f5:	84 c0                	test   al,al
   1a2f7:	74 3d                	je     1a336 <printMPTable+0x257>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:83
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
   1a2f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a2fc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84
                            :mpptr->irqSrc.irqtype==2?"SMI"
   1a300:	3c 01                	cmp    al,0x1
   1a302:	74 2b                	je     1a32f <printMPTable+0x250>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84 (discriminator 1)
   1a304:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a307:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:85 (discriminator 1)
                            :mpptr->irqSrc.irqtype==3?"Ext"
   1a30b:	3c 02                	cmp    al,0x2
   1a30d:	74 19                	je     1a328 <printMPTable+0x249>
   1a30f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a312:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:86 (discriminator 1)
                            :"unk",                                 //iType
   1a316:	3c 03                	cmp    al,0x3
   1a318:	75 07                	jne    1a321 <printMPTable+0x242>
   1a31a:	b8 33 34 08 00       	mov    eax,0x83433
   1a31f:	eb 1a                	jmp    1a33b <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:86 (discriminator 2)
   1a321:	b8 37 34 08 00       	mov    eax,0x83437
   1a326:	eb 13                	jmp    1a33b <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:85 (discriminator 2)
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
   1a328:	b8 3b 34 08 00       	mov    eax,0x8343b
   1a32d:	eb 0c                	jmp    1a33b <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84 (discriminator 2)
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
   1a32f:	b8 3f 34 08 00       	mov    eax,0x8343f
   1a334:	eb 05                	jmp    1a33b <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 7)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a336:	b8 43 34 08 00       	mov    eax,0x83443
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 9)
   1a33b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1a33e:	57                   	push   edi
   1a33f:	56                   	push   esi
   1a340:	53                   	push   ebx
   1a341:	51                   	push   ecx
   1a342:	52                   	push   edx
   1a343:	50                   	push   eax
   1a344:	68 48 34 08 00       	push   0x83448
   1a349:	e8 55 d5 00 00       	call   278a3 <printk>
   1a34e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:94 (discriminator 9)
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
   1a351:	e9 2d 01 00 00       	jmp    1a483 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a356:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a359:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a35d:	0f b6 c0             	movzx  eax,al
   1a360:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a363:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a366:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a36a:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a36d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a370:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a374:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a377:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a37a:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a37e:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:105
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
   1a381:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a384:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a388:	0f b7 c0             	movzx  eax,ax
   1a38b:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a38e:	85 c0                	test   eax,eax
   1a390:	74 39                	je     1a3cb <printMPTable+0x2ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:106
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
   1a392:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a395:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a399:	0f b7 c0             	movzx  eax,ax
   1a39c:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   1a39f:	83 f8 04             	cmp    eax,0x4
   1a3a2:	74 20                	je     1a3c4 <printMPTable+0x2e5>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 1)
   1a3a4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a3a7:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a3ab:	0f b7 c0             	movzx  eax,ax
   1a3ae:	83 e0 0c             	and    eax,0xc
   1a3b1:	83 f8 08             	cmp    eax,0x8
   1a3b4:	75 07                	jne    1a3bd <printMPTable+0x2de>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 3)
   1a3b6:	b9 18 34 08 00       	mov    ecx,0x83418
   1a3bb:	eb 13                	jmp    1a3d0 <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 4)
   1a3bd:	b9 1a 34 08 00       	mov    ecx,0x8341a
   1a3c2:	eb 0c                	jmp    1a3d0 <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 2)
   1a3c4:	b9 1c 34 08 00       	mov    ecx,0x8341c
   1a3c9:	eb 05                	jmp    1a3d0 <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 1)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a3cb:	b9 21 34 08 00       	mov    ecx,0x83421
/home/yogi/src/os/chrisOS/src/cpu/smp.c:102 (discriminator 3)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
   1a3d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a3d3:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a3d7:	0f b7 c0             	movzx  eax,ax
   1a3da:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 3)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a3dd:	85 c0                	test   eax,eax
   1a3df:	74 39                	je     1a41a <printMPTable+0x33b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:103
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
   1a3e1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a3e4:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a3e8:	0f b7 c0             	movzx  eax,ax
   1a3eb:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1a3ee:	83 f8 01             	cmp    eax,0x1
   1a3f1:	74 20                	je     1a413 <printMPTable+0x334>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 1)
   1a3f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a3f6:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a3fa:	0f b7 c0             	movzx  eax,ax
   1a3fd:	83 e0 03             	and    eax,0x3
   1a400:	83 f8 02             	cmp    eax,0x2
   1a403:	75 07                	jne    1a40c <printMPTable+0x32d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 3)
   1a405:	ba 23 34 08 00       	mov    edx,0x83423
   1a40a:	eb 13                	jmp    1a41f <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 4)
   1a40c:	ba 27 34 08 00       	mov    edx,0x83427
   1a411:	eb 0c                	jmp    1a41f <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 2)
   1a413:	ba 2d 34 08 00       	mov    edx,0x8342d
   1a418:	eb 05                	jmp    1a41f <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 4)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a41a:	ba 30 34 08 00       	mov    edx,0x83430
/home/yogi/src/os/chrisOS/src/cpu/smp.c:97 (discriminator 6)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
   1a41f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a422:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 6)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a426:	84 c0                	test   al,al
   1a428:	74 3d                	je     1a467 <printMPTable+0x388>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:98
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
   1a42a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a42d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99
                            :mpptr->lintSrc.irqtype==2?"SMI"
   1a431:	3c 01                	cmp    al,0x1
   1a433:	74 2b                	je     1a460 <printMPTable+0x381>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99 (discriminator 1)
   1a435:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a438:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:100 (discriminator 1)
                            :mpptr->lintSrc.irqtype==3?"Ext"
   1a43c:	3c 02                	cmp    al,0x2
   1a43e:	74 19                	je     1a459 <printMPTable+0x37a>
   1a440:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a443:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:101 (discriminator 1)
                            :"unk", //iType
   1a447:	3c 03                	cmp    al,0x3
   1a449:	75 07                	jne    1a452 <printMPTable+0x373>
   1a44b:	b8 33 34 08 00       	mov    eax,0x83433
   1a450:	eb 1a                	jmp    1a46c <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:101 (discriminator 2)
   1a452:	b8 37 34 08 00       	mov    eax,0x83437
   1a457:	eb 13                	jmp    1a46c <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:100 (discriminator 2)
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
   1a459:	b8 3b 34 08 00       	mov    eax,0x8343b
   1a45e:	eb 0c                	jmp    1a46c <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99 (discriminator 2)
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
   1a460:	b8 3f 34 08 00       	mov    eax,0x8343f
   1a465:	eb 05                	jmp    1a46c <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 7)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a467:	b8 43 34 08 00       	mov    eax,0x83443
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 9)
   1a46c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1a46f:	57                   	push   edi
   1a470:	56                   	push   esi
   1a471:	53                   	push   ebx
   1a472:	51                   	push   ecx
   1a473:	52                   	push   edx
   1a474:	50                   	push   eax
   1a475:	68 80 34 08 00       	push   0x83480
   1a47a:	e8 24 d4 00 00       	call   278a3 <printk>
   1a47f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:109 (discriminator 9)
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
   1a482:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:113
            default:
                return;
        }
        mpptr++;
   1a483:	83 45 e4 20          	add    DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:114
        cnt++;
   1a487:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:115
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   1a48b:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a48f:	7e 40                	jle    1a4d1 <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:115 (discriminator 1)
   1a491:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1a494:	8d 58 02             	lea    ebx,[eax+0x2]
   1a497:	e8 0b df ff ff       	call   183a7 <cursorGetMaxY>
   1a49c:	89 c1                	mov    ecx,eax
   1a49e:	89 d8                	mov    eax,ebx
   1a4a0:	99                   	cdq    
   1a4a1:	f7 f9                	idiv   ecx
   1a4a3:	89 d0                	mov    eax,edx
   1a4a5:	85 c0                	test   eax,eax
   1a4a7:	75 28                	jne    1a4d1 <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:117
        {
            puts("Paused, press a key to continue");
   1a4a9:	83 ec 0c             	sub    esp,0xc
   1a4ac:	68 b8 34 08 00       	push   0x834b8
   1a4b1:	e8 b0 df ff ff       	call   18466 <puts>
   1a4b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:118
            waitForKeyboardKey();
   1a4b9:	e8 99 6d ff ff       	call   11257 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:119
            cursorMoveTo(0,cursorGetPosY());
   1a4be:	e8 14 df ff ff       	call   183d7 <cursorGetPosY>
   1a4c3:	83 ec 08             	sub    esp,0x8
   1a4c6:	50                   	push   eax
   1a4c7:	6a 00                	push   0x0
   1a4c9:	e8 69 de ff ff       	call   18337 <cursorMoveTo>
   1a4ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:67
void HIGH_CODE_SECTION printMPTable()
{
    mpConfig_t* mpptr=kMPConfigTable;
    int cnt=0;
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   1a4d1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a4d4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1a4d7:	83 f8 ff             	cmp    eax,0xffffffff
   1a4da:	0f 85 1c fc ff ff    	jne    1a0fc <printMPTable+0x1d>
   1a4e0:	eb 01                	jmp    1a4e3 <printMPTable+0x404>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:111
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
            default:
                return;
   1a4e2:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:123
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }

    }
}
   1a4e3:	8d 65 f4             	lea    esp,[ebp-0xc]
   1a4e6:	5b                   	pop    ebx
   1a4e7:	5e                   	pop    esi
   1a4e8:	5f                   	pop    edi
   1a4e9:	5d                   	pop    ebp
   1a4ea:	c3                   	ret    

0001a4eb <mpInit>:
mpInit():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:126

unsigned HIGH_CODE_SECTION mpInit()
{
   1a4eb:	55                   	push   ebp
   1a4ec:	89 e5                	mov    ebp,esp
   1a4ee:	57                   	push   edi
   1a4ef:	56                   	push   esi
   1a4f0:	53                   	push   ebx
   1a4f1:	83 ec 5c             	sub    esp,0x5c
/home/yogi/src/os/chrisOS/src/cpu/smp.c:129
    uint8_t* recPtr;
    char lTempString[15];
    memset(lTempString, 0, 15);
   1a4f4:	83 ec 04             	sub    esp,0x4
   1a4f7:	6a 0f                	push   0xf
   1a4f9:	6a 00                	push   0x0
   1a4fb:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a4fe:	50                   	push   eax
   1a4ff:	e8 39 b1 00 00       	call   2563d <memset>
   1a504:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:130
    mpFindTables();
   1a507:	e8 f9 fa ff ff       	call   1a005 <mpFindTables>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:131
    printd(DEBUG_MP,"MP table found @ 0x%08X, sig=%c%c%c%c, features=%u/%u/%u/%u/%u, length=%u\n", mp, mp->signature[0], mp->signature[1], mp->signature[2], mp->signature[3], mp->feature1, mp->feature2, mp->feature3, mp->feature4, mp->feature5, mp->length);
   1a50c:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a511:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1a515:	0f b6 f0             	movzx  esi,al
   1a518:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a51d:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1a521:	0f b6 f8             	movzx  edi,al
   1a524:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a529:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1a52d:	0f b6 c0             	movzx  eax,al
   1a530:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a533:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a538:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
   1a53c:	0f b6 d8             	movzx  ebx,al
   1a53f:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
   1a542:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a547:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
   1a54b:	0f b6 c8             	movzx  ecx,al
   1a54e:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
   1a551:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a556:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a55a:	0f b6 d0             	movzx  edx,al
   1a55d:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   1a560:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a565:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a569:	0f be c0             	movsx  eax,al
   1a56c:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
   1a56f:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a574:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a578:	0f be d8             	movsx  ebx,al
   1a57b:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a580:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a584:	0f be c8             	movsx  ecx,al
   1a587:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a58c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a58f:	0f be d0             	movsx  edx,al
   1a592:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a597:	83 ec 0c             	sub    esp,0xc
   1a59a:	56                   	push   esi
   1a59b:	57                   	push   edi
   1a59c:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a59f:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a5a2:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
   1a5a5:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
   1a5a8:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
   1a5ab:	53                   	push   ebx
   1a5ac:	51                   	push   ecx
   1a5ad:	52                   	push   edx
   1a5ae:	50                   	push   eax
   1a5af:	68 ec 34 08 00       	push   0x834ec
   1a5b4:	68 00 08 00 00       	push   0x800
   1a5b9:	e8 05 d3 00 00       	call   278c3 <printd>
   1a5be:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/cpu/smp.c:132
    if (mp->feature1!=0)
   1a5c1:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a5c6:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a5ca:	84 c0                	test   al,al
   1a5cc:	74 27                	je     1a5f5 <mpInit+0x10a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:134
    {
        printk("NOTE: need to implement Intel MP default configurations (%u)",mp->feature1);
   1a5ce:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a5d3:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a5d7:	0f b6 c0             	movzx  eax,al
   1a5da:	83 ec 08             	sub    esp,0x8
   1a5dd:	50                   	push   eax
   1a5de:	68 38 35 08 00       	push   0x83538
   1a5e3:	e8 bb d2 00 00       	call   278a3 <printk>
   1a5e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:135
        return false;
   1a5eb:	b8 00 00 00 00       	mov    eax,0x0
   1a5f0:	e9 12 0a 00 00       	jmp    1b007 <mpInit+0xb1c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:137
    }
    mc=(struct mpc_table*)mp->physptr;
   1a5f5:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a5fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a5fd:	a3 6c 65 09 00       	mov    ds:0x9656c,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:138
    printd(DEBUG_MP,"MC table found @ 0x%08X, sig=%c%c%c%c, length=%u, lapic=0x%08X, OEM tbl=0x%08X\n", mc, mc->signature[0], mc->signature[1], mc->signature[2], mc->signature[3], mc->length, mc->lapic, mc->oemptr);
   1a602:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a607:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
   1a60a:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a60f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   1a612:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a615:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a61a:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
   1a61e:	0f b7 f0             	movzx  esi,ax
   1a621:	89 75 b0             	mov    DWORD PTR [ebp-0x50],esi
   1a624:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a629:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a62d:	0f be f8             	movsx  edi,al
   1a630:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a635:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a639:	0f be f0             	movsx  esi,al
   1a63c:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a641:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a645:	0f be d8             	movsx  ebx,al
   1a648:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a64d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a650:	0f be d0             	movsx  edx,al
   1a653:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a658:	83 ec 08             	sub    esp,0x8
   1a65b:	51                   	push   ecx
   1a65c:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a65f:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a662:	57                   	push   edi
   1a663:	56                   	push   esi
   1a664:	53                   	push   ebx
   1a665:	52                   	push   edx
   1a666:	50                   	push   eax
   1a667:	68 78 35 08 00       	push   0x83578
   1a66c:	68 00 08 00 00       	push   0x800
   1a671:	e8 4d d2 00 00       	call   278c3 <printd>
   1a676:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:139
    memcpy(lTempString, mc->oem,4);
   1a679:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a67e:	83 c0 08             	add    eax,0x8
   1a681:	83 ec 04             	sub    esp,0x4
   1a684:	6a 04                	push   0x4
   1a686:	50                   	push   eax
   1a687:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a68a:	50                   	push   eax
   1a68b:	e8 74 bb 00 00       	call   26204 <memcpy>
   1a690:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:140
    printd(DEBUG_MP,"\tMPC OEM '%s'", lTempString);
   1a693:	83 ec 04             	sub    esp,0x4
   1a696:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a699:	50                   	push   eax
   1a69a:	68 c8 35 08 00       	push   0x835c8
   1a69f:	68 00 08 00 00       	push   0x800
   1a6a4:	e8 1a d2 00 00       	call   278c3 <printd>
   1a6a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:141
    memset(lTempString, 0, 15);
   1a6ac:	83 ec 04             	sub    esp,0x4
   1a6af:	6a 0f                	push   0xf
   1a6b1:	6a 00                	push   0x0
   1a6b3:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a6b6:	50                   	push   eax
   1a6b7:	e8 81 af 00 00       	call   2563d <memset>
   1a6bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:142
        memcpy(lTempString, mc->productid,12);
   1a6bf:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a6c4:	83 c0 10             	add    eax,0x10
   1a6c7:	83 ec 04             	sub    esp,0x4
   1a6ca:	6a 0c                	push   0xc
   1a6cc:	50                   	push   eax
   1a6cd:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a6d0:	50                   	push   eax
   1a6d1:	e8 2e bb 00 00       	call   26204 <memcpy>
   1a6d6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:143
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
   1a6d9:	83 ec 04             	sub    esp,0x4
   1a6dc:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a6df:	50                   	push   eax
   1a6e0:	68 d6 35 08 00       	push   0x835d6
   1a6e5:	68 00 08 00 00       	push   0x800
   1a6ea:	e8 d4 d1 00 00       	call   278c3 <printd>
   1a6ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:144
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
   1a6f2:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a6f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a6fa:	83 c0 2c             	add    eax,0x2c
   1a6fd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:145
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
   1a700:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a705:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a709:	0f b7 c0             	movzx  eax,ax
   1a70c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a70f:	50                   	push   eax
   1a710:	68 ec 35 08 00       	push   0x835ec
   1a715:	68 00 08 00 00       	push   0x800
   1a71a:	e8 a4 d1 00 00       	call   278c3 <printd>
   1a71f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146
    for (int cnt=0;cnt< mc->count;cnt++)
   1a722:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   1a729:	e9 6f 08 00 00       	jmp    1af9d <mpInit+0xab2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:148
    {
        switch((int)*(uint8_t*)recPtr)
   1a72e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a731:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a734:	0f b6 c0             	movzx  eax,al
   1a737:	83 f8 04             	cmp    eax,0x4
   1a73a:	0f 87 04 08 00 00    	ja     1af44 <mpInit+0xa59>
   1a740:	8b 04 85 58 37 08 00 	mov    eax,DWORD PTR [eax*4+0x83758]
   1a747:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:152
        {
            case 0:
                //TODO: Add all this info to a kernel structure
                printd(DEBUG_MP,"\tCPU:  ");
   1a749:	83 ec 08             	sub    esp,0x8
   1a74c:	68 13 36 08 00       	push   0x83613
   1a751:	68 00 08 00 00       	push   0x800
   1a756:	e8 68 d1 00 00       	call   278c3 <printd>
   1a75b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:153
                struct mpc_cpu* cpu=(struct mpc_cpu*)recPtr;
   1a75e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a761:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:154
                memcpy(kMPConfigTable[cnt].rec,recPtr,20);
   1a764:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a769:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a76c:	c1 e2 05             	shl    edx,0x5
   1a76f:	01 d0                	add    eax,edx
   1a771:	83 ec 04             	sub    esp,0x4
   1a774:	6a 14                	push   0x14
   1a776:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a779:	50                   	push   eax
   1a77a:	e8 85 ba 00 00       	call   26204 <memcpy>
   1a77f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:155
                if (cnt==0)
   1a782:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a786:	75 16                	jne    1a79e <mpInit+0x2b3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:156
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a788:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a78d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a790:	c1 e2 05             	shl    edx,0x5
   1a793:	01 d0                	add    eax,edx
   1a795:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a79c:	eb 72                	jmp    1a810 <mpInit+0x325>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:157
                else if (cnt==mc->count-1)
   1a79e:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a7a3:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a7a7:	0f b7 c0             	movzx  eax,ax
   1a7aa:	83 e8 01             	sub    eax,0x1
   1a7ad:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a7b0:	75 16                	jne    1a7c8 <mpInit+0x2dd>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:158
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a7b2:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a7b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a7ba:	c1 e2 05             	shl    edx,0x5
   1a7bd:	01 d0                	add    eax,edx
   1a7bf:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a7c6:	eb 48                	jmp    1a810 <mpInit+0x325>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:161
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a7c8:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a7cd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a7d0:	c1 e2 05             	shl    edx,0x5
   1a7d3:	01 d0                	add    eax,edx
   1a7d5:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1a7db:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a7de:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a7e4:	c1 e1 05             	shl    ecx,0x5
   1a7e7:	01 ca                	add    edx,ecx
   1a7e9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:162
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a7ec:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a7f1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a7f4:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a7fa:	c1 e2 05             	shl    edx,0x5
   1a7fd:	01 d0                	add    eax,edx
   1a7ff:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1a805:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a808:	c1 e1 05             	shl    ecx,0x5
   1a80b:	01 ca                	add    edx,ecx
   1a80d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:164
                }
                kMPConfigTable[cnt].recType=CPU;
   1a810:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a815:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a818:	c1 e2 05             	shl    edx,0x5
   1a81b:	01 d0                	add    eax,edx
   1a81d:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165
                printd(DEBUG_MP,"APICId=%u, Enabled=%s, %s\n", cpu->apicid, (cpu->cpuflag&0x1)?"yes":"no", (cpu->cpuflag&0x2)?"BSP":"");
   1a824:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a827:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a82b:	0f b6 c0             	movzx  eax,al
   1a82e:	83 e0 02             	and    eax,0x2
   1a831:	85 c0                	test   eax,eax
   1a833:	74 07                	je     1a83c <mpInit+0x351>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 1)
   1a835:	b9 94 33 08 00       	mov    ecx,0x83394
   1a83a:	eb 05                	jmp    1a841 <mpInit+0x356>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 2)
   1a83c:	b9 98 33 08 00       	mov    ecx,0x83398
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 4)
   1a841:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a844:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a848:	0f b6 c0             	movzx  eax,al
   1a84b:	83 e0 01             	and    eax,0x1
   1a84e:	85 c0                	test   eax,eax
   1a850:	74 07                	je     1a859 <mpInit+0x36e>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 5)
   1a852:	ba 99 33 08 00       	mov    edx,0x83399
   1a857:	eb 05                	jmp    1a85e <mpInit+0x373>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 6)
   1a859:	ba 9d 33 08 00       	mov    edx,0x8339d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 8)
   1a85e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a861:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a865:	0f b6 c0             	movzx  eax,al
   1a868:	83 ec 0c             	sub    esp,0xc
   1a86b:	51                   	push   ecx
   1a86c:	52                   	push   edx
   1a86d:	50                   	push   eax
   1a86e:	68 1b 36 08 00       	push   0x8361b
   1a873:	68 00 08 00 00       	push   0x800
   1a878:	e8 46 d0 00 00       	call   278c3 <printd>
   1a87d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:166 (discriminator 8)
                recPtr+=20;
   1a880:	83 45 e4 14          	add    DWORD PTR [ebp-0x1c],0x14
/home/yogi/src/os/chrisOS/src/cpu/smp.c:167 (discriminator 8)
                break;
   1a884:	e9 df 06 00 00       	jmp    1af68 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:169
            case 1:
                printd(DEBUG_MP,"\tBus:  ");
   1a889:	83 ec 08             	sub    esp,0x8
   1a88c:	68 36 36 08 00       	push   0x83636
   1a891:	68 00 08 00 00       	push   0x800
   1a896:	e8 28 d0 00 00       	call   278c3 <printd>
   1a89b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:170
                struct mpc_bus* bus=(struct mpc_bus*)recPtr;
   1a89e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a8a1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:171
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a8a4:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a8a9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8ac:	c1 e2 05             	shl    edx,0x5
   1a8af:	01 d0                	add    eax,edx
   1a8b1:	83 ec 04             	sub    esp,0x4
   1a8b4:	6a 08                	push   0x8
   1a8b6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a8b9:	50                   	push   eax
   1a8ba:	e8 45 b9 00 00       	call   26204 <memcpy>
   1a8bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:172
                if (cnt==0)
   1a8c2:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a8c6:	75 16                	jne    1a8de <mpInit+0x3f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:173
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a8c8:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a8cd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8d0:	c1 e2 05             	shl    edx,0x5
   1a8d3:	01 d0                	add    eax,edx
   1a8d5:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a8dc:	eb 72                	jmp    1a950 <mpInit+0x465>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:174
                else if (cnt==mc->count-1)
   1a8de:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a8e3:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a8e7:	0f b7 c0             	movzx  eax,ax
   1a8ea:	83 e8 01             	sub    eax,0x1
   1a8ed:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a8f0:	75 16                	jne    1a908 <mpInit+0x41d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:175
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a8f2:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a8f7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8fa:	c1 e2 05             	shl    edx,0x5
   1a8fd:	01 d0                	add    eax,edx
   1a8ff:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a906:	eb 48                	jmp    1a950 <mpInit+0x465>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:178
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a908:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a90d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a910:	c1 e2 05             	shl    edx,0x5
   1a913:	01 d0                	add    eax,edx
   1a915:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1a91b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a91e:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a924:	c1 e1 05             	shl    ecx,0x5
   1a927:	01 ca                	add    edx,ecx
   1a929:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:179
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a92c:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a931:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a934:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a93a:	c1 e2 05             	shl    edx,0x5
   1a93d:	01 d0                	add    eax,edx
   1a93f:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1a945:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a948:	c1 e1 05             	shl    ecx,0x5
   1a94b:	01 ca                	add    edx,ecx
   1a94d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:181
                }
                recPtr+=8;
   1a950:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:182
                kMPConfigTable[cnt].recType=BUS;
   1a954:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a959:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a95c:	c1 e2 05             	shl    edx,0x5
   1a95f:	01 d0                	add    eax,edx
   1a961:	c7 40 14 01 00 00 00 	mov    DWORD PTR [eax+0x14],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:183
                printd(DEBUG_MP,"ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", bus->busid, bus->bustype[0], bus->bustype[1], bus->bustype[2], bus->bustype[3], bus->bustype[4], bus->bustype[5], bus->type );
   1a968:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a96b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a96e:	0f b6 c8             	movzx  ecx,al
   1a971:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a974:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   1a978:	0f b6 c0             	movzx  eax,al
   1a97b:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a97e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a981:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   1a985:	0f b6 f8             	movzx  edi,al
   1a988:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   1a98b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a98e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   1a992:	0f b6 f8             	movzx  edi,al
   1a995:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a998:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   1a99c:	0f b6 f0             	movzx  esi,al
   1a99f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a9a2:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a9a6:	0f b6 d8             	movzx  ebx,al
   1a9a9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a9ac:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a9b0:	0f b6 d0             	movzx  edx,al
   1a9b3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a9b6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a9ba:	0f b6 c0             	movzx  eax,al
   1a9bd:	83 ec 08             	sub    esp,0x8
   1a9c0:	51                   	push   ecx
   1a9c1:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a9c4:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a9c7:	57                   	push   edi
   1a9c8:	56                   	push   esi
   1a9c9:	53                   	push   ebx
   1a9ca:	52                   	push   edx
   1a9cb:	50                   	push   eax
   1a9cc:	68 40 36 08 00       	push   0x83640
   1a9d1:	68 00 08 00 00       	push   0x800
   1a9d6:	e8 e8 ce 00 00       	call   278c3 <printd>
   1a9db:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:184
                break;
   1a9de:	e9 85 05 00 00       	jmp    1af68 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:186
            case 2:
                printd(DEBUG_MP,"\tAPIC: ");
   1a9e3:	83 ec 08             	sub    esp,0x8
   1a9e6:	68 66 36 08 00       	push   0x83666
   1a9eb:	68 00 08 00 00       	push   0x800
   1a9f0:	e8 ce ce 00 00       	call   278c3 <printd>
   1a9f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:187
                struct mpc_ioapic* apic=(struct mpc_ioapic*)recPtr;
   1a9f8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a9fb:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:188
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a9fe:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aa03:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aa06:	c1 e2 05             	shl    edx,0x5
   1aa09:	01 d0                	add    eax,edx
   1aa0b:	83 ec 04             	sub    esp,0x4
   1aa0e:	6a 08                	push   0x8
   1aa10:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1aa13:	50                   	push   eax
   1aa14:	e8 eb b7 00 00       	call   26204 <memcpy>
   1aa19:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:189
                if (cnt==0)
   1aa1c:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1aa20:	75 16                	jne    1aa38 <mpInit+0x54d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:190
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1aa22:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aa27:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aa2a:	c1 e2 05             	shl    edx,0x5
   1aa2d:	01 d0                	add    eax,edx
   1aa2f:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1aa36:	eb 72                	jmp    1aaaa <mpInit+0x5bf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:191
                else if (cnt==mc->count-1)
   1aa38:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1aa3d:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1aa41:	0f b7 c0             	movzx  eax,ax
   1aa44:	83 e8 01             	sub    eax,0x1
   1aa47:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1aa4a:	75 16                	jne    1aa62 <mpInit+0x577>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:192
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1aa4c:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aa51:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aa54:	c1 e2 05             	shl    edx,0x5
   1aa57:	01 d0                	add    eax,edx
   1aa59:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1aa60:	eb 48                	jmp    1aaaa <mpInit+0x5bf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:195
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1aa62:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aa67:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aa6a:	c1 e2 05             	shl    edx,0x5
   1aa6d:	01 d0                	add    eax,edx
   1aa6f:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1aa75:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1aa78:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1aa7e:	c1 e1 05             	shl    ecx,0x5
   1aa81:	01 ca                	add    edx,ecx
   1aa83:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:196
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1aa86:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aa8b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aa8e:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1aa94:	c1 e2 05             	shl    edx,0x5
   1aa97:	01 d0                	add    eax,edx
   1aa99:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1aa9f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1aaa2:	c1 e1 05             	shl    ecx,0x5
   1aaa5:	01 ca                	add    edx,ecx
   1aaa7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:198
                }
                kMPConfigTable[cnt].recType=IOAPIC;
   1aaaa:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aaaf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aab2:	c1 e2 05             	shl    edx,0x5
   1aab5:	01 d0                	add    eax,edx
   1aab7:	c7 40 14 02 00 00 00 	mov    DWORD PTR [eax+0x14],0x2
/home/yogi/src/os/chrisOS/src/cpu/smp.c:199
                recPtr+=8;
   1aabe:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200
                printd(DEBUG_MP,"ID=%02X, Address=0x%08X, Enabled=%s\n",apic->apicid, apic->apicaddr, apic->flags&0x1?"yes":"no");
   1aac2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1aac5:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1aac9:	0f b6 c0             	movzx  eax,al
   1aacc:	83 e0 01             	and    eax,0x1
   1aacf:	85 c0                	test   eax,eax
   1aad1:	74 07                	je     1aada <mpInit+0x5ef>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 1)
   1aad3:	b9 99 33 08 00       	mov    ecx,0x83399
   1aad8:	eb 05                	jmp    1aadf <mpInit+0x5f4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 2)
   1aada:	b9 9d 33 08 00       	mov    ecx,0x8339d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 4)
   1aadf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1aae2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1aae5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1aae8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1aaec:	0f b6 c0             	movzx  eax,al
   1aaef:	83 ec 0c             	sub    esp,0xc
   1aaf2:	51                   	push   ecx
   1aaf3:	52                   	push   edx
   1aaf4:	50                   	push   eax
   1aaf5:	68 70 36 08 00       	push   0x83670
   1aafa:	68 00 08 00 00       	push   0x800
   1aaff:	e8 bf cd 00 00       	call   278c3 <printd>
   1ab04:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:201 (discriminator 4)
                kIOAPICPtr=(uintptr_t*)apic->apicaddr;
   1ab07:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1ab0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ab0d:	a3 7c 98 12 00       	mov    ds:0x12987c,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:202 (discriminator 4)
                break;
   1ab12:	e9 51 04 00 00       	jmp    1af68 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:204
            case 3:
                printd(DEBUG_MP,"\tIRQ:  ");
   1ab17:	83 ec 08             	sub    esp,0x8
   1ab1a:	68 95 36 08 00       	push   0x83695
   1ab1f:	68 00 08 00 00       	push   0x800
   1ab24:	e8 9a cd 00 00       	call   278c3 <printd>
   1ab29:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:205
                struct mpc_intsrc*intr=(struct mpc_intsrc*)recPtr;
   1ab2c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1ab2f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:206
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1ab32:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ab37:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ab3a:	c1 e2 05             	shl    edx,0x5
   1ab3d:	01 d0                	add    eax,edx
   1ab3f:	83 ec 04             	sub    esp,0x4
   1ab42:	6a 08                	push   0x8
   1ab44:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1ab47:	50                   	push   eax
   1ab48:	e8 b7 b6 00 00       	call   26204 <memcpy>
   1ab4d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:207
                if (cnt==0)
   1ab50:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1ab54:	75 16                	jne    1ab6c <mpInit+0x681>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:208
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1ab56:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ab5b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ab5e:	c1 e2 05             	shl    edx,0x5
   1ab61:	01 d0                	add    eax,edx
   1ab63:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1ab6a:	eb 72                	jmp    1abde <mpInit+0x6f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:209
                else if (cnt==mc->count-1)
   1ab6c:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1ab71:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1ab75:	0f b7 c0             	movzx  eax,ax
   1ab78:	83 e8 01             	sub    eax,0x1
   1ab7b:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1ab7e:	75 16                	jne    1ab96 <mpInit+0x6ab>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:210
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1ab80:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ab85:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ab88:	c1 e2 05             	shl    edx,0x5
   1ab8b:	01 d0                	add    eax,edx
   1ab8d:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1ab94:	eb 48                	jmp    1abde <mpInit+0x6f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:213
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1ab96:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ab9b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ab9e:	c1 e2 05             	shl    edx,0x5
   1aba1:	01 d0                	add    eax,edx
   1aba3:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1aba9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1abac:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1abb2:	c1 e1 05             	shl    ecx,0x5
   1abb5:	01 ca                	add    edx,ecx
   1abb7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:214
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1abba:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1abbf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1abc2:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1abc8:	c1 e2 05             	shl    edx,0x5
   1abcb:	01 d0                	add    eax,edx
   1abcd:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1abd3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1abd6:	c1 e1 05             	shl    ecx,0x5
   1abd9:	01 ca                	add    edx,ecx
   1abdb:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:216
                }
                kMPConfigTable[cnt].recType = IOINTASS;
   1abde:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1abe3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1abe6:	c1 e2 05             	shl    edx,0x5
   1abe9:	01 d0                	add    eax,edx
   1abeb:	c7 40 14 03 00 00 00 	mov    DWORD PTR [eax+0x14],0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:217
                recPtr+=8;
   1abf2:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1abf6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1abf9:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1abfd:	0f b6 c0             	movzx  eax,al
   1ac00:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1ac03:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac06:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ac0a:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1ac0d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac10:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ac14:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1ac17:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac1a:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ac1e:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:227
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
   1ac21:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac24:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac28:	0f b7 c0             	movzx  eax,ax
   1ac2b:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ac2e:	85 c0                	test   eax,eax
   1ac30:	74 39                	je     1ac6b <mpInit+0x780>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:228
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
   1ac32:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac35:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac39:	0f b7 c0             	movzx  eax,ax
   1ac3c:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
   1ac3f:	83 f8 04             	cmp    eax,0x4
   1ac42:	74 20                	je     1ac64 <mpInit+0x779>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 1)
   1ac44:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac47:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac4b:	0f b7 c0             	movzx  eax,ax
   1ac4e:	83 e0 0c             	and    eax,0xc
   1ac51:	83 f8 08             	cmp    eax,0x8
   1ac54:	75 07                	jne    1ac5d <mpInit+0x772>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 3)
   1ac56:	b9 18 34 08 00       	mov    ecx,0x83418
   1ac5b:	eb 13                	jmp    1ac70 <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 4)
   1ac5d:	b9 1a 34 08 00       	mov    ecx,0x8341a
   1ac62:	eb 0c                	jmp    1ac70 <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 2)
   1ac64:	b9 1c 34 08 00       	mov    ecx,0x8341c
   1ac69:	eb 05                	jmp    1ac70 <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ac6b:	b9 21 34 08 00       	mov    ecx,0x83421
/home/yogi/src/os/chrisOS/src/cpu/smp.c:224 (discriminator 3)
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
   1ac70:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac73:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac77:	0f b7 c0             	movzx  eax,ax
   1ac7a:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ac7d:	85 c0                	test   eax,eax
   1ac7f:	74 39                	je     1acba <mpInit+0x7cf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:225
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
   1ac81:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac84:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac88:	0f b7 c0             	movzx  eax,ax
   1ac8b:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1ac8e:	83 f8 01             	cmp    eax,0x1
   1ac91:	74 20                	je     1acb3 <mpInit+0x7c8>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 1)
   1ac93:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac96:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac9a:	0f b7 c0             	movzx  eax,ax
   1ac9d:	83 e0 03             	and    eax,0x3
   1aca0:	83 f8 02             	cmp    eax,0x2
   1aca3:	75 07                	jne    1acac <mpInit+0x7c1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 3)
   1aca5:	ba 23 34 08 00       	mov    edx,0x83423
   1acaa:	eb 13                	jmp    1acbf <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 4)
   1acac:	ba 27 34 08 00       	mov    edx,0x83427
   1acb1:	eb 0c                	jmp    1acbf <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 2)
   1acb3:	ba 2d 34 08 00       	mov    edx,0x8342d
   1acb8:	eb 05                	jmp    1acbf <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1acba:	ba 30 34 08 00       	mov    edx,0x83430
/home/yogi/src/os/chrisOS/src/cpu/smp.c:219 (discriminator 6)
                        intr->irqtype==0?"INT"                      
   1acbf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1acc2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1acc6:	84 c0                	test   al,al
   1acc8:	74 3d                	je     1ad07 <mpInit+0x81c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:220
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
   1acca:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1accd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221
                            :intr->irqtype==2?"SMI"
   1acd1:	3c 01                	cmp    al,0x1
   1acd3:	74 2b                	je     1ad00 <mpInit+0x815>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221 (discriminator 1)
   1acd5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1acd8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:222 (discriminator 1)
                            :intr->irqtype==3?"Ext"
   1acdc:	3c 02                	cmp    al,0x2
   1acde:	74 19                	je     1acf9 <mpInit+0x80e>
   1ace0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ace3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:223 (discriminator 1)
                            :"unk",                                 //iType
   1ace7:	3c 03                	cmp    al,0x3
   1ace9:	75 07                	jne    1acf2 <mpInit+0x807>
   1aceb:	b8 33 34 08 00       	mov    eax,0x83433
   1acf0:	eb 1a                	jmp    1ad0c <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:223 (discriminator 2)
   1acf2:	b8 37 34 08 00       	mov    eax,0x83437
   1acf7:	eb 13                	jmp    1ad0c <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:222 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
   1acf9:	b8 3b 34 08 00       	mov    eax,0x8343b
   1acfe:	eb 0c                	jmp    1ad0c <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221 (discriminator 2)
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
   1ad00:	b8 3f 34 08 00       	mov    eax,0x8343f
   1ad05:	eb 05                	jmp    1ad0c <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ad07:	b8 43 34 08 00       	mov    eax,0x83443
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 9)
   1ad0c:	83 ec 0c             	sub    esp,0xc
   1ad0f:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1ad12:	57                   	push   edi
   1ad13:	56                   	push   esi
   1ad14:	53                   	push   ebx
   1ad15:	51                   	push   ecx
   1ad16:	52                   	push   edx
   1ad17:	50                   	push   eax
   1ad18:	68 a0 36 08 00       	push   0x836a0
   1ad1d:	68 00 08 00 00       	push   0x800
   1ad22:	e8 9c cb 00 00       	call   278c3 <printd>
   1ad27:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:231 (discriminator 9)
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
                break;
   1ad2a:	e9 39 02 00 00       	jmp    1af68 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:233
            case 4:
                printd(DEBUG_MP,"\tLINT: ");
   1ad2f:	83 ec 08             	sub    esp,0x8
   1ad32:	68 de 36 08 00       	push   0x836de
   1ad37:	68 00 08 00 00       	push   0x800
   1ad3c:	e8 82 cb 00 00       	call   278c3 <printd>
   1ad41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:234
                struct mpc_lintsrc* lint=(struct mpc_lintsrc*)recPtr;
   1ad44:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1ad47:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:235
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1ad4a:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ad4f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ad52:	c1 e2 05             	shl    edx,0x5
   1ad55:	01 d0                	add    eax,edx
   1ad57:	83 ec 04             	sub    esp,0x4
   1ad5a:	6a 08                	push   0x8
   1ad5c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1ad5f:	50                   	push   eax
   1ad60:	e8 9f b4 00 00       	call   26204 <memcpy>
   1ad65:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:236
                if (cnt==0)
   1ad68:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1ad6c:	75 16                	jne    1ad84 <mpInit+0x899>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:237
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1ad6e:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ad73:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ad76:	c1 e2 05             	shl    edx,0x5
   1ad79:	01 d0                	add    eax,edx
   1ad7b:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1ad82:	eb 72                	jmp    1adf6 <mpInit+0x90b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:238
                else if (cnt==mc->count-1)
   1ad84:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1ad89:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1ad8d:	0f b7 c0             	movzx  eax,ax
   1ad90:	83 e8 01             	sub    eax,0x1
   1ad93:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1ad96:	75 16                	jne    1adae <mpInit+0x8c3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:239
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1ad98:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ad9d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ada0:	c1 e2 05             	shl    edx,0x5
   1ada3:	01 d0                	add    eax,edx
   1ada5:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1adac:	eb 48                	jmp    1adf6 <mpInit+0x90b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:242
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1adae:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1adb3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1adb6:	c1 e2 05             	shl    edx,0x5
   1adb9:	01 d0                	add    eax,edx
   1adbb:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1adc1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1adc4:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1adca:	c1 e1 05             	shl    ecx,0x5
   1adcd:	01 ca                	add    edx,ecx
   1adcf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:243
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1add2:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1add7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1adda:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1ade0:	c1 e2 05             	shl    edx,0x5
   1ade3:	01 d0                	add    eax,edx
   1ade5:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1adeb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1adee:	c1 e1 05             	shl    ecx,0x5
   1adf1:	01 ca                	add    edx,ecx
   1adf3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:245
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
   1adf6:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1adfb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1adfe:	c1 e2 05             	shl    edx,0x5
   1ae01:	01 d0                	add    eax,edx
   1ae03:	c7 40 14 04 00 00 00 	mov    DWORD PTR [eax+0x14],0x4
/home/yogi/src/os/chrisOS/src/cpu/smp.c:246
                recPtr+=8;
   1ae0a:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1ae0e:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae11:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae15:	0f b6 c0             	movzx  eax,al
   1ae18:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1ae1b:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae1e:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae22:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1ae25:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae28:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae2c:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1ae2f:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae32:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae36:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:256
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
   1ae39:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae3c:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ae40:	0f b7 c0             	movzx  eax,ax
   1ae43:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae46:	85 c0                	test   eax,eax
   1ae48:	74 39                	je     1ae83 <mpInit+0x998>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:257
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
   1ae4a:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae4d:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ae51:	0f b7 c0             	movzx  eax,ax
   1ae54:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
   1ae57:	83 f8 04             	cmp    eax,0x4
   1ae5a:	74 20                	je     1ae7c <mpInit+0x991>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 1)
   1ae5c:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae5f:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ae63:	0f b7 c0             	movzx  eax,ax
   1ae66:	83 e0 0c             	and    eax,0xc
   1ae69:	83 f8 08             	cmp    eax,0x8
   1ae6c:	75 07                	jne    1ae75 <mpInit+0x98a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 3)
   1ae6e:	b9 18 34 08 00       	mov    ecx,0x83418
   1ae73:	eb 13                	jmp    1ae88 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 4)
   1ae75:	b9 1a 34 08 00       	mov    ecx,0x8341a
   1ae7a:	eb 0c                	jmp    1ae88 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 2)
   1ae7c:	b9 1c 34 08 00       	mov    ecx,0x8341c
   1ae81:	eb 05                	jmp    1ae88 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae83:	b9 21 34 08 00       	mov    ecx,0x83421
/home/yogi/src/os/chrisOS/src/cpu/smp.c:253 (discriminator 3)
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
   1ae88:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae8b:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ae8f:	0f b7 c0             	movzx  eax,ax
   1ae92:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae95:	85 c0                	test   eax,eax
   1ae97:	74 39                	je     1aed2 <mpInit+0x9e7>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:254
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
   1ae99:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae9c:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1aea0:	0f b7 c0             	movzx  eax,ax
   1aea3:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1aea6:	83 f8 01             	cmp    eax,0x1
   1aea9:	74 20                	je     1aecb <mpInit+0x9e0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 1)
   1aeab:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aeae:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1aeb2:	0f b7 c0             	movzx  eax,ax
   1aeb5:	83 e0 03             	and    eax,0x3
   1aeb8:	83 f8 02             	cmp    eax,0x2
   1aebb:	75 07                	jne    1aec4 <mpInit+0x9d9>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 3)
   1aebd:	ba 23 34 08 00       	mov    edx,0x83423
   1aec2:	eb 13                	jmp    1aed7 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 4)
   1aec4:	ba 27 34 08 00       	mov    edx,0x83427
   1aec9:	eb 0c                	jmp    1aed7 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 2)
   1aecb:	ba 2d 34 08 00       	mov    edx,0x8342d
   1aed0:	eb 05                	jmp    1aed7 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aed2:	ba 30 34 08 00       	mov    edx,0x83430
/home/yogi/src/os/chrisOS/src/cpu/smp.c:248 (discriminator 6)
                             lint->irqtype==0?"INT"                      //type
   1aed7:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aeda:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aede:	84 c0                	test   al,al
   1aee0:	74 3d                	je     1af1f <mpInit+0xa34>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:249
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
   1aee2:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aee5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250
                            :lint->irqtype==2?"SMI"
   1aee9:	3c 01                	cmp    al,0x1
   1aeeb:	74 2b                	je     1af18 <mpInit+0xa2d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250 (discriminator 1)
   1aeed:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aef0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:251 (discriminator 1)
                            :lint->irqtype==3?"Ext"
   1aef4:	3c 02                	cmp    al,0x2
   1aef6:	74 19                	je     1af11 <mpInit+0xa26>
   1aef8:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aefb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:252 (discriminator 1)
                            :"unk", //iType
   1aeff:	3c 03                	cmp    al,0x3
   1af01:	75 07                	jne    1af0a <mpInit+0xa1f>
   1af03:	b8 33 34 08 00       	mov    eax,0x83433
   1af08:	eb 1a                	jmp    1af24 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:252 (discriminator 2)
   1af0a:	b8 37 34 08 00       	mov    eax,0x83437
   1af0f:	eb 13                	jmp    1af24 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:251 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
   1af11:	b8 3b 34 08 00       	mov    eax,0x8343b
   1af16:	eb 0c                	jmp    1af24 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250 (discriminator 2)
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
   1af18:	b8 3f 34 08 00       	mov    eax,0x8343f
   1af1d:	eb 05                	jmp    1af24 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1af1f:	b8 43 34 08 00       	mov    eax,0x83443
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 9)
   1af24:	83 ec 0c             	sub    esp,0xc
   1af27:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1af2a:	57                   	push   edi
   1af2b:	56                   	push   esi
   1af2c:	53                   	push   ebx
   1af2d:	51                   	push   ecx
   1af2e:	52                   	push   edx
   1af2f:	50                   	push   eax
   1af30:	68 e8 36 08 00       	push   0x836e8
   1af35:	68 00 08 00 00       	push   0x800
   1af3a:	e8 84 c9 00 00       	call   278c3 <printd>
   1af3f:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:260 (discriminator 9)
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
                break;
   1af42:	eb 24                	jmp    1af68 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:262
            default:
                printd(DEBUG_MP,"\tue %04X, ", (int)*(uint8_t*)recPtr);
   1af44:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1af47:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1af4a:	0f b6 c0             	movzx  eax,al
   1af4d:	83 ec 04             	sub    esp,0x4
   1af50:	50                   	push   eax
   1af51:	68 26 37 08 00       	push   0x83726
   1af56:	68 00 08 00 00       	push   0x800
   1af5b:	e8 63 c9 00 00       	call   278c3 <printd>
   1af60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:263
                recPtr+=8;
   1af63:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:264
                break;
   1af67:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:266
        }
        if (cnt > 0 && cnt%250==0)
   1af68:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1af6c:	7e 2b                	jle    1af99 <mpInit+0xaae>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:266 (discriminator 1)
   1af6e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1af71:	ba d3 4d 62 10       	mov    edx,0x10624dd3
   1af76:	89 c8                	mov    eax,ecx
   1af78:	f7 ea                	imul   edx
   1af7a:	c1 fa 04             	sar    edx,0x4
   1af7d:	89 c8                	mov    eax,ecx
   1af7f:	c1 f8 1f             	sar    eax,0x1f
   1af82:	29 c2                	sub    edx,eax
   1af84:	89 d0                	mov    eax,edx
   1af86:	69 c0 fa 00 00 00    	imul   eax,eax,0xfa
   1af8c:	29 c1                	sub    ecx,eax
   1af8e:	89 c8                	mov    eax,ecx
   1af90:	85 c0                	test   eax,eax
   1af92:	75 05                	jne    1af99 <mpInit+0xaae>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:267
            waitForKeyboardKey();
   1af94:	e8 be 62 ff ff       	call   11257 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146 (discriminator 2)
    memset(lTempString, 0, 15);
        memcpy(lTempString, mc->productid,12);
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
    for (int cnt=0;cnt< mc->count;cnt++)
   1af99:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146 (discriminator 1)
   1af9d:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1afa2:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1afa6:	0f b7 c0             	movzx  eax,ax
   1afa9:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1afac:	0f 8f 7c f7 ff ff    	jg     1a72e <mpInit+0x243>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:269
                break;
        }
        if (cnt > 0 && cnt%250==0)
            waitForKeyboardKey();
    }
    printd(DEBUG_MP,"rec5 pp=%08X(%08X),np=%08X(%08X)\n", kMPConfigTable[5].prevRecAddress, &kMPConfigTable[4], kMPConfigTable[5].nextRecAddress, &kMPConfigTable[6]);
   1afb2:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1afb7:	8d 98 c0 00 00 00    	lea    ebx,[eax+0xc0]
   1afbd:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1afc2:	05 a0 00 00 00       	add    eax,0xa0
   1afc7:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1afca:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1afcf:	8d 88 80 00 00 00    	lea    ecx,[eax+0x80]
   1afd5:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1afda:	05 a0 00 00 00       	add    eax,0xa0
   1afdf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1afe2:	83 ec 08             	sub    esp,0x8
   1afe5:	53                   	push   ebx
   1afe6:	52                   	push   edx
   1afe7:	51                   	push   ecx
   1afe8:	50                   	push   eax
   1afe9:	68 34 37 08 00       	push   0x83734
   1afee:	68 00 08 00 00       	push   0x800
   1aff3:	e8 cb c8 00 00       	call   278c3 <printd>
   1aff8:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:270
    return mc->count;
   1affb:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1b000:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1b004:	0f b7 c0             	movzx  eax,ax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:271 (discriminator 1)
   1b007:	8d 65 f4             	lea    esp,[ebp-0xc]
   1b00a:	5b                   	pop    ebx
   1b00b:	5e                   	pop    esi
   1b00c:	5f                   	pop    edi
   1b00d:	5d                   	pop    ebp
   1b00e:	c3                   	ret    
   1b00f:	90                   	nop

0001b010 <activateDebugger>:
activateDebugger():
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:19
extern uint8_t kTerminalHeight;
extern uint32_t exceptionCS;
extern uint32_t debugReturnFlags;

void activateDebugger()
{
   1b010:	55                   	push   ebp
   1b011:	89 e5                	mov    ebp,esp
   1b013:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:20
    kDebuggerActive=!kDebuggerActive;
   1b016:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1b01d:	0f b6 c0             	movzx  eax,al
   1b020:	85 c0                	test   eax,eax
   1b022:	0f 95 c0             	setne  al
   1b025:	83 f0 01             	xor    eax,0x1
   1b028:	0f b6 c0             	movzx  eax,al
   1b02b:	83 e0 01             	and    eax,0x1
   1b02e:	a2 d4 a5 09 00       	mov    ds:0x9a5d4,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:21
    if (kDebuggerActive)
   1b033:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1b03a:	84 c0                	test   al,al
   1b03c:	0f 84 87 00 00 00    	je     1b0c9 <activateDebugger+0xb9>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:24
    {
        //Activate the debugger
        savedTermHeight=kTerminalHeight;
   1b042:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   1b049:	a2 d5 a5 09 00       	mov    ds:0x9a5d5,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:25
        kTerminalHeight=20;
   1b04e:	c6 05 27 00 12 00 14 	mov    BYTE PTR ds:0x120027,0x14
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:26
        cursorSavePosition();
   1b055:	e8 29 cf ff ff       	call   17f83 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:27
        cursorMoveTo(70,0);
   1b05a:	83 ec 08             	sub    esp,0x8
   1b05d:	6a 00                	push   0x0
   1b05f:	6a 46                	push   0x46
   1b061:	e8 d1 d2 ff ff       	call   18337 <cursorMoveTo>
   1b066:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:28
        printk("D");
   1b069:	83 ec 0c             	sub    esp,0xc
   1b06c:	68 80 38 08 00       	push   0x83880
   1b071:	e8 2d c8 00 00       	call   278a3 <printk>
   1b076:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1b079:	c7 45 f4 15 00 00 00 	mov    DWORD PTR [ebp-0xc],0x15
   1b080:	eb 12                	jmp    1b094 <activateDebugger+0x84>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:30 (discriminator 3)
            terminal_clear_line(cnt);
   1b082:	83 ec 0c             	sub    esp,0xc
   1b085:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b088:	e8 26 d0 ff ff       	call   180b3 <terminal_clear_line>
   1b08d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29 (discriminator 3)
        savedTermHeight=kTerminalHeight;
        kTerminalHeight=20;
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk("D");
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1b090:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29 (discriminator 1)
   1b094:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1b09b:	0f b6 c0             	movzx  eax,al
   1b09e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1b0a1:	7f df                	jg     1b082 <activateDebugger+0x72>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:31
            terminal_clear_line(cnt);
        cursorMoveTo(0,21);
   1b0a3:	83 ec 08             	sub    esp,0x8
   1b0a6:	6a 15                	push   0x15
   1b0a8:	6a 00                	push   0x0
   1b0aa:	e8 88 d2 ff ff       	call   18337 <cursorMoveTo>
   1b0af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:32
        printk("-------------------------------- DEBUG --------------------------------");
   1b0b2:	83 ec 0c             	sub    esp,0xc
   1b0b5:	68 84 38 08 00       	push   0x83884
   1b0ba:	e8 e4 c7 00 00       	call   278a3 <printk>
   1b0bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:33
        cursorRestorePosition();
   1b0c2:	e8 08 cf ff ff       	call   17fcf <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:43
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk(" ");
        cursorRestorePosition();
    }
}
   1b0c7:	eb 35                	jmp    1b0fe <activateDebugger+0xee>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:37
        printk("-------------------------------- DEBUG --------------------------------");
        cursorRestorePosition();
    }
    else    //Deactivate the debugger
    {
        kTerminalHeight=savedTermHeight;
   1b0c9:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1b0d0:	a2 27 00 12 00       	mov    ds:0x120027,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:38
        cursorSavePosition();
   1b0d5:	e8 a9 ce ff ff       	call   17f83 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:39
        cursorMoveTo(70,0);
   1b0da:	83 ec 08             	sub    esp,0x8
   1b0dd:	6a 00                	push   0x0
   1b0df:	6a 46                	push   0x46
   1b0e1:	e8 51 d2 ff ff       	call   18337 <cursorMoveTo>
   1b0e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:40
        printk(" ");
   1b0e9:	83 ec 0c             	sub    esp,0xc
   1b0ec:	68 cc 38 08 00       	push   0x838cc
   1b0f1:	e8 ad c7 00 00       	call   278a3 <printk>
   1b0f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:41
        cursorRestorePosition();
   1b0f9:	e8 d1 ce ff ff       	call   17fcf <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:43
    }
}
   1b0fe:	90                   	nop
   1b0ff:	c9                   	leave  
   1b100:	c3                   	ret    

0001b101 <debugStep>:
debugStep():
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:46

void debugStep()
{
   1b101:	55                   	push   ebp
   1b102:	89 e5                	mov    ebp,esp
   1b104:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:47
    cursorSavePosition();
   1b107:	e8 77 ce ff ff       	call   17f83 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:48
    cursorMoveTo(0,22);
   1b10c:	83 ec 08             	sub    esp,0x8
   1b10f:	6a 16                	push   0x16
   1b111:	6a 00                	push   0x0
   1b113:	e8 1f d2 ff ff       	call   18337 <cursorMoveTo>
   1b118:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:49
    printDebugRegs();
   1b11b:	e8 a1 a9 00 00       	call   25ac1 <printDebugRegs>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:50
    cursorRestorePosition();
   1b120:	e8 aa ce ff ff       	call   17fcf <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:51
    waitForKeyboardKey();
   1b125:	e8 2d 61 ff ff       	call   11257 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:52
    return;
   1b12a:	90                   	nop
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:53
}
   1b12b:	c9                   	leave  
   1b12c:	c3                   	ret    
   1b12d:	66 90                	xchg   ax,ax
   1b12f:	90                   	nop

0001b130 <fatfs_init>:
fatfs_init():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:44

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
   1b130:	55                   	push   ebp
   1b131:	89 e5                	mov    ebp,esp
   1b133:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:52
    uint32 FATSz;
    uint32 root_dir_sectors;
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;
   1b136:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:54

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1b13a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b13d:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1b144:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:55
    fs->currentsector.dirty = 0;
   1b147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b14a:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1b151:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:57

    fs->next_free_cluster = 0; // Invalid
   1b154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b157:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:59

    fatfs_fat_init(fs);
   1b15e:	83 ec 0c             	sub    esp,0xc
   1b161:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b164:	e8 07 57 00 00       	call   20870 <fatfs_fat_init>
   1b169:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:62

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
   1b16c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b16f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b172:	85 c0                	test   eax,eax
   1b174:	75 0a                	jne    1b180 <fatfs_init+0x50>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:63
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1b176:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1b17b:	e9 46 05 00 00       	jmp    1b6c6 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:69

    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
   1b180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b183:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b186:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b189:	83 c2 44             	add    edx,0x44
   1b18c:	83 ec 04             	sub    esp,0x4
   1b18f:	6a 01                	push   0x1
   1b191:	52                   	push   edx
   1b192:	6a 00                	push   0x0
   1b194:	ff d0                	call   eax
   1b196:	83 c4 10             	add    esp,0x10
   1b199:	85 c0                	test   eax,eax
   1b19b:	75 0a                	jne    1b1a7 <fatfs_init+0x77>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:70
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1b19d:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1b1a2:	e9 1f 05 00 00       	jmp    1b6c6 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:74

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
   1b1a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1aa:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1b1b1:	3c 55                	cmp    al,0x55
   1b1b3:	75 0e                	jne    1b1c3 <fatfs_init+0x93>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:74 (discriminator 1)
   1b1b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1b8:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1b1bf:	3c aa                	cmp    al,0xaa
   1b1c1:	74 0a                	je     1b1cd <fatfs_init+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:75
        return FAT_INIT_INVALID_SIGNATURE;
   1b1c3:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1b1c8:	e9 f9 04 00 00       	jmp    1b6c6 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:78

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
   1b1cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1d0:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1b1d7:	0f b6 c0             	movzx  eax,al
   1b1da:	c1 e0 08             	shl    eax,0x8
   1b1dd:	89 c2                	mov    edx,eax
   1b1df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1e2:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1b1e9:	0f b6 c0             	movzx  eax,al
   1b1ec:	01 d0                	add    eax,edx
   1b1ee:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1b1f3:	74 0a                	je     1b1ff <fatfs_init+0xcf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:79
        return FAT_INIT_ENDIAN_ERROR;
   1b1f5:	b8 fc ff ff ff       	mov    eax,0xfffffffc
   1b1fa:	e9 c7 04 00 00       	jmp    1b6c6 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:86
    // Verify packed structures
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
   1b1ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b202:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1b209:	0f b6 c0             	movzx  eax,al
   1b20c:	83 f8 0f             	cmp    eax,0xf
   1b20f:	77 15                	ja     1b226 <fatfs_init+0xf6>
   1b211:	8b 04 85 d0 38 08 00 	mov    eax,DWORD PTR [eax*4+0x838d0]
   1b218:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:94
        case 0x06:
        case 0x0C:
        case 0x0E:
        case 0x0F:
        case 0x05:
            valid_partition = 1;
   1b21a:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:95
        break;
   1b21e:	eb 19                	jmp    1b239 <fatfs_init+0x109>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:97
        case 0x00:
            valid_partition = 0;
   1b220:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:98
            break;
   1b224:	eb 13                	jmp    1b239 <fatfs_init+0x109>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:100
        default:
            if (fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION] <= 0x06)
   1b226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b229:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1b230:	3c 06                	cmp    al,0x6
   1b232:	77 04                	ja     1b238 <fatfs_init+0x108>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:101
                valid_partition = 1;
   1b234:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:102
        break;
   1b238:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:106
    }

    // Read LBA Begin for the file system
    if (valid_partition)
   1b239:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
   1b23d:	74 4d                	je     1b28c <fatfs_init+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:107
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
   1b23f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b242:	0f b6 80 0d 02 00 00 	movzx  eax,BYTE PTR [eax+0x20d]
   1b249:	0f b6 c0             	movzx  eax,al
   1b24c:	c1 e0 18             	shl    eax,0x18
   1b24f:	89 c2                	mov    edx,eax
   1b251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b254:	0f b6 80 0c 02 00 00 	movzx  eax,BYTE PTR [eax+0x20c]
   1b25b:	0f b6 c0             	movzx  eax,al
   1b25e:	c1 e0 10             	shl    eax,0x10
   1b261:	01 c2                	add    edx,eax
   1b263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b266:	0f b6 80 0b 02 00 00 	movzx  eax,BYTE PTR [eax+0x20b]
   1b26d:	0f b6 c0             	movzx  eax,al
   1b270:	c1 e0 08             	shl    eax,0x8
   1b273:	01 c2                	add    edx,eax
   1b275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b278:	0f b6 80 0a 02 00 00 	movzx  eax,BYTE PTR [eax+0x20a]
   1b27f:	0f b6 c0             	movzx  eax,al
   1b282:	01 c2                	add    edx,eax
   1b284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b287:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
   1b28a:	eb 0a                	jmp    1b296 <fatfs_init+0x166>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:110
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
   1b28c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b28f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:114

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
   1b296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b299:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b29c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b29f:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b2a2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b2a5:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
   1b2a8:	83 ec 04             	sub    esp,0x4
   1b2ab:	6a 01                	push   0x1
   1b2ad:	51                   	push   ecx
   1b2ae:	52                   	push   edx
   1b2af:	ff d0                	call   eax
   1b2b1:	83 c4 10             	add    esp,0x10
   1b2b4:	85 c0                	test   eax,eax
   1b2b6:	75 0a                	jne    1b2c2 <fatfs_init+0x192>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:115
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1b2b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1b2bd:	e9 04 04 00 00       	jmp    1b6c6 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:118

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
   1b2c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2c5:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b2c9:	0f b6 c0             	movzx  eax,al
   1b2cc:	c1 e0 08             	shl    eax,0x8
   1b2cf:	89 c2                	mov    edx,eax
   1b2d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2d4:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b2d8:	0f b6 c0             	movzx  eax,al
   1b2db:	01 d0                	add    eax,edx
   1b2dd:	3d 00 02 00 00       	cmp    eax,0x200
   1b2e2:	74 0a                	je     1b2ee <fatfs_init+0x1be>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:119
        return FAT_INIT_INVALID_SECTOR_SIZE;
   1b2e4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
   1b2e9:	e9 d8 03 00 00       	jmp    1b6c6 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:122

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
   1b2ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2f1:	0f b6 50 51          	movzx  edx,BYTE PTR [eax+0x51]
   1b2f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2f8:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:123
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
   1b2fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2fd:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1b301:	0f b6 c0             	movzx  eax,al
   1b304:	c1 e0 08             	shl    eax,0x8
   1b307:	89 c2                	mov    edx,eax
   1b309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b30c:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1b310:	0f b6 c0             	movzx  eax,al
   1b313:	01 d0                	add    eax,edx
   1b315:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:124
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
   1b319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b31c:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1b320:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:125
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
   1b323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b326:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1b32a:	0f b6 c0             	movzx  eax,al
   1b32d:	c1 e0 08             	shl    eax,0x8
   1b330:	89 c2                	mov    edx,eax
   1b332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b335:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1b339:	0f b6 c0             	movzx  eax,al
   1b33c:	01 c2                	add    edx,eax
   1b33e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b341:	66 89 50 28          	mov    WORD PTR [eax+0x28],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:127

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1b345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b348:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b34c:	0f b6 c0             	movzx  eax,al
   1b34f:	c1 e0 08             	shl    eax,0x8
   1b352:	89 c2                	mov    edx,eax
   1b354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b357:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b35b:	0f b6 c0             	movzx  eax,al
   1b35e:	01 d0                	add    eax,edx
   1b360:	85 c0                	test   eax,eax
   1b362:	74 25                	je     1b389 <fatfs_init+0x259>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:128
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1b364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b367:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b36b:	0f b6 c0             	movzx  eax,al
   1b36e:	c1 e0 08             	shl    eax,0x8
   1b371:	89 c2                	mov    edx,eax
   1b373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b376:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b37a:	0f b6 c0             	movzx  eax,al
   1b37d:	01 d0                	add    eax,edx
   1b37f:	89 c2                	mov    edx,eax
   1b381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b384:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
   1b387:	eb 3f                	jmp    1b3c8 <fatfs_init+0x298>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:130
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1b389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b38c:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1b390:	0f b6 c0             	movzx  eax,al
   1b393:	c1 e0 18             	shl    eax,0x18
   1b396:	89 c2                	mov    edx,eax
   1b398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b39b:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1b39f:	0f b6 c0             	movzx  eax,al
   1b3a2:	c1 e0 10             	shl    eax,0x10
   1b3a5:	01 c2                	add    edx,eax
   1b3a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3aa:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1b3ae:	0f b6 c0             	movzx  eax,al
   1b3b1:	c1 e0 08             	shl    eax,0x8
   1b3b4:	01 c2                	add    edx,eax
   1b3b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3b9:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1b3bd:	0f b6 c0             	movzx  eax,al
   1b3c0:	01 c2                	add    edx,eax
   1b3c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3c5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:133

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
   1b3c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3cb:	0f b6 40 73          	movzx  eax,BYTE PTR [eax+0x73]
   1b3cf:	0f b6 c0             	movzx  eax,al
   1b3d2:	c1 e0 18             	shl    eax,0x18
   1b3d5:	89 c2                	mov    edx,eax
   1b3d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3da:	0f b6 40 72          	movzx  eax,BYTE PTR [eax+0x72]
   1b3de:	0f b6 c0             	movzx  eax,al
   1b3e1:	c1 e0 10             	shl    eax,0x10
   1b3e4:	01 c2                	add    edx,eax
   1b3e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3e9:	0f b6 40 71          	movzx  eax,BYTE PTR [eax+0x71]
   1b3ed:	0f b6 c0             	movzx  eax,al
   1b3f0:	c1 e0 08             	shl    eax,0x8
   1b3f3:	01 c2                	add    edx,eax
   1b3f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3f8:	0f b6 40 70          	movzx  eax,BYTE PTR [eax+0x70]
   1b3fc:	0f b6 c0             	movzx  eax,al
   1b3ff:	01 c2                	add    edx,eax
   1b401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b404:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:134
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
   1b407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b40a:	0f b6 40 75          	movzx  eax,BYTE PTR [eax+0x75]
   1b40e:	0f b6 c0             	movzx  eax,al
   1b411:	c1 e0 08             	shl    eax,0x8
   1b414:	89 c2                	mov    edx,eax
   1b416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b419:	0f b6 40 74          	movzx  eax,BYTE PTR [eax+0x74]
   1b41d:	0f b6 c0             	movzx  eax,al
   1b420:	01 c2                	add    edx,eax
   1b422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b425:	66 89 50 18          	mov    WORD PTR [eax+0x18],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:137

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
   1b429:	0f b7 55 ec          	movzx  edx,WORD PTR [ebp-0x14]
   1b42d:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1b431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b434:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1b437:	0f af c1             	imul   eax,ecx
   1b43a:	01 c2                	add    edx,eax
   1b43c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b43f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:138
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1b442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b445:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1b449:	0f b7 c0             	movzx  eax,ax
   1b44c:	c1 e0 05             	shl    eax,0x5
   1b44f:	05 ff 01 00 00       	add    eax,0x1ff
   1b454:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1b45a:	85 c0                	test   eax,eax
   1b45c:	0f 48 c2             	cmovs  eax,edx
   1b45f:	c1 f8 09             	sar    eax,0x9
   1b462:	89 c2                	mov    edx,eax
   1b464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b467:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:141

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
   1b46a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b46d:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b470:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1b474:	01 c2                	add    edx,eax
   1b476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b479:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:144

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
   1b47c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b47f:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1b482:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1b486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b489:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1b48c:	0f af c1             	imul   eax,ecx
   1b48f:	01 c2                	add    edx,eax
   1b491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b494:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:146

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
   1b497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b49a:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1b4a1:	0f b6 c0             	movzx  eax,al
   1b4a4:	c1 e0 08             	shl    eax,0x8
   1b4a7:	89 c2                	mov    edx,eax
   1b4a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4ac:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1b4b3:	0f b6 c0             	movzx  eax,al
   1b4b6:	01 d0                	add    eax,edx
   1b4b8:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1b4bd:	74 0a                	je     1b4c9 <fatfs_init+0x399>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:147
        return FAT_INIT_INVALID_SIGNATURE;
   1b4bf:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1b4c4:	e9 fd 01 00 00       	jmp    1b6c6 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:150

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
   1b4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4cc:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1b4d0:	0f b6 c0             	movzx  eax,al
   1b4d3:	c1 e0 08             	shl    eax,0x8
   1b4d6:	89 c2                	mov    edx,eax
   1b4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4db:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1b4df:	0f b6 c0             	movzx  eax,al
   1b4e2:	01 d0                	add    eax,edx
   1b4e4:	c1 e0 05             	shl    eax,0x5
   1b4e7:	89 c2                	mov    edx,eax
   1b4e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4ec:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b4f0:	0f b6 c0             	movzx  eax,al
   1b4f3:	c1 e0 08             	shl    eax,0x8
   1b4f6:	89 c1                	mov    ecx,eax
   1b4f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4fb:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b4ff:	0f b6 c0             	movzx  eax,al
   1b502:	01 c8                	add    eax,ecx
   1b504:	83 e8 01             	sub    eax,0x1
   1b507:	01 c2                	add    edx,eax
   1b509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b50c:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b510:	0f b6 c0             	movzx  eax,al
   1b513:	c1 e0 08             	shl    eax,0x8
   1b516:	89 c1                	mov    ecx,eax
   1b518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b51b:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b51f:	0f b6 c0             	movzx  eax,al
   1b522:	01 c1                	add    ecx,eax
   1b524:	89 d0                	mov    eax,edx
   1b526:	99                   	cdq    
   1b527:	f7 f9                	idiv   ecx
   1b529:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:152

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1b52c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b52f:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b533:	0f b6 c0             	movzx  eax,al
   1b536:	c1 e0 08             	shl    eax,0x8
   1b539:	89 c2                	mov    edx,eax
   1b53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b53e:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b542:	0f b6 c0             	movzx  eax,al
   1b545:	01 d0                	add    eax,edx
   1b547:	85 c0                	test   eax,eax
   1b549:	74 20                	je     1b56b <fatfs_init+0x43b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:153
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1b54b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b54e:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b552:	0f b6 c0             	movzx  eax,al
   1b555:	c1 e0 08             	shl    eax,0x8
   1b558:	89 c2                	mov    edx,eax
   1b55a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b55d:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b561:	0f b6 c0             	movzx  eax,al
   1b564:	01 d0                	add    eax,edx
   1b566:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1b569:	eb 3c                	jmp    1b5a7 <fatfs_init+0x477>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:155
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1b56b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b56e:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1b572:	0f b6 c0             	movzx  eax,al
   1b575:	c1 e0 18             	shl    eax,0x18
   1b578:	89 c2                	mov    edx,eax
   1b57a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b57d:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1b581:	0f b6 c0             	movzx  eax,al
   1b584:	c1 e0 10             	shl    eax,0x10
   1b587:	01 c2                	add    edx,eax
   1b589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b58c:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1b590:	0f b6 c0             	movzx  eax,al
   1b593:	c1 e0 08             	shl    eax,0x8
   1b596:	01 c2                	add    edx,eax
   1b598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b59b:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1b59f:	0f b6 c0             	movzx  eax,al
   1b5a2:	01 d0                	add    eax,edx
   1b5a4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:157

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
   1b5a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5aa:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b5ae:	0f b6 c0             	movzx  eax,al
   1b5b1:	c1 e0 08             	shl    eax,0x8
   1b5b4:	89 c2                	mov    edx,eax
   1b5b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5b9:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b5bd:	0f b6 c0             	movzx  eax,al
   1b5c0:	01 d0                	add    eax,edx
   1b5c2:	85 c0                	test   eax,eax
   1b5c4:	74 20                	je     1b5e6 <fatfs_init+0x4b6>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:158
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
   1b5c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5c9:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b5cd:	0f b6 c0             	movzx  eax,al
   1b5d0:	c1 e0 08             	shl    eax,0x8
   1b5d3:	89 c2                	mov    edx,eax
   1b5d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5d8:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b5dc:	0f b6 c0             	movzx  eax,al
   1b5df:	01 d0                	add    eax,edx
   1b5e1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1b5e4:	eb 3c                	jmp    1b622 <fatfs_init+0x4f2>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:160
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);
   1b5e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5e9:	0f b6 40 67          	movzx  eax,BYTE PTR [eax+0x67]
   1b5ed:	0f b6 c0             	movzx  eax,al
   1b5f0:	c1 e0 18             	shl    eax,0x18
   1b5f3:	89 c2                	mov    edx,eax
   1b5f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5f8:	0f b6 40 66          	movzx  eax,BYTE PTR [eax+0x66]
   1b5fc:	0f b6 c0             	movzx  eax,al
   1b5ff:	c1 e0 10             	shl    eax,0x10
   1b602:	01 c2                	add    edx,eax
   1b604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b607:	0f b6 40 65          	movzx  eax,BYTE PTR [eax+0x65]
   1b60b:	0f b6 c0             	movzx  eax,al
   1b60e:	c1 e0 08             	shl    eax,0x8
   1b611:	01 c2                	add    edx,eax
   1b613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b616:	0f b6 40 64          	movzx  eax,BYTE PTR [eax+0x64]
   1b61a:	0f b6 c0             	movzx  eax,al
   1b61d:	01 d0                	add    eax,edx
   1b61f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:162

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);
   1b622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b625:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1b629:	0f b6 c0             	movzx  eax,al
   1b62c:	c1 e0 08             	shl    eax,0x8
   1b62f:	89 c2                	mov    edx,eax
   1b631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b634:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1b638:	0f b6 c0             	movzx  eax,al
   1b63b:	01 d0                	add    eax,edx
   1b63d:	89 c2                	mov    edx,eax
   1b63f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b642:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1b646:	0f b6 c0             	movzx  eax,al
   1b649:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   1b64d:	01 c2                	add    edx,eax
   1b64f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1b652:	01 c2                	add    edx,eax
   1b654:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b657:	29 d0                	sub    eax,edx
   1b659:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:165

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
   1b65c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b65f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b662:	84 c0                	test   al,al
   1b664:	74 5b                	je     1b6c1 <fatfs_init+0x591>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:167
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
   1b666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b669:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b66c:	0f b6 c8             	movzx  ecx,al
   1b66f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1b672:	ba 00 00 00 00       	mov    edx,0x0
   1b677:	f7 f1                	div    ecx
   1b679:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:169

        if(count_of_clusters < 4085)
   1b67c:	81 7d dc f4 0f 00 00 	cmp    DWORD PTR [ebp-0x24],0xff4
   1b683:	77 07                	ja     1b68c <fatfs_init+0x55c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:171
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
   1b685:	b8 fb ff ff ff       	mov    eax,0xfffffffb
   1b68a:	eb 3a                	jmp    1b6c6 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:172
        else if(count_of_clusters < 65525)
   1b68c:	81 7d dc f4 ff 00 00 	cmp    DWORD PTR [ebp-0x24],0xfff4
   1b693:	77 1b                	ja     1b6b0 <fatfs_init+0x580>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:175
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
   1b695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b698:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:178

            // Volume is FAT16
            fs->fat_type = FAT_TYPE_16;
   1b69f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6a2:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:179
            return FAT_INIT_OK;
   1b6a9:	b8 00 00 00 00       	mov    eax,0x0
   1b6ae:	eb 16                	jmp    1b6c6 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:184
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
   1b6b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6b3:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:185
            return FAT_INIT_OK;
   1b6ba:	b8 00 00 00 00       	mov    eax,0x0
   1b6bf:	eb 05                	jmp    1b6c6 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:189
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
   1b6c1:	b8 fb ff ff ff       	mov    eax,0xfffffffb
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:190
}
   1b6c6:	c9                   	leave  
   1b6c7:	c3                   	ret    

0001b6c8 <fatfs_lba_of_cluster>:
fatfs_lba_of_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:196
//-----------------------------------------------------------------------------
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
   1b6c8:	55                   	push   ebp
   1b6c9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:197
    if (fs->fat_type == FAT_TYPE_16)
   1b6cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6ce:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b6d1:	85 c0                	test   eax,eax
   1b6d3:	75 39                	jne    1b70e <fatfs_lba_of_cluster+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:198
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
   1b6d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6de:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1b6e2:	0f b7 c0             	movzx  eax,ax
   1b6e5:	c1 e0 05             	shl    eax,0x5
   1b6e8:	8d 88 ff 01 00 00    	lea    ecx,[eax+0x1ff]
   1b6ee:	85 c0                	test   eax,eax
   1b6f0:	0f 48 c1             	cmovs  eax,ecx
   1b6f3:	c1 f8 09             	sar    eax,0x9
   1b6f6:	01 c2                	add    edx,eax
   1b6f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b6fb:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b6fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b701:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b704:	0f b6 c0             	movzx  eax,al
   1b707:	0f af c1             	imul   eax,ecx
   1b70a:	01 d0                	add    eax,edx
   1b70c:	eb 1a                	jmp    1b728 <fatfs_lba_of_cluster+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:200
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
   1b70e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b711:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b714:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b717:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b71a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b71d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b720:	0f b6 c0             	movzx  eax,al
   1b723:	0f af c1             	imul   eax,ecx
   1b726:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:201
}
   1b728:	5d                   	pop    ebp
   1b729:	c3                   	ret    

0001b72a <fatfs_sector_read>:
fatfs_sector_read():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:206
//-----------------------------------------------------------------------------
// fatfs_sector_read:
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b72a:	55                   	push   ebp
   1b72b:	89 e5                	mov    ebp,esp
   1b72d:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:207
    return fs->disk_io.read_media(lba, target, count);
   1b730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b733:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b736:	83 ec 04             	sub    esp,0x4
   1b739:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b73c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b73f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b742:	ff d0                	call   eax
   1b744:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:208
}
   1b747:	c9                   	leave  
   1b748:	c3                   	ret    

0001b749 <fatfs_sector_write>:
fatfs_sector_write():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:213
//-----------------------------------------------------------------------------
// fatfs_sector_write:
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b749:	55                   	push   ebp
   1b74a:	89 e5                	mov    ebp,esp
   1b74c:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:214
    return fs->disk_io.write_media(lba, target, count);
   1b74f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b752:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b755:	83 ec 04             	sub    esp,0x4
   1b758:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b75b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b75e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b761:	ff d0                	call   eax
   1b763:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:215
}
   1b766:	c9                   	leave  
   1b767:	c3                   	ret    

0001b768 <fatfs_sector_reader>:
fatfs_sector_reader():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:221
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
   1b768:	55                   	push   ebp
   1b769:	89 e5                	mov    ebp,esp
   1b76b:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:222
    uint32 sector_to_read = 0;
   1b76e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:223
    uint32 cluster_to_read = 0;
   1b775:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:224
    uint32 cluster_chain = 0;
   1b77c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:229
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
   1b783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b786:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b789:	85 c0                	test   eax,eax
   1b78b:	75 36                	jne    1b7c3 <fatfs_sector_reader+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:229 (discriminator 1)
   1b78d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b791:	75 30                	jne    1b7c3 <fatfs_sector_reader+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:231
    {
        if (offset < fs->rootdir_sectors)
   1b793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b796:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b799:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b79c:	76 1b                	jbe    1b7b9 <fatfs_sector_reader+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:232
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
   1b79e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b7a1:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b7a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b7a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b7aa:	01 c2                	add    edx,eax
   1b7ac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b7af:	01 d0                	add    eax,edx
   1b7b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:231
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
   1b7b4:	e9 8e 00 00 00       	jmp    1b847 <fatfs_sector_reader+0xdf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:234
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
        else
            return 0;
   1b7b9:	b8 00 00 00 00       	mov    eax,0x0
   1b7be:	e9 e4 00 00 00       	jmp    1b8a7 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:240
    }
    // FAT16/32 Other
    else
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;
   1b7c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b7c6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:243

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
   1b7c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b7cc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b7cf:	0f b6 c8             	movzx  ecx,al
   1b7d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b7d5:	ba 00 00 00 00       	mov    edx,0x0
   1b7da:	f7 f1                	div    ecx
   1b7dc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:244
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);
   1b7df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b7e2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b7e5:	0f b6 c0             	movzx  eax,al
   1b7e8:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
   1b7ec:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1b7ef:	29 c2                	sub    edx,eax
   1b7f1:	89 d0                	mov    eax,edx
   1b7f3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b7f6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1b7fd:	eb 18                	jmp    1b817 <fatfs_sector_reader+0xaf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:248 (discriminator 3)
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
   1b7ff:	83 ec 08             	sub    esp,0x8
   1b802:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b805:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b808:	e8 bd 53 00 00       	call   20bca <fatfs_find_next_cluster>
   1b80d:	83 c4 10             	add    esp,0x10
   1b810:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247 (discriminator 3)
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b813:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247 (discriminator 1)
   1b817:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b81a:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1b81d:	72 e0                	jb     1b7ff <fatfs_sector_reader+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:251
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
   1b81f:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1b823:	75 07                	jne    1b82c <fatfs_sector_reader+0xc4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:252
            return 0;
   1b825:	b8 00 00 00 00       	mov    eax,0x0
   1b82a:	eb 7b                	jmp    1b8a7 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:255

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
   1b82c:	83 ec 08             	sub    esp,0x8
   1b82f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b832:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b835:	e8 8e fe ff ff       	call   1b6c8 <fatfs_lba_of_cluster>
   1b83a:	83 c4 10             	add    esp,0x10
   1b83d:	89 c2                	mov    edx,eax
   1b83f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1b842:	01 d0                	add    eax,edx
   1b844:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:259
    }

    // User provided target array
    if (target)
   1b847:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b84b:	74 18                	je     1b865 <fatfs_sector_reader+0xfd>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:260
        return fs->disk_io.read_media(lba, target, 1);
   1b84d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b850:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b853:	83 ec 04             	sub    esp,0x4
   1b856:	6a 01                	push   0x1
   1b858:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b85b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1b85e:	ff d0                	call   eax
   1b860:	83 c4 10             	add    esp,0x10
   1b863:	eb 42                	jmp    1b8a7 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:262
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
   1b865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b868:	8b 80 44 02 00 00    	mov    eax,DWORD PTR [eax+0x244]
   1b86e:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1b871:	74 2f                	je     1b8a2 <fatfs_sector_reader+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:264
    {
        fs->currentsector.address = lba;
   1b873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b876:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1b879:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:265
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b87f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b882:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b885:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b888:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b88b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b88e:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b894:	83 ec 04             	sub    esp,0x4
   1b897:	6a 01                	push   0x1
   1b899:	51                   	push   ecx
   1b89a:	52                   	push   edx
   1b89b:	ff d0                	call   eax
   1b89d:	83 c4 10             	add    esp,0x10
   1b8a0:	eb 05                	jmp    1b8a7 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:268
    }
    else
        return 1;
   1b8a2:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:269
}
   1b8a7:	c9                   	leave  
   1b8a8:	c3                   	ret    

0001b8a9 <fatfs_read_sector>:
fatfs_read_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:275
//-----------------------------------------------------------------------------
// fatfs_read_sector: Read from the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b8a9:	55                   	push   ebp
   1b8aa:	89 e5                	mov    ebp,esp
   1b8ac:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:277
    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b8af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b8b2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b8b5:	85 c0                	test   eax,eax
   1b8b7:	0f 85 83 00 00 00    	jne    1b940 <fatfs_read_sector+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:277 (discriminator 1)
   1b8bd:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b8c1:	75 7d                	jne    1b940 <fatfs_read_sector+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:282
    {
        uint32 lba;

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
   1b8c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b8c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b8c9:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b8cc:	76 1e                	jbe    1b8ec <fatfs_read_sector+0x43>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:283
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b8ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b8d1:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b8d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b8d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b8da:	01 c2                	add    edx,eax
   1b8dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b8df:	01 d0                	add    eax,edx
   1b8e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:288
        else
            return 0;

        // User target buffer passed in
        if (target)
   1b8e4:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b8e8:	74 27                	je     1b911 <fatfs_read_sector+0x68>
   1b8ea:	eb 0a                	jmp    1b8f6 <fatfs_read_sector+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:285

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1b8ec:	b8 00 00 00 00       	mov    eax,0x0
   1b8f1:	e9 c5 00 00 00       	jmp    1b9bb <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:291

        // User target buffer passed in
        if (target)
        {
            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b8f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b8f9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b8fc:	83 ec 04             	sub    esp,0x4
   1b8ff:	6a 01                	push   0x1
   1b901:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b904:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b907:	ff d0                	call   eax
   1b909:	83 c4 10             	add    esp,0x10
   1b90c:	e9 aa 00 00 00       	jmp    1b9bb <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:296
        }
        else
        {
            // Calculate read address
            fs->currentsector.address = lba;
   1b911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b914:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1b917:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:299

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b91d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b920:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b923:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b926:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b929:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b92c:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b932:	83 ec 04             	sub    esp,0x4
   1b935:	6a 01                	push   0x1
   1b937:	51                   	push   ecx
   1b938:	52                   	push   edx
   1b939:	ff d0                	call   eax
   1b93b:	83 c4 10             	add    esp,0x10
   1b93e:	eb 7b                	jmp    1b9bb <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:306
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1b940:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b944:	74 33                	je     1b979 <fatfs_read_sector+0xd0>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:309
        {
            // Calculate read address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1b946:	83 ec 08             	sub    esp,0x8
   1b949:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b94c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b94f:	e8 74 fd ff ff       	call   1b6c8 <fatfs_lba_of_cluster>
   1b954:	83 c4 10             	add    esp,0x10
   1b957:	89 c2                	mov    edx,eax
   1b959:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b95c:	01 d0                	add    eax,edx
   1b95e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:312

            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b964:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b967:	83 ec 04             	sub    esp,0x4
   1b96a:	6a 01                	push   0x1
   1b96c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b96f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1b972:	ff d0                	call   eax
   1b974:	83 c4 10             	add    esp,0x10
   1b977:	eb 42                	jmp    1b9bb <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:317
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1b979:	83 ec 08             	sub    esp,0x8
   1b97c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b97f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b982:	e8 41 fd ff ff       	call   1b6c8 <fatfs_lba_of_cluster>
   1b987:	83 c4 10             	add    esp,0x10
   1b98a:	89 c2                	mov    edx,eax
   1b98c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b98f:	01 c2                	add    edx,eax
   1b991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b994:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:320

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b99a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b99d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b9a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b9a3:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b9a6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b9a9:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b9af:	83 ec 04             	sub    esp,0x4
   1b9b2:	6a 01                	push   0x1
   1b9b4:	51                   	push   ecx
   1b9b5:	52                   	push   edx
   1b9b6:	ff d0                	call   eax
   1b9b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:323
        }
    }
}
   1b9bb:	c9                   	leave  
   1b9bc:	c3                   	ret    

0001b9bd <fatfs_write_sector>:
fatfs_write_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:330
// fatfs_write_sector: Write to the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b9bd:	55                   	push   ebp
   1b9be:	89 e5                	mov    ebp,esp
   1b9c0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:332
    // No write access?
    if (!fs->disk_io.write_media)
   1b9c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b9c9:	85 c0                	test   eax,eax
   1b9cb:	75 0a                	jne    1b9d7 <fatfs_write_sector+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:333
        return 0;
   1b9cd:	b8 00 00 00 00       	mov    eax,0x0
   1b9d2:	e9 0c 01 00 00       	jmp    1bae3 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:336

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b9d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9da:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b9dd:	85 c0                	test   eax,eax
   1b9df:	0f 85 83 00 00 00    	jne    1ba68 <fatfs_write_sector+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:336 (discriminator 1)
   1b9e5:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b9e9:	75 7d                	jne    1ba68 <fatfs_write_sector+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:341
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
   1b9eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b9f1:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b9f4:	76 1e                	jbe    1ba14 <fatfs_write_sector+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:342
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b9f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9f9:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b9fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1ba02:	01 c2                	add    edx,eax
   1ba04:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ba07:	01 d0                	add    eax,edx
   1ba09:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:347
        else
            return 0;

        // User target buffer passed in
        if (target)
   1ba0c:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1ba10:	74 27                	je     1ba39 <fatfs_write_sector+0x7c>
   1ba12:	eb 0a                	jmp    1ba1e <fatfs_write_sector+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:344

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1ba14:	b8 00 00 00 00       	mov    eax,0x0
   1ba19:	e9 c5 00 00 00       	jmp    1bae3 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:350

        // User target buffer passed in
        if (target)
        {
            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1ba1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba21:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ba24:	83 ec 04             	sub    esp,0x4
   1ba27:	6a 01                	push   0x1
   1ba29:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1ba2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1ba2f:	ff d0                	call   eax
   1ba31:	83 c4 10             	add    esp,0x10
   1ba34:	e9 aa 00 00 00       	jmp    1bae3 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:355
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = lba;
   1ba39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba3c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1ba3f:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:358

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1ba45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba48:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ba4b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ba4e:	8d 4a 44             	lea    ecx,[edx+0x44]
   1ba51:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ba54:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1ba5a:	83 ec 04             	sub    esp,0x4
   1ba5d:	6a 01                	push   0x1
   1ba5f:	51                   	push   ecx
   1ba60:	52                   	push   edx
   1ba61:	ff d0                	call   eax
   1ba63:	83 c4 10             	add    esp,0x10
   1ba66:	eb 7b                	jmp    1bae3 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:365
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1ba68:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1ba6c:	74 33                	je     1baa1 <fatfs_write_sector+0xe4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:368
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1ba6e:	83 ec 08             	sub    esp,0x8
   1ba71:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ba74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ba77:	e8 4c fc ff ff       	call   1b6c8 <fatfs_lba_of_cluster>
   1ba7c:	83 c4 10             	add    esp,0x10
   1ba7f:	89 c2                	mov    edx,eax
   1ba81:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ba84:	01 d0                	add    eax,edx
   1ba86:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:371

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1ba89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba8c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ba8f:	83 ec 04             	sub    esp,0x4
   1ba92:	6a 01                	push   0x1
   1ba94:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1ba97:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ba9a:	ff d0                	call   eax
   1ba9c:	83 c4 10             	add    esp,0x10
   1ba9f:	eb 42                	jmp    1bae3 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:376
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1baa1:	83 ec 08             	sub    esp,0x8
   1baa4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1baa7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1baaa:	e8 19 fc ff ff       	call   1b6c8 <fatfs_lba_of_cluster>
   1baaf:	83 c4 10             	add    esp,0x10
   1bab2:	89 c2                	mov    edx,eax
   1bab4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bab7:	01 c2                	add    edx,eax
   1bab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1babc:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:379

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1bac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bac5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bac8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bacb:	8d 4a 44             	lea    ecx,[edx+0x44]
   1bace:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bad1:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1bad7:	83 ec 04             	sub    esp,0x4
   1bada:	6a 01                	push   0x1
   1badc:	51                   	push   ecx
   1badd:	52                   	push   edx
   1bade:	ff d0                	call   eax
   1bae0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:382
        }
    }
}
   1bae3:	c9                   	leave  
   1bae4:	c3                   	ret    

0001bae5 <fatfs_show_details>:
fatfs_show_details():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:388
#endif
//-----------------------------------------------------------------------------
// fatfs_show_details: Show the details about the filesystem
//-----------------------------------------------------------------------------
void fatfs_show_details(struct fatfs *fs)
{
   1bae5:	55                   	push   ebp
   1bae6:	89 e5                	mov    ebp,esp
   1bae8:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:389
    FAT_PRINTF(("FAT details:\r\n"));
   1baeb:	83 ec 0c             	sub    esp,0xc
   1baee:	68 10 39 08 00       	push   0x83910
   1baf3:	e8 ab bd 00 00       	call   278a3 <printk>
   1baf8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390
    FAT_PRINTF((" Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16"));
   1bafb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bafe:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1bb01:	83 f8 01             	cmp    eax,0x1
   1bb04:	75 07                	jne    1bb0d <fatfs_show_details+0x28>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 1)
   1bb06:	b8 1f 39 08 00       	mov    eax,0x8391f
   1bb0b:	eb 05                	jmp    1bb12 <fatfs_show_details+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 2)
   1bb0d:	b8 25 39 08 00       	mov    eax,0x83925
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 4)
   1bb12:	83 ec 08             	sub    esp,0x8
   1bb15:	50                   	push   eax
   1bb16:	68 2b 39 08 00       	push   0x8392b
   1bb1b:	e8 83 bd 00 00       	call   278a3 <printk>
   1bb20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:391 (discriminator 4)
    FAT_PRINTF((" Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster));
   1bb23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb26:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1bb29:	83 ec 08             	sub    esp,0x8
   1bb2c:	50                   	push   eax
   1bb2d:	68 38 39 08 00       	push   0x83938
   1bb32:	e8 6c bd 00 00       	call   278a3 <printk>
   1bb37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:392 (discriminator 4)
    FAT_PRINTF((" FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba));
   1bb3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb3d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1bb40:	83 ec 08             	sub    esp,0x8
   1bb43:	50                   	push   eax
   1bb44:	68 57 39 08 00       	push   0x83957
   1bb49:	e8 55 bd 00 00       	call   278a3 <printk>
   1bb4e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:393 (discriminator 4)
    FAT_PRINTF((" Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba));
   1bb51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1bb57:	83 ec 08             	sub    esp,0x8
   1bb5a:	50                   	push   eax
   1bb5b:	68 6f 39 08 00       	push   0x8396f
   1bb60:	e8 3e bd 00 00       	call   278a3 <printk>
   1bb65:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:394 (discriminator 4)
    FAT_PRINTF((" Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster));
   1bb68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb6b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1bb6e:	0f b6 c0             	movzx  eax,al
   1bb71:	83 ec 08             	sub    esp,0x8
   1bb74:	50                   	push   eax
   1bb75:	68 8b 39 08 00       	push   0x8398b
   1bb7a:	e8 24 bd 00 00       	call   278a3 <printk>
   1bb7f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:395 (discriminator 4)
}
   1bb82:	90                   	nop
   1bb83:	c9                   	leave  
   1bb84:	c3                   	ret    

0001bb85 <fatfs_get_root_cluster>:
fatfs_get_root_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:400
//-----------------------------------------------------------------------------
// fatfs_get_root_cluster: Get the root dir cluster
//-----------------------------------------------------------------------------
uint32 fatfs_get_root_cluster(struct fatfs *fs)
{
   1bb85:	55                   	push   ebp
   1bb86:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:402
    // NOTE: On FAT16 this will be 0 which has a special meaning...
    return fs->rootdir_first_cluster;
   1bb88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb8b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:403
}
   1bb8e:	5d                   	pop    ebp
   1bb8f:	c3                   	ret    

0001bb90 <fatfs_get_file_entry>:
fatfs_get_file_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:408
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
   1bb90:	55                   	push   ebp
   1bb91:	89 e5                	mov    ebp,esp
   1bb93:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:409
    uint8 item=0;
   1bb99:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:410
    uint16 recordoffset = 0;
   1bb9d:	66 c7 45 ea 00 00    	mov    WORD PTR [ebp-0x16],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:411
    uint8 i=0;
   1bba3:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:412
    int x=0;
   1bba7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:413
    char *long_filename = NULL;
   1bbae:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:416
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1bbb5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:419
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
   1bbbc:	83 ec 08             	sub    esp,0x8
   1bbbf:	6a 01                	push   0x1
   1bbc1:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bbc7:	50                   	push   eax
   1bbc8:	e8 53 3a 00 00       	call   1f620 <fatfs_lfn_cache_init>
   1bbcd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:425

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bbd0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bbd3:	8d 50 01             	lea    edx,[eax+0x1]
   1bbd6:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1bbd9:	6a 00                	push   0x0
   1bbdb:	50                   	push   eax
   1bbdc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1bbdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bbe2:	e8 81 fb ff ff       	call   1b768 <fatfs_sector_reader>
   1bbe7:	83 c4 10             	add    esp,0x10
   1bbea:	85 c0                	test   eax,eax
   1bbec:	0f 84 13 02 00 00    	je     1be05 <fatfs_get_file_entry+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bbf2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1bbf6:	e9 fb 01 00 00       	jmp    1bdf6 <fatfs_get_file_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:431
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bbfb:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bbff:	c1 e0 05             	shl    eax,0x5
   1bc02:	66 89 45 ea          	mov    WORD PTR [ebp-0x16],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:434

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1bc06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bc09:	8d 50 44             	lea    edx,[eax+0x44]
   1bc0c:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1bc10:	01 d0                	add    eax,edx
   1bc12:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:438

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1bc15:	83 ec 0c             	sub    esp,0xc
   1bc18:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bc1b:	e8 1a 3d 00 00       	call   1f93a <fatfs_entry_lfn_text>
   1bc20:	83 c4 10             	add    esp,0x10
   1bc23:	85 c0                	test   eax,eax
   1bc25:	74 24                	je     1bc4b <fatfs_get_file_entry+0xbb>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:439
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1bc27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bc2a:	8d 50 44             	lea    edx,[eax+0x44]
   1bc2d:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1bc31:	01 d0                	add    eax,edx
   1bc33:	83 ec 08             	sub    esp,0x8
   1bc36:	50                   	push   eax
   1bc37:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bc3d:	50                   	push   eax
   1bc3e:	e8 33 3a 00 00       	call   1f676 <fatfs_lfn_cache_entry>
   1bc43:	83 c4 10             	add    esp,0x10
   1bc46:	e9 a1 01 00 00       	jmp    1bdec <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:442

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1bc4b:	83 ec 0c             	sub    esp,0xc
   1bc4e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bc51:	e8 07 3d 00 00       	call   1f95d <fatfs_entry_lfn_invalid>
   1bc56:	83 c4 10             	add    esp,0x10
   1bc59:	85 c0                	test   eax,eax
   1bc5b:	74 19                	je     1bc76 <fatfs_get_file_entry+0xe6>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:443
                    fatfs_lfn_cache_init(&lfn, 0);
   1bc5d:	83 ec 08             	sub    esp,0x8
   1bc60:	6a 00                	push   0x0
   1bc62:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bc68:	50                   	push   eax
   1bc69:	e8 b2 39 00 00       	call   1f620 <fatfs_lfn_cache_init>
   1bc6e:	83 c4 10             	add    esp,0x10
   1bc71:	e9 76 01 00 00       	jmp    1bdec <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:446

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1bc76:	83 ec 08             	sub    esp,0x8
   1bc79:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bc7c:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bc82:	50                   	push   eax
   1bc83:	e8 16 3d 00 00       	call   1f99e <fatfs_entry_lfn_exists>
   1bc88:	83 c4 10             	add    esp,0x10
   1bc8b:	85 c0                	test   eax,eax
   1bc8d:	74 60                	je     1bcef <fatfs_get_file_entry+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:448
                {
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1bc8f:	83 ec 0c             	sub    esp,0xc
   1bc92:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bc98:	50                   	push   eax
   1bc99:	e8 44 3c 00 00       	call   1f8e2 <fatfs_lfn_cache_get>
   1bc9e:	83 c4 10             	add    esp,0x10
   1bca1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:451

                    // Compare names to see if they match
                    if (fatfs_compare_names(long_filename, name_to_find))
   1bca4:	83 ec 08             	sub    esp,0x8
   1bca7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bcaa:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1bcad:	e8 21 48 00 00       	call   204d3 <fatfs_compare_names>
   1bcb2:	83 c4 10             	add    esp,0x10
   1bcb5:	85 c0                	test   eax,eax
   1bcb7:	74 1d                	je     1bcd6 <fatfs_get_file_entry+0x146>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:453
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1bcb9:	83 ec 04             	sub    esp,0x4
   1bcbc:	6a 20                	push   0x20
   1bcbe:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bcc1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1bcc4:	e8 3b a5 00 00       	call   26204 <memcpy>
   1bcc9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:454
                        return 1;
   1bccc:	b8 01 00 00 00       	mov    eax,0x1
   1bcd1:	e9 35 01 00 00       	jmp    1be0b <fatfs_get_file_entry+0x27b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:457
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1bcd6:	83 ec 08             	sub    esp,0x8
   1bcd9:	6a 00                	push   0x0
   1bcdb:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bce1:	50                   	push   eax
   1bce2:	e8 39 39 00 00       	call   1f620 <fatfs_lfn_cache_init>
   1bce7:	83 c4 10             	add    esp,0x10
   1bcea:	e9 fd 00 00 00       	jmp    1bdec <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:462
                }
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1bcef:	83 ec 0c             	sub    esp,0xc
   1bcf2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bcf5:	e8 fe 3c 00 00       	call   1f9f8 <fatfs_entry_sfn_only>
   1bcfa:	83 c4 10             	add    esp,0x10
   1bcfd:	85 c0                	test   eax,eax
   1bcff:	0f 84 e7 00 00 00    	je     1bdec <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:464
                {
                    memset(short_filename, 0, sizeof(short_filename));
   1bd05:	83 ec 04             	sub    esp,0x4
   1bd08:	6a 0d                	push   0xd
   1bd0a:	6a 00                	push   0x0
   1bd0c:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1bd0f:	50                   	push   eax
   1bd10:	e8 28 99 00 00       	call   2563d <memset>
   1bd15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467

                    // Copy name to string
                    for (i=0; i<8; i++)
   1bd18:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   1bd1c:	eb 1d                	jmp    1bd3b <fatfs_get_file_entry+0x1ab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:468 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1bd1e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bd22:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   1bd26:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1bd29:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1bd2d:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467 (discriminator 3)
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1bd31:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bd35:	83 c0 01             	add    eax,0x1
   1bd38:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467 (discriminator 1)
   1bd3b:	80 7d f6 07          	cmp    BYTE PTR [ebp-0xa],0x7
   1bd3f:	76 dd                	jbe    1bd1e <fatfs_get_file_entry+0x18e>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:471
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1bd41:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472
                    for (i=8; i<11; i++)
   1bd48:	c6 45 f6 08          	mov    BYTE PTR [ebp-0xa],0x8
   1bd4c:	eb 36                	jmp    1bd84 <fatfs_get_file_entry+0x1f4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:474
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1bd4e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bd52:	8d 48 01             	lea    ecx,[eax+0x1]
   1bd55:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bd59:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1bd5c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1bd60:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:475
                        if (directoryEntry->Name[i] != ' ')
   1bd64:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bd68:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1bd6b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1bd6f:	3c 20                	cmp    al,0x20
   1bd71:	74 07                	je     1bd7a <fatfs_get_file_entry+0x1ea>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:476
                            dotRequired = 1;
   1bd73:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1bd7a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bd7e:	83 c0 01             	add    eax,0x1
   1bd81:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472 (discriminator 1)
   1bd84:	80 7d f6 0a          	cmp    BYTE PTR [ebp-0xa],0xa
   1bd88:	76 c4                	jbe    1bd4e <fatfs_get_file_entry+0x1be>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:480
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1bd8a:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1bd8e:	74 14                	je     1bda4 <fatfs_get_file_entry+0x214>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:483
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1bd90:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1bd94:	3c 2e                	cmp    al,0x2e
   1bd96:	74 06                	je     1bd9e <fatfs_get_file_entry+0x20e>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:484
                            short_filename[8] = '.';
   1bd98:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1bd9c:	eb 0a                	jmp    1bda8 <fatfs_get_file_entry+0x218>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:486
                        else
                            short_filename[8] = ' ';
   1bd9e:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1bda2:	eb 04                	jmp    1bda8 <fatfs_get_file_entry+0x218>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:489
                    }
                    else
                        short_filename[8] = ' ';
   1bda4:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:492

                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find))
   1bda8:	83 ec 08             	sub    esp,0x8
   1bdab:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bdae:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1bdb1:	50                   	push   eax
   1bdb2:	e8 1c 47 00 00       	call   204d3 <fatfs_compare_names>
   1bdb7:	83 c4 10             	add    esp,0x10
   1bdba:	85 c0                	test   eax,eax
   1bdbc:	74 1a                	je     1bdd8 <fatfs_get_file_entry+0x248>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:494
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1bdbe:	83 ec 04             	sub    esp,0x4
   1bdc1:	6a 20                	push   0x20
   1bdc3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bdc6:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1bdc9:	e8 36 a4 00 00       	call   26204 <memcpy>
   1bdce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:495
                        return 1;
   1bdd1:	b8 01 00 00 00       	mov    eax,0x1
   1bdd6:	eb 33                	jmp    1be0b <fatfs_get_file_entry+0x27b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:498
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1bdd8:	83 ec 08             	sub    esp,0x8
   1bddb:	6a 00                	push   0x0
   1bddd:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bde3:	50                   	push   eax
   1bde4:	e8 37 38 00 00       	call   1f620 <fatfs_lfn_cache_init>
   1bde9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bdec:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bdf0:	83 c0 01             	add    eax,0x1
   1bdf3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428 (discriminator 1)
   1bdf6:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1bdfa:	0f 86 fb fd ff ff    	jbe    1bbfb <fatfs_get_file_entry+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:504 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1be00:	e9 cb fd ff ff       	jmp    1bbd0 <fatfs_get_file_entry+0x40>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:503
                    fatfs_lfn_cache_init(&lfn, 0);
                }
            } // End of if
        }
        else
            break;
   1be05:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:506
    } // End of while loop

    return 0;
   1be06:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:507 (discriminator 2)
}
   1be0b:	c9                   	leave  
   1be0c:	c3                   	ret    

0001be0d <fatfs_sfn_exists>:
fatfs_sfn_exists():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:514
// fatfs_sfn_exists: Check if a short filename exists.
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1be0d:	55                   	push   ebp
   1be0e:	89 e5                	mov    ebp,esp
   1be10:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:515
    uint8 item=0;
   1be13:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:516
    uint16 recordoffset = 0;
   1be17:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:517
    int x=0;
   1be1d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:524

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1be24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1be27:	8d 50 01             	lea    edx,[eax+0x1]
   1be2a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1be2d:	6a 00                	push   0x0
   1be2f:	50                   	push   eax
   1be30:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1be33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1be36:	e8 2d f9 ff ff       	call   1b768 <fatfs_sector_reader>
   1be3b:	83 c4 10             	add    esp,0x10
   1be3e:	85 c0                	test   eax,eax
   1be40:	0f 84 8a 00 00 00    	je     1bed0 <fatfs_sfn_exists+0xc3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1be46:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1be4a:	eb 79                	jmp    1bec5 <fatfs_sfn_exists+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:530
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1be4c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1be50:	c1 e0 05             	shl    eax,0x5
   1be53:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:533

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1be57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be5a:	8d 50 44             	lea    edx,[eax+0x44]
   1be5d:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1be61:	01 d0                	add    eax,edx
   1be63:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:537

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1be66:	83 ec 0c             	sub    esp,0xc
   1be69:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1be6c:	e8 c9 3a 00 00       	call   1f93a <fatfs_entry_lfn_text>
   1be71:	83 c4 10             	add    esp,0x10
   1be74:	85 c0                	test   eax,eax
   1be76:	75 43                	jne    1bebb <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:541
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1be78:	83 ec 0c             	sub    esp,0xc
   1be7b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1be7e:	e8 da 3a 00 00       	call   1f95d <fatfs_entry_lfn_invalid>
   1be83:	83 c4 10             	add    esp,0x10
   1be86:	85 c0                	test   eax,eax
   1be88:	75 31                	jne    1bebb <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:546
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1be8a:	83 ec 0c             	sub    esp,0xc
   1be8d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1be90:	e8 63 3b 00 00       	call   1f9f8 <fatfs_entry_sfn_only>
   1be95:	83 c4 10             	add    esp,0x10
   1be98:	85 c0                	test   eax,eax
   1be9a:	74 1f                	je     1bebb <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:548
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1be9c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1be9f:	83 ec 04             	sub    esp,0x4
   1bea2:	6a 0b                	push   0xb
   1bea4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bea7:	50                   	push   eax
   1bea8:	e8 d3 5d ff ff       	call   11c80 <strncmp>
   1bead:	83 c4 10             	add    esp,0x10
   1beb0:	85 c0                	test   eax,eax
   1beb2:	75 07                	jne    1bebb <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:549
                        return 1;
   1beb4:	b8 01 00 00 00       	mov    eax,0x1
   1beb9:	eb 1b                	jmp    1bed6 <fatfs_sfn_exists+0xc9>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bebb:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bebf:	83 c0 01             	add    eax,0x1
   1bec2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527 (discriminator 1)
   1bec5:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1bec9:	76 81                	jbe    1be4c <fatfs_sfn_exists+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:555 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1becb:	e9 54 ff ff ff       	jmp    1be24 <fatfs_sfn_exists+0x17>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:554
                        return 1;
                }
            } // End of if
        }
        else
            break;
   1bed0:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:557
    } // End of while loop

    return 0;
   1bed1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:558
}
   1bed6:	c9                   	leave  
   1bed7:	c3                   	ret    

0001bed8 <fatfs_update_timestamps>:
fatfs_update_timestamps():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:565
//-------------------------------------------------------------
// fatfs_update_timestamps: Update date/time details
//-------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
int fatfs_update_timestamps(struct fat_dir_entry *directoryEntry, int create, int modify, int access)
{
   1bed8:	55                   	push   ebp
   1bed9:	89 e5                	mov    ebp,esp
   1bedb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:572
    struct tm * time_info;
    uint16 fat_time;
    uint16 fat_date;

    // Get system time
    time(&time_now);
   1bede:	83 ec 0c             	sub    esp,0xc
   1bee1:	8d 45 ec             	lea    eax,[ebp-0x14]
   1bee4:	50                   	push   eax
   1bee5:	e8 06 c0 00 00       	call   27ef0 <time>
   1beea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:575

    // Convert to local time
    time_info = localtime(&time_now);
   1beed:	83 ec 0c             	sub    esp,0xc
   1bef0:	8d 45 ec             	lea    eax,[ebp-0x14]
   1bef3:	50                   	push   eax
   1bef4:	e8 15 c3 00 00       	call   2820e <localtime>
   1bef9:	83 c4 10             	add    esp,0x10
   1befc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:578

    // Convert time to FAT format
    fat_time = fatfs_convert_to_fat_time(time_info->tm_hour, time_info->tm_min, time_info->tm_sec);
   1beff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bf02:	8b 08                	mov    ecx,DWORD PTR [eax]
   1bf04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bf07:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1bf0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bf0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1bf10:	83 ec 04             	sub    esp,0x4
   1bf13:	51                   	push   ecx
   1bf14:	52                   	push   edx
   1bf15:	50                   	push   eax
   1bf16:	e8 ad 41 00 00       	call   200c8 <fatfs_convert_to_fat_time>
   1bf1b:	83 c4 10             	add    esp,0x10
   1bf1e:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:581

    // Convert date to FAT format
    fat_date = fatfs_convert_to_fat_date(time_info->tm_mday, time_info->tm_mon + 1, time_info->tm_year + 1900);
   1bf22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bf25:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1bf28:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   1bf2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bf31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1bf34:	8d 50 01             	lea    edx,[eax+0x1]
   1bf37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bf3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1bf3d:	83 ec 04             	sub    esp,0x4
   1bf40:	51                   	push   ecx
   1bf41:	52                   	push   edx
   1bf42:	50                   	push   eax
   1bf43:	e8 d2 41 00 00       	call   2011a <fatfs_convert_to_fat_date>
   1bf48:	83 c4 10             	add    esp,0x10
   1bf4b:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:584

    // Update requested fields
    if (create)
   1bf4f:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1bf53:	74 38                	je     1bf8d <fatfs_update_timestamps+0xb5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:586
    {
        directoryEntry->CrtTime[1] = fat_time >> 8;
   1bf55:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bf59:	66 c1 e8 08          	shr    ax,0x8
   1bf5d:	89 c2                	mov    edx,eax
   1bf5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf62:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:587
        directoryEntry->CrtTime[0] = fat_time >> 0;
   1bf65:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bf69:	89 c2                	mov    edx,eax
   1bf6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf6e:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:588
        directoryEntry->CrtDate[1] = fat_date >> 8;
   1bf71:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bf75:	66 c1 e8 08          	shr    ax,0x8
   1bf79:	89 c2                	mov    edx,eax
   1bf7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf7e:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:589
        directoryEntry->CrtDate[0] = fat_date >> 0;
   1bf81:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bf85:	89 c2                	mov    edx,eax
   1bf87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf8a:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:592
    }

    if (modify)
   1bf8d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1bf91:	74 38                	je     1bfcb <fatfs_update_timestamps+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:594
    {
        directoryEntry->WrtTime[1] = fat_time >> 8;
   1bf93:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bf97:	66 c1 e8 08          	shr    ax,0x8
   1bf9b:	89 c2                	mov    edx,eax
   1bf9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bfa0:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:595
        directoryEntry->WrtTime[0] = fat_time >> 0;
   1bfa3:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bfa7:	89 c2                	mov    edx,eax
   1bfa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bfac:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:596
        directoryEntry->WrtDate[1] = fat_date >> 8;
   1bfaf:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bfb3:	66 c1 e8 08          	shr    ax,0x8
   1bfb7:	89 c2                	mov    edx,eax
   1bfb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bfbc:	88 50 19             	mov    BYTE PTR [eax+0x19],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:597
        directoryEntry->WrtDate[0] = fat_date >> 0;
   1bfbf:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bfc3:	89 c2                	mov    edx,eax
   1bfc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bfc8:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:600
    }

    if (access)
   1bfcb:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1bfcf:	74 38                	je     1c009 <fatfs_update_timestamps+0x131>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:602
    {
        directoryEntry->LstAccDate[1] = fat_time >> 8;
   1bfd1:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bfd5:	66 c1 e8 08          	shr    ax,0x8
   1bfd9:	89 c2                	mov    edx,eax
   1bfdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bfde:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:603
        directoryEntry->LstAccDate[0] = fat_time >> 0;
   1bfe1:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bfe5:	89 c2                	mov    edx,eax
   1bfe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bfea:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:604
        directoryEntry->LstAccDate[1] = fat_date >> 8;
   1bfed:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bff1:	66 c1 e8 08          	shr    ax,0x8
   1bff5:	89 c2                	mov    edx,eax
   1bff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bffa:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:605
        directoryEntry->LstAccDate[0] = fat_date >> 0;
   1bffd:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1c001:	89 c2                	mov    edx,eax
   1c003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c006:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:608
    }

    return 1;
   1c009:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:609
}
   1c00e:	c9                   	leave  
   1c00f:	c3                   	ret    

0001c010 <fatfs_update_file_length>:
fatfs_update_file_length():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:617
// fatfs_update_file_length: Find a SFN entry and update it
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
   1c010:	55                   	push   ebp
   1c011:	89 e5                	mov    ebp,esp
   1c013:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:618
    uint8 item=0;
   1c016:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:619
    uint16 recordoffset = 0;
   1c01a:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:620
    int x=0;
   1c020:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:624
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1c027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c02a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1c02d:	85 c0                	test   eax,eax
   1c02f:	75 0a                	jne    1c03b <fatfs_update_file_length+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:625
        return 0;
   1c031:	b8 00 00 00 00       	mov    eax,0x0
   1c036:	e9 14 01 00 00       	jmp    1c14f <fatfs_update_file_length+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:631

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1c03b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c03e:	8d 50 01             	lea    edx,[eax+0x1]
   1c041:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1c044:	6a 00                	push   0x0
   1c046:	50                   	push   eax
   1c047:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c04a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c04d:	e8 16 f7 ff ff       	call   1b768 <fatfs_sector_reader>
   1c052:	83 c4 10             	add    esp,0x10
   1c055:	85 c0                	test   eax,eax
   1c057:	0f 84 ec 00 00 00    	je     1c149 <fatfs_update_file_length+0x139>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c05d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1c061:	e9 d4 00 00 00       	jmp    1c13a <fatfs_update_file_length+0x12a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:637
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1c066:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c06a:	c1 e0 05             	shl    eax,0x5
   1c06d:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:640

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1c071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c074:	8d 50 44             	lea    edx,[eax+0x44]
   1c077:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1c07b:	01 d0                	add    eax,edx
   1c07d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:644

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1c080:	83 ec 0c             	sub    esp,0xc
   1c083:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c086:	e8 af 38 00 00       	call   1f93a <fatfs_entry_lfn_text>
   1c08b:	83 c4 10             	add    esp,0x10
   1c08e:	85 c0                	test   eax,eax
   1c090:	0f 85 9a 00 00 00    	jne    1c130 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:648
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1c096:	83 ec 0c             	sub    esp,0xc
   1c099:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c09c:	e8 bc 38 00 00       	call   1f95d <fatfs_entry_lfn_invalid>
   1c0a1:	83 c4 10             	add    esp,0x10
   1c0a4:	85 c0                	test   eax,eax
   1c0a6:	0f 85 84 00 00 00    	jne    1c130 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:654
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1c0ac:	83 ec 0c             	sub    esp,0xc
   1c0af:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c0b2:	e8 41 39 00 00       	call   1f9f8 <fatfs_entry_sfn_only>
   1c0b7:	83 c4 10             	add    esp,0x10
   1c0ba:	85 c0                	test   eax,eax
   1c0bc:	74 72                	je     1c130 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:656
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1c0be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1c0c1:	83 ec 04             	sub    esp,0x4
   1c0c4:	6a 0b                	push   0xb
   1c0c6:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1c0c9:	50                   	push   eax
   1c0ca:	e8 b1 5b ff ff       	call   11c80 <strncmp>
   1c0cf:	83 c4 10             	add    esp,0x10
   1c0d2:	85 c0                	test   eax,eax
   1c0d4:	75 5a                	jne    1c130 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:658
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
   1c0d6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1c0d9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1c0dc:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:662

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1c0df:	6a 01                	push   0x1
   1c0e1:	6a 01                	push   0x1
   1c0e3:	6a 00                	push   0x0
   1c0e5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c0e8:	e8 eb fd ff ff       	call   1bed8 <fatfs_update_timestamps>
   1c0ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:666
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1c0f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c0f3:	8d 50 44             	lea    edx,[eax+0x44]
   1c0f6:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1c0fa:	01 d0                	add    eax,edx
   1c0fc:	83 ec 04             	sub    esp,0x4
   1c0ff:	6a 20                	push   0x20
   1c101:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c104:	50                   	push   eax
   1c105:	e8 fa a0 00 00       	call   26204 <memcpy>
   1c10a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:669

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1c10d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c110:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1c113:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1c116:	8d 4a 44             	lea    ecx,[edx+0x44]
   1c119:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1c11c:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1c122:	83 ec 04             	sub    esp,0x4
   1c125:	6a 01                	push   0x1
   1c127:	51                   	push   ecx
   1c128:	52                   	push   edx
   1c129:	ff d0                	call   eax
   1c12b:	83 c4 10             	add    esp,0x10
   1c12e:	eb 1f                	jmp    1c14f <fatfs_update_file_length+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c130:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c134:	83 c0 01             	add    eax,0x1
   1c137:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634 (discriminator 1)
   1c13a:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1c13e:	0f 86 22 ff ff ff    	jbe    1c066 <fatfs_update_file_length+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:676 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1c144:	e9 f2 fe ff ff       	jmp    1c03b <fatfs_update_file_length+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:675
                    }
                }
            } // End of if
        }
        else
            break;
   1c149:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:678
    } // End of while loop

    return 0;
   1c14a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:679
}
   1c14f:	c9                   	leave  
   1c150:	c3                   	ret    

0001c151 <fatfs_mark_file_deleted>:
fatfs_mark_file_deleted():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:687
// fatfs_mark_file_deleted: Find a SFN entry and mark if as deleted
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1c151:	55                   	push   ebp
   1c152:	89 e5                	mov    ebp,esp
   1c154:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:688
    uint8 item=0;
   1c157:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:689
    uint16 recordoffset = 0;
   1c15b:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:690
    int x=0;
   1c161:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:694
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1c168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c16b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1c16e:	85 c0                	test   eax,eax
   1c170:	75 0a                	jne    1c17c <fatfs_mark_file_deleted+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:695
        return 0;
   1c172:	b8 00 00 00 00       	mov    eax,0x0
   1c177:	e9 11 01 00 00       	jmp    1c28d <fatfs_mark_file_deleted+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:701

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1c17c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c17f:	8d 50 01             	lea    edx,[eax+0x1]
   1c182:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1c185:	6a 00                	push   0x0
   1c187:	50                   	push   eax
   1c188:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c18b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c18e:	e8 d5 f5 ff ff       	call   1b768 <fatfs_sector_reader>
   1c193:	83 c4 10             	add    esp,0x10
   1c196:	85 c0                	test   eax,eax
   1c198:	0f 84 e9 00 00 00    	je     1c287 <fatfs_mark_file_deleted+0x136>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c19e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1c1a2:	e9 d1 00 00 00       	jmp    1c278 <fatfs_mark_file_deleted+0x127>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:707
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1c1a7:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c1ab:	c1 e0 05             	shl    eax,0x5
   1c1ae:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:710

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1c1b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c1b5:	8d 50 44             	lea    edx,[eax+0x44]
   1c1b8:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1c1bc:	01 d0                	add    eax,edx
   1c1be:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:714

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1c1c1:	83 ec 0c             	sub    esp,0xc
   1c1c4:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c1c7:	e8 6e 37 00 00       	call   1f93a <fatfs_entry_lfn_text>
   1c1cc:	83 c4 10             	add    esp,0x10
   1c1cf:	85 c0                	test   eax,eax
   1c1d1:	0f 85 97 00 00 00    	jne    1c26e <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:718
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1c1d7:	83 ec 0c             	sub    esp,0xc
   1c1da:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c1dd:	e8 7b 37 00 00       	call   1f95d <fatfs_entry_lfn_invalid>
   1c1e2:	83 c4 10             	add    esp,0x10
   1c1e5:	85 c0                	test   eax,eax
   1c1e7:	0f 85 81 00 00 00    	jne    1c26e <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:724
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1c1ed:	83 ec 0c             	sub    esp,0xc
   1c1f0:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c1f3:	e8 00 38 00 00       	call   1f9f8 <fatfs_entry_sfn_only>
   1c1f8:	83 c4 10             	add    esp,0x10
   1c1fb:	85 c0                	test   eax,eax
   1c1fd:	74 6f                	je     1c26e <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:726
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   1c1ff:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1c202:	83 ec 04             	sub    esp,0x4
   1c205:	6a 0b                	push   0xb
   1c207:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1c20a:	50                   	push   eax
   1c20b:	e8 70 5a ff ff       	call   11c80 <strncmp>
   1c210:	83 c4 10             	add    esp,0x10
   1c213:	85 c0                	test   eax,eax
   1c215:	75 57                	jne    1c26e <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:729
                    {
                        // Mark as deleted
                        directoryEntry->Name[0] = FILE_HEADER_DELETED;
   1c217:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1c21a:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:733

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1c21d:	6a 01                	push   0x1
   1c21f:	6a 01                	push   0x1
   1c221:	6a 00                	push   0x0
   1c223:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c226:	e8 ad fc ff ff       	call   1bed8 <fatfs_update_timestamps>
   1c22b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:737
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1c22e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c231:	8d 50 44             	lea    edx,[eax+0x44]
   1c234:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1c238:	01 d0                	add    eax,edx
   1c23a:	83 ec 04             	sub    esp,0x4
   1c23d:	6a 20                	push   0x20
   1c23f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c242:	50                   	push   eax
   1c243:	e8 bc 9f 00 00       	call   26204 <memcpy>
   1c248:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:740

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1c24b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c24e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1c251:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1c254:	8d 4a 44             	lea    ecx,[edx+0x44]
   1c257:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1c25a:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1c260:	83 ec 04             	sub    esp,0x4
   1c263:	6a 01                	push   0x1
   1c265:	51                   	push   ecx
   1c266:	52                   	push   edx
   1c267:	ff d0                	call   eax
   1c269:	83 c4 10             	add    esp,0x10
   1c26c:	eb 1f                	jmp    1c28d <fatfs_mark_file_deleted+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c26e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c272:	83 c0 01             	add    eax,0x1
   1c275:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704 (discriminator 1)
   1c278:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1c27c:	0f 86 25 ff ff ff    	jbe    1c1a7 <fatfs_mark_file_deleted+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:747 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1c282:	e9 f5 fe ff ff       	jmp    1c17c <fatfs_mark_file_deleted+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:746
                    }
                }
            } // End of if
        }
        else
            break;
   1c287:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:749
    } // End of while loop

    return 0;
   1c288:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:750
}
   1c28d:	c9                   	leave  
   1c28e:	c3                   	ret    

0001c28f <fatfs_list_directory_start>:
fatfs_list_directory_start():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:757
//-----------------------------------------------------------------------------
// fatfs_list_directory_start: Initialise a directory listing procedure
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
   1c28f:	55                   	push   ebp
   1c290:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:758
    dirls->cluster = StartCluster;
   1c292:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c295:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c298:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:759
    dirls->sector = 0;
   1c29b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c29e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:760
    dirls->offset = 0;
   1c2a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2a7:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:761
}
   1c2ab:	90                   	nop
   1c2ac:	5d                   	pop    ebp
   1c2ad:	c3                   	ret    

0001c2ae <fatfs_list_directory_next>:
fatfs_list_directory_next():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:769
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
{
   1c2ae:	55                   	push   ebp
   1c2af:	89 e5                	mov    ebp,esp
   1c2b1:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:773
    uint8 i,item;
    uint16 recordoffset;
    struct fat_dir_entry *directoryEntry;
    char *long_filename = NULL;
   1c2b7:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:776
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1c2be:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:777
    int result = 0;
   1c2c5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:780

    // Initialise LFN cache first
    fatfs_lfn_cache_init(&lfn, 0);
   1c2cc:	83 ec 08             	sub    esp,0x8
   1c2cf:	6a 00                	push   0x0
   1c2d1:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c2d7:	50                   	push   eax
   1c2d8:	e8 43 33 00 00       	call   1f620 <fatfs_lfn_cache_init>
   1c2dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:785

    while (1)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
   1c2e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2e3:	8b 10                	mov    edx,DWORD PTR [eax]
   1c2e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c2eb:	6a 00                	push   0x0
   1c2ed:	52                   	push   edx
   1c2ee:	50                   	push   eax
   1c2ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c2f2:	e8 71 f4 ff ff       	call   1b768 <fatfs_sector_reader>
   1c2f7:	83 c4 10             	add    esp,0x10
   1c2fa:	85 c0                	test   eax,eax
   1c2fc:	0f 84 56 04 00 00    	je     1c758 <fatfs_list_directory_next+0x4aa>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c302:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c305:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1c309:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
   1c30c:	e9 24 04 00 00       	jmp    1c735 <fatfs_list_directory_next+0x487>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:791
            {
                // Increase directory offset
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1c311:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c315:	c1 e0 05             	shl    eax,0x5
   1c318:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:794

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1c31c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c31f:	8d 50 44             	lea    edx,[eax+0x44]
   1c322:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1c326:	01 d0                	add    eax,edx
   1c328:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:798

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
   1c32b:	83 ec 0c             	sub    esp,0xc
   1c32e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c331:	e8 04 36 00 00       	call   1f93a <fatfs_entry_lfn_text>
   1c336:	83 c4 10             	add    esp,0x10
   1c339:	85 c0                	test   eax,eax
   1c33b:	74 24                	je     1c361 <fatfs_list_directory_next+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:799
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1c33d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c340:	8d 50 44             	lea    edx,[eax+0x44]
   1c343:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1c347:	01 d0                	add    eax,edx
   1c349:	83 ec 08             	sub    esp,0x8
   1c34c:	50                   	push   eax
   1c34d:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c353:	50                   	push   eax
   1c354:	e8 1d 33 00 00       	call   1f676 <fatfs_lfn_cache_entry>
   1c359:	83 c4 10             	add    esp,0x10
   1c35c:	e9 ca 03 00 00       	jmp    1c72b <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:802

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
   1c361:	83 ec 0c             	sub    esp,0xc
   1c364:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c367:	e8 f1 35 00 00       	call   1f95d <fatfs_entry_lfn_invalid>
   1c36c:	83 c4 10             	add    esp,0x10
   1c36f:	85 c0                	test   eax,eax
   1c371:	74 19                	je     1c38c <fatfs_list_directory_next+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:803
                    fatfs_lfn_cache_init(&lfn, 0);
   1c373:	83 ec 08             	sub    esp,0x8
   1c376:	6a 00                	push   0x0
   1c378:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c37e:	50                   	push   eax
   1c37f:	e8 9c 32 00 00       	call   1f620 <fatfs_lfn_cache_init>
   1c384:	83 c4 10             	add    esp,0x10
   1c387:	e9 9f 03 00 00       	jmp    1c72b <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:806

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1c38c:	83 ec 08             	sub    esp,0x8
   1c38f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c392:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c398:	50                   	push   eax
   1c399:	e8 00 36 00 00       	call   1f99e <fatfs_entry_lfn_exists>
   1c39e:	83 c4 10             	add    esp,0x10
   1c3a1:	85 c0                	test   eax,eax
   1c3a3:	0f 84 67 01 00 00    	je     1c510 <fatfs_list_directory_next+0x262>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:809
                {
                    // Get text
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1c3a9:	83 ec 0c             	sub    esp,0xc
   1c3ac:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c3b2:	50                   	push   eax
   1c3b3:	e8 2a 35 00 00       	call   1f8e2 <fatfs_lfn_cache_get>
   1c3b8:	83 c4 10             	add    esp,0x10
   1c3bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:810
                    strncpy(entry->filename, long_filename, FATFS_MAX_LONG_FILENAME-1);
   1c3be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c3c1:	83 ec 04             	sub    esp,0x4
   1c3c4:	6a 7f                	push   0x7f
   1c3c6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c3c9:	50                   	push   eax
   1c3ca:	e8 11 59 ff ff       	call   11ce0 <strncpy>
   1c3cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:812

                    if (fatfs_entry_is_dir(directoryEntry))
   1c3d2:	83 ec 0c             	sub    esp,0xc
   1c3d5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c3d8:	e8 67 36 00 00       	call   1fa44 <fatfs_entry_is_dir>
   1c3dd:	83 c4 10             	add    esp,0x10
   1c3e0:	85 c0                	test   eax,eax
   1c3e2:	74 0c                	je     1c3f0 <fatfs_list_directory_next+0x142>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:813
                        entry->is_dir = 1;
   1c3e4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c3e7:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1c3ee:	eb 0a                	jmp    1c3fa <fatfs_list_directory_next+0x14c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:815
                    else
                        entry->is_dir = 0;
   1c3f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c3f3:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:819

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1c3fa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c3fd:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1c401:	0f b6 c0             	movzx  eax,al
   1c404:	c1 e0 08             	shl    eax,0x8
   1c407:	89 c2                	mov    edx,eax
   1c409:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c40c:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1c410:	0f b6 c0             	movzx  eax,al
   1c413:	09 d0                	or     eax,edx
   1c415:	89 c2                	mov    edx,eax
   1c417:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c41a:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:820
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1c421:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c424:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1c428:	0f b6 c0             	movzx  eax,al
   1c42b:	c1 e0 08             	shl    eax,0x8
   1c42e:	89 c2                	mov    edx,eax
   1c430:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c433:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1c437:	0f b6 c0             	movzx  eax,al
   1c43a:	09 d0                	or     eax,edx
   1c43c:	89 c2                	mov    edx,eax
   1c43e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c441:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:821
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1c448:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c44b:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1c44f:	0f b6 c0             	movzx  eax,al
   1c452:	c1 e0 08             	shl    eax,0x8
   1c455:	89 c2                	mov    edx,eax
   1c457:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c45a:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1c45e:	0f b6 c0             	movzx  eax,al
   1c461:	09 d0                	or     eax,edx
   1c463:	89 c2                	mov    edx,eax
   1c465:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c468:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:822
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1c46f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c472:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1c476:	0f b6 c0             	movzx  eax,al
   1c479:	c1 e0 08             	shl    eax,0x8
   1c47c:	89 c2                	mov    edx,eax
   1c47e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c481:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1c485:	0f b6 c0             	movzx  eax,al
   1c488:	09 d0                	or     eax,edx
   1c48a:	89 c2                	mov    edx,eax
   1c48c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c48f:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:823
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1c496:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c499:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1c49d:	0f b6 c0             	movzx  eax,al
   1c4a0:	c1 e0 08             	shl    eax,0x8
   1c4a3:	89 c2                	mov    edx,eax
   1c4a5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c4a8:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1c4ac:	0f b6 c0             	movzx  eax,al
   1c4af:	09 d0                	or     eax,edx
   1c4b1:	89 c2                	mov    edx,eax
   1c4b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c4b6:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:826
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1c4bd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c4c0:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1c4c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c4c6:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:827
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1c4cc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c4cf:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1c4d3:	0f b7 c0             	movzx  eax,ax
   1c4d6:	c1 e0 10             	shl    eax,0x10
   1c4d9:	89 c2                	mov    edx,eax
   1c4db:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c4de:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1c4e2:	0f b7 c0             	movzx  eax,ax
   1c4e5:	09 d0                	or     eax,edx
   1c4e7:	89 c2                	mov    edx,eax
   1c4e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c4ec:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:830

                    // Next starting position
                    dirls->offset = item + 1;
   1c4f2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c4f6:	8d 50 01             	lea    edx,[eax+0x1]
   1c4f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4fc:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:831
                    result = 1;
   1c4ff:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:832
                    return 1;
   1c506:	b8 01 00 00 00       	mov    eax,0x1
   1c50b:	e9 4c 02 00 00       	jmp    1c75c <fatfs_list_directory_next+0x4ae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:837
                }
                // Normal Entry, only 8.3 Text
                else
#endif
                if ( fatfs_entry_sfn_only(directoryEntry) )
   1c510:	83 ec 0c             	sub    esp,0xc
   1c513:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c516:	e8 dd 34 00 00       	call   1f9f8 <fatfs_entry_sfn_only>
   1c51b:	83 c4 10             	add    esp,0x10
   1c51e:	85 c0                	test   eax,eax
   1c520:	0f 84 05 02 00 00    	je     1c72b <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:839
                {
                    fatfs_lfn_cache_init(&lfn, 0);
   1c526:	83 ec 08             	sub    esp,0x8
   1c529:	6a 00                	push   0x0
   1c52b:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c531:	50                   	push   eax
   1c532:	e8 e9 30 00 00       	call   1f620 <fatfs_lfn_cache_init>
   1c537:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:841

                    memset(short_filename, 0, sizeof(short_filename));
   1c53a:	83 ec 04             	sub    esp,0x4
   1c53d:	6a 0d                	push   0xd
   1c53f:	6a 00                	push   0x0
   1c541:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1c544:	50                   	push   eax
   1c545:	e8 f3 90 00 00       	call   2563d <memset>
   1c54a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c54d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1c551:	eb 1d                	jmp    1c570 <fatfs_list_directory_next+0x2c2>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:845 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1c553:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c557:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   1c55b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1c55e:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1c562:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844 (discriminator 3)
                    fatfs_lfn_cache_init(&lfn, 0);

                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c566:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c56a:	83 c0 01             	add    eax,0x1
   1c56d:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844 (discriminator 1)
   1c570:	80 7d f7 07          	cmp    BYTE PTR [ebp-0x9],0x7
   1c574:	76 dd                	jbe    1c553 <fatfs_list_directory_next+0x2a5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:848
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1c576:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849
                    for (i=8; i<11; i++)
   1c57d:	c6 45 f7 08          	mov    BYTE PTR [ebp-0x9],0x8
   1c581:	eb 36                	jmp    1c5b9 <fatfs_list_directory_next+0x30b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:851
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1c583:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c587:	8d 48 01             	lea    ecx,[eax+0x1]
   1c58a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c58e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c591:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c595:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:852
                        if (directoryEntry->Name[i] != ' ')
   1c599:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c59d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c5a0:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c5a4:	3c 20                	cmp    al,0x20
   1c5a6:	74 07                	je     1c5af <fatfs_list_directory_next+0x301>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:853
                            dotRequired = 1;
   1c5a8:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1c5af:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c5b3:	83 c0 01             	add    eax,0x1
   1c5b6:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849 (discriminator 1)
   1c5b9:	80 7d f7 0a          	cmp    BYTE PTR [ebp-0x9],0xa
   1c5bd:	76 c4                	jbe    1c583 <fatfs_list_directory_next+0x2d5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:857
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1c5bf:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1c5c3:	74 14                	je     1c5d9 <fatfs_list_directory_next+0x32b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:860
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1c5c5:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1c5c9:	3c 2e                	cmp    al,0x2e
   1c5cb:	74 06                	je     1c5d3 <fatfs_list_directory_next+0x325>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:861
                            short_filename[8] = '.';
   1c5cd:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1c5d1:	eb 0a                	jmp    1c5dd <fatfs_list_directory_next+0x32f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:863
                        else
                            short_filename[8] = ' ';
   1c5d3:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1c5d7:	eb 04                	jmp    1c5dd <fatfs_list_directory_next+0x32f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:866
                    }
                    else
                        short_filename[8] = ' ';
   1c5d9:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:868

                    fatfs_get_sfn_display_name(entry->filename, short_filename);
   1c5dd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c5e0:	83 ec 08             	sub    esp,0x8
   1c5e3:	8d 55 d3             	lea    edx,[ebp-0x2d]
   1c5e6:	52                   	push   edx
   1c5e7:	50                   	push   eax
   1c5e8:	e8 9b 40 00 00       	call   20688 <fatfs_get_sfn_display_name>
   1c5ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:870

                    if (fatfs_entry_is_dir(directoryEntry))
   1c5f0:	83 ec 0c             	sub    esp,0xc
   1c5f3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c5f6:	e8 49 34 00 00       	call   1fa44 <fatfs_entry_is_dir>
   1c5fb:	83 c4 10             	add    esp,0x10
   1c5fe:	85 c0                	test   eax,eax
   1c600:	74 0c                	je     1c60e <fatfs_list_directory_next+0x360>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:871
                        entry->is_dir = 1;
   1c602:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c605:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1c60c:	eb 0a                	jmp    1c618 <fatfs_list_directory_next+0x36a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:873
                    else
                        entry->is_dir = 0;
   1c60e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c611:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:877

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1c618:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c61b:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1c61f:	0f b6 c0             	movzx  eax,al
   1c622:	c1 e0 08             	shl    eax,0x8
   1c625:	89 c2                	mov    edx,eax
   1c627:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c62a:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1c62e:	0f b6 c0             	movzx  eax,al
   1c631:	09 d0                	or     eax,edx
   1c633:	89 c2                	mov    edx,eax
   1c635:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c638:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:878
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1c63f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c642:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1c646:	0f b6 c0             	movzx  eax,al
   1c649:	c1 e0 08             	shl    eax,0x8
   1c64c:	89 c2                	mov    edx,eax
   1c64e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c651:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1c655:	0f b6 c0             	movzx  eax,al
   1c658:	09 d0                	or     eax,edx
   1c65a:	89 c2                	mov    edx,eax
   1c65c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c65f:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:879
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1c666:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c669:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1c66d:	0f b6 c0             	movzx  eax,al
   1c670:	c1 e0 08             	shl    eax,0x8
   1c673:	89 c2                	mov    edx,eax
   1c675:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c678:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1c67c:	0f b6 c0             	movzx  eax,al
   1c67f:	09 d0                	or     eax,edx
   1c681:	89 c2                	mov    edx,eax
   1c683:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c686:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:880
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1c68d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c690:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1c694:	0f b6 c0             	movzx  eax,al
   1c697:	c1 e0 08             	shl    eax,0x8
   1c69a:	89 c2                	mov    edx,eax
   1c69c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c69f:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1c6a3:	0f b6 c0             	movzx  eax,al
   1c6a6:	09 d0                	or     eax,edx
   1c6a8:	89 c2                	mov    edx,eax
   1c6aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c6ad:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:881
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1c6b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c6b7:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1c6bb:	0f b6 c0             	movzx  eax,al
   1c6be:	c1 e0 08             	shl    eax,0x8
   1c6c1:	89 c2                	mov    edx,eax
   1c6c3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c6c6:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1c6ca:	0f b6 c0             	movzx  eax,al
   1c6cd:	09 d0                	or     eax,edx
   1c6cf:	89 c2                	mov    edx,eax
   1c6d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c6d4:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:884
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1c6db:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c6de:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1c6e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c6e4:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:885
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1c6ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c6ed:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1c6f1:	0f b7 c0             	movzx  eax,ax
   1c6f4:	c1 e0 10             	shl    eax,0x10
   1c6f7:	89 c2                	mov    edx,eax
   1c6f9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c6fc:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1c700:	0f b7 c0             	movzx  eax,ax
   1c703:	09 d0                	or     eax,edx
   1c705:	89 c2                	mov    edx,eax
   1c707:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c70a:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:888

                    // Next starting position
                    dirls->offset = item + 1;
   1c710:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c714:	8d 50 01             	lea    edx,[eax+0x1]
   1c717:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c71a:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:889
                    result = 1;
   1c71d:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:890
                    return 1;
   1c724:	b8 01 00 00 00       	mov    eax,0x1
   1c729:	eb 31                	jmp    1c75c <fatfs_list_directory_next+0x4ae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788 (discriminator 2)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c72b:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c72f:	83 c0 01             	add    eax,0x1
   1c732:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788 (discriminator 1)
   1c735:	80 7d f6 0f          	cmp    BYTE PTR [ebp-0xa],0xf
   1c739:	0f 86 d2 fb ff ff    	jbe    1c311 <fatfs_list_directory_next+0x63>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:895
                    return 1;
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
   1c73f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c742:	8b 00                	mov    eax,DWORD PTR [eax]
   1c744:	8d 50 01             	lea    edx,[eax+0x1]
   1c747:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c74a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:896
            dirls->offset = 0;
   1c74c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c74f:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:900
        }
        else
            break;
    }
   1c753:	e9 88 fb ff ff       	jmp    1c2e0 <fatfs_list_directory_next+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:899
            // If reached end of the dir move onto next sector
            dirls->sector++;
            dirls->offset = 0;
        }
        else
            break;
   1c758:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:902
    }

    return result;
   1c759:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:903 (discriminator 1)
}
   1c75c:	c9                   	leave  
   1c75d:	c3                   	ret    
   1c75e:	66 90                	xchg   ax,ax

0001c760 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c760:	55                   	push   ebp
   1c761:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c766:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c76d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c770:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c776:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1c778:	90                   	nop
   1c779:	5d                   	pop    ebp
   1c77a:	c3                   	ret    

0001c77b <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c77b:	55                   	push   ebp
   1c77c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1c77e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c781:	8b 00                	mov    eax,DWORD PTR [eax]
   1c783:	85 c0                	test   eax,eax
   1c785:	75 0d                	jne    1c794 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1c787:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c78a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c78d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c790:	89 10                	mov    DWORD PTR [eax],edx
   1c792:	eb 0e                	jmp    1c7a2 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1c794:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c797:	8b 00                	mov    eax,DWORD PTR [eax]
   1c799:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c79c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1c79f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1c7a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c7a8:	85 c0                	test   eax,eax
   1c7aa:	75 0d                	jne    1c7b9 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1c7ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7af:	8b 10                	mov    edx,DWORD PTR [eax]
   1c7b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c7b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1c7b7:	eb 0d                	jmp    1c7c6 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1c7b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c7bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c7c2:	8b 12                	mov    edx,DWORD PTR [edx]
   1c7c4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1c7c6:	90                   	nop
   1c7c7:	5d                   	pop    ebp
   1c7c8:	c3                   	ret    

0001c7c9 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c7c9:	55                   	push   ebp
   1c7ca:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1c7cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c7cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c7d2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1c7d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7d7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c7da:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c7dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1c7e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c7e6:	85 c0                	test   eax,eax
   1c7e8:	75 0b                	jne    1c7f5 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1c7ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c7ed:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c7f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1c7f3:	eb 0b                	jmp    1c800 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1c7f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c7fb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c7fe:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1c800:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c803:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c806:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   1c809:	90                   	nop
   1c80a:	5d                   	pop    ebp
   1c80b:	c3                   	ret    

0001c80c <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c80c:	55                   	push   ebp
   1c80d:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1c80f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c812:	8b 10                	mov    edx,DWORD PTR [eax]
   1c814:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c817:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1c819:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c81c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c81f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1c822:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c825:	8b 00                	mov    eax,DWORD PTR [eax]
   1c827:	85 c0                	test   eax,eax
   1c829:	75 0a                	jne    1c835 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1c82b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c82e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c831:	89 10                	mov    DWORD PTR [eax],edx
   1c833:	eb 0b                	jmp    1c840 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1c835:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c838:	8b 00                	mov    eax,DWORD PTR [eax]
   1c83a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c83d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1c840:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c843:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c846:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   1c848:	90                   	nop
   1c849:	5d                   	pop    ebp
   1c84a:	c3                   	ret    

0001c84b <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1c84b:	55                   	push   ebp
   1c84c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1c84e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c851:	8b 00                	mov    eax,DWORD PTR [eax]
   1c853:	85 c0                	test   eax,eax
   1c855:	75 26                	jne    1c87d <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1c857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c85a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c85d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1c85f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c862:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c865:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1c868:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c86b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1c871:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c874:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1c87b:	eb 14                	jmp    1c891 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1c87d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c880:	8b 00                	mov    eax,DWORD PTR [eax]
   1c882:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c885:	50                   	push   eax
   1c886:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c889:	e8 7e ff ff ff       	call   1c80c <fat_list_insert_before>
   1c88e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   1c891:	90                   	nop
   1c892:	c9                   	leave  
   1c893:	c3                   	ret    

0001c894 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1c894:	55                   	push   ebp
   1c895:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1c897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c89a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c89d:	85 c0                	test   eax,eax
   1c89f:	75 10                	jne    1c8b1 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1c8a1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c8a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c8a7:	e8 9f ff ff ff       	call   1c84b <fat_list_insert_first>
   1c8ac:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1c8af:	eb 15                	jmp    1c8c6 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1c8b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c8b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c8b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c8ba:	50                   	push   eax
   1c8bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c8be:	e8 06 ff ff ff       	call   1c7c9 <fat_list_insert_after>
   1c8c3:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1c8c6:	90                   	nop
   1c8c7:	c9                   	leave  
   1c8c8:	c3                   	ret    

0001c8c9 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1c8c9:	55                   	push   ebp
   1c8ca:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1c8cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c8cf:	8b 00                	mov    eax,DWORD PTR [eax]
   1c8d1:	85 c0                	test   eax,eax
   1c8d3:	0f 94 c0             	sete   al
   1c8d6:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   1c8d9:	5d                   	pop    ebp
   1c8da:	c3                   	ret    

0001c8db <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1c8db:	55                   	push   ebp
   1c8dc:	89 e5                	mov    ebp,esp
   1c8de:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1c8e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c8e4:	8b 00                	mov    eax,DWORD PTR [eax]
   1c8e6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   1c8e9:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c8ed:	74 0e                	je     1c8fd <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1c8ef:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c8f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c8f5:	e8 81 fe ff ff       	call   1c77b <fat_list_remove>
   1c8fa:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   1c8fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   1c900:	c9                   	leave  
   1c901:	c3                   	ret    

0001c902 <fatfs_cache_init>:
fatfs_cache_init():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:43

//-----------------------------------------------------------------------------
// fatfs_cache_init:
//-----------------------------------------------------------------------------
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
   1c902:	55                   	push   ebp
   1c903:	89 e5                	mov    ebp,esp
   1c905:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:47
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
   1c908:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1c90f:	eb 27                	jmp    1c938 <fatfs_cache_init+0x36>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:49 (discriminator 3)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   1c911:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c914:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c917:	83 c2 48             	add    edx,0x48
   1c91a:	c7 04 90 ff ff ff ff 	mov    DWORD PTR [eax+edx*4],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:50 (discriminator 3)
        file->cluster_cache_data[i] = 0;
   1c921:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c924:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c927:	81 c2 c8 00 00 00    	add    edx,0xc8
   1c92d:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:47 (discriminator 3)
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
   1c934:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:47 (discriminator 1)
   1c938:	83 7d fc 7f          	cmp    DWORD PTR [ebp-0x4],0x7f
   1c93c:	7e d3                	jle    1c911 <fatfs_cache_init+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:54
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
        file->cluster_cache_data[i] = 0;
    }
#endif

    return 1;
   1c93e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:55
}
   1c943:	c9                   	leave  
   1c944:	c3                   	ret    

0001c945 <fatfs_cache_get_next_cluster>:
fatfs_cache_get_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:60
//-----------------------------------------------------------------------------
// fatfs_cache_get_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_get_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 *pNextCluster)
{
   1c945:	55                   	push   ebp
   1c946:	89 e5                	mov    ebp,esp
   1c948:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:62
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;
   1c94b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c94e:	83 e0 7f             	and    eax,0x7f
   1c951:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:64

    if (file->cluster_cache_idx[slot] == clusterIdx)
   1c954:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c957:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c95a:	83 c2 48             	add    edx,0x48
   1c95d:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
   1c960:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1c963:	75 1b                	jne    1c980 <fatfs_cache_get_next_cluster+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:66
    {
        *pNextCluster = file->cluster_cache_data[slot];
   1c965:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c968:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c96b:	81 c2 c8 00 00 00    	add    edx,0xc8
   1c971:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
   1c974:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1c977:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:67
        return 1;
   1c979:	b8 01 00 00 00       	mov    eax,0x1
   1c97e:	eb 05                	jmp    1c985 <fatfs_cache_get_next_cluster+0x40>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:71
    }
#endif

    return 0;
   1c980:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:72
}
   1c985:	c9                   	leave  
   1c986:	c3                   	ret    

0001c987 <fatfs_cache_set_next_cluster>:
fatfs_cache_set_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:77
//-----------------------------------------------------------------------------
// fatfs_cache_set_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_set_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 nextCluster)
{
   1c987:	55                   	push   ebp
   1c988:	89 e5                	mov    ebp,esp
   1c98a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:79
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;
   1c98d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c990:	83 e0 7f             	and    eax,0x7f
   1c993:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:81

    if (file->cluster_cache_idx[slot] == clusterIdx)
   1c996:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c999:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c99c:	83 c2 48             	add    edx,0x48
   1c99f:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
   1c9a2:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1c9a5:	75 14                	jne    1c9bb <fatfs_cache_set_next_cluster+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:82
        file->cluster_cache_data[slot] = nextCluster;
   1c9a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c9aa:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c9ad:	8d 8a c8 00 00 00    	lea    ecx,[edx+0xc8]
   1c9b3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1c9b6:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
   1c9b9:	eb 21                	jmp    1c9dc <fatfs_cache_set_next_cluster+0x55>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:85
    else
    {
        file->cluster_cache_idx[slot] = clusterIdx;
   1c9bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c9be:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c9c1:	8d 4a 48             	lea    ecx,[edx+0x48]
   1c9c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c9c7:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:86
        file->cluster_cache_data[slot] = nextCluster;
   1c9ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c9cd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c9d0:	8d 8a c8 00 00 00    	lea    ecx,[edx+0xc8]
   1c9d6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1c9d9:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:90
    }
#endif

    return 1;
   1c9dc:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:91
}
   1c9e1:	c9                   	leave  
   1c9e2:	c3                   	ret    
   1c9e3:	90                   	nop

0001c9e4 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c9e4:	55                   	push   ebp
   1c9e5:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c9e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c9ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c9f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c9f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c9f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c9fa:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1c9fc:	90                   	nop
   1c9fd:	5d                   	pop    ebp
   1c9fe:	c3                   	ret    

0001c9ff <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c9ff:	55                   	push   ebp
   1ca00:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1ca02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca05:	8b 00                	mov    eax,DWORD PTR [eax]
   1ca07:	85 c0                	test   eax,eax
   1ca09:	75 0d                	jne    1ca18 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1ca0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca0e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1ca11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ca14:	89 10                	mov    DWORD PTR [eax],edx
   1ca16:	eb 0e                	jmp    1ca26 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1ca18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca1b:	8b 00                	mov    eax,DWORD PTR [eax]
   1ca1d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1ca20:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1ca23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1ca26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ca2c:	85 c0                	test   eax,eax
   1ca2e:	75 0d                	jne    1ca3d <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1ca30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca33:	8b 10                	mov    edx,DWORD PTR [eax]
   1ca35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ca38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1ca3b:	eb 0d                	jmp    1ca4a <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1ca3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ca43:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1ca46:	8b 12                	mov    edx,DWORD PTR [edx]
   1ca48:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1ca4a:	90                   	nop
   1ca4b:	5d                   	pop    ebp
   1ca4c:	c3                   	ret    

0001ca4d <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1ca4d:	55                   	push   ebp
   1ca4e:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1ca50:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ca53:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1ca56:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1ca58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca5b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1ca5e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ca61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1ca64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ca6a:	85 c0                	test   eax,eax
   1ca6c:	75 0b                	jne    1ca79 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1ca6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ca71:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1ca74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1ca77:	eb 0b                	jmp    1ca84 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1ca79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ca7f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1ca82:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1ca84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca87:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1ca8a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   1ca8d:	90                   	nop
   1ca8e:	5d                   	pop    ebp
   1ca8f:	c3                   	ret    

0001ca90 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1ca90:	55                   	push   ebp
   1ca91:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1ca93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca96:	8b 10                	mov    edx,DWORD PTR [eax]
   1ca98:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ca9b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1ca9d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1caa0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1caa3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1caa6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1caa9:	8b 00                	mov    eax,DWORD PTR [eax]
   1caab:	85 c0                	test   eax,eax
   1caad:	75 0a                	jne    1cab9 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1caaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cab2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1cab5:	89 10                	mov    DWORD PTR [eax],edx
   1cab7:	eb 0b                	jmp    1cac4 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1cab9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1cabc:	8b 00                	mov    eax,DWORD PTR [eax]
   1cabe:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1cac1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1cac4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1cac7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1caca:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   1cacc:	90                   	nop
   1cacd:	5d                   	pop    ebp
   1cace:	c3                   	ret    

0001cacf <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1cacf:	55                   	push   ebp
   1cad0:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1cad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cad5:	8b 00                	mov    eax,DWORD PTR [eax]
   1cad7:	85 c0                	test   eax,eax
   1cad9:	75 26                	jne    1cb01 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1cadb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cade:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1cae1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1cae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cae6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1cae9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1caec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1caef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1caf5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1caf8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1caff:	eb 14                	jmp    1cb15 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1cb01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cb04:	8b 00                	mov    eax,DWORD PTR [eax]
   1cb06:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1cb09:	50                   	push   eax
   1cb0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cb0d:	e8 7e ff ff ff       	call   1ca90 <fat_list_insert_before>
   1cb12:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   1cb15:	90                   	nop
   1cb16:	c9                   	leave  
   1cb17:	c3                   	ret    

0001cb18 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1cb18:	55                   	push   ebp
   1cb19:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1cb1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cb1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cb21:	85 c0                	test   eax,eax
   1cb23:	75 10                	jne    1cb35 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1cb25:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1cb28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cb2b:	e8 9f ff ff ff       	call   1cacf <fat_list_insert_first>
   1cb30:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1cb33:	eb 15                	jmp    1cb4a <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1cb35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cb38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cb3b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1cb3e:	50                   	push   eax
   1cb3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cb42:	e8 06 ff ff ff       	call   1ca4d <fat_list_insert_after>
   1cb47:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1cb4a:	90                   	nop
   1cb4b:	c9                   	leave  
   1cb4c:	c3                   	ret    

0001cb4d <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1cb4d:	55                   	push   ebp
   1cb4e:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1cb50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cb53:	8b 00                	mov    eax,DWORD PTR [eax]
   1cb55:	85 c0                	test   eax,eax
   1cb57:	0f 94 c0             	sete   al
   1cb5a:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   1cb5d:	5d                   	pop    ebp
   1cb5e:	c3                   	ret    

0001cb5f <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1cb5f:	55                   	push   ebp
   1cb60:	89 e5                	mov    ebp,esp
   1cb62:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1cb65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cb68:	8b 00                	mov    eax,DWORD PTR [eax]
   1cb6a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   1cb6d:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1cb71:	74 0e                	je     1cb81 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1cb73:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1cb76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cb79:	e8 81 fe ff ff       	call   1c9ff <fat_list_remove>
   1cb7e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   1cb81:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   1cb84:	c9                   	leave  
   1cb85:	c3                   	ret    

0001cb86 <_allocate_file>:
_allocate_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:72

//-----------------------------------------------------------------------------
// _allocate_file: Find a slot in the open files buffer for a new file
//-----------------------------------------------------------------------------
static FL_FILE* _allocate_file(void)
{
   1cb86:	55                   	push   ebp
   1cb87:	89 e5                	mov    ebp,esp
   1cb89:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:74
    // Allocate free file
    struct fat_node *node = fat_list_pop_head(&_free_file_list);
   1cb8c:	68 70 95 12 00       	push   0x129570
   1cb91:	e8 c9 ff ff ff       	call   1cb5f <fat_list_pop_head>
   1cb96:	83 c4 04             	add    esp,0x4
   1cb99:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:77

    // Add to open list
    if (node)
   1cb9c:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1cba0:	74 10                	je     1cbb2 <_allocate_file+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:78
        fat_list_insert_last(&_open_file_list, node);
   1cba2:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1cba5:	68 68 95 12 00       	push   0x129568
   1cbaa:	e8 69 ff ff ff       	call   1cb18 <fat_list_insert_last>
   1cbaf:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80

    return fat_list_entry(node, FL_FILE, list_node);
   1cbb2:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1cbb6:	74 0a                	je     1cbc2 <_allocate_file+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80 (discriminator 1)
   1cbb8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1cbbb:	2d 34 07 00 00       	sub    eax,0x734
   1cbc0:	eb 05                	jmp    1cbc7 <_allocate_file+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80 (discriminator 2)
   1cbc2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:81 (discriminator 5)
}
   1cbc7:	c9                   	leave  
   1cbc8:	c3                   	ret    

0001cbc9 <_check_file_open>:
_check_file_open():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:86
//-----------------------------------------------------------------------------
// _check_file_open: Returns true if the file is already open
//-----------------------------------------------------------------------------
static int _check_file_open(FL_FILE* file)
{
   1cbc9:	55                   	push   ebp
   1cbca:	89 e5                	mov    ebp,esp
   1cbcc:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1cbcf:	a1 68 95 12 00       	mov    eax,ds:0x129568
   1cbd4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1cbd7:	eb 6f                	jmp    1cc48 <_check_file_open+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   1cbd9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cbdd:	74 0a                	je     1cbe9 <_check_file_open+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 1)
   1cbdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cbe2:	2d 34 07 00 00       	sub    eax,0x734
   1cbe7:	eb 05                	jmp    1cbee <_check_file_open+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 2)
   1cbe9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 4)
   1cbee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:95 (discriminator 4)

        // If not the current file
        if (openFile != file)
   1cbf1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cbf4:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1cbf7:	74 46                	je     1cc3f <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:98
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   1cbf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cbfc:	8d 50 14             	lea    edx,[eax+0x14]
   1cbff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cc02:	83 c0 14             	add    eax,0x14
   1cc05:	83 ec 08             	sub    esp,0x8
   1cc08:	52                   	push   edx
   1cc09:	50                   	push   eax
   1cc0a:	e8 c4 38 00 00       	call   204d3 <fatfs_compare_names>
   1cc0f:	83 c4 10             	add    esp,0x10
   1cc12:	85 c0                	test   eax,eax
   1cc14:	74 29                	je     1cc3f <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:98 (discriminator 1)
   1cc16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cc19:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1cc1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cc22:	05 94 00 00 00       	add    eax,0x94
   1cc27:	83 ec 08             	sub    esp,0x8
   1cc2a:	52                   	push   edx
   1cc2b:	50                   	push   eax
   1cc2c:	e8 a2 38 00 00       	call   204d3 <fatfs_compare_names>
   1cc31:	83 c4 10             	add    esp,0x10
   1cc34:	85 c0                	test   eax,eax
   1cc36:	74 07                	je     1cc3f <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:99
                return 1;
   1cc38:	b8 01 00 00 00       	mov    eax,0x1
   1cc3d:	eb 14                	jmp    1cc53 <_check_file_open+0x8a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90 (discriminator 2)
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1cc3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cc45:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90 (discriminator 1)
   1cc48:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cc4c:	75 8b                	jne    1cbd9 <_check_file_open+0x10>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:103
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
                return 1;
        }
    }

    return 0;
   1cc4e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:104
}
   1cc53:	c9                   	leave  
   1cc54:	c3                   	ret    

0001cc55 <_free_file>:
_free_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:109
//-----------------------------------------------------------------------------
// _free_file: Free open file handle
//-----------------------------------------------------------------------------
static void _free_file(FL_FILE* file)
{
   1cc55:	55                   	push   ebp
   1cc56:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:111
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);
   1cc58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cc5b:	05 34 07 00 00       	add    eax,0x734
   1cc60:	50                   	push   eax
   1cc61:	68 68 95 12 00       	push   0x129568
   1cc66:	e8 94 fd ff ff       	call   1c9ff <fat_list_remove>
   1cc6b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:114

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   1cc6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cc71:	05 34 07 00 00       	add    eax,0x734
   1cc76:	50                   	push   eax
   1cc77:	68 70 95 12 00       	push   0x129570
   1cc7c:	e8 97 fe ff ff       	call   1cb18 <fat_list_insert_last>
   1cc81:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:115
}
   1cc84:	90                   	nop
   1cc85:	c9                   	leave  
   1cc86:	c3                   	ret    

0001cc87 <_open_directory>:
_open_directory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:126
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
   1cc87:	55                   	push   ebp
   1cc88:	89 e5                	mov    ebp,esp
   1cc8a:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:134
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   1cc90:	83 ec 0c             	sub    esp,0xc
   1cc93:	68 00 91 12 00       	push   0x129100
   1cc98:	e8 e8 ee ff ff       	call   1bb85 <fatfs_get_root_cluster>
   1cc9d:	83 c4 10             	add    esp,0x10
   1cca0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:137

    // Find number of levels
    levels = fatfs_total_path_levels(path);
   1cca3:	83 ec 0c             	sub    esp,0xc
   1cca6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cca9:	e8 c2 34 00 00       	call   20170 <fatfs_total_path_levels>
   1ccae:	83 c4 10             	add    esp,0x10
   1ccb1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1ccb4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1ccbb:	e9 93 00 00 00       	jmp    1cd53 <_open_directory+0xcc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:142
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   1ccc0:	68 80 00 00 00       	push   0x80
   1ccc5:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1cccb:	50                   	push   eax
   1cccc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cccf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ccd2:	e8 29 35 00 00       	call   20200 <fatfs_get_substring>
   1ccd7:	83 c4 10             	add    esp,0x10
   1ccda:	83 f8 ff             	cmp    eax,0xffffffff
   1ccdd:	75 0a                	jne    1cce9 <_open_directory+0x62>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:143
            return 0;
   1ccdf:	b8 00 00 00 00       	mov    eax,0x0
   1cce4:	e9 86 00 00 00       	jmp    1cd6f <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:146

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   1cce9:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1ccef:	50                   	push   eax
   1ccf0:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1ccf6:	50                   	push   eax
   1ccf7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ccfa:	68 00 91 12 00       	push   0x129100
   1ccff:	e8 8c ee ff ff       	call   1bb90 <fatfs_get_file_entry>
   1cd04:	83 c4 10             	add    esp,0x10
   1cd07:	85 c0                	test   eax,eax
   1cd09:	74 3d                	je     1cd48 <_open_directory+0xc1>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:149
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   1cd0b:	83 ec 0c             	sub    esp,0xc
   1cd0e:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1cd14:	50                   	push   eax
   1cd15:	e8 2a 2d 00 00       	call   1fa44 <fatfs_entry_is_dir>
   1cd1a:	83 c4 10             	add    esp,0x10
   1cd1d:	85 c0                	test   eax,eax
   1cd1f:	74 20                	je     1cd41 <_open_directory+0xba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:150
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1cd21:	0f b7 85 60 ff ff ff 	movzx  eax,WORD PTR [ebp-0xa0]
   1cd28:	0f b7 c0             	movzx  eax,ax
   1cd2b:	c1 e0 10             	shl    eax,0x10
   1cd2e:	89 c2                	mov    edx,eax
   1cd30:	0f b7 85 66 ff ff ff 	movzx  eax,WORD PTR [ebp-0x9a]
   1cd37:	0f b7 c0             	movzx  eax,ax
   1cd3a:	01 d0                	add    eax,edx
   1cd3c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1cd3f:	eb 0e                	jmp    1cd4f <_open_directory+0xc8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:152
            else
                return 0;
   1cd41:	b8 00 00 00 00       	mov    eax,0x0
   1cd46:	eb 27                	jmp    1cd6f <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:155
        }
        else
            return 0;
   1cd48:	b8 00 00 00 00       	mov    eax,0x0
   1cd4d:	eb 20                	jmp    1cd6f <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140 (discriminator 2)

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1cd4f:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140 (discriminator 1)
   1cd53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd56:	83 c0 01             	add    eax,0x1
   1cd59:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1cd5c:	0f 8f 5e ff ff ff    	jg     1ccc0 <_open_directory+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:158
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
   1cd62:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1cd65:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cd68:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:159
    return 1;
   1cd6a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:160 (discriminator 1)
}
   1cd6f:	c9                   	leave  
   1cd70:	c3                   	ret    

0001cd71 <_create_directory>:
_create_directory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:166
//-----------------------------------------------------------------------------
// _create_directory: Cycle through path string and create the end directory
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static int _create_directory(char *path)
{
   1cd71:	55                   	push   ebp
   1cd72:	89 e5                	mov    ebp,esp
   1cd74:	53                   	push   ebx
   1cd75:	83 ec 44             	sub    esp,0x44
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:170
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1cd78:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:174
    int i;

    // Allocate a new file handle
    file = _allocate_file();
   1cd7f:	e8 02 fe ff ff       	call   1cb86 <_allocate_file>
   1cd84:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:175
    if (!file)
   1cd87:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1cd8b:	75 0a                	jne    1cd97 <_create_directory+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:176
        return 0;
   1cd8d:	b8 00 00 00 00       	mov    eax,0x0
   1cd92:	e9 94 03 00 00       	jmp    1d12b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:179

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1cd97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd9a:	83 c0 14             	add    eax,0x14
   1cd9d:	83 ec 04             	sub    esp,0x4
   1cda0:	68 80 00 00 00       	push   0x80
   1cda5:	6a 00                	push   0x0
   1cda7:	50                   	push   eax
   1cda8:	e8 90 88 00 00       	call   2563d <memset>
   1cdad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:180
    memset(file->filename, '\0', sizeof(file->filename));
   1cdb0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cdb3:	05 94 00 00 00       	add    eax,0x94
   1cdb8:	83 ec 04             	sub    esp,0x4
   1cdbb:	68 80 00 00 00       	push   0x80
   1cdc0:	6a 00                	push   0x0
   1cdc2:	50                   	push   eax
   1cdc3:	e8 75 88 00 00       	call   2563d <memset>
   1cdc8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:183

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1cdcb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cdce:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1cdd4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cdd7:	83 c0 14             	add    eax,0x14
   1cdda:	83 ec 0c             	sub    esp,0xc
   1cddd:	68 80 00 00 00       	push   0x80
   1cde2:	52                   	push   edx
   1cde3:	68 80 00 00 00       	push   0x80
   1cde8:	50                   	push   eax
   1cde9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cdec:	e8 14 35 00 00       	call   20305 <fatfs_split_path>
   1cdf1:	83 c4 20             	add    esp,0x20
   1cdf4:	83 f8 ff             	cmp    eax,0xffffffff
   1cdf7:	75 18                	jne    1ce11 <_create_directory+0xa0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:185
    {
        _free_file(file);
   1cdf9:	83 ec 0c             	sub    esp,0xc
   1cdfc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cdff:	e8 51 fe ff ff       	call   1cc55 <_free_file>
   1ce04:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:186
        return 0;
   1ce07:	b8 00 00 00 00       	mov    eax,0x0
   1ce0c:	e9 1a 03 00 00       	jmp    1d12b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:190
    }

    // Check if file already open
    if (_check_file_open(file))
   1ce11:	83 ec 0c             	sub    esp,0xc
   1ce14:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ce17:	e8 ad fd ff ff       	call   1cbc9 <_check_file_open>
   1ce1c:	83 c4 10             	add    esp,0x10
   1ce1f:	85 c0                	test   eax,eax
   1ce21:	74 18                	je     1ce3b <_create_directory+0xca>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:192
    {
        _free_file(file);
   1ce23:	83 ec 0c             	sub    esp,0xc
   1ce26:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ce29:	e8 27 fe ff ff       	call   1cc55 <_free_file>
   1ce2e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:193
        return 0;
   1ce31:	b8 00 00 00 00       	mov    eax,0x0
   1ce36:	e9 f0 02 00 00       	jmp    1d12b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:197
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1ce3b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce3e:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1ce42:	84 c0                	test   al,al
   1ce44:	75 19                	jne    1ce5f <_create_directory+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:198
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1ce46:	83 ec 0c             	sub    esp,0xc
   1ce49:	68 00 91 12 00       	push   0x129100
   1ce4e:	e8 32 ed ff ff       	call   1bb85 <fatfs_get_root_cluster>
   1ce53:	83 c4 10             	add    esp,0x10
   1ce56:	89 c2                	mov    edx,eax
   1ce58:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce5b:	89 10                	mov    DWORD PTR [eax],edx
   1ce5d:	eb 32                	jmp    1ce91 <_create_directory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:202
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1ce5f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce62:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1ce65:	83 c2 14             	add    edx,0x14
   1ce68:	83 ec 08             	sub    esp,0x8
   1ce6b:	50                   	push   eax
   1ce6c:	52                   	push   edx
   1ce6d:	e8 15 fe ff ff       	call   1cc87 <_open_directory>
   1ce72:	83 c4 10             	add    esp,0x10
   1ce75:	85 c0                	test   eax,eax
   1ce77:	75 18                	jne    1ce91 <_create_directory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:204
        {
            _free_file(file);
   1ce79:	83 ec 0c             	sub    esp,0xc
   1ce7c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ce7f:	e8 d1 fd ff ff       	call   1cc55 <_free_file>
   1ce84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:205
            return 0;
   1ce87:	b8 00 00 00 00       	mov    eax,0x0
   1ce8c:	e9 9a 02 00 00       	jmp    1d12b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:210
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1ce91:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce94:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1ce9a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce9d:	8b 00                	mov    eax,DWORD PTR [eax]
   1ce9f:	8d 55 cc             	lea    edx,[ebp-0x34]
   1cea2:	52                   	push   edx
   1cea3:	51                   	push   ecx
   1cea4:	50                   	push   eax
   1cea5:	68 00 91 12 00       	push   0x129100
   1ceaa:	e8 e1 ec ff ff       	call   1bb90 <fatfs_get_file_entry>
   1ceaf:	83 c4 10             	add    esp,0x10
   1ceb2:	83 f8 01             	cmp    eax,0x1
   1ceb5:	75 18                	jne    1cecf <_create_directory+0x15e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:212
    {
        _free_file(file);
   1ceb7:	83 ec 0c             	sub    esp,0xc
   1ceba:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cebd:	e8 93 fd ff ff       	call   1cc55 <_free_file>
   1cec2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:213
        return 0;
   1cec5:	b8 00 00 00 00       	mov    eax,0x0
   1ceca:	e9 5c 02 00 00       	jmp    1d12b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:216
    }

    file->startcluster = 0;
   1cecf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ced2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:219

    // Create the file space for the folder (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1ced9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cedc:	83 c0 04             	add    eax,0x4
   1cedf:	6a 01                	push   0x1
   1cee1:	50                   	push   eax
   1cee2:	6a 01                	push   0x1
   1cee4:	68 00 91 12 00       	push   0x129100
   1cee9:	e8 da 44 00 00       	call   213c8 <fatfs_allocate_free_space>
   1ceee:	83 c4 10             	add    esp,0x10
   1cef1:	85 c0                	test   eax,eax
   1cef3:	75 18                	jne    1cf0d <_create_directory+0x19c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:221
    {
        _free_file(file);
   1cef5:	83 ec 0c             	sub    esp,0xc
   1cef8:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cefb:	e8 55 fd ff ff       	call   1cc55 <_free_file>
   1cf00:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:222
        return 0;
   1cf03:	b8 00 00 00 00       	mov    eax,0x0
   1cf08:	e9 1e 02 00 00       	jmp    1d12b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:226
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1cf0d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cf10:	05 28 05 00 00       	add    eax,0x528
   1cf15:	83 ec 04             	sub    esp,0x4
   1cf18:	68 00 02 00 00       	push   0x200
   1cf1d:	6a 00                	push   0x0
   1cf1f:	50                   	push   eax
   1cf20:	e8 18 87 00 00       	call   2563d <memset>
   1cf25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1cf28:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1cf2f:	eb 42                	jmp    1cf73 <_create_directory+0x202>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:229
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
   1cf31:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cf34:	8d 88 28 05 00 00    	lea    ecx,[eax+0x528]
   1cf3a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cf3d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cf40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cf43:	51                   	push   ecx
   1cf44:	52                   	push   edx
   1cf45:	50                   	push   eax
   1cf46:	68 00 91 12 00       	push   0x129100
   1cf4b:	e8 6d ea ff ff       	call   1b9bd <fatfs_write_sector>
   1cf50:	83 c4 10             	add    esp,0x10
   1cf53:	85 c0                	test   eax,eax
   1cf55:	75 18                	jne    1cf6f <_create_directory+0x1fe>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:231
        {
            _free_file(file);
   1cf57:	83 ec 0c             	sub    esp,0xc
   1cf5a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cf5d:	e8 f3 fc ff ff       	call   1cc55 <_free_file>
   1cf62:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:232
            return 0;
   1cf65:	b8 00 00 00 00       	mov    eax,0x0
   1cf6a:	e9 bc 01 00 00       	jmp    1d12b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227 (discriminator 2)
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1cf6f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227 (discriminator 1)
   1cf73:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1cf7a:	0f b6 c0             	movzx  eax,al
   1cf7d:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1cf80:	7f af                	jg     1cf31 <_create_directory+0x1c0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:239
    }

#if FATFS_INC_LFN_SUPPORT

    // Generate a short filename & tail
    tailNum = 0;
   1cf82:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:243
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1cf89:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cf8c:	05 94 00 00 00       	add    eax,0x94
   1cf91:	83 ec 08             	sub    esp,0x8
   1cf94:	50                   	push   eax
   1cf95:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1cf98:	50                   	push   eax
   1cf99:	e8 66 2d 00 00       	call   1fd04 <fatfs_lfn_create_sfn>
   1cf9e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:246

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1cfa1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cfa5:	74 1f                	je     1cfc6 <_create_directory+0x255>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:247
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1cfa7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cfaa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1cfad:	81 c2 14 01 00 00    	add    edx,0x114
   1cfb3:	83 ec 04             	sub    esp,0x4
   1cfb6:	50                   	push   eax
   1cfb7:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1cfba:	50                   	push   eax
   1cfbb:	52                   	push   edx
   1cfbc:	e8 c9 2f 00 00       	call   1ff8a <fatfs_lfn_generate_tail>
   1cfc1:	83 c4 10             	add    esp,0x10
   1cfc4:	eb 1b                	jmp    1cfe1 <_create_directory+0x270>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:250
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1cfc6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cfc9:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cfcf:	83 ec 04             	sub    esp,0x4
   1cfd2:	6a 0b                	push   0xb
   1cfd4:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1cfd7:	50                   	push   eax
   1cfd8:	52                   	push   edx
   1cfd9:	e8 26 92 00 00       	call   26204 <memcpy>
   1cfde:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:253

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1cfe1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cfe4:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cfea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cfed:	8b 00                	mov    eax,DWORD PTR [eax]
   1cfef:	83 ec 04             	sub    esp,0x4
   1cff2:	52                   	push   edx
   1cff3:	50                   	push   eax
   1cff4:	68 00 91 12 00       	push   0x129100
   1cff9:	e8 0f ee ff ff       	call   1be0d <fatfs_sfn_exists>
   1cffe:	83 c4 10             	add    esp,0x10
   1d001:	85 c0                	test   eax,eax
   1d003:	74 13                	je     1d018 <_create_directory+0x2a7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:256
            break;

        tailNum++;
   1d005:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:258
    }
    while (tailNum < 9999);
   1d009:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1d010:	0f 8e 73 ff ff ff    	jle    1cf89 <_create_directory+0x218>
   1d016:	eb 01                	jmp    1d019 <_create_directory+0x2a8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:254
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1d018:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:261
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1d019:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1d020:	75 2f                	jne    1d051 <_create_directory+0x2e0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:264
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d022:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d025:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d028:	83 ec 08             	sub    esp,0x8
   1d02b:	50                   	push   eax
   1d02c:	68 00 91 12 00       	push   0x129100
   1d031:	e8 d8 40 00 00       	call   2110e <fatfs_free_cluster_chain>
   1d036:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:266

        _free_file(file);
   1d039:	83 ec 0c             	sub    esp,0xc
   1d03c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1d03f:	e8 11 fc ff ff       	call   1cc55 <_free_file>
   1d044:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:267
        return 0;
   1d047:	b8 00 00 00 00       	mov    eax,0x0
   1d04c:	e9 da 00 00 00       	jmp    1d12b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:295
        return 0;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 1))
   1d051:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d054:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1d057:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d05a:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1d060:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d063:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d069:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d06c:	8b 00                	mov    eax,DWORD PTR [eax]
   1d06e:	83 ec 04             	sub    esp,0x4
   1d071:	6a 01                	push   0x1
   1d073:	6a 00                	push   0x0
   1d075:	52                   	push   edx
   1d076:	53                   	push   ebx
   1d077:	51                   	push   ecx
   1d078:	50                   	push   eax
   1d079:	68 00 91 12 00       	push   0x129100
   1d07e:	e8 5d 46 00 00       	call   216e0 <fatfs_add_file_entry>
   1d083:	83 c4 20             	add    esp,0x20
   1d086:	85 c0                	test   eax,eax
   1d088:	75 2c                	jne    1d0b6 <_create_directory+0x345>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:298
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d08a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d08d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d090:	83 ec 08             	sub    esp,0x8
   1d093:	50                   	push   eax
   1d094:	68 00 91 12 00       	push   0x129100
   1d099:	e8 70 40 00 00       	call   2110e <fatfs_free_cluster_chain>
   1d09e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:300

        _free_file(file);
   1d0a1:	83 ec 0c             	sub    esp,0xc
   1d0a4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1d0a7:	e8 a9 fb ff ff       	call   1cc55 <_free_file>
   1d0ac:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:301
        return 0;
   1d0af:	b8 00 00 00 00       	mov    eax,0x0
   1d0b4:	eb 75                	jmp    1d12b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:305
    }

    // General
    file->filelength = 0;
   1d0b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d0b9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:306
    file->bytenum = 0;
   1d0c0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d0c3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:307
    file->file_data_address = 0xFFFFFFFF;
   1d0ca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d0cd:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1d0d4:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:308
    file->file_data_dirty = 0;
   1d0d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d0da:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1d0e1:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:309
    file->filelength_changed = 0;
   1d0e4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d0e7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:312

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1d0ee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d0f1:	c7 80 20 05 00 00 ff 	mov    DWORD PTR [eax+0x520],0xffffffff
   1d0f8:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:313
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1d0fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d0fe:	c7 80 24 05 00 00 ff 	mov    DWORD PTR [eax+0x524],0xffffffff
   1d105:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:315

    fatfs_fat_purge(&_fs);
   1d108:	83 ec 0c             	sub    esp,0xc
   1d10b:	68 00 91 12 00       	push   0x129100
   1d110:	e8 5f 3a 00 00       	call   20b74 <fatfs_fat_purge>
   1d115:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:317

    _free_file(file);
   1d118:	83 ec 0c             	sub    esp,0xc
   1d11b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1d11e:	e8 32 fb ff ff       	call   1cc55 <_free_file>
   1d123:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:318
    return 1;
   1d126:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:319 (discriminator 1)
}
   1d12b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1d12e:	c9                   	leave  
   1d12f:	c3                   	ret    

0001d130 <_open_file>:
_open_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:325
#endif
//-----------------------------------------------------------------------------
// _open_file: Open a file for reading
//-----------------------------------------------------------------------------
static FL_FILE* _open_file(const char *path)
{
   1d130:	55                   	push   ebp
   1d131:	89 e5                	mov    ebp,esp
   1d133:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:330
    FL_FILE* file;
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
   1d136:	e8 4b fa ff ff       	call   1cb86 <_allocate_file>
   1d13b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:331
    if (!file)
   1d13e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d142:	75 0a                	jne    1d14e <_open_file+0x1e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:332
        return NULL;
   1d144:	b8 00 00 00 00       	mov    eax,0x0
   1d149:	e9 fc 01 00 00       	jmp    1d34a <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:335

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1d14e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d151:	83 c0 14             	add    eax,0x14
   1d154:	83 ec 04             	sub    esp,0x4
   1d157:	68 80 00 00 00       	push   0x80
   1d15c:	6a 00                	push   0x0
   1d15e:	50                   	push   eax
   1d15f:	e8 d9 84 00 00       	call   2563d <memset>
   1d164:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:336
    memset(file->filename, '\0', sizeof(file->filename));
   1d167:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d16a:	05 94 00 00 00       	add    eax,0x94
   1d16f:	83 ec 04             	sub    esp,0x4
   1d172:	68 80 00 00 00       	push   0x80
   1d177:	6a 00                	push   0x0
   1d179:	50                   	push   eax
   1d17a:	e8 be 84 00 00       	call   2563d <memset>
   1d17f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:339

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1d182:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d185:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1d18b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d18e:	83 c0 14             	add    eax,0x14
   1d191:	83 ec 0c             	sub    esp,0xc
   1d194:	68 80 00 00 00       	push   0x80
   1d199:	52                   	push   edx
   1d19a:	68 80 00 00 00       	push   0x80
   1d19f:	50                   	push   eax
   1d1a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d1a3:	e8 5d 31 00 00       	call   20305 <fatfs_split_path>
   1d1a8:	83 c4 20             	add    esp,0x20
   1d1ab:	83 f8 ff             	cmp    eax,0xffffffff
   1d1ae:	75 18                	jne    1d1c8 <_open_file+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:341
    {
        _free_file(file);
   1d1b0:	83 ec 0c             	sub    esp,0xc
   1d1b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d1b6:	e8 9a fa ff ff       	call   1cc55 <_free_file>
   1d1bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:342
        return NULL;
   1d1be:	b8 00 00 00 00       	mov    eax,0x0
   1d1c3:	e9 82 01 00 00       	jmp    1d34a <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:346
    }

    // Check if file already open
    if (_check_file_open(file))
   1d1c8:	83 ec 0c             	sub    esp,0xc
   1d1cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d1ce:	e8 f6 f9 ff ff       	call   1cbc9 <_check_file_open>
   1d1d3:	83 c4 10             	add    esp,0x10
   1d1d6:	85 c0                	test   eax,eax
   1d1d8:	74 18                	je     1d1f2 <_open_file+0xc2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:348
    {
        _free_file(file);
   1d1da:	83 ec 0c             	sub    esp,0xc
   1d1dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d1e0:	e8 70 fa ff ff       	call   1cc55 <_free_file>
   1d1e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:349
        return NULL;
   1d1e8:	b8 00 00 00 00       	mov    eax,0x0
   1d1ed:	e9 58 01 00 00       	jmp    1d34a <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:353
    }

    // If file is in the root dir
    if (file->path[0]==0)
   1d1f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d1f5:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1d1f9:	84 c0                	test   al,al
   1d1fb:	75 19                	jne    1d216 <_open_file+0xe6>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:354
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1d1fd:	83 ec 0c             	sub    esp,0xc
   1d200:	68 00 91 12 00       	push   0x129100
   1d205:	e8 7b e9 ff ff       	call   1bb85 <fatfs_get_root_cluster>
   1d20a:	83 c4 10             	add    esp,0x10
   1d20d:	89 c2                	mov    edx,eax
   1d20f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d212:	89 10                	mov    DWORD PTR [eax],edx
   1d214:	eb 32                	jmp    1d248 <_open_file+0x118>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:358
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1d216:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d219:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d21c:	83 c2 14             	add    edx,0x14
   1d21f:	83 ec 08             	sub    esp,0x8
   1d222:	50                   	push   eax
   1d223:	52                   	push   edx
   1d224:	e8 5e fa ff ff       	call   1cc87 <_open_directory>
   1d229:	83 c4 10             	add    esp,0x10
   1d22c:	85 c0                	test   eax,eax
   1d22e:	75 18                	jne    1d248 <_open_file+0x118>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:360
        {
            _free_file(file);
   1d230:	83 ec 0c             	sub    esp,0xc
   1d233:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d236:	e8 1a fa ff ff       	call   1cc55 <_free_file>
   1d23b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:361
            return NULL;
   1d23e:	b8 00 00 00 00       	mov    eax,0x0
   1d243:	e9 02 01 00 00       	jmp    1d34a <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:366
        }
    }

    // Using dir cluster address search for filename
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
   1d248:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d24b:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d251:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d254:	8b 00                	mov    eax,DWORD PTR [eax]
   1d256:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1d259:	52                   	push   edx
   1d25a:	51                   	push   ecx
   1d25b:	50                   	push   eax
   1d25c:	68 00 91 12 00       	push   0x129100
   1d261:	e8 2a e9 ff ff       	call   1bb90 <fatfs_get_file_entry>
   1d266:	83 c4 10             	add    esp,0x10
   1d269:	85 c0                	test   eax,eax
   1d26b:	0f 84 c6 00 00 00    	je     1d337 <_open_file+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:368
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
   1d271:	83 ec 0c             	sub    esp,0xc
   1d274:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1d277:	50                   	push   eax
   1d278:	e8 e9 27 00 00       	call   1fa66 <fatfs_entry_is_file>
   1d27d:	83 c4 10             	add    esp,0x10
   1d280:	85 c0                	test   eax,eax
   1d282:	0f 84 af 00 00 00    	je     1d337 <_open_file+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:371
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
   1d288:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d28b:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1d291:	83 ec 04             	sub    esp,0x4
   1d294:	6a 0b                	push   0xb
   1d296:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1d299:	50                   	push   eax
   1d29a:	52                   	push   edx
   1d29b:	e8 64 8f 00 00       	call   26204 <memcpy>
   1d2a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:372
            file->filelength = FAT_HTONL(sfEntry.FileSize);
   1d2a3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d2a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:373
            file->bytenum = 0;
   1d2ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:374
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1d2b6:	0f b7 45 e8          	movzx  eax,WORD PTR [ebp-0x18]
   1d2ba:	0f b7 c0             	movzx  eax,ax
   1d2bd:	c1 e0 10             	shl    eax,0x10
   1d2c0:	89 c2                	mov    edx,eax
   1d2c2:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1d2c6:	0f b7 c0             	movzx  eax,ax
   1d2c9:	01 c2                	add    edx,eax
   1d2cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2ce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:375
            file->file_data_address = 0xFFFFFFFF;
   1d2d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2d4:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1d2db:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:376
            file->file_data_dirty = 0;
   1d2de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2e1:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1d2e8:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:377
            file->filelength_changed = 0;
   1d2eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2ee:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:380

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1d2f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2f8:	c7 80 20 05 00 00 ff 	mov    DWORD PTR [eax+0x520],0xffffffff
   1d2ff:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:381
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1d302:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d305:	c7 80 24 05 00 00 ff 	mov    DWORD PTR [eax+0x524],0xffffffff
   1d30c:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:383

            fatfs_cache_init(&_fs, file);
   1d30f:	83 ec 08             	sub    esp,0x8
   1d312:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d315:	68 00 91 12 00       	push   0x129100
   1d31a:	e8 e3 f5 ff ff       	call   1c902 <fatfs_cache_init>
   1d31f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:385

            fatfs_fat_purge(&_fs);
   1d322:	83 ec 0c             	sub    esp,0xc
   1d325:	68 00 91 12 00       	push   0x129100
   1d32a:	e8 45 38 00 00       	call   20b74 <fatfs_fat_purge>
   1d32f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:387

            return file;
   1d332:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d335:	eb 13                	jmp    1d34a <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:390
        }

    _free_file(file);
   1d337:	83 ec 0c             	sub    esp,0xc
   1d33a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d33d:	e8 13 f9 ff ff       	call   1cc55 <_free_file>
   1d342:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:391
    return NULL;
   1d345:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:392 (discriminator 1)
}
   1d34a:	c9                   	leave  
   1d34b:	c3                   	ret    

0001d34c <_create_file>:
_create_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:398
//-----------------------------------------------------------------------------
// _create_file: Create a new file
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static FL_FILE* _create_file(const char *filename)
{
   1d34c:	55                   	push   ebp
   1d34d:	89 e5                	mov    ebp,esp
   1d34f:	53                   	push   ebx
   1d350:	83 ec 44             	sub    esp,0x44
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:402
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1d353:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:405

    // No write access?
    if (!_fs.disk_io.write_media)
   1d35a:	a1 38 91 12 00       	mov    eax,ds:0x129138
   1d35f:	85 c0                	test   eax,eax
   1d361:	75 0a                	jne    1d36d <_create_file+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:406
        return NULL;
   1d363:	b8 00 00 00 00       	mov    eax,0x0
   1d368:	e9 3a 03 00 00       	jmp    1d6a7 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:409

    // Allocate a new file handle
    file = _allocate_file();
   1d36d:	e8 14 f8 ff ff       	call   1cb86 <_allocate_file>
   1d372:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:410
    if (!file)
   1d375:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d379:	75 0a                	jne    1d385 <_create_file+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:411
        return NULL;
   1d37b:	b8 00 00 00 00       	mov    eax,0x0
   1d380:	e9 22 03 00 00       	jmp    1d6a7 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:414

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1d385:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d388:	83 c0 14             	add    eax,0x14
   1d38b:	83 ec 04             	sub    esp,0x4
   1d38e:	68 80 00 00 00       	push   0x80
   1d393:	6a 00                	push   0x0
   1d395:	50                   	push   eax
   1d396:	e8 a2 82 00 00       	call   2563d <memset>
   1d39b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:415
    memset(file->filename, '\0', sizeof(file->filename));
   1d39e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d3a1:	05 94 00 00 00       	add    eax,0x94
   1d3a6:	83 ec 04             	sub    esp,0x4
   1d3a9:	68 80 00 00 00       	push   0x80
   1d3ae:	6a 00                	push   0x0
   1d3b0:	50                   	push   eax
   1d3b1:	e8 87 82 00 00       	call   2563d <memset>
   1d3b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:418

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)filename, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1d3b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d3bc:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1d3c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d3c5:	83 c0 14             	add    eax,0x14
   1d3c8:	83 ec 0c             	sub    esp,0xc
   1d3cb:	68 80 00 00 00       	push   0x80
   1d3d0:	52                   	push   edx
   1d3d1:	68 80 00 00 00       	push   0x80
   1d3d6:	50                   	push   eax
   1d3d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d3da:	e8 26 2f 00 00       	call   20305 <fatfs_split_path>
   1d3df:	83 c4 20             	add    esp,0x20
   1d3e2:	83 f8 ff             	cmp    eax,0xffffffff
   1d3e5:	75 18                	jne    1d3ff <_create_file+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:420
    {
        _free_file(file);
   1d3e7:	83 ec 0c             	sub    esp,0xc
   1d3ea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d3ed:	e8 63 f8 ff ff       	call   1cc55 <_free_file>
   1d3f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:421
        return NULL;
   1d3f5:	b8 00 00 00 00       	mov    eax,0x0
   1d3fa:	e9 a8 02 00 00       	jmp    1d6a7 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:425
    }

    // Check if file already open
    if (_check_file_open(file))
   1d3ff:	83 ec 0c             	sub    esp,0xc
   1d402:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d405:	e8 bf f7 ff ff       	call   1cbc9 <_check_file_open>
   1d40a:	83 c4 10             	add    esp,0x10
   1d40d:	85 c0                	test   eax,eax
   1d40f:	74 18                	je     1d429 <_create_file+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:427
    {
        _free_file(file);
   1d411:	83 ec 0c             	sub    esp,0xc
   1d414:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d417:	e8 39 f8 ff ff       	call   1cc55 <_free_file>
   1d41c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:428
        return NULL;
   1d41f:	b8 00 00 00 00       	mov    eax,0x0
   1d424:	e9 7e 02 00 00       	jmp    1d6a7 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:432
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1d429:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d42c:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1d430:	84 c0                	test   al,al
   1d432:	75 19                	jne    1d44d <_create_file+0x101>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:433
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1d434:	83 ec 0c             	sub    esp,0xc
   1d437:	68 00 91 12 00       	push   0x129100
   1d43c:	e8 44 e7 ff ff       	call   1bb85 <fatfs_get_root_cluster>
   1d441:	83 c4 10             	add    esp,0x10
   1d444:	89 c2                	mov    edx,eax
   1d446:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d449:	89 10                	mov    DWORD PTR [eax],edx
   1d44b:	eb 32                	jmp    1d47f <_create_file+0x133>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:437
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1d44d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d450:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d453:	83 c2 14             	add    edx,0x14
   1d456:	83 ec 08             	sub    esp,0x8
   1d459:	50                   	push   eax
   1d45a:	52                   	push   edx
   1d45b:	e8 27 f8 ff ff       	call   1cc87 <_open_directory>
   1d460:	83 c4 10             	add    esp,0x10
   1d463:	85 c0                	test   eax,eax
   1d465:	75 18                	jne    1d47f <_create_file+0x133>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:439
        {
            _free_file(file);
   1d467:	83 ec 0c             	sub    esp,0xc
   1d46a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d46d:	e8 e3 f7 ff ff       	call   1cc55 <_free_file>
   1d472:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:440
            return NULL;
   1d475:	b8 00 00 00 00       	mov    eax,0x0
   1d47a:	e9 28 02 00 00       	jmp    1d6a7 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:445
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1d47f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d482:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d488:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d48b:	8b 00                	mov    eax,DWORD PTR [eax]
   1d48d:	8d 55 d0             	lea    edx,[ebp-0x30]
   1d490:	52                   	push   edx
   1d491:	51                   	push   ecx
   1d492:	50                   	push   eax
   1d493:	68 00 91 12 00       	push   0x129100
   1d498:	e8 f3 e6 ff ff       	call   1bb90 <fatfs_get_file_entry>
   1d49d:	83 c4 10             	add    esp,0x10
   1d4a0:	83 f8 01             	cmp    eax,0x1
   1d4a3:	75 18                	jne    1d4bd <_create_file+0x171>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:447
    {
        _free_file(file);
   1d4a5:	83 ec 0c             	sub    esp,0xc
   1d4a8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d4ab:	e8 a5 f7 ff ff       	call   1cc55 <_free_file>
   1d4b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:448
        return NULL;
   1d4b3:	b8 00 00 00 00       	mov    eax,0x0
   1d4b8:	e9 ea 01 00 00       	jmp    1d6a7 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:451
    }

    file->startcluster = 0;
   1d4bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d4c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:454

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1d4c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d4ca:	83 c0 04             	add    eax,0x4
   1d4cd:	6a 01                	push   0x1
   1d4cf:	50                   	push   eax
   1d4d0:	6a 01                	push   0x1
   1d4d2:	68 00 91 12 00       	push   0x129100
   1d4d7:	e8 ec 3e 00 00       	call   213c8 <fatfs_allocate_free_space>
   1d4dc:	83 c4 10             	add    esp,0x10
   1d4df:	85 c0                	test   eax,eax
   1d4e1:	75 18                	jne    1d4fb <_create_file+0x1af>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:456
    {
        _free_file(file);
   1d4e3:	83 ec 0c             	sub    esp,0xc
   1d4e6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d4e9:	e8 67 f7 ff ff       	call   1cc55 <_free_file>
   1d4ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:457
        return NULL;
   1d4f1:	b8 00 00 00 00       	mov    eax,0x0
   1d4f6:	e9 ac 01 00 00       	jmp    1d6a7 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:462
    }

#if FATFS_INC_LFN_SUPPORT
    // Generate a short filename & tail
    tailNum = 0;
   1d4fb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:466
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1d502:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d505:	05 94 00 00 00       	add    eax,0x94
   1d50a:	83 ec 08             	sub    esp,0x8
   1d50d:	50                   	push   eax
   1d50e:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1d511:	50                   	push   eax
   1d512:	e8 ed 27 00 00       	call   1fd04 <fatfs_lfn_create_sfn>
   1d517:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:469

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1d51a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d51e:	74 1f                	je     1d53f <_create_file+0x1f3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:470
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1d520:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d523:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d526:	81 c2 14 01 00 00    	add    edx,0x114
   1d52c:	83 ec 04             	sub    esp,0x4
   1d52f:	50                   	push   eax
   1d530:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1d533:	50                   	push   eax
   1d534:	52                   	push   edx
   1d535:	e8 50 2a 00 00       	call   1ff8a <fatfs_lfn_generate_tail>
   1d53a:	83 c4 10             	add    esp,0x10
   1d53d:	eb 1b                	jmp    1d55a <_create_file+0x20e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:473
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1d53f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d542:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1d548:	83 ec 04             	sub    esp,0x4
   1d54b:	6a 0b                	push   0xb
   1d54d:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1d550:	50                   	push   eax
   1d551:	52                   	push   edx
   1d552:	e8 ad 8c 00 00       	call   26204 <memcpy>
   1d557:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:476

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1d55a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d55d:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1d563:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d566:	8b 00                	mov    eax,DWORD PTR [eax]
   1d568:	83 ec 04             	sub    esp,0x4
   1d56b:	52                   	push   edx
   1d56c:	50                   	push   eax
   1d56d:	68 00 91 12 00       	push   0x129100
   1d572:	e8 96 e8 ff ff       	call   1be0d <fatfs_sfn_exists>
   1d577:	83 c4 10             	add    esp,0x10
   1d57a:	85 c0                	test   eax,eax
   1d57c:	74 13                	je     1d591 <_create_file+0x245>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:479
            break;

        tailNum++;
   1d57e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:481
    }
    while (tailNum < 9999);
   1d582:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1d589:	0f 8e 73 ff ff ff    	jle    1d502 <_create_file+0x1b6>
   1d58f:	eb 01                	jmp    1d592 <_create_file+0x246>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:477
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1d591:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:484
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1d592:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1d599:	75 2f                	jne    1d5ca <_create_file+0x27e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:487
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d59b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d59e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d5a1:	83 ec 08             	sub    esp,0x8
   1d5a4:	50                   	push   eax
   1d5a5:	68 00 91 12 00       	push   0x129100
   1d5aa:	e8 5f 3b 00 00       	call   2110e <fatfs_free_cluster_chain>
   1d5af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:489

        _free_file(file);
   1d5b2:	83 ec 0c             	sub    esp,0xc
   1d5b5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d5b8:	e8 98 f6 ff ff       	call   1cc55 <_free_file>
   1d5bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:490
        return NULL;
   1d5c0:	b8 00 00 00 00       	mov    eax,0x0
   1d5c5:	e9 dd 00 00 00       	jmp    1d6a7 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:518
        return NULL;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
   1d5ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d5cd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1d5d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d5d3:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1d5d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d5dc:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d5e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d5e5:	8b 00                	mov    eax,DWORD PTR [eax]
   1d5e7:	83 ec 04             	sub    esp,0x4
   1d5ea:	6a 00                	push   0x0
   1d5ec:	6a 00                	push   0x0
   1d5ee:	52                   	push   edx
   1d5ef:	53                   	push   ebx
   1d5f0:	51                   	push   ecx
   1d5f1:	50                   	push   eax
   1d5f2:	68 00 91 12 00       	push   0x129100
   1d5f7:	e8 e4 40 00 00       	call   216e0 <fatfs_add_file_entry>
   1d5fc:	83 c4 20             	add    esp,0x20
   1d5ff:	85 c0                	test   eax,eax
   1d601:	75 2c                	jne    1d62f <_create_file+0x2e3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:521
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d603:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d609:	83 ec 08             	sub    esp,0x8
   1d60c:	50                   	push   eax
   1d60d:	68 00 91 12 00       	push   0x129100
   1d612:	e8 f7 3a 00 00       	call   2110e <fatfs_free_cluster_chain>
   1d617:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:523

        _free_file(file);
   1d61a:	83 ec 0c             	sub    esp,0xc
   1d61d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d620:	e8 30 f6 ff ff       	call   1cc55 <_free_file>
   1d625:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:524
        return NULL;
   1d628:	b8 00 00 00 00       	mov    eax,0x0
   1d62d:	eb 78                	jmp    1d6a7 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:528
    }

    // General
    file->filelength = 0;
   1d62f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d632:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:529
    file->bytenum = 0;
   1d639:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d63c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:530
    file->file_data_address = 0xFFFFFFFF;
   1d643:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d646:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1d64d:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:531
    file->file_data_dirty = 0;
   1d650:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d653:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1d65a:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:532
    file->filelength_changed = 0;
   1d65d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d660:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:535

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1d667:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d66a:	c7 80 20 05 00 00 ff 	mov    DWORD PTR [eax+0x520],0xffffffff
   1d671:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:536
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1d674:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d677:	c7 80 24 05 00 00 ff 	mov    DWORD PTR [eax+0x524],0xffffffff
   1d67e:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:538

    fatfs_cache_init(&_fs, file);
   1d681:	83 ec 08             	sub    esp,0x8
   1d684:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d687:	68 00 91 12 00       	push   0x129100
   1d68c:	e8 71 f2 ff ff       	call   1c902 <fatfs_cache_init>
   1d691:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:540

    fatfs_fat_purge(&_fs);
   1d694:	83 ec 0c             	sub    esp,0xc
   1d697:	68 00 91 12 00       	push   0x129100
   1d69c:	e8 d3 34 00 00       	call   20b74 <fatfs_fat_purge>
   1d6a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:542

    return file;
   1d6a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:543 (discriminator 1)
}
   1d6a7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1d6aa:	c9                   	leave  
   1d6ab:	c3                   	ret    

0001d6ac <_read_sectors>:
_read_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:549
#endif
//-----------------------------------------------------------------------------
// _read_sectors: Read sector(s) from disk to file
//-----------------------------------------------------------------------------
static uint32 _read_sectors(FL_FILE* file, uint32 offset, uint8 *buffer, uint32 count)
{
   1d6ac:	55                   	push   ebp
   1d6ad:	89 e5                	mov    ebp,esp
   1d6af:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:550
    uint32 Sector = 0;
   1d6b2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:551
    uint32 ClusterIdx = 0;
   1d6b9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:552
    uint32 Cluster = 0;
   1d6c0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:557
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1d6c7:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1d6ce:	0f b6 c8             	movzx  ecx,al
   1d6d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d6d4:	ba 00 00 00 00       	mov    edx,0x0
   1d6d9:	f7 f1                	div    ecx
   1d6db:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:558
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1d6de:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1d6e5:	0f b6 c0             	movzx  eax,al
   1d6e8:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1d6ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1d6ef:	29 c2                	sub    edx,eax
   1d6f1:	89 d0                	mov    eax,edx
   1d6f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:561

    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
   1d6f6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1d6f9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d6fc:	01 c2                	add    edx,eax
   1d6fe:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1d705:	0f b6 c0             	movzx  eax,al
   1d708:	39 c2                	cmp    edx,eax
   1d70a:	76 10                	jbe    1d71c <_read_sectors+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:562
        count = _fs.sectors_per_cluster - Sector;
   1d70c:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1d713:	0f b6 c0             	movzx  eax,al
   1d716:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1d719:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:565

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1d71c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d71f:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1d725:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d728:	75 11                	jne    1d73b <_read_sectors+0x8f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:566
        Cluster = file->last_fat_lookup.CurrentCluster;
   1d72a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d72d:	8b 80 24 05 00 00    	mov    eax,DWORD PTR [eax+0x524]
   1d733:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d736:	e9 bb 00 00 00       	jmp    1d7f6 <_read_sectors+0x14a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:571
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1d73b:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1d73f:	74 2b                	je     1d76c <_read_sectors+0xc0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:571 (discriminator 1)
   1d741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d744:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1d74a:	83 c0 01             	add    eax,0x1
   1d74d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d750:	75 1a                	jne    1d76c <_read_sectors+0xc0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:573
        {
            i = file->last_fat_lookup.ClusterIdx;
   1d752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d755:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1d75b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:574
            Cluster = file->last_fat_lookup.CurrentCluster;
   1d75e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d761:	8b 80 24 05 00 00    	mov    eax,DWORD PTR [eax+0x524]
   1d767:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d76a:	eb 10                	jmp    1d77c <_read_sectors+0xd0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:580
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1d76c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:581
            Cluster = file->startcluster;
   1d773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d779:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d77c:	eb 52                	jmp    1d7d0 <_read_sectors+0x124>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:590
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1d77e:	8d 45 e0             	lea    eax,[ebp-0x20]
   1d781:	50                   	push   eax
   1d782:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d785:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d788:	68 00 91 12 00       	push   0x129100
   1d78d:	e8 b3 f1 ff ff       	call   1c945 <fatfs_cache_get_next_cluster>
   1d792:	83 c4 10             	add    esp,0x10
   1d795:	85 c0                	test   eax,eax
   1d797:	75 2d                	jne    1d7c6 <_read_sectors+0x11a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:593
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1d799:	83 ec 08             	sub    esp,0x8
   1d79c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d79f:	68 00 91 12 00       	push   0x129100
   1d7a4:	e8 21 34 00 00       	call   20bca <fatfs_find_next_cluster>
   1d7a9:	83 c4 10             	add    esp,0x10
   1d7ac:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:596

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1d7af:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d7b2:	50                   	push   eax
   1d7b3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d7b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d7b9:	68 00 91 12 00       	push   0x129100
   1d7be:	e8 c4 f1 ff ff       	call   1c987 <fatfs_cache_set_next_cluster>
   1d7c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:599
            }

            Cluster = nextCluster;
   1d7c6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d7c9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d7cc:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585 (discriminator 1)
   1d7d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d7d3:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d7d6:	72 a6                	jb     1d77e <_read_sectors+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:603

            Cluster = nextCluster;
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
   1d7d8:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d7dc:	74 18                	je     1d7f6 <_read_sectors+0x14a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:605
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
   1d7de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d7e1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d7e4:	89 90 24 05 00 00    	mov    DWORD PTR [eax+0x524],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:606
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1d7ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d7ed:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1d7f0:	89 90 20 05 00 00    	mov    DWORD PTR [eax+0x520],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:611
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
   1d7f6:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d7fa:	75 07                	jne    1d803 <_read_sectors+0x157>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:612
        return 0;
   1d7fc:	b8 00 00 00 00       	mov    eax,0x0
   1d801:	eb 41                	jmp    1d844 <_read_sectors+0x198>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:615

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;
   1d803:	83 ec 08             	sub    esp,0x8
   1d806:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d809:	68 00 91 12 00       	push   0x129100
   1d80e:	e8 b5 de ff ff       	call   1b6c8 <fatfs_lba_of_cluster>
   1d813:	83 c4 10             	add    esp,0x10
   1d816:	89 c2                	mov    edx,eax
   1d818:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d81b:	01 d0                	add    eax,edx
   1d81d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:618

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
   1d820:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1d823:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d826:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1d829:	68 00 91 12 00       	push   0x129100
   1d82e:	e8 f7 de ff ff       	call   1b72a <fatfs_sector_read>
   1d833:	83 c4 10             	add    esp,0x10
   1d836:	85 c0                	test   eax,eax
   1d838:	74 05                	je     1d83f <_read_sectors+0x193>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:619
        return count;
   1d83a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d83d:	eb 05                	jmp    1d844 <_read_sectors+0x198>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:621
    else
        return 0;
   1d83f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:622
}
   1d844:	c9                   	leave  
   1d845:	c3                   	ret    

0001d846 <fl_init>:
fl_init():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:632

//-----------------------------------------------------------------------------
// fl_init: Initialise library
//-----------------------------------------------------------------------------
void __attribute__ ((constructor)) fl_init(void)
{
   1d846:	55                   	push   ebp
   1d847:	89 e5                	mov    ebp,esp
   1d849:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:638
    int i;

    //printk("fl_init: Entered\n");
    
    //printk("fl_init: About to initialize free file list\n");
    fat_list_init(&_free_file_list);
   1d84c:	68 70 95 12 00       	push   0x129570
   1d851:	e8 8e f1 ff ff       	call   1c9e4 <fat_list_init>
   1d856:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:641
    //printk("fl_init: Initialized free file list\n");
    //printk("fl_init: About to initialize open file list\n");
    fat_list_init(&_open_file_list);
   1d859:	68 68 95 12 00       	push   0x129568
   1d85e:	e8 81 f1 ff ff       	call   1c9e4 <fat_list_init>
   1d863:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d866:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1d86d:	eb 28                	jmp    1d897 <fl_init+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:647 (discriminator 3)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);
   1d86f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1d872:	69 c0 3c 07 00 00    	imul   eax,eax,0x73c
   1d878:	05 30 07 00 00       	add    eax,0x730
   1d87d:	05 40 00 12 00       	add    eax,0x120040
   1d882:	83 c0 04             	add    eax,0x4
   1d885:	50                   	push   eax
   1d886:	68 70 95 12 00       	push   0x129570
   1d88b:	e8 88 f2 ff ff       	call   1cb18 <fat_list_insert_last>
   1d890:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646 (discriminator 3)
    fat_list_init(&_open_file_list);
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d893:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646 (discriminator 1)
   1d897:	83 7d fc 13          	cmp    DWORD PTR [ebp-0x4],0x13
   1d89b:	7e d2                	jle    1d86f <fl_init+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:650
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    //printk("fl_init: Returning\n");
    _filelib_init = 1;
   1d89d:	c7 05 f0 90 12 00 01 	mov    DWORD PTR ds:0x1290f0,0x1
   1d8a4:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:651
}
   1d8a7:	90                   	nop
   1d8a8:	c9                   	leave  
   1d8a9:	c3                   	ret    

0001d8aa <fl_attach_locks>:
fl_attach_locks():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:656
//-----------------------------------------------------------------------------
// fl_attach_locks:
//-----------------------------------------------------------------------------
void fl_attach_locks(void (*lock)(void), void (*unlock)(void))
{
   1d8aa:	55                   	push   ebp
   1d8ab:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:657
    _fs.fl_lock = lock;
   1d8ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d8b0:	a3 3c 91 12 00       	mov    ds:0x12913c,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:658
    _fs.fl_unlock = unlock;
   1d8b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d8b8:	a3 40 91 12 00       	mov    ds:0x129140,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:659
}
   1d8bd:	90                   	nop
   1d8be:	5d                   	pop    ebp
   1d8bf:	c3                   	ret    

0001d8c0 <fl_attach_media>:
fl_attach_media():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:664
//-----------------------------------------------------------------------------
// fl_attach_media:
//-----------------------------------------------------------------------------
int fl_attach_media(fn_diskio_read rd, fn_diskio_write wr)
{
   1d8c0:	55                   	push   ebp
   1d8c1:	89 e5                	mov    ebp,esp
   1d8c3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:669
    int res;

    //printk("fl_attach_media: Entered\n");
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d8c6:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1d8cb:	85 c0                	test   eax,eax
   1d8cd:	75 05                	jne    1d8d4 <fl_attach_media+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:669 (discriminator 1)
   1d8cf:	e8 72 ff ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:671
    //FAT_PRINTF(("fl_attach_media: CHEKC_FL_INIT returned\n")); //clr
    _fs.disk_io.read_media = rd;
   1d8d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d8d7:	a3 34 91 12 00       	mov    ds:0x129134,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:672
    _fs.disk_io.write_media = wr;
   1d8dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d8df:	a3 38 91 12 00       	mov    ds:0x129138,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:675

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
   1d8e4:	83 ec 0c             	sub    esp,0xc
   1d8e7:	68 00 91 12 00       	push   0x129100
   1d8ec:	e8 3f d8 ff ff       	call   1b130 <fatfs_init>
   1d8f1:	83 c4 10             	add    esp,0x10
   1d8f4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d8f7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d8fb:	74 18                	je     1d915 <fl_attach_media+0x55>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:677
    {
        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
   1d8fd:	83 ec 08             	sub    esp,0x8
   1d900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d903:	68 a8 39 08 00       	push   0x839a8
   1d908:	e8 96 9f 00 00       	call   278a3 <printk>
   1d90d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:678
        return res;
   1d910:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d913:	eb 0f                	jmp    1d924 <fl_attach_media+0x64>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:682
    }

    //FAT_PRINTF(("fl_attach_media: returning valid=1\n")); //clr
    _filelib_valid = 1;
   1d915:	c7 05 f4 90 12 00 01 	mov    DWORD PTR ds:0x1290f4,0x1
   1d91c:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:683
    return FAT_INIT_OK;
   1d91f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:684
}
   1d924:	c9                   	leave  
   1d925:	c3                   	ret    

0001d926 <fl_shutdown>:
fl_shutdown():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:689
//-----------------------------------------------------------------------------
// fl_shutdown: Call before shutting down system
//-----------------------------------------------------------------------------
 void __attribute__ ((destructor))fl_shutdown(void)
{
   1d926:	55                   	push   ebp
   1d927:	89 e5                	mov    ebp,esp
   1d929:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:691
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d92c:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1d931:	85 c0                	test   eax,eax
   1d933:	75 05                	jne    1d93a <fl_shutdown+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:691 (discriminator 1)
   1d935:	e8 0c ff ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:693

    FL_LOCK(&_fs);
   1d93a:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1d93f:	85 c0                	test   eax,eax
   1d941:	74 07                	je     1d94a <fl_shutdown+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:693 (discriminator 1)
   1d943:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1d948:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:694
    fatfs_fat_purge(&_fs);
   1d94a:	83 ec 0c             	sub    esp,0xc
   1d94d:	68 00 91 12 00       	push   0x129100
   1d952:	e8 1d 32 00 00       	call   20b74 <fatfs_fat_purge>
   1d957:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:695
    FL_UNLOCK(&_fs);
   1d95a:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1d95f:	85 c0                	test   eax,eax
   1d961:	74 07                	je     1d96a <fl_shutdown+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:695 (discriminator 1)
   1d963:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1d968:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:696
}
   1d96a:	90                   	nop
   1d96b:	c9                   	leave  
   1d96c:	c3                   	ret    

0001d96d <fl_fopen>:
fl_fopen():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:701
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
{
   1d96d:	55                   	push   ebp
   1d96e:	89 e5                	mov    ebp,esp
   1d970:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:704
    int i;
    FL_FILE* file;
    uint8 flags = 0;
   1d973:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:707

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d977:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1d97c:	85 c0                	test   eax,eax
   1d97e:	75 05                	jne    1d985 <fl_fopen+0x18>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:707 (discriminator 1)
   1d980:	e8 c1 fe ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:709

    if (!_filelib_valid)
   1d985:	a1 f4 90 12 00       	mov    eax,ds:0x1290f4
   1d98a:	85 c0                	test   eax,eax
   1d98c:	75 0a                	jne    1d998 <fl_fopen+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:710
        return NULL;
   1d98e:	b8 00 00 00 00       	mov    eax,0x0
   1d993:	e9 8c 01 00 00       	jmp    1db24 <fl_fopen+0x1b7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:712

    if (!path || !mode)
   1d998:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1d99c:	74 06                	je     1d9a4 <fl_fopen+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:712 (discriminator 1)
   1d99e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1d9a2:	75 0a                	jne    1d9ae <fl_fopen+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:713
        return NULL;
   1d9a4:	b8 00 00 00 00       	mov    eax,0x0
   1d9a9:	e9 76 01 00 00       	jmp    1db24 <fl_fopen+0x1b7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1d9ae:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1d9b5:	e9 93 00 00 00       	jmp    1da4d <fl_fopen+0xe0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:735
    {
        switch (mode[i])
   1d9ba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d9bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d9c0:	01 d0                	add    eax,edx
   1d9c2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1d9c5:	0f be c0             	movsx  eax,al
   1d9c8:	83 e8 2b             	sub    eax,0x2b
   1d9cb:	83 f8 4c             	cmp    eax,0x4c
   1d9ce:	77 79                	ja     1da49 <fl_fopen+0xdc>
   1d9d0:	8b 04 85 dc 39 08 00 	mov    eax,DWORD PTR [eax*4+0x839dc]
   1d9d7:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:739
        {
        case 'r':
        case 'R':
            flags |= FILE_READ;
   1d9d9:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:740
            break;
   1d9dd:	eb 6a                	jmp    1da49 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:743
        case 'w':
        case 'W':
            flags |= FILE_WRITE;
   1d9df:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:744
            flags |= FILE_ERASE;
   1d9e3:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:745
            flags |= FILE_CREATE;
   1d9e7:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:746
            break;
   1d9eb:	eb 5c                	jmp    1da49 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:749
        case 'a':
        case 'A':
            flags |= FILE_WRITE;
   1d9ed:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:750
            flags |= FILE_APPEND;
   1d9f1:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:751
            flags |= FILE_CREATE;
   1d9f5:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:752
            break;
   1d9f9:	eb 4e                	jmp    1da49 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:754
        case '+':
            if (flags & FILE_READ)
   1d9fb:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d9ff:	83 e0 01             	and    eax,0x1
   1da02:	85 c0                	test   eax,eax
   1da04:	74 06                	je     1da0c <fl_fopen+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:755
                flags |= FILE_WRITE;
   1da06:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1da0a:	eb 3c                	jmp    1da48 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:756
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
   1da0c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1da10:	83 e0 02             	and    eax,0x2
   1da13:	85 c0                	test   eax,eax
   1da15:	74 0e                	je     1da25 <fl_fopen+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:758
            {
                flags |= FILE_READ;
   1da17:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:759
                flags |= FILE_ERASE;
   1da1b:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:760
                flags |= FILE_CREATE;
   1da1f:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1da23:	eb 23                	jmp    1da48 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:762
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
            }
            else if (flags & FILE_APPEND)
   1da25:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1da29:	83 e0 04             	and    eax,0x4
   1da2c:	85 c0                	test   eax,eax
   1da2e:	74 18                	je     1da48 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:764
            {
                flags |= FILE_READ;
   1da30:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:765
                flags |= FILE_WRITE;
   1da34:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:766
                flags |= FILE_APPEND;
   1da38:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:767
                flags |= FILE_CREATE;
   1da3c:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
            }
            break;
   1da40:	eb 06                	jmp    1da48 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:772
        case 'b':
        case 'B':
            flags |= FILE_BINARY;
   1da42:	80 4d ef 08          	or     BYTE PTR [ebp-0x11],0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:773
            break;
   1da46:	eb 01                	jmp    1da49 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1da48:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733 (discriminator 2)
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1da49:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733 (discriminator 1)
   1da4d:	83 ec 0c             	sub    esp,0xc
   1da50:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1da53:	e8 1c a0 00 00       	call   27a74 <strlen>
   1da58:	83 c4 10             	add    esp,0x10
   1da5b:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1da5e:	0f 8f 56 ff ff ff    	jg     1d9ba <fl_fopen+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:777
            flags |= FILE_BINARY;
            break;
        }
    }

    file = NULL;
   1da64:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:785
    // No write support!
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
   1da6b:	a1 38 91 12 00       	mov    eax,ds:0x129138
   1da70:	85 c0                	test   eax,eax
   1da72:	75 04                	jne    1da78 <fl_fopen+0x10b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:786
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
   1da74:	80 65 ef d9          	and    BYTE PTR [ebp-0x11],0xd9
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:788

    FL_LOCK(&_fs);
   1da78:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1da7d:	85 c0                	test   eax,eax
   1da7f:	74 07                	je     1da88 <fl_fopen+0x11b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:788 (discriminator 1)
   1da81:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1da86:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:791

    // Read
    if (flags & FILE_READ)
   1da88:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1da8c:	83 e0 01             	and    eax,0x1
   1da8f:	85 c0                	test   eax,eax
   1da91:	74 11                	je     1daa4 <fl_fopen+0x137>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:792
        file = _open_file(path);
   1da93:	83 ec 0c             	sub    esp,0xc
   1da96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1da99:	e8 92 f6 ff ff       	call   1d130 <_open_file>
   1da9e:	83 c4 10             	add    esp,0x10
   1daa1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:796

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
   1daa4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1daa8:	75 1c                	jne    1dac6 <fl_fopen+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:796 (discriminator 1)
   1daaa:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1daae:	83 e0 20             	and    eax,0x20
   1dab1:	85 c0                	test   eax,eax
   1dab3:	74 11                	je     1dac6 <fl_fopen+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:797
        file = _create_file(path);
   1dab5:	83 ec 0c             	sub    esp,0xc
   1dab8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1dabb:	e8 8c f8 ff ff       	call   1d34c <_create_file>
   1dac0:	83 c4 10             	add    esp,0x10
   1dac3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:801
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
   1dac6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1daca:	83 e0 01             	and    eax,0x1
   1dacd:	85 c0                	test   eax,eax
   1dacf:	75 2d                	jne    1dafe <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:802
        if ((flags & FILE_CREATE) && !file)
   1dad1:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1dad5:	83 e0 20             	and    eax,0x20
   1dad8:	85 c0                	test   eax,eax
   1dada:	74 22                	je     1dafe <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:802 (discriminator 1)
   1dadc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dae0:	75 1c                	jne    1dafe <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:803
            if (flags & (FILE_WRITE | FILE_APPEND))
   1dae2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1dae6:	83 e0 06             	and    eax,0x6
   1dae9:	85 c0                	test   eax,eax
   1daeb:	74 11                	je     1dafe <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:804
                file = _open_file(path);
   1daed:	83 ec 0c             	sub    esp,0xc
   1daf0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1daf3:	e8 38 f6 ff ff       	call   1d130 <_open_file>
   1daf8:	83 c4 10             	add    esp,0x10
   1dafb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:806

    if (file)
   1dafe:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1db02:	74 0d                	je     1db11 <fl_fopen+0x1a4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:807
        file->flags = flags;
   1db04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1db07:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
   1db0b:	88 90 30 07 00 00    	mov    BYTE PTR [eax+0x730],dl
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:809

    FL_UNLOCK(&_fs);
   1db11:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1db16:	85 c0                	test   eax,eax
   1db18:	74 07                	je     1db21 <fl_fopen+0x1b4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:809 (discriminator 1)
   1db1a:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1db1f:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:810
    return file;
   1db21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:811
}
   1db24:	c9                   	leave  
   1db25:	c3                   	ret    

0001db26 <_write_sectors>:
_write_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:817
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
   1db26:	55                   	push   ebp
   1db27:	89 e5                	mov    ebp,esp
   1db29:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:818
    uint32 SectorNumber = 0;
   1db2c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:819
    uint32 ClusterIdx = 0;
   1db33:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:820
    uint32 Cluster = 0;
   1db3a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:821
    uint32 LastCluster = FAT32_LAST_CLUSTER;
   1db41:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [ebp-0x24],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:824
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;
   1db48:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1db4b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:827

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1db4e:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1db55:	0f b6 c8             	movzx  ecx,al
   1db58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1db5b:	ba 00 00 00 00       	mov    edx,0x0
   1db60:	f7 f1                	div    ecx
   1db62:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:828
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1db65:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1db6c:	0f b6 c0             	movzx  eax,al
   1db6f:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1db73:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1db76:	29 c2                	sub    edx,eax
   1db78:	89 d0                	mov    eax,edx
   1db7a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:831

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
   1db7d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1db80:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1db83:	01 c2                	add    edx,eax
   1db85:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1db8c:	0f b6 c0             	movzx  eax,al
   1db8f:	39 c2                	cmp    edx,eax
   1db91:	76 10                	jbe    1dba3 <_write_sectors+0x7d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:832
        count = _fs.sectors_per_cluster - SectorNumber;
   1db93:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1db9a:	0f b6 c0             	movzx  eax,al
   1db9d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1dba0:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:835

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1dba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dba6:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1dbac:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1dbaf:	75 11                	jne    1dbc2 <_write_sectors+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:836
        Cluster = file->last_fat_lookup.CurrentCluster;
   1dbb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dbb4:	8b 80 24 05 00 00    	mov    eax,DWORD PTR [eax+0x524]
   1dbba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1dbbd:	e9 13 01 00 00       	jmp    1dcd5 <_write_sectors+0x1af>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:841
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1dbc2:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1dbc6:	74 2b                	je     1dbf3 <_write_sectors+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:841 (discriminator 1)
   1dbc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dbcb:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1dbd1:	83 c0 01             	add    eax,0x1
   1dbd4:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1dbd7:	75 1a                	jne    1dbf3 <_write_sectors+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:843
        {
            i = file->last_fat_lookup.ClusterIdx;
   1dbd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dbdc:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1dbe2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:844
            Cluster = file->last_fat_lookup.CurrentCluster;
   1dbe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dbe8:	8b 80 24 05 00 00    	mov    eax,DWORD PTR [eax+0x524]
   1dbee:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1dbf1:	eb 10                	jmp    1dc03 <_write_sectors+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:850
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1dbf3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:851
            Cluster = file->startcluster;
   1dbfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dbfd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1dc00:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1dc03:	eb 5e                	jmp    1dc63 <_write_sectors+0x13d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:860
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1dc05:	8d 45 d8             	lea    eax,[ebp-0x28]
   1dc08:	50                   	push   eax
   1dc09:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1dc0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1dc0f:	68 00 91 12 00       	push   0x129100
   1dc14:	e8 2c ed ff ff       	call   1c945 <fatfs_cache_get_next_cluster>
   1dc19:	83 c4 10             	add    esp,0x10
   1dc1c:	85 c0                	test   eax,eax
   1dc1e:	75 2d                	jne    1dc4d <_write_sectors+0x127>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:863
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1dc20:	83 ec 08             	sub    esp,0x8
   1dc23:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dc26:	68 00 91 12 00       	push   0x129100
   1dc2b:	e8 9a 2f 00 00       	call   20bca <fatfs_find_next_cluster>
   1dc30:	83 c4 10             	add    esp,0x10
   1dc33:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:866

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1dc36:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1dc39:	50                   	push   eax
   1dc3a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1dc3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1dc40:	68 00 91 12 00       	push   0x129100
   1dc45:	e8 3d ed ff ff       	call   1c987 <fatfs_cache_set_next_cluster>
   1dc4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:869
            }

            LastCluster = Cluster;
   1dc4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dc50:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:870
            Cluster = nextCluster;
   1dc53:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1dc56:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:873

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
   1dc59:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1dc5d:	74 0e                	je     1dc6d <_write_sectors+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1dc5f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855 (discriminator 1)
   1dc63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc66:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1dc69:	72 9a                	jb     1dc05 <_write_sectors+0xdf>
   1dc6b:	eb 01                	jmp    1dc6e <_write_sectors+0x148>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:874
            LastCluster = Cluster;
            Cluster = nextCluster;

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
                break;
   1dc6d:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:878
        }

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
   1dc6e:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1dc72:	75 49                	jne    1dcbd <_write_sectors+0x197>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:881
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
   1dc74:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1dc7b:	0f b6 d0             	movzx  edx,al
   1dc7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dc81:	01 d0                	add    eax,edx
   1dc83:	83 e8 01             	sub    eax,0x1
   1dc86:	0f b6 15 00 91 12 00 	movzx  edx,BYTE PTR ds:0x129100
   1dc8d:	0f b6 ca             	movzx  ecx,dl
   1dc90:	ba 00 00 00 00       	mov    edx,0x0
   1dc95:	f7 f1                	div    ecx
   1dc97:	83 ec 04             	sub    esp,0x4
   1dc9a:	50                   	push   eax
   1dc9b:	8d 45 dc             	lea    eax,[ebp-0x24]
   1dc9e:	50                   	push   eax
   1dc9f:	68 00 91 12 00       	push   0x129100
   1dca4:	e8 77 36 00 00       	call   21320 <fatfs_add_free_space>
   1dca9:	83 c4 10             	add    esp,0x10
   1dcac:	85 c0                	test   eax,eax
   1dcae:	75 07                	jne    1dcb7 <_write_sectors+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:882
                return 0;
   1dcb0:	b8 00 00 00 00       	mov    eax,0x0
   1dcb5:	eb 5f                	jmp    1dd16 <_write_sectors+0x1f0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:884

            Cluster = LastCluster;
   1dcb7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1dcba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:888
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
   1dcbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dcc0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1dcc3:	89 90 24 05 00 00    	mov    DWORD PTR [eax+0x524],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:889
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1dcc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dccc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1dccf:	89 90 20 05 00 00    	mov    DWORD PTR [eax+0x520],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:893
    }

    // Calculate write address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + SectorNumber;
   1dcd5:	83 ec 08             	sub    esp,0x8
   1dcd8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dcdb:	68 00 91 12 00       	push   0x129100
   1dce0:	e8 e3 d9 ff ff       	call   1b6c8 <fatfs_lba_of_cluster>
   1dce5:	83 c4 10             	add    esp,0x10
   1dce8:	89 c2                	mov    edx,eax
   1dcea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1dced:	01 d0                	add    eax,edx
   1dcef:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:895

    if (fatfs_sector_write(&_fs, lba, buf, count))
   1dcf2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1dcf5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1dcf8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1dcfb:	68 00 91 12 00       	push   0x129100
   1dd00:	e8 44 da ff ff       	call   1b749 <fatfs_sector_write>
   1dd05:	83 c4 10             	add    esp,0x10
   1dd08:	85 c0                	test   eax,eax
   1dd0a:	74 05                	je     1dd11 <_write_sectors+0x1eb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:896
        return count;
   1dd0c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1dd0f:	eb 05                	jmp    1dd16 <_write_sectors+0x1f0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:898
    else
        return 0;
   1dd11:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:899 (discriminator 1)
}
   1dd16:	c9                   	leave  
   1dd17:	c3                   	ret    

0001dd18 <fl_fflush>:
fl_fflush():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:905
#endif
//-----------------------------------------------------------------------------
// fl_fflush: Flush un-written data to the file
//-----------------------------------------------------------------------------
int fl_fflush(void *f)
{
   1dd18:	55                   	push   ebp
   1dd19:	89 e5                	mov    ebp,esp
   1dd1b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:907
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;
   1dd1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dd21:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:910

    // If first call to library, initialise
    CHECK_FL_INIT();
   1dd24:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1dd29:	85 c0                	test   eax,eax
   1dd2b:	75 05                	jne    1dd32 <fl_fflush+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:910 (discriminator 1)
   1dd2d:	e8 14 fb ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:912

    if (file)
   1dd32:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1dd36:	74 5f                	je     1dd97 <fl_fflush+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:914
    {
        FL_LOCK(&_fs);
   1dd38:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1dd3d:	85 c0                	test   eax,eax
   1dd3f:	74 07                	je     1dd48 <fl_fflush+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:914 (discriminator 1)
   1dd41:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1dd46:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:917

        // If some write data still in buffer
        if (file->file_data_dirty)
   1dd48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dd4b:	8b 80 2c 07 00 00    	mov    eax,DWORD PTR [eax+0x72c]
   1dd51:	85 c0                	test   eax,eax
   1dd53:	74 32                	je     1dd87 <fl_fflush+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:920
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   1dd55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dd58:	8d 90 28 05 00 00    	lea    edx,[eax+0x528]
   1dd5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dd61:	8b 80 28 07 00 00    	mov    eax,DWORD PTR [eax+0x728]
   1dd67:	6a 01                	push   0x1
   1dd69:	52                   	push   edx
   1dd6a:	50                   	push   eax
   1dd6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dd6e:	e8 b3 fd ff ff       	call   1db26 <_write_sectors>
   1dd73:	83 c4 10             	add    esp,0x10
   1dd76:	85 c0                	test   eax,eax
   1dd78:	74 0d                	je     1dd87 <fl_fflush+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:921
                file->file_data_dirty = 0;
   1dd7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dd7d:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1dd84:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:924
        }

        FL_UNLOCK(&_fs);
   1dd87:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1dd8c:	85 c0                	test   eax,eax
   1dd8e:	74 07                	je     1dd97 <fl_fflush+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:924 (discriminator 1)
   1dd90:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1dd95:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:927
    }
#endif
    return 0;
   1dd97:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:928
}
   1dd9c:	c9                   	leave  
   1dd9d:	c3                   	ret    

0001dd9e <fl_fclose>:
fl_fclose():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:933
//-----------------------------------------------------------------------------
// fl_fclose: Close an open file
//-----------------------------------------------------------------------------
void fl_fclose(void *f)
{
   1dd9e:	55                   	push   ebp
   1dd9f:	89 e5                	mov    ebp,esp
   1dda1:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:934
    FL_FILE *file = (FL_FILE *)f;
   1dda4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dda7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:937

    // If first call to library, initialise
    CHECK_FL_INIT();
   1ddaa:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1ddaf:	85 c0                	test   eax,eax
   1ddb1:	75 05                	jne    1ddb8 <fl_fclose+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:937 (discriminator 1)
   1ddb3:	e8 8e fa ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:939

    if (file)
   1ddb8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1ddbc:	0f 84 c6 00 00 00    	je     1de88 <fl_fclose+0xea>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:941
    {
        FL_LOCK(&_fs);
   1ddc2:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1ddc7:	85 c0                	test   eax,eax
   1ddc9:	74 07                	je     1ddd2 <fl_fclose+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:941 (discriminator 1)
   1ddcb:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1ddd0:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:944

        // Flush un-written data to file
        fl_fflush(f);
   1ddd2:	83 ec 0c             	sub    esp,0xc
   1ddd5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ddd8:	e8 3b ff ff ff       	call   1dd18 <fl_fflush>
   1dddd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:947

        // File size changed?
        if (file->filelength_changed)
   1dde0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dde3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1dde6:	85 c0                	test   eax,eax
   1dde8:	74 2e                	je     1de18 <fl_fclose+0x7a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:951
        {
#if FATFS_INC_WRITE_SUPPORT
            // Update filesize in directory
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
   1ddea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dded:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1ddf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ddf3:	8d 88 14 01 00 00    	lea    ecx,[eax+0x114]
   1ddf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ddfc:	8b 00                	mov    eax,DWORD PTR [eax]
   1ddfe:	52                   	push   edx
   1ddff:	51                   	push   ecx
   1de00:	50                   	push   eax
   1de01:	68 00 91 12 00       	push   0x129100
   1de06:	e8 05 e2 ff ff       	call   1c010 <fatfs_update_file_length>
   1de0b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:953
#endif
            file->filelength_changed = 0;
   1de0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1de11:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:956
        }

        file->bytenum = 0;
   1de18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1de1b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:957
        file->filelength = 0;
   1de22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1de25:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:958
        file->startcluster = 0;
   1de2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1de2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:959
        file->file_data_address = 0xFFFFFFFF;
   1de36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1de39:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1de40:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:960
        file->file_data_dirty = 0;
   1de43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1de46:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1de4d:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:961
        file->filelength_changed = 0;
   1de50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1de53:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:964

        // Free file handle
        _free_file(file);
   1de5a:	83 ec 0c             	sub    esp,0xc
   1de5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1de60:	e8 f0 ed ff ff       	call   1cc55 <_free_file>
   1de65:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:966

        fatfs_fat_purge(&_fs);
   1de68:	83 ec 0c             	sub    esp,0xc
   1de6b:	68 00 91 12 00       	push   0x129100
   1de70:	e8 ff 2c 00 00       	call   20b74 <fatfs_fat_purge>
   1de75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:968

        FL_UNLOCK(&_fs);
   1de78:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1de7d:	85 c0                	test   eax,eax
   1de7f:	74 07                	je     1de88 <fl_fclose+0xea>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:968 (discriminator 1)
   1de81:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1de86:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:970
    }
}
   1de88:	90                   	nop
   1de89:	c9                   	leave  
   1de8a:	c3                   	ret    

0001de8b <fl_fgetc>:
fl_fgetc():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:975
//-----------------------------------------------------------------------------
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
   1de8b:	55                   	push   ebp
   1de8c:	89 e5                	mov    ebp,esp
   1de8e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:977
    int res;
    uint8 data = 0;
   1de91:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:979

    res = fl_fread(&data, 1, 1, f);
   1de95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1de98:	6a 01                	push   0x1
   1de9a:	6a 01                	push   0x1
   1de9c:	8d 45 f3             	lea    eax,[ebp-0xd]
   1de9f:	50                   	push   eax
   1dea0:	e8 95 00 00 00       	call   1df3a <fl_fread>
   1dea5:	83 c4 10             	add    esp,0x10
   1dea8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:980
    if (res == 1)
   1deab:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1deaf:	75 09                	jne    1deba <fl_fgetc+0x2f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:981
        return (int)data;
   1deb1:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1deb5:	0f b6 c0             	movzx  eax,al
   1deb8:	eb 03                	jmp    1debd <fl_fgetc+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:983
    else
        return res;
   1deba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:984 (discriminator 1)
}
   1debd:	c9                   	leave  
   1debe:	c3                   	ret    

0001debf <fl_fgets>:
fl_fgets():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:989
//-----------------------------------------------------------------------------
// fl_fgets: Get a string from a stream
//-----------------------------------------------------------------------------
char *fl_fgets(char *s, int n, void *f)
{
   1debf:	55                   	push   ebp
   1dec0:	89 e5                	mov    ebp,esp
   1dec2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:990
    int idx = 0;
   1dec5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:993

    // Space for null terminator?
    if (n > 0)
   1decc:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ded0:	7e 56                	jle    1df28 <fl_fgets+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:996
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1ded2:	eb 32                	jmp    1df06 <fl_fgets+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:998
        {
            int ch = fl_fgetc(f);
   1ded4:	83 ec 0c             	sub    esp,0xc
   1ded7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1deda:	e8 ac ff ff ff       	call   1de8b <fl_fgetc>
   1dedf:	83 c4 10             	add    esp,0x10
   1dee2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1001

            // EOF / Error?
            if (ch < 0)
   1dee5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dee9:	78 28                	js     1df13 <fl_fgets+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1005
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
   1deeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1deee:	8d 50 01             	lea    edx,[eax+0x1]
   1def1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1def4:	89 c2                	mov    edx,eax
   1def6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1def9:	01 d0                	add    eax,edx
   1defb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1defe:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1008

            // End of line?
            if (ch == '\n')
   1df00:	83 7d f0 0a          	cmp    DWORD PTR [ebp-0x10],0xa
   1df04:	74 10                	je     1df16 <fl_fgets+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:996

    // Space for null terminator?
    if (n > 0)
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1df06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1df09:	83 e8 01             	sub    eax,0x1
   1df0c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1df0f:	7f c3                	jg     1ded4 <fl_fgets+0x15>
   1df11:	eb 04                	jmp    1df17 <fl_fgets+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1002
        {
            int ch = fl_fgetc(f);

            // EOF / Error?
            if (ch < 0)
                break;
   1df13:	90                   	nop
   1df14:	eb 01                	jmp    1df17 <fl_fgets+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1009
            // Store character read from stream
            s[idx++] = (char)ch;

            // End of line?
            if (ch == '\n')
                break;
   1df16:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1012
        }

        if (idx > 0)
   1df17:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1df1b:	7e 0b                	jle    1df28 <fl_fgets+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1013
            s[idx] = '\0';
   1df1d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1df20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1df23:	01 d0                	add    eax,edx
   1df25:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016
    }

    return (idx > 0) ? s : 0;
   1df28:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1df2c:	7e 05                	jle    1df33 <fl_fgets+0x74>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 1)
   1df2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1df31:	eb 05                	jmp    1df38 <fl_fgets+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 2)
   1df33:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1017 (discriminator 5)
}
   1df38:	c9                   	leave  
   1df39:	c3                   	ret    

0001df3a <fl_fread>:
fl_fread():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1022
//-----------------------------------------------------------------------------
// fl_fread: Read a block of data from the file
//-----------------------------------------------------------------------------
int fl_fread(void * buffer, int size, int length, void *f )
{
   1df3a:	55                   	push   ebp
   1df3b:	89 e5                	mov    ebp,esp
   1df3d:	53                   	push   ebx
   1df3e:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1026
    uint32 sector;
    uint32 offset;
    int copyCount;
    int count = size * length;
   1df41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1df44:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1df48:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1027
    int bytesRead = 0;
   1df4b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1029

    FL_FILE *file = (FL_FILE *)f;
   1df52:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1df55:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1032

    // If first call to library, initialise
    CHECK_FL_INIT();
   1df58:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1df5d:	85 c0                	test   eax,eax
   1df5f:	75 05                	jne    1df66 <fl_fread+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1032 (discriminator 1)
   1df61:	e8 e0 f8 ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1034

    if (buffer==NULL || file==NULL)
   1df66:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1df6a:	74 06                	je     1df72 <fl_fread+0x38>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1034 (discriminator 1)
   1df6c:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1df70:	75 0a                	jne    1df7c <fl_fread+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1035
        return -1;
   1df72:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1df77:	e9 d8 01 00 00       	jmp    1e154 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1038

    // No read permissions
    if (!(file->flags & FILE_READ))
   1df7c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df7f:	0f b6 80 30 07 00 00 	movzx  eax,BYTE PTR [eax+0x730]
   1df86:	0f b6 c0             	movzx  eax,al
   1df89:	83 e0 01             	and    eax,0x1
   1df8c:	85 c0                	test   eax,eax
   1df8e:	75 0a                	jne    1df9a <fl_fread+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1039
        return -1;
   1df90:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1df95:	e9 ba 01 00 00       	jmp    1e154 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1042

    // Nothing to be done
    if (!count)
   1df9a:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1df9e:	75 0a                	jne    1dfaa <fl_fread+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1043
        return 0;
   1dfa0:	b8 00 00 00 00       	mov    eax,0x0
   1dfa5:	e9 aa 01 00 00       	jmp    1e154 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1046

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
   1dfaa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfad:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dfb0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dfb6:	39 c2                	cmp    edx,eax
   1dfb8:	72 0a                	jb     1dfc4 <fl_fread+0x8a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1047
        return -1;
   1dfba:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dfbf:	e9 90 01 00 00       	jmp    1e154 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1050

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
   1dfc4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfc7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dfca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1dfcd:	01 c2                	add    edx,eax
   1dfcf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfd2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dfd5:	39 c2                	cmp    edx,eax
   1dfd7:	76 13                	jbe    1dfec <fl_fread+0xb2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1051
        count = file->filelength - file->bytenum;
   1dfd9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfdc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dfdf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfe2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dfe5:	29 c2                	sub    edx,eax
   1dfe7:	89 d0                	mov    eax,edx
   1dfe9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1054

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1dfec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dff2:	c1 e8 09             	shr    eax,0x9
   1dff5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1057

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1dff8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dffb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dffe:	25 ff 01 00 00       	and    eax,0x1ff
   1e003:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1059

    while (bytesRead < count)
   1e006:	e9 34 01 00 00       	jmp    1e13f <fl_fread+0x205>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1062
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
   1e00b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e00f:	75 63                	jne    1e074 <fl_fread+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1062 (discriminator 1)
   1e011:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e014:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1e017:	3d ff 01 00 00       	cmp    eax,0x1ff
   1e01c:	7e 56                	jle    1e074 <fl_fread+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1065
        {
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);
   1e01e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e021:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1e024:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1e02a:	85 c0                	test   eax,eax
   1e02c:	0f 48 c2             	cmovs  eax,edx
   1e02f:	c1 f8 09             	sar    eax,0x9
   1e032:	89 c1                	mov    ecx,eax
   1e034:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   1e037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e03a:	01 d0                	add    eax,edx
   1e03c:	51                   	push   ecx
   1e03d:	50                   	push   eax
   1e03e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e041:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1e044:	e8 63 f6 ff ff       	call   1d6ac <_read_sectors>
   1e049:	83 c4 10             	add    esp,0x10
   1e04c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1066
            if (sectorsRead)
   1e04f:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   1e053:	0f 84 f4 00 00 00    	je     1e14d <fl_fread+0x213>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1069
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
   1e059:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1e05c:	c1 e0 09             	shl    eax,0x9
   1e05f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1072

                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
   1e062:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1e065:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1073
                offset = 0;
   1e068:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1063

    while (bytesRead < count)
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
        {
   1e06f:	e9 b4 00 00 00       	jmp    1e128 <fl_fread+0x1ee>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1081
                break;
        }
        else
        {
            // Do we need to re-read the sector?
            if (file->file_data_address != sector)
   1e074:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e077:	8b 80 28 07 00 00    	mov    eax,DWORD PTR [eax+0x728]
   1e07d:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e080:	74 55                	je     1e0d7 <fl_fread+0x19d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1084
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1e082:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e085:	8b 80 2c 07 00 00    	mov    eax,DWORD PTR [eax+0x72c]
   1e08b:	85 c0                	test   eax,eax
   1e08d:	74 0e                	je     1e09d <fl_fread+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1085
                    fl_fflush(file);
   1e08f:	83 ec 0c             	sub    esp,0xc
   1e092:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1e095:	e8 7e fc ff ff       	call   1dd18 <fl_fflush>
   1e09a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1088

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1e09d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e0a0:	05 28 05 00 00       	add    eax,0x528
   1e0a5:	6a 01                	push   0x1
   1e0a7:	50                   	push   eax
   1e0a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e0ab:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1e0ae:	e8 f9 f5 ff ff       	call   1d6ac <_read_sectors>
   1e0b3:	83 c4 10             	add    esp,0x10
   1e0b6:	85 c0                	test   eax,eax
   1e0b8:	0f 84 92 00 00 00    	je     1e150 <fl_fread+0x216>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1092
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
   1e0be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e0c1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1e0c4:	89 90 28 07 00 00    	mov    DWORD PTR [eax+0x728],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1093
                file->file_data_dirty = 0;
   1e0ca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e0cd:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1e0d4:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1097
            }

            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1e0d7:	b8 00 02 00 00       	mov    eax,0x200
   1e0dc:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1e0df:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1100

            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
   1e0e2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e0e5:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1e0e8:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1e0eb:	7d 09                	jge    1e0f6 <fl_fread+0x1bc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1101
                copyCount = (count - bytesRead);
   1e0ed:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e0f0:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1e0f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1104

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
   1e0f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e0f9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1e0fc:	8d 8a 28 05 00 00    	lea    ecx,[edx+0x528]
   1e102:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1e105:	01 d1                	add    ecx,edx
   1e107:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   1e10a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1e10d:	01 da                	add    edx,ebx
   1e10f:	83 ec 04             	sub    esp,0x4
   1e112:	50                   	push   eax
   1e113:	51                   	push   ecx
   1e114:	52                   	push   edx
   1e115:	e8 ea 80 00 00       	call   26204 <memcpy>
   1e11a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1107

            // Move onto next sector and reset copy offset
            sector++;
   1e11d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1108
            offset = 0;
   1e121:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1112
        }

        // Increase total read count
        bytesRead += copyCount;
   1e128:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e12b:	01 45 e4             	add    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1115

        // Increment file pointer
        file->bytenum += copyCount;
   1e12e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e131:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e134:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e137:	01 c2                	add    edx,eax
   1e139:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e13c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1059
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
   1e13f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e142:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1e145:	0f 8c c0 fe ff ff    	jl     1e00b <fl_fread+0xd1>
   1e14b:	eb 04                	jmp    1e151 <fl_fread+0x217>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1076
                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
                offset = 0;
            }
            else
                break;
   1e14d:	90                   	nop
   1e14e:	eb 01                	jmp    1e151 <fl_fread+0x217>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1090
                    fl_fflush(file);

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
                    // Read failed - out of range (probably)
                    break;
   1e150:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1118

        // Increment file pointer
        file->bytenum += copyCount;
    }

    return bytesRead;
   1e151:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1119
}
   1e154:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1e157:	c9                   	leave  
   1e158:	c3                   	ret    

0001e159 <fl_fseek>:
fl_fseek():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1124
//-----------------------------------------------------------------------------
// fl_fseek: Seek to a specific place in the file
//-----------------------------------------------------------------------------
int fl_fseek( void *f, long offset, int origin )
{
   1e159:	55                   	push   ebp
   1e15a:	89 e5                	mov    ebp,esp
   1e15c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1125
    FL_FILE *file = (FL_FILE *)f;
   1e15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e162:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1126
    int res = -1;
   1e165:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1129

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e16c:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e171:	85 c0                	test   eax,eax
   1e173:	75 05                	jne    1e17a <fl_fseek+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1129 (discriminator 1)
   1e175:	e8 cc f6 ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1131

    if (!file)
   1e17a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e17e:	75 0a                	jne    1e18a <fl_fseek+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1132
        return -1;
   1e180:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e185:	e9 1d 01 00 00       	jmp    1e2a7 <fl_fseek+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1134

    if (origin == SEEK_END && offset != 0)
   1e18a:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1e18e:	75 10                	jne    1e1a0 <fl_fseek+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1134 (discriminator 1)
   1e190:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1e194:	74 0a                	je     1e1a0 <fl_fseek+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1135
        return -1;
   1e196:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e19b:	e9 07 01 00 00       	jmp    1e2a7 <fl_fseek+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1137

    FL_LOCK(&_fs);
   1e1a0:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e1a5:	85 c0                	test   eax,eax
   1e1a7:	74 07                	je     1e1b0 <fl_fseek+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1137 (discriminator 1)
   1e1a9:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e1ae:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1140

    // Invalidate file buffer
    file->file_data_address = 0xFFFFFFFF;
   1e1b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1b3:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1e1ba:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1141
    file->file_data_dirty = 0;
   1e1bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1c0:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1e1c7:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1143

    if (origin == SEEK_SET)
   1e1ca:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1e1ce:	75 31                	jne    1e201 <fl_fseek+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1145
    {
        file->bytenum = (uint32)offset;
   1e1d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1e1d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1147

        if (file->bytenum > file->filelength)
   1e1d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1dc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e1df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1e2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e1e5:	39 c2                	cmp    edx,eax
   1e1e7:	76 0c                	jbe    1e1f5 <fl_fseek+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1148
            file->bytenum = file->filelength;
   1e1e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1ec:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1e1ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1150

        res = 0;
   1e1f5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e1fc:	e9 93 00 00 00       	jmp    1e294 <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1152
    }
    else if (origin == SEEK_CUR)
   1e201:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
   1e205:	75 6b                	jne    1e272 <fl_fseek+0x119>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1155
    {
        // Positive shift
        if (offset >= 0)
   1e207:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1e20b:	78 2f                	js     1e23c <fl_fseek+0xe3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1157
        {
            file->bytenum += offset;
   1e20d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e210:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e213:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e216:	01 c2                	add    edx,eax
   1e218:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e21b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1159

            if (file->bytenum > file->filelength)
   1e21e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e221:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e224:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e227:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e22a:	39 c2                	cmp    edx,eax
   1e22c:	76 3b                	jbe    1e269 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1160
                file->bytenum = file->filelength;
   1e22e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e231:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1e234:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e237:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
   1e23a:	eb 2d                	jmp    1e269 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1166
        }
        // Negative shift
        else
        {
            // Make shift positive
            offset = -offset;
   1e23c:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1169

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
   1e23f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e242:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e245:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e248:	39 c2                	cmp    edx,eax
   1e24a:	73 0c                	jae    1e258 <fl_fseek+0xff>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1170
                file->bytenum = 0;
   1e24c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e24f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
   1e256:	eb 11                	jmp    1e269 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1172
            else
                file->bytenum-= offset;
   1e258:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e25b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e25e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e261:	29 c2                	sub    edx,eax
   1e263:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e266:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1175
        }

        res = 0;
   1e269:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e270:	eb 22                	jmp    1e294 <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1177
    }
    else if (origin == SEEK_END)
   1e272:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1e276:	75 15                	jne    1e28d <fl_fseek+0x134>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1179
    {
        file->bytenum = file->filelength;
   1e278:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e27b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1e27e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e281:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1180
        res = 0;
   1e284:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e28b:	eb 07                	jmp    1e294 <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1183
    }
    else
        res = -1;
   1e28d:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1185

    FL_UNLOCK(&_fs);
   1e294:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e299:	85 c0                	test   eax,eax
   1e29b:	74 07                	je     1e2a4 <fl_fseek+0x14b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1185 (discriminator 1)
   1e29d:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e2a2:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1187

    return res;
   1e2a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1188
}
   1e2a7:	c9                   	leave  
   1e2a8:	c3                   	ret    

0001e2a9 <fl_fgetpos>:
fl_fgetpos():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1193
//-----------------------------------------------------------------------------
// fl_fgetpos: Get the current file position
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
   1e2a9:	55                   	push   ebp
   1e2aa:	89 e5                	mov    ebp,esp
   1e2ac:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1194
    FL_FILE *file = (FL_FILE *)f;
   1e2af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e2b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1196

    if (!file)
   1e2b5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e2b9:	75 07                	jne    1e2c2 <fl_fgetpos+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1197
        return -1;
   1e2bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e2c0:	eb 30                	jmp    1e2f2 <fl_fgetpos+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1199

    FL_LOCK(&_fs);
   1e2c2:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e2c7:	85 c0                	test   eax,eax
   1e2c9:	74 07                	je     1e2d2 <fl_fgetpos+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1199 (discriminator 1)
   1e2cb:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e2d0:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1202

    // Get position
    *position = file->bytenum;
   1e2d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e2d5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e2d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e2db:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1204

    FL_UNLOCK(&_fs);
   1e2dd:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e2e2:	85 c0                	test   eax,eax
   1e2e4:	74 07                	je     1e2ed <fl_fgetpos+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1204 (discriminator 1)
   1e2e6:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e2eb:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1206

    return 0;
   1e2ed:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1207
}
   1e2f2:	c9                   	leave  
   1e2f3:	c3                   	ret    

0001e2f4 <fl_ftell>:
fl_ftell():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1212
//-----------------------------------------------------------------------------
// fl_ftell: Get the current file position
//-----------------------------------------------------------------------------
long fl_ftell(void *f)
{
   1e2f4:	55                   	push   ebp
   1e2f5:	89 e5                	mov    ebp,esp
   1e2f7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1213
    uint32 pos = 0;
   1e2fa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1215

    fl_fgetpos(f, &pos);
   1e301:	83 ec 08             	sub    esp,0x8
   1e304:	8d 45 f4             	lea    eax,[ebp-0xc]
   1e307:	50                   	push   eax
   1e308:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e30b:	e8 99 ff ff ff       	call   1e2a9 <fl_fgetpos>
   1e310:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1217

    return (long)pos;
   1e313:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1218
}
   1e316:	c9                   	leave  
   1e317:	c3                   	ret    

0001e318 <fl_feof>:
fl_feof():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1223
//-----------------------------------------------------------------------------
// fl_feof: Is the file pointer at the end of the stream?
//-----------------------------------------------------------------------------
int fl_feof(void *f)
{
   1e318:	55                   	push   ebp
   1e319:	89 e5                	mov    ebp,esp
   1e31b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1224
    FL_FILE *file = (FL_FILE *)f;
   1e31e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e321:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1227
    int res;

    if (!file)
   1e324:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e328:	75 07                	jne    1e331 <fl_feof+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1228
        return -1;
   1e32a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e32f:	eb 43                	jmp    1e374 <fl_feof+0x5c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1230

    FL_LOCK(&_fs);
   1e331:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e336:	85 c0                	test   eax,eax
   1e338:	74 07                	je     1e341 <fl_feof+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1230 (discriminator 1)
   1e33a:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e33f:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1232

    if (file->bytenum == file->filelength)
   1e341:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e344:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e347:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e34a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e34d:	39 c2                	cmp    edx,eax
   1e34f:	75 09                	jne    1e35a <fl_feof+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1233
        res = EOF;
   1e351:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
   1e358:	eb 07                	jmp    1e361 <fl_feof+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1235
    else
        res = 0;
   1e35a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1237

    FL_UNLOCK(&_fs);
   1e361:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e366:	85 c0                	test   eax,eax
   1e368:	74 07                	je     1e371 <fl_feof+0x59>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1237 (discriminator 1)
   1e36a:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e36f:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1239

    return res;
   1e371:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1240
}
   1e374:	c9                   	leave  
   1e375:	c3                   	ret    

0001e376 <fl_fputc>:
fl_fputc():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1246
//-----------------------------------------------------------------------------
// fl_fputc: Write a character to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputc(int c, void *f)
{
   1e376:	55                   	push   ebp
   1e377:	89 e5                	mov    ebp,esp
   1e379:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1247
    uint8 data = (uint8)c;
   1e37c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e37f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1250
    int res;

    res = fl_fwrite(&data, 1, 1, f);
   1e382:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e385:	6a 01                	push   0x1
   1e387:	6a 01                	push   0x1
   1e389:	8d 45 f3             	lea    eax,[ebp-0xd]
   1e38c:	50                   	push   eax
   1e38d:	e8 16 00 00 00       	call   1e3a8 <fl_fwrite>
   1e392:	83 c4 10             	add    esp,0x10
   1e395:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1251
    if (res == 1)
   1e398:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1e39c:	75 05                	jne    1e3a3 <fl_fputc+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1252
        return c;
   1e39e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e3a1:	eb 03                	jmp    1e3a6 <fl_fputc+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1254
    else
        return res;
   1e3a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1255 (discriminator 1)
}
   1e3a6:	c9                   	leave  
   1e3a7:	c3                   	ret    

0001e3a8 <fl_fwrite>:
fl_fwrite():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1262
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
   1e3a8:	55                   	push   ebp
   1e3a9:	89 e5                	mov    ebp,esp
   1e3ab:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1263
    FL_FILE *file = (FL_FILE *)f;
   1e3ae:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1e3b1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1266
    uint32 sector;
    uint32 offset;
    uint32 length = (size*count);
   1e3b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e3b7:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1e3bb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1267
    uint8 *buffer = (uint8 *)data;
   1e3be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e3c1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1268
    uint32 bytesWritten = 0;
   1e3c4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1272
    uint32 copyCount;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e3cb:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e3d0:	85 c0                	test   eax,eax
   1e3d2:	75 05                	jne    1e3d9 <fl_fwrite+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1272 (discriminator 1)
   1e3d4:	e8 6d f4 ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1274

    if (!file)
   1e3d9:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1e3dd:	75 0a                	jne    1e3e9 <fl_fwrite+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1275
        return -1;
   1e3df:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e3e4:	e9 8a 02 00 00       	jmp    1e673 <fl_fwrite+0x2cb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1277

    FL_LOCK(&_fs);
   1e3e9:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e3ee:	85 c0                	test   eax,eax
   1e3f0:	74 07                	je     1e3f9 <fl_fwrite+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1277 (discriminator 1)
   1e3f2:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e3f7:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1280

    // No write permissions
    if (!(file->flags & FILE_WRITE))
   1e3f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e3fc:	0f b6 80 30 07 00 00 	movzx  eax,BYTE PTR [eax+0x730]
   1e403:	0f b6 c0             	movzx  eax,al
   1e406:	83 e0 02             	and    eax,0x2
   1e409:	85 c0                	test   eax,eax
   1e40b:	75 1a                	jne    1e427 <fl_fwrite+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1282
    {
        FL_UNLOCK(&_fs);
   1e40d:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e412:	85 c0                	test   eax,eax
   1e414:	74 07                	je     1e41d <fl_fwrite+0x75>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1282 (discriminator 1)
   1e416:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e41b:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1283
        return -1;
   1e41d:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e422:	e9 4c 02 00 00       	jmp    1e673 <fl_fwrite+0x2cb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1287
    }

    // Append writes to end of file
    if (file->flags & FILE_APPEND)
   1e427:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e42a:	0f b6 80 30 07 00 00 	movzx  eax,BYTE PTR [eax+0x730]
   1e431:	0f b6 c0             	movzx  eax,al
   1e434:	83 e0 04             	and    eax,0x4
   1e437:	85 c0                	test   eax,eax
   1e439:	74 0c                	je     1e447 <fl_fwrite+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1288
        file->bytenum = file->filelength;
   1e43b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e43e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1e441:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e444:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1292
    // Else write to current position

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1e447:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e44a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e44d:	c1 e8 09             	shr    eax,0x9
   1e450:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1295

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1e453:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e456:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e459:	25 ff 01 00 00       	and    eax,0x1ff
   1e45e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1297

    while (bytesWritten < length)
   1e461:	e9 b7 01 00 00       	jmp    1e61d <fl_fwrite+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1300
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
   1e466:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e46a:	0f 85 b6 00 00 00    	jne    1e526 <fl_fwrite+0x17e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1300 (discriminator 1)
   1e470:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e473:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e476:	3d ff 01 00 00       	cmp    eax,0x1ff
   1e47b:	0f 86 a5 00 00 00    	jbe    1e526 <fl_fwrite+0x17e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1305
        {
            uint32 sectorsWrote;

            // Buffered sector, flush back to disk
            if (file->file_data_address != 0xFFFFFFFF)
   1e481:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e484:	8b 80 28 07 00 00    	mov    eax,DWORD PTR [eax+0x728]
   1e48a:	83 f8 ff             	cmp    eax,0xffffffff
   1e48d:	74 35                	je     1e4c4 <fl_fwrite+0x11c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1308
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1e48f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e492:	8b 80 2c 07 00 00    	mov    eax,DWORD PTR [eax+0x72c]
   1e498:	85 c0                	test   eax,eax
   1e49a:	74 0e                	je     1e4aa <fl_fwrite+0x102>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1309
                    fl_fflush(file);
   1e49c:	83 ec 0c             	sub    esp,0xc
   1e49f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e4a2:	e8 71 f8 ff ff       	call   1dd18 <fl_fflush>
   1e4a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1311

                file->file_data_address = 0xFFFFFFFF;
   1e4aa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e4ad:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1e4b4:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1312
                file->file_data_dirty = 0;
   1e4b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e4ba:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1e4c1:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1316
            }

            // Write as many sectors as possible
            sectorsWrote = _write_sectors(file, sector, (uint8*)(buffer + bytesWritten), (length - bytesWritten) / FAT_SECTOR_SIZE);
   1e4c4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e4c7:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e4ca:	c1 e8 09             	shr    eax,0x9
   1e4cd:	89 c2                	mov    edx,eax
   1e4cf:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
   1e4d2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e4d5:	01 c8                	add    eax,ecx
   1e4d7:	52                   	push   edx
   1e4d8:	50                   	push   eax
   1e4d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e4dc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e4df:	e8 42 f6 ff ff       	call   1db26 <_write_sectors>
   1e4e4:	83 c4 10             	add    esp,0x10
   1e4e7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1317
            copyCount = FAT_SECTOR_SIZE * sectorsWrote;
   1e4ea:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e4ed:	c1 e0 09             	shl    eax,0x9
   1e4f0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1320

            // Increase total read count
            bytesWritten += copyCount;
   1e4f3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e4f6:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1323

            // Increment file pointer
            file->bytenum += copyCount;
   1e4f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e4fc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e4ff:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e502:	01 c2                	add    edx,eax
   1e504:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e507:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1326

            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
   1e50a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e50d:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1327
            offset = 0;
   1e510:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1329

            if (!sectorsWrote)
   1e517:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   1e51b:	0f 84 0a 01 00 00    	je     1e62b <fl_fwrite+0x283>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1301

    while (bytesWritten < length)
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
        {
   1e521:	e9 f7 00 00 00       	jmp    1e61d <fl_fwrite+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1335
                break;
        }
        else
        {
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1e526:	b8 00 02 00 00       	mov    eax,0x200
   1e52b:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1e52e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1338

            // Only require some of this sector?
            if (copyCount > (length - bytesWritten))
   1e531:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e534:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e537:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1e53a:	73 09                	jae    1e545 <fl_fwrite+0x19d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1339
                copyCount = (length - bytesWritten);
   1e53c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e53f:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e542:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1342

            // Do we need to read a new sector?
            if (file->file_data_address != sector)
   1e545:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e548:	8b 80 28 07 00 00    	mov    eax,DWORD PTR [eax+0x728]
   1e54e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e551:	74 75                	je     1e5c8 <fl_fwrite+0x220>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1345
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1e553:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e556:	8b 80 2c 07 00 00    	mov    eax,DWORD PTR [eax+0x72c]
   1e55c:	85 c0                	test   eax,eax
   1e55e:	74 0e                	je     1e56e <fl_fwrite+0x1c6>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1346
                    fl_fflush(file);
   1e560:	83 ec 0c             	sub    esp,0xc
   1e563:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e566:	e8 ad f7 ff ff       	call   1dd18 <fl_fflush>
   1e56b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1349

                // If we plan to overwrite the whole sector, we don't need to read it first!
                if (copyCount != FAT_SECTOR_SIZE)
   1e56e:	81 7d e8 00 02 00 00 	cmp    DWORD PTR [ebp-0x18],0x200
   1e575:	74 38                	je     1e5af <fl_fwrite+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1356
                    // NOTE: This does not have succeed; if last sector of file
                    // reached, no valid data will be read in, but write will
                    // allocate some more space for new data.

                    // Get LBA of sector offset within file
                    if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1e577:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e57a:	05 28 05 00 00       	add    eax,0x528
   1e57f:	6a 01                	push   0x1
   1e581:	50                   	push   eax
   1e582:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e585:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e588:	e8 1f f1 ff ff       	call   1d6ac <_read_sectors>
   1e58d:	83 c4 10             	add    esp,0x10
   1e590:	85 c0                	test   eax,eax
   1e592:	75 1b                	jne    1e5af <fl_fwrite+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1357
                        memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1e594:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e597:	05 28 05 00 00       	add    eax,0x528
   1e59c:	83 ec 04             	sub    esp,0x4
   1e59f:	68 00 02 00 00       	push   0x200
   1e5a4:	6a 00                	push   0x0
   1e5a6:	50                   	push   eax
   1e5a7:	e8 91 70 00 00       	call   2563d <memset>
   1e5ac:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1360
                }

                file->file_data_address = sector;
   1e5af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e5b2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1e5b5:	89 90 28 07 00 00    	mov    DWORD PTR [eax+0x728],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1361
                file->file_data_dirty = 0;
   1e5bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e5be:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1e5c5:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1365
            }

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);
   1e5c8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   1e5cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e5ce:	01 c2                	add    edx,eax
   1e5d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e5d3:	8d 88 28 05 00 00    	lea    ecx,[eax+0x528]
   1e5d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e5dc:	01 c8                	add    eax,ecx
   1e5de:	83 ec 04             	sub    esp,0x4
   1e5e1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1e5e4:	52                   	push   edx
   1e5e5:	50                   	push   eax
   1e5e6:	e8 19 7c 00 00       	call   26204 <memcpy>
   1e5eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1368

            // Mark buffer as dirty
            file->file_data_dirty = 1;
   1e5ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e5f1:	c7 80 2c 07 00 00 01 	mov    DWORD PTR [eax+0x72c],0x1
   1e5f8:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1371

            // Increase total read count
            bytesWritten += copyCount;
   1e5fb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e5fe:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1374

            // Increment file pointer
            file->bytenum += copyCount;
   1e601:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e604:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e607:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e60a:	01 c2                	add    edx,eax
   1e60c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e60f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1377

            // Move onto next sector and reset copy offset
            sector++;
   1e612:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1378
            offset = 0;
   1e616:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1297
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
   1e61d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e620:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1e623:	0f 82 3d fe ff ff    	jb     1e466 <fl_fwrite+0xbe>
   1e629:	eb 01                	jmp    1e62c <fl_fwrite+0x284>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1330
            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
            offset = 0;

            if (!sectorsWrote)
                break;
   1e62b:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1383
            offset = 0;
        }
    }

    // Write increased extent of the file?
    if (file->bytenum > file->filelength)
   1e62c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e62f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e632:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e635:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e638:	39 c2                	cmp    edx,eax
   1e63a:	76 16                	jbe    1e652 <fl_fwrite+0x2aa>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1386
    {
        // Increase file size to new point
        file->filelength = file->bytenum;
   1e63c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e63f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e642:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e645:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1390

        // We are changing the file length and this
        // will need to be writen back at some point
        file->filelength_changed = 1;
   1e648:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e64b:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1396
    }

#if FATFS_INC_TIME_DATE_SUPPORT
    // If time & date support is enabled, always force directory entry to be
    // written in-order to update file modify / access time & date.
    file->filelength_changed = 1;
   1e652:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e655:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1399
#endif

    FL_UNLOCK(&_fs);
   1e65c:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e661:	85 c0                	test   eax,eax
   1e663:	74 07                	je     1e66c <fl_fwrite+0x2c4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1399 (discriminator 1)
   1e665:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e66a:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1401

    return (size*count);
   1e66c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e66f:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1402
}
   1e673:	c9                   	leave  
   1e674:	c3                   	ret    

0001e675 <fl_fputs>:
fl_fputs():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1409
//-----------------------------------------------------------------------------
// fl_fputs: Write a character string to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputs(const char * str, void *f)
{
   1e675:	55                   	push   ebp
   1e676:	89 e5                	mov    ebp,esp
   1e678:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1410
    int len = (int)strlen(str);
   1e67b:	83 ec 0c             	sub    esp,0xc
   1e67e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e681:	e8 ee 93 00 00       	call   27a74 <strlen>
   1e686:	83 c4 10             	add    esp,0x10
   1e689:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1411
    int res = fl_fwrite(str, 1, len, f);
   1e68c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e68f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e692:	6a 01                	push   0x1
   1e694:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e697:	e8 0c fd ff ff       	call   1e3a8 <fl_fwrite>
   1e69c:	83 c4 10             	add    esp,0x10
   1e69f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1413

    if (res == len)
   1e6a2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e6a5:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e6a8:	75 05                	jne    1e6af <fl_fputs+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1414
        return len;
   1e6aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e6ad:	eb 03                	jmp    1e6b2 <fl_fputs+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1416
    else
        return res;
   1e6af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1417
}
   1e6b2:	c9                   	leave  
   1e6b3:	c3                   	ret    

0001e6b4 <fl_remove>:
fl_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1424
//-----------------------------------------------------------------------------
// fl_remove: Remove a file from the filesystem
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
   1e6b4:	55                   	push   ebp
   1e6b5:	89 e5                	mov    ebp,esp
   1e6b7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1426
    FL_FILE* file;
    int res = -1;
   1e6ba:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1428

    FL_LOCK(&_fs);
   1e6c1:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e6c6:	85 c0                	test   eax,eax
   1e6c8:	74 07                	je     1e6d1 <fl_remove+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1428 (discriminator 1)
   1e6ca:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e6cf:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1431

    // Use read_file as this will check if the file is already open!
    file = fl_fopen((char*)filename, "r");
   1e6d1:	83 ec 08             	sub    esp,0x8
   1e6d4:	68 10 3b 08 00       	push   0x83b10
   1e6d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e6dc:	e8 8c f2 ff ff       	call   1d96d <fl_fopen>
   1e6e1:	83 c4 10             	add    esp,0x10
   1e6e4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1432
    if (file)
   1e6e7:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e6eb:	74 54                	je     1e741 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1435
    {
        // Delete allocated space
        if (fatfs_free_cluster_chain(&_fs, file->startcluster))
   1e6ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e6f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1e6f3:	83 ec 08             	sub    esp,0x8
   1e6f6:	50                   	push   eax
   1e6f7:	68 00 91 12 00       	push   0x129100
   1e6fc:	e8 0d 2a 00 00       	call   2110e <fatfs_free_cluster_chain>
   1e701:	83 c4 10             	add    esp,0x10
   1e704:	85 c0                	test   eax,eax
   1e706:	74 39                	je     1e741 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1438
        {
            // Remove directory entries
            if (fatfs_mark_file_deleted(&_fs, file->parentcluster, (char*)file->shortfilename))
   1e708:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e70b:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1e711:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e714:	8b 00                	mov    eax,DWORD PTR [eax]
   1e716:	83 ec 04             	sub    esp,0x4
   1e719:	52                   	push   edx
   1e71a:	50                   	push   eax
   1e71b:	68 00 91 12 00       	push   0x129100
   1e720:	e8 2c da ff ff       	call   1c151 <fatfs_mark_file_deleted>
   1e725:	83 c4 10             	add    esp,0x10
   1e728:	85 c0                	test   eax,eax
   1e72a:	74 15                	je     1e741 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1442
            {
                // Close the file handle (this should not write anything to the file
                // as we have not changed the file since opening it!)
                fl_fclose(file);
   1e72c:	83 ec 0c             	sub    esp,0xc
   1e72f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1e732:	e8 67 f6 ff ff       	call   1dd9e <fl_fclose>
   1e737:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1444

                res = 0;
   1e73a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1449
            }
        }
    }

    FL_UNLOCK(&_fs);
   1e741:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e746:	85 c0                	test   eax,eax
   1e748:	74 07                	je     1e751 <fl_remove+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1449 (discriminator 1)
   1e74a:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e74f:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1451

    return res;
   1e751:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1452
}
   1e754:	c9                   	leave  
   1e755:	c3                   	ret    

0001e756 <fl_createdirectory>:
fl_createdirectory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1459
//-----------------------------------------------------------------------------
// fl_createdirectory: Create a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_createdirectory(const char *path)
{
   1e756:	55                   	push   ebp
   1e757:	89 e5                	mov    ebp,esp
   1e759:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1463
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e75c:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e761:	85 c0                	test   eax,eax
   1e763:	75 05                	jne    1e76a <fl_createdirectory+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1463 (discriminator 1)
   1e765:	e8 dc f0 ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1465

    FL_LOCK(&_fs);
   1e76a:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e76f:	85 c0                	test   eax,eax
   1e771:	74 07                	je     1e77a <fl_createdirectory+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1465 (discriminator 1)
   1e773:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e778:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1466
    res =_create_directory((char*)path);
   1e77a:	83 ec 0c             	sub    esp,0xc
   1e77d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e780:	e8 ec e5 ff ff       	call   1cd71 <_create_directory>
   1e785:	83 c4 10             	add    esp,0x10
   1e788:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1467
    FL_UNLOCK(&_fs);
   1e78b:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e790:	85 c0                	test   eax,eax
   1e792:	74 07                	je     1e79b <fl_createdirectory+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1467 (discriminator 1)
   1e794:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e799:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1469

    return res;
   1e79b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1470
}
   1e79e:	c9                   	leave  
   1e79f:	c3                   	ret    

0001e7a0 <fl_listdirectory>:
fl_listdirectory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1477
//-----------------------------------------------------------------------------
// fl_listdirectory: List a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fl_listdirectory(const char *path)
{
   1e7a0:	55                   	push   ebp
   1e7a1:	89 e5                	mov    ebp,esp
   1e7a3:	56                   	push   esi
   1e7a4:	53                   	push   ebx
   1e7a5:	81 ec c0 00 00 00    	sub    esp,0xc0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1481
    FL_DIR dirstat;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e7ab:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e7b0:	85 c0                	test   eax,eax
   1e7b2:	75 05                	jne    1e7b9 <fl_listdirectory+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1481 (discriminator 1)
   1e7b4:	e8 8d f0 ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1483

    FAT_PRINTF(("\r\nDirectory %s\r\n", path));
   1e7b9:	83 ec 08             	sub    esp,0x8
   1e7bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e7bf:	68 12 3b 08 00       	push   0x83b12
   1e7c4:	e8 da 90 00 00       	call   278a3 <printk>
   1e7c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1484
        FL_LOCK(&_fs);
   1e7cc:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e7d1:	85 c0                	test   eax,eax
   1e7d3:	74 07                	je     1e7dc <fl_listdirectory+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1484 (discriminator 1)
   1e7d5:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e7da:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1487


        if (fl_opendir(path, &dirstat))
   1e7dc:	83 ec 08             	sub    esp,0x8
   1e7df:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e7e2:	50                   	push   eax
   1e7e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e7e6:	e8 ed 00 00 00       	call   1e8d8 <fl_opendir>
   1e7eb:	83 c4 10             	add    esp,0x10
   1e7ee:	85 c0                	test   eax,eax
   1e7f0:	0f 84 ca 00 00 00    	je     1e8c0 <fl_listdirectory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1491
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e7f6:	e9 98 00 00 00       	jmp    1e893 <fl_listdirectory+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1495
        {
#if FATFS_INC_TIME_DATE_SUPPORT
            int d,m,y,h,mn,s;
            fatfs_convert_from_fat_time(dirent.write_time, &h,&m,&s);
   1e7fb:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
   1e7ff:	0f b7 c0             	movzx  eax,ax
   1e802:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1e805:	52                   	push   edx
   1e806:	8d 55 e4             	lea    edx,[ebp-0x1c]
   1e809:	52                   	push   edx
   1e80a:	8d 55 dc             	lea    edx,[ebp-0x24]
   1e80d:	52                   	push   edx
   1e80e:	50                   	push   eax
   1e80f:	e8 07 18 00 00       	call   2001b <fatfs_convert_from_fat_time>
   1e814:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1496
            fatfs_convert_from_fat_date(dirent.write_date, &d,&mn,&y);
   1e817:	0f b7 45 cc          	movzx  eax,WORD PTR [ebp-0x34]
   1e81b:	0f b7 c0             	movzx  eax,ax
   1e81e:	8d 55 e0             	lea    edx,[ebp-0x20]
   1e821:	52                   	push   edx
   1e822:	8d 55 d8             	lea    edx,[ebp-0x28]
   1e825:	52                   	push   edx
   1e826:	8d 55 e8             	lea    edx,[ebp-0x18]
   1e829:	52                   	push   edx
   1e82a:	50                   	push   eax
   1e82b:	e8 40 18 00 00       	call   20070 <fatfs_convert_from_fat_date>
   1e830:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1497
            FAT_PRINTF(("%02d/%02d/%04d  %02d:%02d      ", mn,d,y,h,m));
   1e833:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   1e836:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
   1e839:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1e83c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1e83f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e842:	83 ec 08             	sub    esp,0x8
   1e845:	56                   	push   esi
   1e846:	53                   	push   ebx
   1e847:	51                   	push   ecx
   1e848:	52                   	push   edx
   1e849:	50                   	push   eax
   1e84a:	68 24 3b 08 00       	push   0x83b24
   1e84f:	e8 4f 90 00 00       	call   278a3 <printk>
   1e854:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1500
#endif

            if (dirent.is_dir)
   1e857:	0f b6 45 bc          	movzx  eax,BYTE PTR [ebp-0x44]
   1e85b:	84 c0                	test   al,al
   1e85d:	74 19                	je     1e878 <fl_listdirectory+0xd8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1502
            {
                FAT_PRINTF(("%s <DIR>\r\n", dirent.filename));
   1e85f:	83 ec 08             	sub    esp,0x8
   1e862:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e868:	50                   	push   eax
   1e869:	68 44 3b 08 00       	push   0x83b44
   1e86e:	e8 30 90 00 00       	call   278a3 <printk>
   1e873:	83 c4 10             	add    esp,0x10
   1e876:	eb 1b                	jmp    1e893 <fl_listdirectory+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1506
            }
            else
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
   1e878:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   1e87b:	83 ec 04             	sub    esp,0x4
   1e87e:	50                   	push   eax
   1e87f:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e885:	50                   	push   eax
   1e886:	68 4f 3b 08 00       	push   0x83b4f
   1e88b:	e8 13 90 00 00       	call   278a3 <printk>
   1e890:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1491

        if (fl_opendir(path, &dirstat))
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e893:	83 ec 08             	sub    esp,0x8
   1e896:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e89c:	50                   	push   eax
   1e89d:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e8a0:	50                   	push   eax
   1e8a1:	e8 e9 00 00 00       	call   1e98f <fl_readdir>
   1e8a6:	83 c4 10             	add    esp,0x10
   1e8a9:	85 c0                	test   eax,eax
   1e8ab:	0f 84 4a ff ff ff    	je     1e7fb <fl_listdirectory+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1510
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
            }
        }

        fl_closedir(&dirstat);
   1e8b1:	83 ec 0c             	sub    esp,0xc
   1e8b4:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e8b7:	50                   	push   eax
   1e8b8:	e8 3a 01 00 00       	call   1e9f7 <fl_closedir>
   1e8bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1513
    }

    FL_UNLOCK(&_fs);
   1e8c0:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e8c5:	85 c0                	test   eax,eax
   1e8c7:	74 07                	je     1e8d0 <fl_listdirectory+0x130>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1513 (discriminator 1)
   1e8c9:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e8ce:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1514
}
   1e8d0:	90                   	nop
   1e8d1:	8d 65 f8             	lea    esp,[ebp-0x8]
   1e8d4:	5b                   	pop    ebx
   1e8d5:	5e                   	pop    esi
   1e8d6:	5d                   	pop    ebp
   1e8d7:	c3                   	ret    

0001e8d8 <fl_opendir>:
fl_opendir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1521
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
   1e8d8:	55                   	push   ebp
   1e8d9:	89 e5                	mov    ebp,esp
   1e8db:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1523
    int levels;
    int res = 1;
   1e8de:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1524
    uint32 cluster = FAT32_INVALID_CLUSTER;
   1e8e5:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1527

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e8ec:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e8f1:	85 c0                	test   eax,eax
   1e8f3:	75 05                	jne    1e8fa <fl_opendir+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1527 (discriminator 1)
   1e8f5:	e8 4c ef ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1529

    FL_LOCK(&_fs);
   1e8fa:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e8ff:	85 c0                	test   eax,eax
   1e901:	74 07                	je     1e90a <fl_opendir+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1529 (discriminator 1)
   1e903:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e908:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1531

    levels = fatfs_total_path_levels((char*)path) + 1;
   1e90a:	83 ec 0c             	sub    esp,0xc
   1e90d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e910:	e8 5b 18 00 00       	call   20170 <fatfs_total_path_levels>
   1e915:	83 c4 10             	add    esp,0x10
   1e918:	83 c0 01             	add    eax,0x1
   1e91b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1534

    // If path is in the root dir
    if (levels == 0)
   1e91e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e922:	75 15                	jne    1e939 <fl_opendir+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1535
        cluster = fatfs_get_root_cluster(&_fs);
   1e924:	83 ec 0c             	sub    esp,0xc
   1e927:	68 00 91 12 00       	push   0x129100
   1e92c:	e8 54 d2 ff ff       	call   1bb85 <fatfs_get_root_cluster>
   1e931:	83 c4 10             	add    esp,0x10
   1e934:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   1e937:	eb 15                	jmp    1e94e <fl_opendir+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1538
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);
   1e939:	83 ec 08             	sub    esp,0x8
   1e93c:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e93f:	50                   	push   eax
   1e940:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e943:	e8 3f e3 ff ff       	call   1cc87 <_open_directory>
   1e948:	83 c4 10             	add    esp,0x10
   1e94b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1540

    if (res)
   1e94e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e952:	74 17                	je     1e96b <fl_opendir+0x93>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1541
        fatfs_list_directory_start(&_fs, dir, cluster);
   1e954:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e957:	83 ec 04             	sub    esp,0x4
   1e95a:	50                   	push   eax
   1e95b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e95e:	68 00 91 12 00       	push   0x129100
   1e963:	e8 27 d9 ff ff       	call   1c28f <fatfs_list_directory_start>
   1e968:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1543

    FL_UNLOCK(&_fs);
   1e96b:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e970:	85 c0                	test   eax,eax
   1e972:	74 07                	je     1e97b <fl_opendir+0xa3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1543 (discriminator 1)
   1e974:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e979:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
   1e97b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e97e:	83 f8 ff             	cmp    eax,0xffffffff
   1e981:	74 05                	je     1e988 <fl_opendir+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 1)
   1e983:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e986:	eb 05                	jmp    1e98d <fl_opendir+0xb5>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 2)
   1e988:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1546
}
   1e98d:	c9                   	leave  
   1e98e:	c3                   	ret    

0001e98f <fl_readdir>:
fl_readdir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1553
//-----------------------------------------------------------------------------
// fl_readdir: Get next item in directory
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
   1e98f:	55                   	push   ebp
   1e990:	89 e5                	mov    ebp,esp
   1e992:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1554
    int res = 0;
   1e995:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1557

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e99c:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e9a1:	85 c0                	test   eax,eax
   1e9a3:	75 05                	jne    1e9aa <fl_readdir+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1557 (discriminator 1)
   1e9a5:	e8 9c ee ff ff       	call   1d846 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1559

    FL_LOCK(&_fs);
   1e9aa:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e9af:	85 c0                	test   eax,eax
   1e9b1:	74 07                	je     1e9ba <fl_readdir+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1559 (discriminator 1)
   1e9b3:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e9b8:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1561

    res = fatfs_list_directory_next(&_fs, dirls, entry);
   1e9ba:	83 ec 04             	sub    esp,0x4
   1e9bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e9c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e9c3:	68 00 91 12 00       	push   0x129100
   1e9c8:	e8 e1 d8 ff ff       	call   1c2ae <fatfs_list_directory_next>
   1e9cd:	83 c4 10             	add    esp,0x10
   1e9d0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1563

    FL_UNLOCK(&_fs);
   1e9d3:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e9d8:	85 c0                	test   eax,eax
   1e9da:	74 07                	je     1e9e3 <fl_readdir+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1563 (discriminator 1)
   1e9dc:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e9e1:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565

    return res ? 0 : -1;
   1e9e3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e9e7:	74 07                	je     1e9f0 <fl_readdir+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 1)
   1e9e9:	b8 00 00 00 00       	mov    eax,0x0
   1e9ee:	eb 05                	jmp    1e9f5 <fl_readdir+0x66>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 2)
   1e9f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1566 (discriminator 5)
}
   1e9f5:	c9                   	leave  
   1e9f6:	c3                   	ret    

0001e9f7 <fl_closedir>:
fl_closedir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1573
//-----------------------------------------------------------------------------
// fl_closedir: Close directory after listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_closedir(FL_DIR* dir)
{
   1e9f7:	55                   	push   ebp
   1e9f8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1575
    // Not used
    return 0;
   1e9fa:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1576
}
   1e9ff:	5d                   	pop    ebp
   1ea00:	c3                   	ret    

0001ea01 <fl_is_dir>:
fl_is_dir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1583
//-----------------------------------------------------------------------------
// fl_is_dir: Is this a directory?
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_is_dir(const char *path)
{
   1ea01:	55                   	push   ebp
   1ea02:	89 e5                	mov    ebp,esp
   1ea04:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1584
    int res = 0;
   1ea07:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1587
    FL_DIR dir;

    if (fl_opendir(path, &dir))
   1ea0e:	83 ec 08             	sub    esp,0x8
   1ea11:	8d 45 e8             	lea    eax,[ebp-0x18]
   1ea14:	50                   	push   eax
   1ea15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ea18:	e8 bb fe ff ff       	call   1e8d8 <fl_opendir>
   1ea1d:	83 c4 10             	add    esp,0x10
   1ea20:	85 c0                	test   eax,eax
   1ea22:	74 16                	je     1ea3a <fl_is_dir+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1589
    {
        res = 1;
   1ea24:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1590
        fl_closedir(&dir);
   1ea2b:	83 ec 0c             	sub    esp,0xc
   1ea2e:	8d 45 e8             	lea    eax,[ebp-0x18]
   1ea31:	50                   	push   eax
   1ea32:	e8 c0 ff ff ff       	call   1e9f7 <fl_closedir>
   1ea37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1593
    }

    return res;
   1ea3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1594
}
   1ea3d:	c9                   	leave  
   1ea3e:	c3                   	ret    

0001ea3f <fl_format>:
fl_format():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1601
//-----------------------------------------------------------------------------
// fl_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
#if FATFS_INC_FORMAT_SUPPORT
int fl_format(uint32 volume_sectors, const char *name)
{
   1ea3f:	55                   	push   ebp
   1ea40:	89 e5                	mov    ebp,esp
   1ea42:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1602
    return fatfs_format(&_fs, volume_sectors, name);
   1ea45:	83 ec 04             	sub    esp,0x4
   1ea48:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ea4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ea4e:	68 00 91 12 00       	push   0x129100
   1ea53:	e8 8a 0b 00 00       	call   1f5e2 <fatfs_format>
   1ea58:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1603
}
   1ea5b:	c9                   	leave  
   1ea5c:	c3                   	ret    
   1ea5d:	66 90                	xchg   ax,ax
   1ea5f:	90                   	nop

0001ea60 <fatfs_calc_cluster_size>:
fatfs_calc_cluster_size():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:78

//-----------------------------------------------------------------------------
// fatfs_calc_cluster_size: Calculate what cluster size should be used
//-----------------------------------------------------------------------------
static uint8 fatfs_calc_cluster_size(uint32 sectors, int is_fat32)
{
   1ea60:	55                   	push   ebp
   1ea61:	89 e5                	mov    ebp,esp
   1ea63:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:81
    int i;

    if (!is_fat32)
   1ea66:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ea6a:	75 3a                	jne    1eaa6 <fatfs_calc_cluster_size+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1ea6c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1ea73:	eb 20                	jmp    1ea95 <fatfs_calc_cluster_size+0x35>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:84
            if (sectors <= _cluster_size_table16[i].sectors)
   1ea75:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1ea78:	8b 04 c5 80 e1 02 00 	mov    eax,DWORD PTR [eax*8+0x2e180]
   1ea7f:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1ea82:	72 0d                	jb     1ea91 <fatfs_calc_cluster_size+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:85
                return _cluster_size_table16[i].sectors_per_cluster;
   1ea84:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1ea87:	0f b6 04 c5 84 e1 02 	movzx  eax,BYTE PTR [eax*8+0x2e184]
   1ea8e:	00 
   1ea8f:	eb 52                	jmp    1eae3 <fatfs_calc_cluster_size+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83 (discriminator 2)
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1ea91:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83 (discriminator 1)
   1ea95:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1ea98:	0f b6 04 c5 84 e1 02 	movzx  eax,BYTE PTR [eax*8+0x2e184]
   1ea9f:	00 
   1eaa0:	84 c0                	test   al,al
   1eaa2:	75 d1                	jne    1ea75 <fatfs_calc_cluster_size+0x15>
   1eaa4:	eb 38                	jmp    1eade <fatfs_calc_cluster_size+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1eaa6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1eaad:	eb 20                	jmp    1eacf <fatfs_calc_cluster_size+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:90
            if (sectors <= _cluster_size_table32[i].sectors)
   1eaaf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1eab2:	8b 04 c5 c0 e1 02 00 	mov    eax,DWORD PTR [eax*8+0x2e1c0]
   1eab9:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1eabc:	72 0d                	jb     1eacb <fatfs_calc_cluster_size+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:91
                return _cluster_size_table32[i].sectors_per_cluster;
   1eabe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1eac1:	0f b6 04 c5 c4 e1 02 	movzx  eax,BYTE PTR [eax*8+0x2e1c4]
   1eac8:	00 
   1eac9:	eb 18                	jmp    1eae3 <fatfs_calc_cluster_size+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89 (discriminator 2)
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1eacb:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89 (discriminator 1)
   1eacf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1ead2:	0f b6 04 c5 c4 e1 02 	movzx  eax,BYTE PTR [eax*8+0x2e1c4]
   1ead9:	00 
   1eada:	84 c0                	test   al,al
   1eadc:	75 d1                	jne    1eaaf <fatfs_calc_cluster_size+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:94
            if (sectors <= _cluster_size_table32[i].sectors)
                return _cluster_size_table32[i].sectors_per_cluster;
    }

    return 0;
   1eade:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:95
}
   1eae3:	c9                   	leave  
   1eae4:	c3                   	ret    

0001eae5 <fatfs_erase_sectors>:
fatfs_erase_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:100
//-----------------------------------------------------------------------------
// fatfs_erase_sectors: Erase a number of sectors
//-----------------------------------------------------------------------------
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
   1eae5:	55                   	push   ebp
   1eae6:	89 e5                	mov    ebp,esp
   1eae8:	53                   	push   ebx
   1eae9:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:104
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1eaec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaef:	83 c0 44             	add    eax,0x44
   1eaf2:	83 ec 04             	sub    esp,0x4
   1eaf5:	68 00 02 00 00       	push   0x200
   1eafa:	6a 00                	push   0x0
   1eafc:	50                   	push   eax
   1eafd:	e8 3b 6b 00 00       	call   2563d <memset>
   1eb02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106

    for (i=0;i<count;i++)
   1eb05:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1eb0c:	eb 2f                	jmp    1eb3d <fatfs_erase_sectors+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:107
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
   1eb0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb11:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1eb14:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1eb17:	8d 4a 44             	lea    ecx,[edx+0x44]
   1eb1a:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   1eb1d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1eb20:	01 da                	add    edx,ebx
   1eb22:	83 ec 04             	sub    esp,0x4
   1eb25:	6a 01                	push   0x1
   1eb27:	51                   	push   ecx
   1eb28:	52                   	push   edx
   1eb29:	ff d0                	call   eax
   1eb2b:	83 c4 10             	add    esp,0x10
   1eb2e:	85 c0                	test   eax,eax
   1eb30:	75 07                	jne    1eb39 <fatfs_erase_sectors+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:108
            return 0;
   1eb32:	b8 00 00 00 00       	mov    eax,0x0
   1eb37:	eb 11                	jmp    1eb4a <fatfs_erase_sectors+0x65>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106 (discriminator 2)
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
   1eb39:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106 (discriminator 1)
   1eb3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1eb40:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1eb43:	7c c9                	jl     1eb0e <fatfs_erase_sectors+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:110
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1eb45:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:111
}
   1eb4a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1eb4d:	c9                   	leave  
   1eb4e:	c3                   	ret    

0001eb4f <fatfs_create_boot_sector>:
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:116
//-----------------------------------------------------------------------------
// fatfs_create_boot_sector: Create the boot sector
//-----------------------------------------------------------------------------
static int fatfs_create_boot_sector(struct fatfs *fs, uint32 boot_sector_lba, uint32 vol_sectors, const char *name, int is_fat32)
{
   1eb4f:	55                   	push   ebp
   1eb50:	89 e5                	mov    ebp,esp
   1eb52:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:121
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1eb55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb58:	83 c0 44             	add    eax,0x44
   1eb5b:	83 ec 04             	sub    esp,0x4
   1eb5e:	68 00 02 00 00       	push   0x200
   1eb63:	6a 00                	push   0x0
   1eb65:	50                   	push   eax
   1eb66:	e8 d2 6a 00 00       	call   2563d <memset>
   1eb6b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:124

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
   1eb6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb71:	c6 40 44 eb          	mov    BYTE PTR [eax+0x44],0xeb
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:125
    fs->currentsector.sector[1] = 0x3C;
   1eb75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb78:	c6 40 45 3c          	mov    BYTE PTR [eax+0x45],0x3c
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:126
    fs->currentsector.sector[2] = 0x90;
   1eb7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb7f:	c6 40 46 90          	mov    BYTE PTR [eax+0x46],0x90
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:127
    fs->currentsector.sector[3] = 0x4D;
   1eb83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb86:	c6 40 47 4d          	mov    BYTE PTR [eax+0x47],0x4d
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:128
    fs->currentsector.sector[4] = 0x53;
   1eb8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb8d:	c6 40 48 53          	mov    BYTE PTR [eax+0x48],0x53
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:129
    fs->currentsector.sector[5] = 0x44;
   1eb91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb94:	c6 40 49 44          	mov    BYTE PTR [eax+0x49],0x44
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:130
    fs->currentsector.sector[6] = 0x4F;
   1eb98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb9b:	c6 40 4a 4f          	mov    BYTE PTR [eax+0x4a],0x4f
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:131
    fs->currentsector.sector[7] = 0x53;
   1eb9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eba2:	c6 40 4b 53          	mov    BYTE PTR [eax+0x4b],0x53
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:132
    fs->currentsector.sector[8] = 0x35;
   1eba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eba9:	c6 40 4c 35          	mov    BYTE PTR [eax+0x4c],0x35
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:133
    fs->currentsector.sector[9] = 0x2E;
   1ebad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebb0:	c6 40 4d 2e          	mov    BYTE PTR [eax+0x4d],0x2e
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:134
    fs->currentsector.sector[10] = 0x30;
   1ebb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebb7:	c6 40 4e 30          	mov    BYTE PTR [eax+0x4e],0x30
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:137

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
   1ebbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebbe:	c6 40 4f 00          	mov    BYTE PTR [eax+0x4f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:138
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
   1ebc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebc5:	c6 40 50 02          	mov    BYTE PTR [eax+0x50],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:141

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
   1ebc9:	83 ec 08             	sub    esp,0x8
   1ebcc:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   1ebcf:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1ebd2:	e8 89 fe ff ff       	call   1ea60 <fatfs_calc_cluster_size>
   1ebd7:	83 c4 10             	add    esp,0x10
   1ebda:	89 c2                	mov    edx,eax
   1ebdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebdf:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:142
    if (!fs->sectors_per_cluster)
   1ebe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebe4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ebe7:	84 c0                	test   al,al
   1ebe9:	75 0a                	jne    1ebf5 <fatfs_create_boot_sector+0xa6>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:143
        return 0; // Invalid disk size
   1ebeb:	b8 00 00 00 00       	mov    eax,0x0
   1ebf0:	e9 dc 04 00 00       	jmp    1f0d1 <fatfs_create_boot_sector+0x582>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:146

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
   1ebf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebf8:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   1ebfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebfe:	88 50 51             	mov    BYTE PTR [eax+0x51],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:149

    // Reserved Sectors
    if (!is_fat32)
   1ec01:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1ec05:	75 0b                	jne    1ec12 <fatfs_create_boot_sector+0xc3>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:150
        fs->reserved_sectors = 8;
   1ec07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec0a:	66 c7 40 2a 08 00    	mov    WORD PTR [eax+0x2a],0x8
   1ec10:	eb 09                	jmp    1ec1b <fatfs_create_boot_sector+0xcc>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:152
    else
        fs->reserved_sectors = 32;
   1ec12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec15:	66 c7 40 2a 20 00    	mov    WORD PTR [eax+0x2a],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:153
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
   1ec1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec1e:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1ec22:	89 c2                	mov    edx,eax
   1ec24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec27:	88 50 52             	mov    BYTE PTR [eax+0x52],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:154
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
   1ec2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec2d:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1ec31:	66 c1 e8 08          	shr    ax,0x8
   1ec35:	89 c2                	mov    edx,eax
   1ec37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec3a:	88 50 53             	mov    BYTE PTR [eax+0x53],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:157

    // Number of FATS
    fs->num_of_fats = 2;
   1ec3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec40:	c6 40 2c 02          	mov    BYTE PTR [eax+0x2c],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:158
    fs->currentsector.sector[16] = fs->num_of_fats;
   1ec44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec47:	0f b6 50 2c          	movzx  edx,BYTE PTR [eax+0x2c]
   1ec4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec4e:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:161

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
   1ec51:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1ec55:	75 2d                	jne    1ec84 <fatfs_create_boot_sector+0x135>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:163
    {
        fs->root_entry_count = 512;
   1ec57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec5a:	66 c7 40 28 00 02    	mov    WORD PTR [eax+0x28],0x200
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:164
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
   1ec60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec63:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1ec67:	89 c2                	mov    edx,eax
   1ec69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec6c:	88 50 55             	mov    BYTE PTR [eax+0x55],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:165
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
   1ec6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec72:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1ec76:	66 c1 e8 08          	shr    ax,0x8
   1ec7a:	89 c2                	mov    edx,eax
   1ec7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec7f:	88 50 56             	mov    BYTE PTR [eax+0x56],dl
   1ec82:	eb 17                	jmp    1ec9b <fatfs_create_boot_sector+0x14c>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:169
    }
    else
    {
        fs->root_entry_count = 0;
   1ec84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec87:	66 c7 40 28 00 00    	mov    WORD PTR [eax+0x28],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:170
        fs->currentsector.sector[17] = 0;
   1ec8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec90:	c6 40 55 00          	mov    BYTE PTR [eax+0x55],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:171
        fs->currentsector.sector[18] = 0;
   1ec94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec97:	c6 40 56 00          	mov    BYTE PTR [eax+0x56],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:175
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
   1ec9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec9e:	c6 40 57 00          	mov    BYTE PTR [eax+0x57],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:176
    fs->currentsector.sector[20] = 0x00;
   1eca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eca5:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:179

    // Media type
    fs->currentsector.sector[21] = 0xF8;
   1eca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecac:	c6 40 59 f8          	mov    BYTE PTR [eax+0x59],0xf8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:183


    // FAT16 BS Details
    if (!is_fat32)
   1ecb0:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1ecb4:	0f 85 8c 01 00 00    	jne    1ee46 <fatfs_create_boot_sector+0x2f7>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:186
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1ecba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecbd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ecc0:	0f b6 c8             	movzx  ecx,al
   1ecc3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ecc6:	ba 00 00 00 00       	mov    edx,0x0
   1eccb:	f7 f1                	div    ecx
   1eccd:	83 c0 01             	add    eax,0x1
   1ecd0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:187
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
   1ecd3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ecd6:	c1 e8 08             	shr    eax,0x8
   1ecd9:	8d 50 01             	lea    edx,[eax+0x1]
   1ecdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecdf:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:188
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
   1ece2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ece5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ece8:	89 c2                	mov    edx,eax
   1ecea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eced:	88 50 5a             	mov    BYTE PTR [eax+0x5a],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:189
        fs->currentsector.sector[23] = (uint8)((fs->fat_sectors >> 8) & 0xFF);
   1ecf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecf3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ecf6:	c1 e8 08             	shr    eax,0x8
   1ecf9:	89 c2                	mov    edx,eax
   1ecfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecfe:	88 50 5b             	mov    BYTE PTR [eax+0x5b],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:192

        // Sectors per track
        fs->currentsector.sector[24] = 0x00;
   1ed01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed04:	c6 40 5c 00          	mov    BYTE PTR [eax+0x5c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:193
        fs->currentsector.sector[25] = 0x00;
   1ed08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed0b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:196

        // Heads
        fs->currentsector.sector[26] = 0x00;
   1ed0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed12:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:197
        fs->currentsector.sector[27] = 0x00;
   1ed16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed19:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:200

        // Hidden sectors
        fs->currentsector.sector[28] = 0x20;
   1ed1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed20:	c6 40 60 20          	mov    BYTE PTR [eax+0x60],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:201
        fs->currentsector.sector[29] = 0x00;
   1ed24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed27:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:202
        fs->currentsector.sector[30] = 0x00;
   1ed2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed2e:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:203
        fs->currentsector.sector[31] = 0x00;
   1ed32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed35:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:206

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1ed39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ed3c:	89 c2                	mov    edx,eax
   1ed3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed41:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:207
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1ed44:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ed47:	c1 e8 08             	shr    eax,0x8
   1ed4a:	89 c2                	mov    edx,eax
   1ed4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed4f:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:208
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1ed52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ed55:	c1 e8 10             	shr    eax,0x10
   1ed58:	89 c2                	mov    edx,eax
   1ed5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed5d:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:209
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1ed60:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ed63:	c1 e8 18             	shr    eax,0x18
   1ed66:	89 c2                	mov    edx,eax
   1ed68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed6b:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:212

        // Drive number
        fs->currentsector.sector[36] = 0x00;
   1ed6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed71:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:215

        // Reserved
        fs->currentsector.sector[37] = 0x00;
   1ed75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed78:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:218

        // Boot signature
        fs->currentsector.sector[38] = 0x29;
   1ed7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed7f:	c6 40 6a 29          	mov    BYTE PTR [eax+0x6a],0x29
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:221

        // Volume ID
        fs->currentsector.sector[39] = 0x12;
   1ed83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed86:	c6 40 6b 12          	mov    BYTE PTR [eax+0x6b],0x12
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:222
        fs->currentsector.sector[40] = 0x34;
   1ed8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed8d:	c6 40 6c 34          	mov    BYTE PTR [eax+0x6c],0x34
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:223
        fs->currentsector.sector[41] = 0x56;
   1ed91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed94:	c6 40 6d 56          	mov    BYTE PTR [eax+0x6d],0x56
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:224
        fs->currentsector.sector[42] = 0x78;
   1ed98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed9b:	c6 40 6e 78          	mov    BYTE PTR [eax+0x6e],0x78
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227

        // Volume name
        for (i=0;i<11;i++)
   1ed9f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1eda6:	eb 41                	jmp    1ede9 <fatfs_create_boot_sector+0x29a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:229
        {
            if (i < (int)strlen(name))
   1eda8:	83 ec 0c             	sub    esp,0xc
   1edab:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1edae:	e8 c1 8c 00 00       	call   27a74 <strlen>
   1edb3:	83 c4 10             	add    esp,0x10
   1edb6:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1edb9:	7e 1c                	jle    1edd7 <fatfs_create_boot_sector+0x288>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:230
                fs->currentsector.sector[i+43] = name[i];
   1edbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1edbe:	8d 50 2b             	lea    edx,[eax+0x2b]
   1edc1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1edc4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1edc7:	01 c8                	add    eax,ecx
   1edc9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1edcc:	89 c1                	mov    ecx,eax
   1edce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edd1:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1edd5:	eb 0e                	jmp    1ede5 <fatfs_create_boot_sector+0x296>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:232
            else
                fs->currentsector.sector[i+43] = ' ';
   1edd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1edda:	8d 50 2b             	lea    edx,[eax+0x2b]
   1eddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ede0:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227 (discriminator 2)
        fs->currentsector.sector[40] = 0x34;
        fs->currentsector.sector[41] = 0x56;
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1ede5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227 (discriminator 1)
   1ede9:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1eded:	7e b9                	jle    1eda8 <fatfs_create_boot_sector+0x259>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:236
            else
                fs->currentsector.sector[i+43] = ' ';
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
   1edef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edf2:	c6 40 7a 46          	mov    BYTE PTR [eax+0x7a],0x46
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:237
        fs->currentsector.sector[55] = 'A';
   1edf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edf9:	c6 40 7b 41          	mov    BYTE PTR [eax+0x7b],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:238
        fs->currentsector.sector[56] = 'T';
   1edfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee00:	c6 40 7c 54          	mov    BYTE PTR [eax+0x7c],0x54
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:239
        fs->currentsector.sector[57] = '1';
   1ee04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee07:	c6 40 7d 31          	mov    BYTE PTR [eax+0x7d],0x31
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:240
        fs->currentsector.sector[58] = '6';
   1ee0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee0e:	c6 40 7e 36          	mov    BYTE PTR [eax+0x7e],0x36
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:241
        fs->currentsector.sector[59] = ' ';
   1ee12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee15:	c6 40 7f 20          	mov    BYTE PTR [eax+0x7f],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:242
        fs->currentsector.sector[60] = ' ';
   1ee19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee1c:	c6 80 80 00 00 00 20 	mov    BYTE PTR [eax+0x80],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:243
        fs->currentsector.sector[61] = ' ';
   1ee23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee26:	c6 80 81 00 00 00 20 	mov    BYTE PTR [eax+0x81],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:246

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1ee2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee30:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:247
        fs->currentsector.sector[511] = 0xAA;
   1ee37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee3a:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
   1ee41:	e9 61 02 00 00       	jmp    1f0a7 <fatfs_create_boot_sector+0x558>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:253
    }
    // FAT32 BS Details
    else
    {
        // Count of sectors used by the FAT table (FAT16 only)
        fs->currentsector.sector[22] = 0;
   1ee46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee49:	c6 40 5a 00          	mov    BYTE PTR [eax+0x5a],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:254
        fs->currentsector.sector[23] = 0;
   1ee4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee50:	c6 40 5b 00          	mov    BYTE PTR [eax+0x5b],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:257

        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
   1ee54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee57:	c6 40 5c 3f          	mov    BYTE PTR [eax+0x5c],0x3f
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:258
        fs->currentsector.sector[25] = 0x00;
   1ee5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee5e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:261

        // Heads (default)
        fs->currentsector.sector[26] = 0xFF;
   1ee62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee65:	c6 40 5e ff          	mov    BYTE PTR [eax+0x5e],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:262
        fs->currentsector.sector[27] = 0x00;
   1ee69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee6c:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:265

        // Hidden sectors
        fs->currentsector.sector[28] = 0x00;
   1ee70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee73:	c6 40 60 00          	mov    BYTE PTR [eax+0x60],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:266
        fs->currentsector.sector[29] = 0x00;
   1ee77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee7a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:267
        fs->currentsector.sector[30] = 0x00;
   1ee7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee81:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:268
        fs->currentsector.sector[31] = 0x00;
   1ee85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee88:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:271

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1ee8c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ee8f:	89 c2                	mov    edx,eax
   1ee91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee94:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:272
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1ee97:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ee9a:	c1 e8 08             	shr    eax,0x8
   1ee9d:	89 c2                	mov    edx,eax
   1ee9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eea2:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:273
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1eea5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1eea8:	c1 e8 10             	shr    eax,0x10
   1eeab:	89 c2                	mov    edx,eax
   1eead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eeb0:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:274
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1eeb3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1eeb6:	c1 e8 18             	shr    eax,0x18
   1eeb9:	89 c2                	mov    edx,eax
   1eebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eebe:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:276

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1eec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eec4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1eec7:	0f b6 c8             	movzx  ecx,al
   1eeca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1eecd:	ba 00 00 00 00       	mov    edx,0x0
   1eed2:	f7 f1                	div    ecx
   1eed4:	83 c0 01             	add    eax,0x1
   1eed7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:277
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;
   1eeda:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1eedd:	c1 e8 07             	shr    eax,0x7
   1eee0:	8d 50 01             	lea    edx,[eax+0x1]
   1eee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eee6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:280

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
   1eee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eeec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1eeef:	89 c2                	mov    edx,eax
   1eef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eef4:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:281
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
   1eef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eefa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1eefd:	c1 e8 08             	shr    eax,0x8
   1ef00:	89 c2                	mov    edx,eax
   1ef02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef05:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:282
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
   1ef08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ef0e:	c1 e8 10             	shr    eax,0x10
   1ef11:	89 c2                	mov    edx,eax
   1ef13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef16:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:283
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
   1ef19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef1c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ef1f:	c1 e8 18             	shr    eax,0x18
   1ef22:	89 c2                	mov    edx,eax
   1ef24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef27:	88 50 6b             	mov    BYTE PTR [eax+0x6b],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:286

        // BPB_ExtFlags
        fs->currentsector.sector[40] = 0;
   1ef2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef2d:	c6 40 6c 00          	mov    BYTE PTR [eax+0x6c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:287
        fs->currentsector.sector[41] = 0;
   1ef31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef34:	c6 40 6d 00          	mov    BYTE PTR [eax+0x6d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:290

        // BPB_FSVer
        fs->currentsector.sector[42] = 0;
   1ef38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef3b:	c6 40 6e 00          	mov    BYTE PTR [eax+0x6e],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:291
        fs->currentsector.sector[43] = 0;
   1ef3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef42:	c6 40 6f 00          	mov    BYTE PTR [eax+0x6f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:294

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
   1ef46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ef4c:	89 c2                	mov    edx,eax
   1ef4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef51:	88 50 70             	mov    BYTE PTR [eax+0x70],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:295
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
   1ef54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ef5a:	c1 e8 08             	shr    eax,0x8
   1ef5d:	89 c2                	mov    edx,eax
   1ef5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef62:	88 50 71             	mov    BYTE PTR [eax+0x71],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:296
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
   1ef65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ef6b:	c1 e8 10             	shr    eax,0x10
   1ef6e:	89 c2                	mov    edx,eax
   1ef70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef73:	88 50 72             	mov    BYTE PTR [eax+0x72],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:297
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);
   1ef76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ef7c:	c1 e8 18             	shr    eax,0x18
   1ef7f:	89 c2                	mov    edx,eax
   1ef81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef84:	88 50 73             	mov    BYTE PTR [eax+0x73],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:300

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
   1ef87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef8a:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1ef8e:	89 c2                	mov    edx,eax
   1ef90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef93:	88 50 74             	mov    BYTE PTR [eax+0x74],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:301
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);
   1ef96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef99:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1ef9d:	66 c1 e8 08          	shr    ax,0x8
   1efa1:	89 c2                	mov    edx,eax
   1efa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efa6:	88 50 75             	mov    BYTE PTR [eax+0x75],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:304

        // BPB_BkBootSec
        fs->currentsector.sector[50] = 6;
   1efa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efac:	c6 40 76 06          	mov    BYTE PTR [eax+0x76],0x6
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:305
        fs->currentsector.sector[51] = 0;
   1efb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efb3:	c6 40 77 00          	mov    BYTE PTR [eax+0x77],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:308

        // Drive number
        fs->currentsector.sector[64] = 0x00;
   1efb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efba:	c6 80 84 00 00 00 00 	mov    BYTE PTR [eax+0x84],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:311

        // Boot signature
        fs->currentsector.sector[66] = 0x29;
   1efc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efc4:	c6 80 86 00 00 00 29 	mov    BYTE PTR [eax+0x86],0x29
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:314

        // Volume ID
        fs->currentsector.sector[67] = 0x12;
   1efcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efce:	c6 80 87 00 00 00 12 	mov    BYTE PTR [eax+0x87],0x12
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:315
        fs->currentsector.sector[68] = 0x34;
   1efd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efd8:	c6 80 88 00 00 00 34 	mov    BYTE PTR [eax+0x88],0x34
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:316
        fs->currentsector.sector[69] = 0x56;
   1efdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efe2:	c6 80 89 00 00 00 56 	mov    BYTE PTR [eax+0x89],0x56
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:317
        fs->currentsector.sector[70] = 0x78;
   1efe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efec:	c6 80 8a 00 00 00 78 	mov    BYTE PTR [eax+0x8a],0x78
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320

        // Volume name
        for (i=0;i<11;i++)
   1eff3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1effa:	eb 41                	jmp    1f03d <fatfs_create_boot_sector+0x4ee>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:322
        {
            if (i < (int)strlen(name))
   1effc:	83 ec 0c             	sub    esp,0xc
   1efff:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1f002:	e8 6d 8a 00 00       	call   27a74 <strlen>
   1f007:	83 c4 10             	add    esp,0x10
   1f00a:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1f00d:	7e 1c                	jle    1f02b <fatfs_create_boot_sector+0x4dc>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:323
                fs->currentsector.sector[i+71] = name[i];
   1f00f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f012:	8d 50 47             	lea    edx,[eax+0x47]
   1f015:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1f018:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f01b:	01 c8                	add    eax,ecx
   1f01d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f020:	89 c1                	mov    ecx,eax
   1f022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f025:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1f029:	eb 0e                	jmp    1f039 <fatfs_create_boot_sector+0x4ea>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:325
            else
                fs->currentsector.sector[i+71] = ' ';
   1f02b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f02e:	8d 50 47             	lea    edx,[eax+0x47]
   1f031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f034:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320 (discriminator 2)
        fs->currentsector.sector[68] = 0x34;
        fs->currentsector.sector[69] = 0x56;
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1f039:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320 (discriminator 1)
   1f03d:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1f041:	7e b9                	jle    1effc <fatfs_create_boot_sector+0x4ad>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:329
            else
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
   1f043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f046:	c6 80 96 00 00 00 46 	mov    BYTE PTR [eax+0x96],0x46
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:330
        fs->currentsector.sector[83] = 'A';
   1f04d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f050:	c6 80 97 00 00 00 41 	mov    BYTE PTR [eax+0x97],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:331
        fs->currentsector.sector[84] = 'T';
   1f057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f05a:	c6 80 98 00 00 00 54 	mov    BYTE PTR [eax+0x98],0x54
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:332
        fs->currentsector.sector[85] = '3';
   1f061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f064:	c6 80 99 00 00 00 33 	mov    BYTE PTR [eax+0x99],0x33
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:333
        fs->currentsector.sector[86] = '2';
   1f06b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f06e:	c6 80 9a 00 00 00 32 	mov    BYTE PTR [eax+0x9a],0x32
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:334
        fs->currentsector.sector[87] = ' ';
   1f075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f078:	c6 80 9b 00 00 00 20 	mov    BYTE PTR [eax+0x9b],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:335
        fs->currentsector.sector[88] = ' ';
   1f07f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f082:	c6 80 9c 00 00 00 20 	mov    BYTE PTR [eax+0x9c],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:336
        fs->currentsector.sector[89] = ' ';
   1f089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f08c:	c6 80 9d 00 00 00 20 	mov    BYTE PTR [eax+0x9d],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:339

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1f093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f096:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:340
        fs->currentsector.sector[511] = 0xAA;
   1f09d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0a0:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:343
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   1f0a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f0ad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f0b0:	83 c2 44             	add    edx,0x44
   1f0b3:	83 ec 04             	sub    esp,0x4
   1f0b6:	6a 01                	push   0x1
   1f0b8:	52                   	push   edx
   1f0b9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f0bc:	ff d0                	call   eax
   1f0be:	83 c4 10             	add    esp,0x10
   1f0c1:	85 c0                	test   eax,eax
   1f0c3:	74 07                	je     1f0cc <fatfs_create_boot_sector+0x57d>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:344
        return 1;
   1f0c5:	b8 01 00 00 00       	mov    eax,0x1
   1f0ca:	eb 05                	jmp    1f0d1 <fatfs_create_boot_sector+0x582>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:346
    else
        return 0;
   1f0cc:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:347
}
   1f0d1:	c9                   	leave  
   1f0d2:	c3                   	ret    

0001f0d3 <fatfs_create_fsinfo_sector>:
fatfs_create_fsinfo_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:352
//-----------------------------------------------------------------------------
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
   1f0d3:	55                   	push   ebp
   1f0d4:	89 e5                	mov    ebp,esp
   1f0d6:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:354
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1f0d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0dc:	83 c0 44             	add    eax,0x44
   1f0df:	83 ec 04             	sub    esp,0x4
   1f0e2:	68 00 02 00 00       	push   0x200
   1f0e7:	6a 00                	push   0x0
   1f0e9:	50                   	push   eax
   1f0ea:	e8 4e 65 00 00       	call   2563d <memset>
   1f0ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:357

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
   1f0f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0f5:	c6 40 44 52          	mov    BYTE PTR [eax+0x44],0x52
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:358
    fs->currentsector.sector[1] = 0x52;
   1f0f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0fc:	c6 40 45 52          	mov    BYTE PTR [eax+0x45],0x52
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:359
    fs->currentsector.sector[2] = 0x61;
   1f100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f103:	c6 40 46 61          	mov    BYTE PTR [eax+0x46],0x61
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:360
    fs->currentsector.sector[3] = 0x41;
   1f107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f10a:	c6 40 47 41          	mov    BYTE PTR [eax+0x47],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:363

    // FSI_StrucSig
    fs->currentsector.sector[484] = 0x72;
   1f10e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f111:	c6 80 28 02 00 00 72 	mov    BYTE PTR [eax+0x228],0x72
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:364
    fs->currentsector.sector[485] = 0x72;
   1f118:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f11b:	c6 80 29 02 00 00 72 	mov    BYTE PTR [eax+0x229],0x72
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:365
    fs->currentsector.sector[486] = 0x41;
   1f122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f125:	c6 80 2a 02 00 00 41 	mov    BYTE PTR [eax+0x22a],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:366
    fs->currentsector.sector[487] = 0x61;
   1f12c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f12f:	c6 80 2b 02 00 00 61 	mov    BYTE PTR [eax+0x22b],0x61
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:369

    // FSI_Free_Count
    fs->currentsector.sector[488] = 0xFF;
   1f136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f139:	c6 80 2c 02 00 00 ff 	mov    BYTE PTR [eax+0x22c],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:370
    fs->currentsector.sector[489] = 0xFF;
   1f140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f143:	c6 80 2d 02 00 00 ff 	mov    BYTE PTR [eax+0x22d],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:371
    fs->currentsector.sector[490] = 0xFF;
   1f14a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f14d:	c6 80 2e 02 00 00 ff 	mov    BYTE PTR [eax+0x22e],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:372
    fs->currentsector.sector[491] = 0xFF;
   1f154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f157:	c6 80 2f 02 00 00 ff 	mov    BYTE PTR [eax+0x22f],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:375

    // FSI_Nxt_Free
    fs->currentsector.sector[492] = 0xFF;
   1f15e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f161:	c6 80 30 02 00 00 ff 	mov    BYTE PTR [eax+0x230],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:376
    fs->currentsector.sector[493] = 0xFF;
   1f168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f16b:	c6 80 31 02 00 00 ff 	mov    BYTE PTR [eax+0x231],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:377
    fs->currentsector.sector[494] = 0xFF;
   1f172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f175:	c6 80 32 02 00 00 ff 	mov    BYTE PTR [eax+0x232],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:378
    fs->currentsector.sector[495] = 0xFF;
   1f17c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f17f:	c6 80 33 02 00 00 ff 	mov    BYTE PTR [eax+0x233],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:381

    // Signature
    fs->currentsector.sector[510] = 0x55;
   1f186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f189:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:382
    fs->currentsector.sector[511] = 0xAA;
   1f190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f193:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:384

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
   1f19a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f19d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f1a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f1a3:	83 c2 44             	add    edx,0x44
   1f1a6:	83 ec 04             	sub    esp,0x4
   1f1a9:	6a 01                	push   0x1
   1f1ab:	52                   	push   edx
   1f1ac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f1af:	ff d0                	call   eax
   1f1b1:	83 c4 10             	add    esp,0x10
   1f1b4:	85 c0                	test   eax,eax
   1f1b6:	74 07                	je     1f1bf <fatfs_create_fsinfo_sector+0xec>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:385
        return 1;
   1f1b8:	b8 01 00 00 00       	mov    eax,0x1
   1f1bd:	eb 05                	jmp    1f1c4 <fatfs_create_fsinfo_sector+0xf1>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:387
    else
        return 0;
   1f1bf:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:388
}
   1f1c4:	c9                   	leave  
   1f1c5:	c3                   	ret    

0001f1c6 <fatfs_erase_fat>:
fatfs_erase_fat():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:393
//-----------------------------------------------------------------------------
// fatfs_erase_fat: Erase FAT table using fs details in fs struct
//-----------------------------------------------------------------------------
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
   1f1c6:	55                   	push   ebp
   1f1c7:	89 e5                	mov    ebp,esp
   1f1c9:	53                   	push   ebx
   1f1ca:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:397
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1f1cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1d0:	83 c0 44             	add    eax,0x44
   1f1d3:	83 ec 04             	sub    esp,0x4
   1f1d6:	68 00 02 00 00       	push   0x200
   1f1db:	6a 00                	push   0x0
   1f1dd:	50                   	push   eax
   1f1de:	e8 5a 64 00 00       	call   2563d <memset>
   1f1e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:400

    // Initialise default allocate / reserved clusters
    if (!is_fat32)
   1f1e6:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1f1ea:	75 1e                	jne    1f20a <fatfs_erase_fat+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:402
    {
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
   1f1ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1ef:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1f1f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1f6:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:403
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
   1f1fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1fd:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1f201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f204:	c6 40 47 ff          	mov    BYTE PTR [eax+0x47],0xff
   1f208:	eb 54                	jmp    1f25e <fatfs_erase_fat+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:407
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
   1f20a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f20d:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1f211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f214:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
   1f218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f21b:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1f21f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f222:	c6 40 47 0f          	mov    BYTE PTR [eax+0x47],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:408
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
   1f226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f229:	c6 40 48 ff          	mov    BYTE PTR [eax+0x48],0xff
   1f22d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f230:	c6 40 49 ff          	mov    BYTE PTR [eax+0x49],0xff
   1f234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f237:	c6 40 4a ff          	mov    BYTE PTR [eax+0x4a],0xff
   1f23b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f23e:	c6 40 4b ff          	mov    BYTE PTR [eax+0x4b],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:409
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
   1f242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f245:	c6 40 4c ff          	mov    BYTE PTR [eax+0x4c],0xff
   1f249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f24c:	c6 40 4d ff          	mov    BYTE PTR [eax+0x4d],0xff
   1f250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f253:	c6 40 4e ff          	mov    BYTE PTR [eax+0x4e],0xff
   1f257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f25a:	c6 40 4f 0f          	mov    BYTE PTR [eax+0x4f],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:412
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   1f25e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f261:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f264:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f267:	8d 4a 44             	lea    ecx,[edx+0x44]
   1f26a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f26d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
   1f270:	83 ec 04             	sub    esp,0x4
   1f273:	6a 01                	push   0x1
   1f275:	51                   	push   ecx
   1f276:	52                   	push   edx
   1f277:	ff d0                	call   eax
   1f279:	83 c4 10             	add    esp,0x10
   1f27c:	85 c0                	test   eax,eax
   1f27e:	75 07                	jne    1f287 <fatfs_erase_fat+0xc1>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:413
        return 0;
   1f280:	b8 00 00 00 00       	mov    eax,0x0
   1f285:	eb 71                	jmp    1f2f8 <fatfs_erase_fat+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:416

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1f287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f28a:	83 c0 44             	add    eax,0x44
   1f28d:	83 ec 04             	sub    esp,0x4
   1f290:	68 00 02 00 00       	push   0x200
   1f295:	6a 00                	push   0x0
   1f297:	50                   	push   eax
   1f298:	e8 a0 63 00 00       	call   2563d <memset>
   1f29d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1f2a0:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   1f2a7:	eb 32                	jmp    1f2db <fatfs_erase_fat+0x115>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:418
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
   1f2a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f2af:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f2b2:	8d 4a 44             	lea    ecx,[edx+0x44]
   1f2b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f2b8:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
   1f2bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f2be:	01 da                	add    edx,ebx
   1f2c0:	83 ec 04             	sub    esp,0x4
   1f2c3:	6a 01                	push   0x1
   1f2c5:	51                   	push   ecx
   1f2c6:	52                   	push   edx
   1f2c7:	ff d0                	call   eax
   1f2c9:	83 c4 10             	add    esp,0x10
   1f2cc:	85 c0                	test   eax,eax
   1f2ce:	75 07                	jne    1f2d7 <fatfs_erase_fat+0x111>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:419
            return 0;
   1f2d0:	b8 00 00 00 00       	mov    eax,0x0
   1f2d5:	eb 21                	jmp    1f2f8 <fatfs_erase_fat+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417 (discriminator 2)
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1f2d7:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417 (discriminator 1)
   1f2db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2de:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   1f2e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2e4:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f2e8:	0f b6 c0             	movzx  eax,al
   1f2eb:	0f af c2             	imul   eax,edx
   1f2ee:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1f2f1:	77 b6                	ja     1f2a9 <fatfs_erase_fat+0xe3>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:421
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1f2f3:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:422
}
   1f2f8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1f2fb:	c9                   	leave  
   1f2fc:	c3                   	ret    

0001f2fd <fatfs_format_fat16>:
fatfs_format_fat16():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:427
//-----------------------------------------------------------------------------
// fatfs_format_fat16: Format a FAT16 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat16(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f2fd:	55                   	push   ebp
   1f2fe:	89 e5                	mov    ebp,esp
   1f300:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:428
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1f303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f306:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1f30d:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:429
    fs->currentsector.dirty = 0;
   1f310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f313:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1f31a:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:431

    fs->next_free_cluster = 0; // Invalid
   1f31d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f320:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:433

    fatfs_fat_init(fs);
   1f327:	83 ec 0c             	sub    esp,0xc
   1f32a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f32d:	e8 3e 15 00 00       	call   20870 <fatfs_fat_init>
   1f332:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:436

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1f335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f338:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1f33b:	85 c0                	test   eax,eax
   1f33d:	74 0a                	je     1f349 <fatfs_format_fat16+0x4c>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:436 (discriminator 1)
   1f33f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f342:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f345:	85 c0                	test   eax,eax
   1f347:	75 0a                	jne    1f353 <fatfs_format_fat16+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:437
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1f349:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1f34e:	e9 29 01 00 00       	jmp    1f47c <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:440

    // Volume is FAT16
    fs->fat_type = FAT_TYPE_16;
   1f353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f356:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:443

    // Not valid for FAT16
    fs->fs_info_sector = 0;
   1f35d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f360:	66 c7 40 18 00 00    	mov    WORD PTR [eax+0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:444
    fs->rootdir_first_cluster = 0;
   1f366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f369:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:448

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1f370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f373:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:449
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
   1f37a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f37d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1f380:	83 ec 0c             	sub    esp,0xc
   1f383:	6a 00                	push   0x0
   1f385:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f388:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f38b:	50                   	push   eax
   1f38c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f38f:	e8 bb f7 ff ff       	call   1eb4f <fatfs_create_boot_sector>
   1f394:	83 c4 20             	add    esp,0x20
   1f397:	85 c0                	test   eax,eax
   1f399:	75 0a                	jne    1f3a5 <fatfs_format_fat16+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:450
        return 0;
   1f39b:	b8 00 00 00 00       	mov    eax,0x0
   1f3a0:	e9 d7 00 00 00       	jmp    1f47c <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:453

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   1f3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3a8:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1f3ac:	0f b7 d0             	movzx  edx,ax
   1f3af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3b2:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f3b6:	0f b6 c8             	movzx  ecx,al
   1f3b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1f3bf:	0f af c1             	imul   eax,ecx
   1f3c2:	01 c2                	add    edx,eax
   1f3c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3c7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:454
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1f3ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3cd:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1f3d1:	0f b7 c0             	movzx  eax,ax
   1f3d4:	c1 e0 05             	shl    eax,0x5
   1f3d7:	05 ff 01 00 00       	add    eax,0x1ff
   1f3dc:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1f3e2:	85 c0                	test   eax,eax
   1f3e4:	0f 48 c2             	cmovs  eax,edx
   1f3e7:	c1 f8 09             	sar    eax,0x9
   1f3ea:	89 c2                	mov    edx,eax
   1f3ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3ef:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:457

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1f3f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3f5:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1f3f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3fb:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1f3ff:	0f b7 c0             	movzx  eax,ax
   1f402:	01 c2                	add    edx,eax
   1f404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f407:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:460

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1f40a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f40d:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1f410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f413:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f417:	0f b6 c8             	movzx  ecx,al
   1f41a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f41d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1f420:	0f af c1             	imul   eax,ecx
   1f423:	01 c2                	add    edx,eax
   1f425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f428:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:463

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
   1f42b:	83 ec 08             	sub    esp,0x8
   1f42e:	6a 00                	push   0x0
   1f430:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f433:	e8 8e fd ff ff       	call   1f1c6 <fatfs_erase_fat>
   1f438:	83 c4 10             	add    esp,0x10
   1f43b:	85 c0                	test   eax,eax
   1f43d:	75 07                	jne    1f446 <fatfs_format_fat16+0x149>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:464
        return 0;
   1f43f:	b8 00 00 00 00       	mov    eax,0x0
   1f444:	eb 36                	jmp    1f47c <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:467

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
   1f446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f449:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1f44c:	89 c1                	mov    ecx,eax
   1f44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f451:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1f454:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f457:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1f45a:	01 d0                	add    eax,edx
   1f45c:	83 ec 04             	sub    esp,0x4
   1f45f:	51                   	push   ecx
   1f460:	50                   	push   eax
   1f461:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f464:	e8 7c f6 ff ff       	call   1eae5 <fatfs_erase_sectors>
   1f469:	83 c4 10             	add    esp,0x10
   1f46c:	85 c0                	test   eax,eax
   1f46e:	75 07                	jne    1f477 <fatfs_format_fat16+0x17a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:468
        return 0;
   1f470:	b8 00 00 00 00       	mov    eax,0x0
   1f475:	eb 05                	jmp    1f47c <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:470

    return 1;
   1f477:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:471
}
   1f47c:	c9                   	leave  
   1f47d:	c3                   	ret    

0001f47e <fatfs_format_fat32>:
fatfs_format_fat32():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:476
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f47e:	55                   	push   ebp
   1f47f:	89 e5                	mov    ebp,esp
   1f481:	53                   	push   ebx
   1f482:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:477
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1f485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f488:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1f48f:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:478
    fs->currentsector.dirty = 0;
   1f492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f495:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1f49c:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:480

    fs->next_free_cluster = 0; // Invalid
   1f49f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4a2:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:482

    fatfs_fat_init(fs);
   1f4a9:	83 ec 0c             	sub    esp,0xc
   1f4ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f4af:	e8 bc 13 00 00       	call   20870 <fatfs_fat_init>
   1f4b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:485

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1f4b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4ba:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1f4bd:	85 c0                	test   eax,eax
   1f4bf:	74 0a                	je     1f4cb <fatfs_format_fat32+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:485 (discriminator 1)
   1f4c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f4c7:	85 c0                	test   eax,eax
   1f4c9:	75 0a                	jne    1f4d5 <fatfs_format_fat32+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:486
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1f4cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1f4d0:	e9 08 01 00 00       	jmp    1f5dd <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:489

    // Volume is FAT32
    fs->fat_type = FAT_TYPE_32;
   1f4d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4d8:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:492

    // Basic defaults for normal FAT32 partitions
    fs->fs_info_sector = 1;
   1f4df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4e2:	66 c7 40 18 01 00    	mov    WORD PTR [eax+0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:493
    fs->rootdir_first_cluster = 2;
   1f4e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4eb:	c7 40 08 02 00 00 00 	mov    DWORD PTR [eax+0x8],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:497

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1f4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4f5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:498
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
   1f4fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4ff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1f502:	83 ec 0c             	sub    esp,0xc
   1f505:	6a 01                	push   0x1
   1f507:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f50a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f50d:	50                   	push   eax
   1f50e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f511:	e8 39 f6 ff ff       	call   1eb4f <fatfs_create_boot_sector>
   1f516:	83 c4 20             	add    esp,0x20
   1f519:	85 c0                	test   eax,eax
   1f51b:	75 0a                	jne    1f527 <fatfs_format_fat32+0xa9>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:499
        return 0;
   1f51d:	b8 00 00 00 00       	mov    eax,0x0
   1f522:	e9 b6 00 00 00       	jmp    1f5dd <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:502

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1f527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f52a:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1f52d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f530:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1f534:	0f b7 c0             	movzx  eax,ax
   1f537:	01 c2                	add    edx,eax
   1f539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f53c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:505

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1f53f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f542:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1f545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f548:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f54c:	0f b6 c8             	movzx  ecx,al
   1f54f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f552:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1f555:	0f af c1             	imul   eax,ecx
   1f558:	01 c2                	add    edx,eax
   1f55a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f55d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:508

    // Initialise FSInfo sector
    if (!fatfs_create_fsinfo_sector(fs, fs->fs_info_sector))
   1f560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f563:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1f567:	0f b7 c0             	movzx  eax,ax
   1f56a:	83 ec 08             	sub    esp,0x8
   1f56d:	50                   	push   eax
   1f56e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f571:	e8 5d fb ff ff       	call   1f0d3 <fatfs_create_fsinfo_sector>
   1f576:	83 c4 10             	add    esp,0x10
   1f579:	85 c0                	test   eax,eax
   1f57b:	75 07                	jne    1f584 <fatfs_format_fat32+0x106>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:509
        return 0;
   1f57d:	b8 00 00 00 00       	mov    eax,0x0
   1f582:	eb 59                	jmp    1f5dd <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:512

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 1))
   1f584:	83 ec 08             	sub    esp,0x8
   1f587:	6a 01                	push   0x1
   1f589:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f58c:	e8 35 fc ff ff       	call   1f1c6 <fatfs_erase_fat>
   1f591:	83 c4 10             	add    esp,0x10
   1f594:	85 c0                	test   eax,eax
   1f596:	75 07                	jne    1f59f <fatfs_format_fat32+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:513
        return 0;
   1f598:	b8 00 00 00 00       	mov    eax,0x0
   1f59d:	eb 3e                	jmp    1f5dd <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:516

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
   1f59f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f5a2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f5a5:	0f b6 d8             	movzx  ebx,al
   1f5a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f5ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1f5ae:	83 ec 08             	sub    esp,0x8
   1f5b1:	50                   	push   eax
   1f5b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f5b5:	e8 0e c1 ff ff       	call   1b6c8 <fatfs_lba_of_cluster>
   1f5ba:	83 c4 10             	add    esp,0x10
   1f5bd:	83 ec 04             	sub    esp,0x4
   1f5c0:	53                   	push   ebx
   1f5c1:	50                   	push   eax
   1f5c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f5c5:	e8 1b f5 ff ff       	call   1eae5 <fatfs_erase_sectors>
   1f5ca:	83 c4 10             	add    esp,0x10
   1f5cd:	85 c0                	test   eax,eax
   1f5cf:	75 07                	jne    1f5d8 <fatfs_format_fat32+0x15a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:517
        return 0;
   1f5d1:	b8 00 00 00 00       	mov    eax,0x0
   1f5d6:	eb 05                	jmp    1f5dd <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:519

    return 1;
   1f5d8:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:520
}
   1f5dd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1f5e0:	c9                   	leave  
   1f5e1:	c3                   	ret    

0001f5e2 <fatfs_format>:
fatfs_format():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:525
//-----------------------------------------------------------------------------
// fatfs_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
int fatfs_format(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f5e2:	55                   	push   ebp
   1f5e3:	89 e5                	mov    ebp,esp
   1f5e5:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:527
    // 2GB - 32K limit for safe behaviour for FAT16
    if (volume_sectors <= 4194304)
   1f5e8:	81 7d 0c 00 00 40 00 	cmp    DWORD PTR [ebp+0xc],0x400000
   1f5ef:	77 16                	ja     1f607 <fatfs_format+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:528
        return fatfs_format_fat16(fs, volume_sectors, name);
   1f5f1:	83 ec 04             	sub    esp,0x4
   1f5f4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f5f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f5fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f5fd:	e8 fb fc ff ff       	call   1f2fd <fatfs_format_fat16>
   1f602:	83 c4 10             	add    esp,0x10
   1f605:	eb 14                	jmp    1f61b <fatfs_format+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:530
    else
        return fatfs_format_fat32(fs, volume_sectors, name);
   1f607:	83 ec 04             	sub    esp,0x4
   1f60a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f60d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f610:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f613:	e8 66 fe ff ff       	call   1f47e <fatfs_format_fat32>
   1f618:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:531
}
   1f61b:	c9                   	leave  
   1f61c:	c3                   	ret    
   1f61d:	66 90                	xchg   ax,ax
   1f61f:	90                   	nop

0001f620 <fatfs_lfn_cache_init>:
fatfs_lfn_cache_init():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:40

//-----------------------------------------------------------------------------
// fatfs_lfn_cache_init: Clear long file name cache
//-----------------------------------------------------------------------------
void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable)
{
   1f620:	55                   	push   ebp
   1f621:	89 e5                	mov    ebp,esp
   1f623:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:41
    int i = 0;
   1f626:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:43

    lfn->no_of_strings = 0;
   1f62d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f630:	c6 80 05 01 00 00 00 	mov    BYTE PTR [eax+0x105],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:48

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
   1f637:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1f63b:	74 36                	je     1f673 <fatfs_lfn_cache_init+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f63d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f644:	eb 27                	jmp    1f66d <fatfs_lfn_cache_init+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:50 (discriminator 3)
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
   1f646:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f649:	89 d0                	mov    eax,edx
   1f64b:	01 c0                	add    eax,eax
   1f64d:	01 d0                	add    eax,edx
   1f64f:	c1 e0 02             	shl    eax,0x2
   1f652:	01 d0                	add    eax,edx
   1f654:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f657:	01 d0                	add    eax,edx
   1f659:	83 ec 04             	sub    esp,0x4
   1f65c:	6a 0d                	push   0xd
   1f65e:	6a 00                	push   0x0
   1f660:	50                   	push   eax
   1f661:	e8 d7 5f 00 00       	call   2563d <memset>
   1f666:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49 (discriminator 3)

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f669:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49 (discriminator 1)
   1f66d:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   1f671:	7e d3                	jle    1f646 <fatfs_lfn_cache_init+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:52
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
#endif
}
   1f673:	90                   	nop
   1f674:	c9                   	leave  
   1f675:	c3                   	ret    

0001f676 <fatfs_lfn_cache_entry>:
fatfs_lfn_cache_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:59
// fatfs_lfn_cache_entry - Function extracts long file name text from sector
// at a specific offset
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
   1f676:	55                   	push   ebp
   1f677:	89 e5                	mov    ebp,esp
   1f679:	53                   	push   ebx
   1f67a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:61
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;
   1f67d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f680:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f683:	83 e0 1f             	and    eax,0x1f
   1f686:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:64

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
   1f689:	80 7d fa 14          	cmp    BYTE PTR [ebp-0x6],0x14
   1f68d:	0f 87 45 02 00 00    	ja     1f8d8 <fatfs_lfn_cache_entry+0x262>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:68
        return ;

    // This is an error condition
    if (LFNIndex == 0)
   1f693:	80 7d fa 00          	cmp    BYTE PTR [ebp-0x6],0x0
   1f697:	0f 84 3e 02 00 00    	je     1f8db <fatfs_lfn_cache_entry+0x265>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:71
        return ;

    if (lfn->no_of_strings == 0)
   1f69d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f6a0:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f6a7:	84 c0                	test   al,al
   1f6a9:	75 0d                	jne    1f6b8 <fatfs_lfn_cache_entry+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:72
        lfn->no_of_strings = LFNIndex;
   1f6ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f6ae:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   1f6b2:	88 90 05 01 00 00    	mov    BYTE PTR [eax+0x105],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:74

    lfn->String[LFNIndex-1][0] = entryBuffer[1];
   1f6b8:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f6bc:	8d 50 ff             	lea    edx,[eax-0x1]
   1f6bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f6c2:	0f b6 48 01          	movzx  ecx,BYTE PTR [eax+0x1]
   1f6c6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f6c9:	89 d0                	mov    eax,edx
   1f6cb:	01 c0                	add    eax,eax
   1f6cd:	01 d0                	add    eax,edx
   1f6cf:	c1 e0 02             	shl    eax,0x2
   1f6d2:	01 d0                	add    eax,edx
   1f6d4:	01 d8                	add    eax,ebx
   1f6d6:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:75
    lfn->String[LFNIndex-1][1] = entryBuffer[3];
   1f6d8:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f6dc:	8d 50 ff             	lea    edx,[eax-0x1]
   1f6df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f6e2:	0f b6 48 03          	movzx  ecx,BYTE PTR [eax+0x3]
   1f6e6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f6e9:	89 d0                	mov    eax,edx
   1f6eb:	01 c0                	add    eax,eax
   1f6ed:	01 d0                	add    eax,edx
   1f6ef:	c1 e0 02             	shl    eax,0x2
   1f6f2:	01 d0                	add    eax,edx
   1f6f4:	01 d8                	add    eax,ebx
   1f6f6:	83 c0 01             	add    eax,0x1
   1f6f9:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:76
    lfn->String[LFNIndex-1][2] = entryBuffer[5];
   1f6fb:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f6ff:	8d 50 ff             	lea    edx,[eax-0x1]
   1f702:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f705:	0f b6 48 05          	movzx  ecx,BYTE PTR [eax+0x5]
   1f709:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f70c:	89 d0                	mov    eax,edx
   1f70e:	01 c0                	add    eax,eax
   1f710:	01 d0                	add    eax,edx
   1f712:	c1 e0 02             	shl    eax,0x2
   1f715:	01 d0                	add    eax,edx
   1f717:	01 d8                	add    eax,ebx
   1f719:	83 c0 02             	add    eax,0x2
   1f71c:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:77
    lfn->String[LFNIndex-1][3] = entryBuffer[7];
   1f71e:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f722:	8d 50 ff             	lea    edx,[eax-0x1]
   1f725:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f728:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
   1f72c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f72f:	89 d0                	mov    eax,edx
   1f731:	01 c0                	add    eax,eax
   1f733:	01 d0                	add    eax,edx
   1f735:	c1 e0 02             	shl    eax,0x2
   1f738:	01 d0                	add    eax,edx
   1f73a:	01 d8                	add    eax,ebx
   1f73c:	83 c0 03             	add    eax,0x3
   1f73f:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:78
    lfn->String[LFNIndex-1][4] = entryBuffer[9];
   1f741:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f745:	8d 50 ff             	lea    edx,[eax-0x1]
   1f748:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f74b:	0f b6 48 09          	movzx  ecx,BYTE PTR [eax+0x9]
   1f74f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f752:	89 d0                	mov    eax,edx
   1f754:	01 c0                	add    eax,eax
   1f756:	01 d0                	add    eax,edx
   1f758:	c1 e0 02             	shl    eax,0x2
   1f75b:	01 d0                	add    eax,edx
   1f75d:	01 d8                	add    eax,ebx
   1f75f:	83 c0 04             	add    eax,0x4
   1f762:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:79
    lfn->String[LFNIndex-1][5] = entryBuffer[0x0E];
   1f764:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f768:	8d 50 ff             	lea    edx,[eax-0x1]
   1f76b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f76e:	0f b6 48 0e          	movzx  ecx,BYTE PTR [eax+0xe]
   1f772:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f775:	89 d0                	mov    eax,edx
   1f777:	01 c0                	add    eax,eax
   1f779:	01 d0                	add    eax,edx
   1f77b:	c1 e0 02             	shl    eax,0x2
   1f77e:	01 d0                	add    eax,edx
   1f780:	01 d8                	add    eax,ebx
   1f782:	83 c0 05             	add    eax,0x5
   1f785:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:80
    lfn->String[LFNIndex-1][6] = entryBuffer[0x10];
   1f787:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f78b:	8d 50 ff             	lea    edx,[eax-0x1]
   1f78e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f791:	0f b6 48 10          	movzx  ecx,BYTE PTR [eax+0x10]
   1f795:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f798:	89 d0                	mov    eax,edx
   1f79a:	01 c0                	add    eax,eax
   1f79c:	01 d0                	add    eax,edx
   1f79e:	c1 e0 02             	shl    eax,0x2
   1f7a1:	01 d0                	add    eax,edx
   1f7a3:	01 d8                	add    eax,ebx
   1f7a5:	83 c0 06             	add    eax,0x6
   1f7a8:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:81
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
   1f7aa:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f7ae:	8d 50 ff             	lea    edx,[eax-0x1]
   1f7b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f7b4:	0f b6 48 12          	movzx  ecx,BYTE PTR [eax+0x12]
   1f7b8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f7bb:	89 d0                	mov    eax,edx
   1f7bd:	01 c0                	add    eax,eax
   1f7bf:	01 d0                	add    eax,edx
   1f7c1:	c1 e0 02             	shl    eax,0x2
   1f7c4:	01 d0                	add    eax,edx
   1f7c6:	01 d8                	add    eax,ebx
   1f7c8:	83 c0 07             	add    eax,0x7
   1f7cb:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:82
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
   1f7cd:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f7d1:	8d 50 ff             	lea    edx,[eax-0x1]
   1f7d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f7d7:	0f b6 48 14          	movzx  ecx,BYTE PTR [eax+0x14]
   1f7db:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f7de:	89 d0                	mov    eax,edx
   1f7e0:	01 c0                	add    eax,eax
   1f7e2:	01 d0                	add    eax,edx
   1f7e4:	c1 e0 02             	shl    eax,0x2
   1f7e7:	01 d0                	add    eax,edx
   1f7e9:	01 d8                	add    eax,ebx
   1f7eb:	83 c0 08             	add    eax,0x8
   1f7ee:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:83
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
   1f7f0:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f7f4:	8d 50 ff             	lea    edx,[eax-0x1]
   1f7f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f7fa:	0f b6 48 16          	movzx  ecx,BYTE PTR [eax+0x16]
   1f7fe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f801:	89 d0                	mov    eax,edx
   1f803:	01 c0                	add    eax,eax
   1f805:	01 d0                	add    eax,edx
   1f807:	c1 e0 02             	shl    eax,0x2
   1f80a:	01 d0                	add    eax,edx
   1f80c:	01 d8                	add    eax,ebx
   1f80e:	83 c0 09             	add    eax,0x9
   1f811:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:84
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
   1f813:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f817:	8d 50 ff             	lea    edx,[eax-0x1]
   1f81a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f81d:	0f b6 48 18          	movzx  ecx,BYTE PTR [eax+0x18]
   1f821:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f824:	89 d0                	mov    eax,edx
   1f826:	01 c0                	add    eax,eax
   1f828:	01 d0                	add    eax,edx
   1f82a:	c1 e0 02             	shl    eax,0x2
   1f82d:	01 d0                	add    eax,edx
   1f82f:	01 d8                	add    eax,ebx
   1f831:	83 c0 0a             	add    eax,0xa
   1f834:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:85
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
   1f836:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f83a:	8d 50 ff             	lea    edx,[eax-0x1]
   1f83d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f840:	0f b6 48 1c          	movzx  ecx,BYTE PTR [eax+0x1c]
   1f844:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f847:	89 d0                	mov    eax,edx
   1f849:	01 c0                	add    eax,eax
   1f84b:	01 d0                	add    eax,edx
   1f84d:	c1 e0 02             	shl    eax,0x2
   1f850:	01 d0                	add    eax,edx
   1f852:	01 d8                	add    eax,ebx
   1f854:	83 c0 0b             	add    eax,0xb
   1f857:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:86
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
   1f859:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f85d:	8d 50 ff             	lea    edx,[eax-0x1]
   1f860:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f863:	0f b6 48 1e          	movzx  ecx,BYTE PTR [eax+0x1e]
   1f867:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f86a:	89 d0                	mov    eax,edx
   1f86c:	01 c0                	add    eax,eax
   1f86e:	01 d0                	add    eax,edx
   1f870:	c1 e0 02             	shl    eax,0x2
   1f873:	01 d0                	add    eax,edx
   1f875:	01 d8                	add    eax,ebx
   1f877:	83 c0 0c             	add    eax,0xc
   1f87a:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f87c:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
   1f880:	eb 4e                	jmp    1f8d0 <fatfs_lfn_cache_entry+0x25a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:89
        if (lfn->String[LFNIndex-1][i]==0xFF)
   1f882:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f886:	8d 50 ff             	lea    edx,[eax-0x1]
   1f889:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f88d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f890:	89 d0                	mov    eax,edx
   1f892:	01 c0                	add    eax,eax
   1f894:	01 d0                	add    eax,edx
   1f896:	c1 e0 02             	shl    eax,0x2
   1f899:	01 d0                	add    eax,edx
   1f89b:	01 d8                	add    eax,ebx
   1f89d:	01 c8                	add    eax,ecx
   1f89f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f8a2:	3c ff                	cmp    al,0xff
   1f8a4:	75 20                	jne    1f8c6 <fatfs_lfn_cache_entry+0x250>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:90
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   1f8a6:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f8aa:	8d 50 ff             	lea    edx,[eax-0x1]
   1f8ad:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f8b1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f8b4:	89 d0                	mov    eax,edx
   1f8b6:	01 c0                	add    eax,eax
   1f8b8:	01 d0                	add    eax,edx
   1f8ba:	c1 e0 02             	shl    eax,0x2
   1f8bd:	01 d0                	add    eax,edx
   1f8bf:	01 d8                	add    eax,ebx
   1f8c1:	01 c8                	add    eax,ecx
   1f8c3:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88 (discriminator 2)
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f8c6:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   1f8ca:	83 c0 01             	add    eax,0x1
   1f8cd:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88 (discriminator 1)
   1f8d0:	80 7d fb 0c          	cmp    BYTE PTR [ebp-0x5],0xc
   1f8d4:	76 ac                	jbe    1f882 <fatfs_lfn_cache_entry+0x20c>
   1f8d6:	eb 04                	jmp    1f8dc <fatfs_lfn_cache_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:65
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
        return ;
   1f8d8:	90                   	nop
   1f8d9:	eb 01                	jmp    1f8dc <fatfs_lfn_cache_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:69

    // This is an error condition
    if (LFNIndex == 0)
        return ;
   1f8db:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:91
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
}
   1f8dc:	83 c4 10             	add    esp,0x10
   1f8df:	5b                   	pop    ebx
   1f8e0:	5d                   	pop    ebp
   1f8e1:	c3                   	ret    

0001f8e2 <fatfs_lfn_cache_get>:
fatfs_lfn_cache_get():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:98
//-----------------------------------------------------------------------------
// fatfs_lfn_cache_get: Get a reference to the long filename
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
   1f8e2:	55                   	push   ebp
   1f8e3:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:100
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
   1f8e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f8e8:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f8ef:	3c 14                	cmp    al,0x14
   1f8f1:	75 0c                	jne    1f8ff <fatfs_lfn_cache_get+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:101
        lfn->Null = '\0';
   1f8f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f8f6:	c6 80 04 01 00 00 00 	mov    BYTE PTR [eax+0x104],0x0
   1f8fd:	eb 36                	jmp    1f935 <fatfs_lfn_cache_get+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:102
    else if (lfn->no_of_strings)
   1f8ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f902:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f909:	84 c0                	test   al,al
   1f90b:	74 22                	je     1f92f <fatfs_lfn_cache_get+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:103
        lfn->String[lfn->no_of_strings][0] = '\0';
   1f90d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f910:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f917:	0f b6 d0             	movzx  edx,al
   1f91a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1f91d:	89 d0                	mov    eax,edx
   1f91f:	01 c0                	add    eax,eax
   1f921:	01 d0                	add    eax,edx
   1f923:	c1 e0 02             	shl    eax,0x2
   1f926:	01 d0                	add    eax,edx
   1f928:	01 c8                	add    eax,ecx
   1f92a:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1f92d:	eb 06                	jmp    1f935 <fatfs_lfn_cache_get+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:105
    else
        lfn->String[0][0] = '\0';
   1f92f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f932:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:107

    return (char*)&lfn->String[0][0];
   1f935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:108
}
   1f938:	5d                   	pop    ebp
   1f939:	c3                   	ret    

0001f93a <fatfs_entry_lfn_text>:
fatfs_entry_lfn_text():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:115
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_text: If LFN text entry found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_text(struct fat_dir_entry *entry)
{
   1f93a:	55                   	push   ebp
   1f93b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:116
    if ((entry->Attr & FILE_ATTR_LFN_TEXT) == FILE_ATTR_LFN_TEXT)
   1f93d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f940:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f944:	0f b6 c0             	movzx  eax,al
   1f947:	83 e0 0f             	and    eax,0xf
   1f94a:	83 f8 0f             	cmp    eax,0xf
   1f94d:	75 07                	jne    1f956 <fatfs_entry_lfn_text+0x1c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:117
        return 1;
   1f94f:	b8 01 00 00 00       	mov    eax,0x1
   1f954:	eb 05                	jmp    1f95b <fatfs_entry_lfn_text+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:119
    else
        return 0;
   1f956:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:120
}
   1f95b:	5d                   	pop    ebp
   1f95c:	c3                   	ret    

0001f95d <fatfs_entry_lfn_invalid>:
fatfs_entry_lfn_invalid():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:127
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
   1f95d:	55                   	push   ebp
   1f95e:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:128
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f963:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f966:	84 c0                	test   al,al
   1f968:	74 26                	je     1f990 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:129 (discriminator 1)
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f96a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f96d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:128 (discriminator 1)
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f970:	3c e5                	cmp    al,0xe5
   1f972:	74 1c                	je     1f990 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:130
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f977:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:129
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f97b:	3c 08                	cmp    al,0x8
   1f97d:	74 11                	je     1f990 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:131
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
         (entry->Attr & FILE_ATTR_SYSHID) )
   1f97f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f982:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f986:	0f b6 c0             	movzx  eax,al
   1f989:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:130
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f98c:	85 c0                	test   eax,eax
   1f98e:	74 07                	je     1f997 <fatfs_entry_lfn_invalid+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:132
         (entry->Attr & FILE_ATTR_SYSHID) )
        return 1;
   1f990:	b8 01 00 00 00       	mov    eax,0x1
   1f995:	eb 05                	jmp    1f99c <fatfs_entry_lfn_invalid+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:134
    else
        return 0;
   1f997:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:135
}
   1f99c:	5d                   	pop    ebp
   1f99d:	c3                   	ret    

0001f99e <fatfs_entry_lfn_exists>:
fatfs_entry_lfn_exists():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:142
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
   1f99e:	55                   	push   ebp
   1f99f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:143
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f9a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f9a4:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f9a8:	3c 0f                	cmp    al,0xf
   1f9aa:	74 45                	je     1f9f1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:144 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f9ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f9af:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:143 (discriminator 1)
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f9b2:	84 c0                	test   al,al
   1f9b4:	74 3b                	je     1f9f1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:145
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f9b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f9b9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:144
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f9bc:	3c e5                	cmp    al,0xe5
   1f9be:	74 31                	je     1f9f1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:146
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f9c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f9c3:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:145
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f9c7:	3c 08                	cmp    al,0x8
   1f9c9:	74 26                	je     1f9f1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:147
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f9cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f9ce:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f9d2:	0f b6 c0             	movzx  eax,al
   1f9d5:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:146
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f9d8:	85 c0                	test   eax,eax
   1f9da:	75 15                	jne    1f9f1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:148
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
   1f9dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f9df:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:147
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f9e6:	84 c0                	test   al,al
   1f9e8:	74 07                	je     1f9f1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:149
         (lfn->no_of_strings) )
        return 1;
   1f9ea:	b8 01 00 00 00       	mov    eax,0x1
   1f9ef:	eb 05                	jmp    1f9f6 <fatfs_entry_lfn_exists+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:151
    else
        return 0;
   1f9f1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:152
}
   1f9f6:	5d                   	pop    ebp
   1f9f7:	c3                   	ret    

0001f9f8 <fatfs_entry_sfn_only>:
fatfs_entry_sfn_only():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:158
#endif
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
   1f9f8:	55                   	push   ebp
   1f9f9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:159
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f9fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f9fe:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1fa02:	3c 0f                	cmp    al,0xf
   1fa04:	74 37                	je     1fa3d <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:160 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1fa06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fa09:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:159 (discriminator 1)
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1fa0c:	84 c0                	test   al,al
   1fa0e:	74 2d                	je     1fa3d <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:161
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1fa10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fa13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:160
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1fa16:	3c e5                	cmp    al,0xe5
   1fa18:	74 23                	je     1fa3d <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:162
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1fa1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fa1d:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:161
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1fa21:	3c 08                	cmp    al,0x8
   1fa23:	74 18                	je     1fa3d <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:163
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
   1fa25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fa28:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1fa2c:	0f b6 c0             	movzx  eax,al
   1fa2f:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:162
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1fa32:	85 c0                	test   eax,eax
   1fa34:	75 07                	jne    1fa3d <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:164
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
        return 1;
   1fa36:	b8 01 00 00 00       	mov    eax,0x1
   1fa3b:	eb 05                	jmp    1fa42 <fatfs_entry_sfn_only+0x4a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:166
    else
        return 0;
   1fa3d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:167
}
   1fa42:	5d                   	pop    ebp
   1fa43:	c3                   	ret    

0001fa44 <fatfs_entry_is_dir>:
fatfs_entry_is_dir():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:173
// TODO: FILE_ATTR_SYSHID ?!?!??!
//-----------------------------------------------------------------------------
// fatfs_entry_is_dir: Returns 1 if a directory
//-----------------------------------------------------------------------------
int fatfs_entry_is_dir(struct fat_dir_entry *entry)
{
   1fa44:	55                   	push   ebp
   1fa45:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:174
    if (entry->Attr & FILE_TYPE_DIR)
   1fa47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fa4a:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1fa4e:	0f b6 c0             	movzx  eax,al
   1fa51:	83 e0 10             	and    eax,0x10
   1fa54:	85 c0                	test   eax,eax
   1fa56:	74 07                	je     1fa5f <fatfs_entry_is_dir+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:175
        return 1;
   1fa58:	b8 01 00 00 00       	mov    eax,0x1
   1fa5d:	eb 05                	jmp    1fa64 <fatfs_entry_is_dir+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:177
    else
        return 0;
   1fa5f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:178
}
   1fa64:	5d                   	pop    ebp
   1fa65:	c3                   	ret    

0001fa66 <fatfs_entry_is_file>:
fatfs_entry_is_file():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:183
//-----------------------------------------------------------------------------
// fatfs_entry_is_file: Returns 1 is a file entry
//-----------------------------------------------------------------------------
int fatfs_entry_is_file(struct fat_dir_entry *entry)
{
   1fa66:	55                   	push   ebp
   1fa67:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:184
    if (entry->Attr & FILE_TYPE_FILE)
   1fa69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fa6c:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1fa70:	0f b6 c0             	movzx  eax,al
   1fa73:	83 e0 20             	and    eax,0x20
   1fa76:	85 c0                	test   eax,eax
   1fa78:	74 07                	je     1fa81 <fatfs_entry_is_file+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:185
        return 1;
   1fa7a:	b8 01 00 00 00       	mov    eax,0x1
   1fa7f:	eb 05                	jmp    1fa86 <fatfs_entry_is_file+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:187
    else
        return 0;
   1fa81:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:188
}
   1fa86:	5d                   	pop    ebp
   1fa87:	c3                   	ret    

0001fa88 <fatfs_lfn_entries_required>:
fatfs_lfn_entries_required():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:194
//-----------------------------------------------------------------------------
// fatfs_lfn_entries_required: Calculate number of 13 characters entries
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
   1fa88:	55                   	push   ebp
   1fa89:	89 e5                	mov    ebp,esp
   1fa8b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:195
    int length = (int)strlen(filename);
   1fa8e:	83 ec 0c             	sub    esp,0xc
   1fa91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fa94:	e8 db 7f 00 00       	call   27a74 <strlen>
   1fa99:	83 c4 10             	add    esp,0x10
   1fa9c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:197

    if (length)
   1fa9f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1faa3:	74 1d                	je     1fac2 <fatfs_lfn_entries_required+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:198
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
   1faa5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1faa8:	8d 48 0c             	lea    ecx,[eax+0xc]
   1faab:	ba 4f ec c4 4e       	mov    edx,0x4ec4ec4f
   1fab0:	89 c8                	mov    eax,ecx
   1fab2:	f7 ea                	imul   edx
   1fab4:	c1 fa 02             	sar    edx,0x2
   1fab7:	89 c8                	mov    eax,ecx
   1fab9:	c1 f8 1f             	sar    eax,0x1f
   1fabc:	29 c2                	sub    edx,eax
   1fabe:	89 d0                	mov    eax,edx
   1fac0:	eb 05                	jmp    1fac7 <fatfs_lfn_entries_required+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:200
    else
        return 0;
   1fac2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:201
}
   1fac7:	c9                   	leave  
   1fac8:	c3                   	ret    

0001fac9 <fatfs_filename_to_lfn>:
fatfs_filename_to_lfn():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:208
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
   1fac9:	55                   	push   ebp
   1faca:	89 e5                	mov    ebp,esp
   1facc:	83 ec 68             	sub    esp,0x68
   1facf:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fad2:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:210
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   1fad5:	c7 45 b4 01 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x1
   1fadc:	c7 45 b8 03 00 00 00 	mov    DWORD PTR [ebp-0x48],0x3
   1fae3:	c7 45 bc 05 00 00 00 	mov    DWORD PTR [ebp-0x44],0x5
   1faea:	c7 45 c0 07 00 00 00 	mov    DWORD PTR [ebp-0x40],0x7
   1faf1:	c7 45 c4 09 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x9
   1faf8:	c7 45 c8 0e 00 00 00 	mov    DWORD PTR [ebp-0x38],0xe
   1faff:	c7 45 cc 10 00 00 00 	mov    DWORD PTR [ebp-0x34],0x10
   1fb06:	c7 45 d0 12 00 00 00 	mov    DWORD PTR [ebp-0x30],0x12
   1fb0d:	c7 45 d4 14 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x14
   1fb14:	c7 45 d8 16 00 00 00 	mov    DWORD PTR [ebp-0x28],0x16
   1fb1b:	c7 45 dc 18 00 00 00 	mov    DWORD PTR [ebp-0x24],0x18
   1fb22:	c7 45 e0 1c 00 00 00 	mov    DWORD PTR [ebp-0x20],0x1c
   1fb29:	c7 45 e4 1e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1e
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:213

    // 13 characters entries
    int length = (int)strlen(filename);
   1fb30:	83 ec 0c             	sub    esp,0xc
   1fb33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fb36:	e8 39 7f 00 00       	call   27a74 <strlen>
   1fb3b:	83 c4 10             	add    esp,0x10
   1fb3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:214
    int entriesRequired = fatfs_lfn_entries_required(filename);
   1fb41:	83 ec 0c             	sub    esp,0xc
   1fb44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fb47:	e8 3c ff ff ff       	call   1fa88 <fatfs_lfn_entries_required>
   1fb4c:	83 c4 10             	add    esp,0x10
   1fb4f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:217

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
   1fb52:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1fb55:	89 d0                	mov    eax,edx
   1fb57:	01 c0                	add    eax,eax
   1fb59:	01 d0                	add    eax,edx
   1fb5b:	c1 e0 02             	shl    eax,0x2
   1fb5e:	01 d0                	add    eax,edx
   1fb60:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:220

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
   1fb63:	83 ec 04             	sub    esp,0x4
   1fb66:	6a 20                	push   0x20
   1fb68:	6a 00                	push   0x0
   1fb6a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1fb6d:	e8 cb 5a 00 00       	call   2563d <memset>
   1fb72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
   1fb75:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1fb78:	83 e8 01             	sub    eax,0x1
   1fb7b:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1fb7e:	75 0d                	jne    1fb8d <fatfs_filename_to_lfn+0xc4>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 1)
   1fb80:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb83:	83 c0 01             	add    eax,0x1
   1fb86:	83 c8 40             	or     eax,0x40
   1fb89:	89 c2                	mov    edx,eax
   1fb8b:	eb 06                	jmp    1fb93 <fatfs_filename_to_lfn+0xca>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 2)
   1fb8d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb90:	8d 50 01             	lea    edx,[eax+0x1]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 4)
   1fb93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb96:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:226 (discriminator 4)

    // LFN flag
    buffer[11] = 0x0F;
   1fb98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb9b:	83 c0 0b             	add    eax,0xb
   1fb9e:	c6 00 0f             	mov    BYTE PTR [eax],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:229 (discriminator 4)

    // Checksum of short filename
    buffer[13] = sfnChk;
   1fba1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fba4:	8d 50 0d             	lea    edx,[eax+0xd]
   1fba7:	0f b6 45 a4          	movzx  eax,BYTE PTR [ebp-0x5c]
   1fbab:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 4)

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1fbad:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1fbb4:	eb 78                	jmp    1fc2e <fatfs_filename_to_lfn+0x165>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:234
    {
        if ( (start+i) < length )
   1fbb6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1fbb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fbbc:	01 d0                	add    eax,edx
   1fbbe:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1fbc1:	7d 24                	jge    1fbe7 <fatfs_filename_to_lfn+0x11e>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:235
            buffer[nameIndexes[i]] = filename[start+i];
   1fbc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fbc6:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1fbca:	89 c2                	mov    edx,eax
   1fbcc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fbcf:	01 d0                	add    eax,edx
   1fbd1:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
   1fbd4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fbd7:	01 ca                	add    edx,ecx
   1fbd9:	89 d1                	mov    ecx,edx
   1fbdb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1fbde:	01 ca                	add    edx,ecx
   1fbe0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1fbe3:	88 10                	mov    BYTE PTR [eax],dl
   1fbe5:	eb 43                	jmp    1fc2a <fatfs_filename_to_lfn+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:236
        else if ( (start+i) == length )
   1fbe7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1fbea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fbed:	01 d0                	add    eax,edx
   1fbef:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1fbf2:	75 13                	jne    1fc07 <fatfs_filename_to_lfn+0x13e>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:237
            buffer[nameIndexes[i]] = 0x00;
   1fbf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fbf7:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1fbfb:	89 c2                	mov    edx,eax
   1fbfd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fc00:	01 d0                	add    eax,edx
   1fc02:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1fc05:	eb 23                	jmp    1fc2a <fatfs_filename_to_lfn+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:240
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   1fc07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fc0a:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1fc0e:	89 c2                	mov    edx,eax
   1fc10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fc13:	01 d0                	add    eax,edx
   1fc15:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:241
            buffer[nameIndexes[i]+1] = 0xFF;
   1fc18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fc1b:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1fc1f:	8d 50 01             	lea    edx,[eax+0x1]
   1fc22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fc25:	01 d0                	add    eax,edx
   1fc27:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 2)

    // Checksum of short filename
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1fc2a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 1)
   1fc2e:	83 7d f4 0c          	cmp    DWORD PTR [ebp-0xc],0xc
   1fc32:	7e 82                	jle    1fbb6 <fatfs_filename_to_lfn+0xed>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:244
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
   1fc34:	90                   	nop
   1fc35:	c9                   	leave  
   1fc36:	c3                   	ret    

0001fc37 <fatfs_sfn_create_entry>:
fatfs_sfn_create_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:251
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
   1fc37:	55                   	push   ebp
   1fc38:	89 e5                	mov    ebp,esp
   1fc3a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1fc3d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1fc44:	eb 1b                	jmp    1fc61 <fatfs_sfn_create_entry+0x2a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:256 (discriminator 3)
        entry->Name[i] = shortfilename[i];
   1fc46:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1fc49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc4c:	01 d0                	add    eax,edx
   1fc4e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc51:	89 c1                	mov    ecx,eax
   1fc53:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1fc56:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1fc59:	01 d0                	add    eax,edx
   1fc5b:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255 (discriminator 3)
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1fc5d:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255 (discriminator 1)
   1fc61:	83 7d fc 0a          	cmp    DWORD PTR [ebp-0x4],0xa
   1fc65:	7e df                	jle    1fc46 <fatfs_sfn_create_entry+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:259
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
   1fc67:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc6a:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:260
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
   1fc6e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc71:	c6 40 0e 00          	mov    BYTE PTR [eax+0xe],0x0
   1fc75:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc78:	0f b6 50 0e          	movzx  edx,BYTE PTR [eax+0xe]
   1fc7c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc7f:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:261
    entry->CrtDate[1] = 0x00;
   1fc82:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc85:	c6 40 11 00          	mov    BYTE PTR [eax+0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:262
    entry->CrtDate[0] = 0x20;
   1fc89:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc8c:	c6 40 10 20          	mov    BYTE PTR [eax+0x10],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:263
    entry->LstAccDate[1] = 0x00;
   1fc90:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc93:	c6 40 13 00          	mov    BYTE PTR [eax+0x13],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:264
    entry->LstAccDate[0] = 0x20;
   1fc97:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc9a:	c6 40 12 20          	mov    BYTE PTR [eax+0x12],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:265
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
   1fc9e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fca1:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
   1fca5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fca8:	0f b6 50 16          	movzx  edx,BYTE PTR [eax+0x16]
   1fcac:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fcaf:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:266
    entry->WrtDate[1] = 0x00;
   1fcb2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fcb5:	c6 40 19 00          	mov    BYTE PTR [eax+0x19],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:267
    entry->WrtDate[0] = 0x20;
   1fcb9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fcbc:	c6 40 18 20          	mov    BYTE PTR [eax+0x18],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:269

    if (!dir)
   1fcc0:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1fcc4:	75 09                	jne    1fccf <fatfs_sfn_create_entry+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:270
        entry->Attr = FILE_TYPE_FILE;
   1fcc6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fcc9:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
   1fccd:	eb 07                	jmp    1fcd6 <fatfs_sfn_create_entry+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:272
    else
        entry->Attr = FILE_TYPE_DIR;
   1fccf:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fcd2:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:274

    entry->NTRes = 0x00;
   1fcd6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fcd9:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:276

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
   1fcdd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fce0:	c1 e8 10             	shr    eax,0x10
   1fce3:	89 c2                	mov    edx,eax
   1fce5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fce8:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:277
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
   1fcec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fcef:	89 c2                	mov    edx,eax
   1fcf1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fcf4:	66 89 50 1a          	mov    WORD PTR [eax+0x1a],dx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:278
    entry->FileSize = FAT_HTONL(size);
   1fcf8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fcfb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1fcfe:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:279
}
   1fd01:	90                   	nop
   1fd02:	c9                   	leave  
   1fd03:	c3                   	ret    

0001fd04 <fatfs_lfn_create_sfn>:
fatfs_lfn_create_sfn():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:286
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
   1fd04:	55                   	push   ebp
   1fd05:	89 e5                	mov    ebp,esp
   1fd07:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:288
    int i;
    int dotPos = -1;
   1fd0a:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:291
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
   1fd11:	83 ec 0c             	sub    esp,0xc
   1fd14:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1fd17:	e8 58 7d 00 00       	call   27a74 <strlen>
   1fd1c:	83 c4 10             	add    esp,0x10
   1fd1f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:294

    // Invalid to start with .
    if (filename[0]=='.')
   1fd22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fd25:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd28:	3c 2e                	cmp    al,0x2e
   1fd2a:	75 0a                	jne    1fd36 <fatfs_lfn_create_sfn+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:295
        return 0;
   1fd2c:	b8 00 00 00 00       	mov    eax,0x0
   1fd31:	e9 a5 01 00 00       	jmp    1fedb <fatfs_lfn_create_sfn+0x1d7>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:297

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
   1fd36:	83 ec 04             	sub    esp,0x4
   1fd39:	6a 0b                	push   0xb
   1fd3b:	6a 20                	push   0x20
   1fd3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fd40:	e8 f8 58 00 00       	call   2563d <memset>
   1fd45:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:298
    memset(ext, ' ', 3);
   1fd48:	83 ec 04             	sub    esp,0x4
   1fd4b:	6a 03                	push   0x3
   1fd4d:	6a 20                	push   0x20
   1fd4f:	8d 45 e5             	lea    eax,[ebp-0x1b]
   1fd52:	50                   	push   eax
   1fd53:	e8 e5 58 00 00       	call   2563d <memset>
   1fd58:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301

    // Find dot seperator
    for (i = 0; i< len; i++)
   1fd5b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1fd62:	eb 19                	jmp    1fd7d <fatfs_lfn_create_sfn+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:303
    {
        if (filename[i]=='.')
   1fd64:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fd67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fd6a:	01 d0                	add    eax,edx
   1fd6c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd6f:	3c 2e                	cmp    al,0x2e
   1fd71:	75 06                	jne    1fd79 <fatfs_lfn_create_sfn+0x75>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:304
            dotPos = i;
   1fd73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fd76:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301 (discriminator 2)

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
    memset(ext, ' ', 3);

    // Find dot seperator
    for (i = 0; i< len; i++)
   1fd79:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301 (discriminator 1)
   1fd7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fd80:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1fd83:	7c df                	jl     1fd64 <fatfs_lfn_create_sfn+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:308
        if (filename[i]=='.')
            dotPos = i;
    }

    // Extract extensions
    if (dotPos!=-1)
   1fd85:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   1fd89:	74 44                	je     1fdcf <fatfs_lfn_create_sfn+0xcb>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1fd8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fd8e:	83 c0 01             	add    eax,0x1
   1fd91:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1fd94:	eb 28                	jmp    1fdbe <fatfs_lfn_create_sfn+0xba>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:312
            if (i<len)
   1fd96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fd99:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1fd9c:	7d 1c                	jge    1fdba <fatfs_lfn_create_sfn+0xb6>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:313
                ext[i-(dotPos+1)] = filename[i];
   1fd9e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fda1:	8d 50 01             	lea    edx,[eax+0x1]
   1fda4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fda7:	29 d0                	sub    eax,edx
   1fda9:	89 c2                	mov    edx,eax
   1fdab:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1fdae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fdb1:	01 c8                	add    eax,ecx
   1fdb3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fdb6:	88 44 15 e5          	mov    BYTE PTR [ebp+edx*1-0x1b],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311 (discriminator 2)

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1fdba:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311 (discriminator 1)
   1fdbe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fdc1:	83 c0 04             	add    eax,0x4
   1fdc4:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1fdc7:	7f cd                	jg     1fd96 <fatfs_lfn_create_sfn+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:316
            if (i<len)
                ext[i-(dotPos+1)] = filename[i];

        // Shorten the length to the dot position
        len = dotPos;
   1fdc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fdcc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:320
    }

    // Add filename part
    pos = 0;
   1fdcf:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321
    for (i=0;i<len;i++)
   1fdd6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1fddd:	e9 85 00 00 00       	jmp    1fe67 <fatfs_lfn_create_sfn+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:323
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
   1fde2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fde5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fde8:	01 d0                	add    eax,edx
   1fdea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fded:	3c 20                	cmp    al,0x20
   1fdef:	74 6c                	je     1fe5d <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:323 (discriminator 1)
   1fdf1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fdf4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fdf7:	01 d0                	add    eax,edx
   1fdf9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fdfc:	3c 2e                	cmp    al,0x2e
   1fdfe:	74 5d                	je     1fe5d <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:325
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
   1fe00:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fe03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe06:	01 d0                	add    eax,edx
   1fe08:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe0b:	3c 60                	cmp    al,0x60
   1fe0d:	7e 31                	jle    1fe40 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:325 (discriminator 1)
   1fe0f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fe12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe15:	01 d0                	add    eax,edx
   1fe17:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe1a:	3c 7a                	cmp    al,0x7a
   1fe1c:	7f 22                	jg     1fe40 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:326
                sfn_output[pos++] = filename[i] - 'a' + 'A';
   1fe1e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1fe21:	8d 50 01             	lea    edx,[eax+0x1]
   1fe24:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1fe27:	89 c2                	mov    edx,eax
   1fe29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe2c:	01 d0                	add    eax,edx
   1fe2e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1fe31:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1fe34:	01 ca                	add    edx,ecx
   1fe36:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1fe39:	83 ea 20             	sub    edx,0x20
   1fe3c:	88 10                	mov    BYTE PTR [eax],dl
   1fe3e:	eb 1d                	jmp    1fe5d <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:328
            else
                sfn_output[pos++] = filename[i];
   1fe40:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1fe43:	8d 50 01             	lea    edx,[eax+0x1]
   1fe46:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1fe49:	89 c2                	mov    edx,eax
   1fe4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe4e:	01 c2                	add    edx,eax
   1fe50:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1fe53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe56:	01 c8                	add    eax,ecx
   1fe58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe5b:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:332
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
   1fe5d:	83 7d ec 08          	cmp    DWORD PTR [ebp-0x14],0x8
   1fe61:	74 12                	je     1fe75 <fatfs_lfn_create_sfn+0x171>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321 (discriminator 2)
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
   1fe63:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321 (discriminator 1)
   1fe67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fe6a:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1fe6d:	0f 8c 6f ff ff ff    	jl     1fde2 <fatfs_lfn_create_sfn+0xde>
   1fe73:	eb 01                	jmp    1fe76 <fatfs_lfn_create_sfn+0x172>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:333
                sfn_output[pos++] = filename[i];
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
   1fe75:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1fe76:	c7 45 f4 08 00 00 00 	mov    DWORD PTR [ebp-0xc],0x8
   1fe7d:	eb 51                	jmp    1fed0 <fatfs_lfn_create_sfn+0x1cc>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:339
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
   1fe7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fe82:	83 e8 08             	sub    eax,0x8
   1fe85:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1fe8a:	3c 60                	cmp    al,0x60
   1fe8c:	7e 29                	jle    1feb7 <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:339 (discriminator 1)
   1fe8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fe91:	83 e8 08             	sub    eax,0x8
   1fe94:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1fe99:	3c 7a                	cmp    al,0x7a
   1fe9b:	7f 1a                	jg     1feb7 <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:340
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
   1fe9d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fea0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fea3:	01 d0                	add    eax,edx
   1fea5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fea8:	83 ea 08             	sub    edx,0x8
   1feab:	0f b6 54 15 e5       	movzx  edx,BYTE PTR [ebp+edx*1-0x1b]
   1feb0:	83 ea 20             	sub    edx,0x20
   1feb3:	88 10                	mov    BYTE PTR [eax],dl
   1feb5:	eb 15                	jmp    1fecc <fatfs_lfn_create_sfn+0x1c8>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:342
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
   1feb7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1feba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1febd:	01 c2                	add    edx,eax
   1febf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fec2:	83 e8 08             	sub    eax,0x8
   1fec5:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1feca:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337 (discriminator 2)
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1fecc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337 (discriminator 1)
   1fed0:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1fed4:	7e a9                	jle    1fe7f <fatfs_lfn_create_sfn+0x17b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:345
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
   1fed6:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:346 (discriminator 1)
}
   1fedb:	c9                   	leave  
   1fedc:	c3                   	ret    

0001fedd <fatfs_itoa>:
fatfs_itoa():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:351
//-----------------------------------------------------------------------------
// fatfs_itoa:
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
   1fedd:	55                   	push   ebp
   1fede:	89 e5                	mov    ebp,esp
   1fee0:	53                   	push   ebx
   1fee1:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:354
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
   1fee4:	c7 45 db 30 31 32 33 	mov    DWORD PTR [ebp-0x25],0x33323130
   1feeb:	c7 45 df 34 35 36 37 	mov    DWORD PTR [ebp-0x21],0x37363534
   1fef2:	c7 45 e3 38 39 41 42 	mov    DWORD PTR [ebp-0x1d],0x42413938
   1fef9:	c7 45 e7 43 44 45 46 	mov    DWORD PTR [ebp-0x19],0x46454443
   1ff00:	c6 45 eb 00          	mov    BYTE PTR [ebp-0x15],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:357

    // Build string backwards
    cp = outbuf;
   1ff04:	8d 45 ec             	lea    eax,[ebp-0x14]
   1ff07:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:360 (discriminator 1)
    do
    {
        *cp++ = digits[(int)(num % 10)];
   1ff0a:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   1ff0d:	8d 41 01             	lea    eax,[ecx+0x1]
   1ff10:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   1ff13:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1ff16:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1ff1b:	89 d8                	mov    eax,ebx
   1ff1d:	f7 e2                	mul    edx
   1ff1f:	c1 ea 03             	shr    edx,0x3
   1ff22:	89 d0                	mov    eax,edx
   1ff24:	c1 e0 02             	shl    eax,0x2
   1ff27:	01 d0                	add    eax,edx
   1ff29:	01 c0                	add    eax,eax
   1ff2b:	29 c3                	sub    ebx,eax
   1ff2d:	89 da                	mov    edx,ebx
   1ff2f:	89 d0                	mov    eax,edx
   1ff31:	0f b6 44 05 db       	movzx  eax,BYTE PTR [ebp+eax*1-0x25]
   1ff36:	88 01                	mov    BYTE PTR [ecx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:362 (discriminator 1)
    }
    while ((num /= 10) > 0);
   1ff38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff3b:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1ff40:	f7 e2                	mul    edx
   1ff42:	89 d0                	mov    eax,edx
   1ff44:	c1 e8 03             	shr    eax,0x3
   1ff47:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   1ff4a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1ff4e:	75 ba                	jne    1ff0a <fatfs_itoa+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:364

    *cp-- = 0;
   1ff50:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1ff53:	8d 50 ff             	lea    edx,[eax-0x1]
   1ff56:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   1ff59:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:367

    // Copy in forwards
    while (cp >= outbuf)
   1ff5c:	eb 17                	jmp    1ff75 <fatfs_itoa+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:368
        *s++ = *cp--;
   1ff5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ff61:	8d 50 01             	lea    edx,[eax+0x1]
   1ff64:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   1ff67:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1ff6a:	8d 4a ff             	lea    ecx,[edx-0x1]
   1ff6d:	89 4d f8             	mov    DWORD PTR [ebp-0x8],ecx
   1ff70:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1ff73:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:367
    while ((num /= 10) > 0);

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
   1ff75:	8d 45 ec             	lea    eax,[ebp-0x14]
   1ff78:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   1ff7b:	73 e1                	jae    1ff5e <fatfs_itoa+0x81>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:370
        *s++ = *cp--;

    *s = 0;
   1ff7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ff80:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:371
}
   1ff83:	90                   	nop
   1ff84:	83 c4 30             	add    esp,0x30
   1ff87:	5b                   	pop    ebx
   1ff88:	5d                   	pop    ebp
   1ff89:	c3                   	ret    

0001ff8a <fatfs_lfn_generate_tail>:
fatfs_lfn_generate_tail():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:381
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
   1ff8a:	55                   	push   ebp
   1ff8b:	89 e5                	mov    ebp,esp
   1ff8d:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:385
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
   1ff90:	81 7d 10 9f 86 01 00 	cmp    DWORD PTR [ebp+0x10],0x1869f
   1ff97:	76 07                	jbe    1ffa0 <fatfs_lfn_generate_tail+0x16>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:386
        return 0;
   1ff99:	b8 00 00 00 00       	mov    eax,0x0
   1ff9e:	eb 79                	jmp    20019 <fatfs_lfn_generate_tail+0x8f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:389

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
   1ffa0:	83 ec 04             	sub    esp,0x4
   1ffa3:	6a 0c                	push   0xc
   1ffa5:	6a 00                	push   0x0
   1ffa7:	8d 45 e8             	lea    eax,[ebp-0x18]
   1ffaa:	50                   	push   eax
   1ffab:	e8 8d 56 00 00       	call   2563d <memset>
   1ffb0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:390
    tail_str[0] = '~';
   1ffb3:	c6 45 e8 7e          	mov    BYTE PTR [ebp-0x18],0x7e
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:391
    fatfs_itoa(tailNum, tail_str+1);
   1ffb7:	8d 45 e8             	lea    eax,[ebp-0x18]
   1ffba:	83 c0 01             	add    eax,0x1
   1ffbd:	83 ec 08             	sub    esp,0x8
   1ffc0:	50                   	push   eax
   1ffc1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1ffc4:	e8 14 ff ff ff       	call   1fedd <fatfs_itoa>
   1ffc9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:394

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
   1ffcc:	83 ec 04             	sub    esp,0x4
   1ffcf:	6a 0b                	push   0xb
   1ffd1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ffd4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ffd7:	e8 28 62 00 00       	call   26204 <memcpy>
   1ffdc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:397

    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
   1ffdf:	83 ec 0c             	sub    esp,0xc
   1ffe2:	8d 45 e8             	lea    eax,[ebp-0x18]
   1ffe5:	50                   	push   eax
   1ffe6:	e8 89 7a 00 00       	call   27a74 <strlen>
   1ffeb:	83 c4 10             	add    esp,0x10
   1ffee:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:398
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);
   1fff1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fff4:	ba 08 00 00 00       	mov    edx,0x8
   1fff9:	2b 55 f4             	sub    edx,DWORD PTR [ebp-0xc]
   1fffc:	89 d1                	mov    ecx,edx
   1fffe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20001:	01 ca                	add    edx,ecx
   20003:	83 ec 04             	sub    esp,0x4
   20006:	50                   	push   eax
   20007:	8d 45 e8             	lea    eax,[ebp-0x18]
   2000a:	50                   	push   eax
   2000b:	52                   	push   edx
   2000c:	e8 f3 61 00 00       	call   26204 <memcpy>
   20011:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:400

    return 1;
   20014:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:401 (discriminator 1)
}
   20019:	c9                   	leave  
   2001a:	c3                   	ret    

0002001b <fatfs_convert_from_fat_time>:
fatfs_convert_from_fat_time():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:409
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_time: Convert FAT time to h/m/s
//-----------------------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
void fatfs_convert_from_fat_time(uint16 fat_time, int *hours, int *minutes, int *seconds)
{
   2001b:	55                   	push   ebp
   2001c:	89 e5                	mov    ebp,esp
   2001e:	83 ec 04             	sub    esp,0x4
   20021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20024:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:410
    *hours = (fat_time >> FAT_TIME_HOURS_SHIFT) & FAT_TIME_HOURS_MASK;
   20028:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   2002c:	66 c1 e8 0b          	shr    ax,0xb
   20030:	0f b7 c0             	movzx  eax,ax
   20033:	83 e0 1f             	and    eax,0x1f
   20036:	89 c2                	mov    edx,eax
   20038:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2003b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:411
    *minutes = (fat_time >> FAT_TIME_MINUTES_SHIFT) & FAT_TIME_MINUTES_MASK;
   2003d:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   20041:	66 c1 e8 05          	shr    ax,0x5
   20045:	0f b7 c0             	movzx  eax,ax
   20048:	83 e0 3f             	and    eax,0x3f
   2004b:	89 c2                	mov    edx,eax
   2004d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20050:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:412
    *seconds = (fat_time >> FAT_TIME_SECONDS_SHIFT) & FAT_TIME_SECONDS_MASK;
   20052:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   20056:	83 e0 1f             	and    eax,0x1f
   20059:	89 c2                	mov    edx,eax
   2005b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2005e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:413
    *seconds = *seconds * FAT_TIME_SECONDS_SCALE;
   20060:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20063:	8b 00                	mov    eax,DWORD PTR [eax]
   20065:	8d 14 00             	lea    edx,[eax+eax*1]
   20068:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2006b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:414
}
   2006d:	90                   	nop
   2006e:	c9                   	leave  
   2006f:	c3                   	ret    

00020070 <fatfs_convert_from_fat_date>:
fatfs_convert_from_fat_date():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:419
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_date: Convert FAT date to d/m/y
//-----------------------------------------------------------------------------
void fatfs_convert_from_fat_date(uint16 fat_date, int *day, int *month, int *year)
{
   20070:	55                   	push   ebp
   20071:	89 e5                	mov    ebp,esp
   20073:	83 ec 04             	sub    esp,0x4
   20076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20079:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:420
    *day = (fat_date >> FAT_DATE_DAY_SHIFT) & FAT_DATE_DAY_MASK;
   2007d:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   20081:	83 e0 1f             	and    eax,0x1f
   20084:	89 c2                	mov    edx,eax
   20086:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20089:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:421
    *month = (fat_date >> FAT_DATE_MONTH_SHIFT) & FAT_DATE_MONTH_MASK;
   2008b:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   2008f:	66 c1 e8 05          	shr    ax,0x5
   20093:	0f b7 c0             	movzx  eax,ax
   20096:	83 e0 0f             	and    eax,0xf
   20099:	89 c2                	mov    edx,eax
   2009b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2009e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:422
    *year = (fat_date >> FAT_DATE_YEAR_SHIFT) & FAT_DATE_YEAR_MASK;
   200a0:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   200a4:	66 c1 e8 09          	shr    ax,0x9
   200a8:	0f b7 c0             	movzx  eax,ax
   200ab:	83 e0 7f             	and    eax,0x7f
   200ae:	89 c2                	mov    edx,eax
   200b0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   200b3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:423
    *year = *year + FAT_DATE_YEAR_OFFSET;
   200b5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   200b8:	8b 00                	mov    eax,DWORD PTR [eax]
   200ba:	8d 90 bc 07 00 00    	lea    edx,[eax+0x7bc]
   200c0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   200c3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:424
}
   200c5:	90                   	nop
   200c6:	c9                   	leave  
   200c7:	c3                   	ret    

000200c8 <fatfs_convert_to_fat_time>:
fatfs_convert_to_fat_time():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:429
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_time: Convert h/m/s to FAT time
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_time(int hours, int minutes, int seconds)
{
   200c8:	55                   	push   ebp
   200c9:	89 e5                	mov    ebp,esp
   200cb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:430
    uint16 fat_time = 0;
   200ce:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:433

    // Most FAT times are to a resolution of 2 seconds
    seconds /= FAT_TIME_SECONDS_SCALE;
   200d4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   200d7:	89 c2                	mov    edx,eax
   200d9:	c1 ea 1f             	shr    edx,0x1f
   200dc:	01 d0                	add    eax,edx
   200de:	d1 f8                	sar    eax,1
   200e0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:435

    fat_time = (hours & FAT_TIME_HOURS_MASK) << FAT_TIME_HOURS_SHIFT;
   200e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   200e6:	c1 e0 0b             	shl    eax,0xb
   200e9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:436
    fat_time|= (minutes & FAT_TIME_MINUTES_MASK) << FAT_TIME_MINUTES_SHIFT;
   200ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   200f0:	83 e0 3f             	and    eax,0x3f
   200f3:	c1 e0 05             	shl    eax,0x5
   200f6:	89 c2                	mov    edx,eax
   200f8:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   200fc:	09 d0                	or     eax,edx
   200fe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:437
    fat_time|= (seconds & FAT_TIME_SECONDS_MASK) << FAT_TIME_SECONDS_SHIFT;
   20102:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20105:	83 e0 1f             	and    eax,0x1f
   20108:	89 c2                	mov    edx,eax
   2010a:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   2010e:	09 d0                	or     eax,edx
   20110:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:439

    return fat_time;
   20114:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:440
}
   20118:	c9                   	leave  
   20119:	c3                   	ret    

0002011a <fatfs_convert_to_fat_date>:
fatfs_convert_to_fat_date():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:445
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_date: Convert d/m/y to FAT date
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_date(int day, int month, int year)
{
   2011a:	55                   	push   ebp
   2011b:	89 e5                	mov    ebp,esp
   2011d:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:446
    uint16 fat_date = 0;
   20120:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:449

    // FAT dates are relative to 1980
    if (year >= FAT_DATE_YEAR_OFFSET)
   20126:	81 7d 10 bb 07 00 00 	cmp    DWORD PTR [ebp+0x10],0x7bb
   2012d:	7e 07                	jle    20136 <fatfs_convert_to_fat_date+0x1c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:450
        year -= FAT_DATE_YEAR_OFFSET;
   2012f:	81 6d 10 bc 07 00 00 	sub    DWORD PTR [ebp+0x10],0x7bc
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:452

    fat_date = (day & FAT_DATE_DAY_MASK) << FAT_DATE_DAY_SHIFT;
   20136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20139:	83 e0 1f             	and    eax,0x1f
   2013c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:453
    fat_date|= (month & FAT_DATE_MONTH_MASK) << FAT_DATE_MONTH_SHIFT;
   20140:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20143:	83 e0 0f             	and    eax,0xf
   20146:	c1 e0 05             	shl    eax,0x5
   20149:	89 c2                	mov    edx,eax
   2014b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   2014f:	09 d0                	or     eax,edx
   20151:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:454
    fat_date|= (year & FAT_DATE_YEAR_MASK) << FAT_DATE_YEAR_SHIFT;
   20155:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20158:	c1 e0 09             	shl    eax,0x9
   2015b:	89 c2                	mov    edx,eax
   2015d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   20161:	09 d0                	or     eax,edx
   20163:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:456

    return fat_date;
   20167:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:457
}
   2016b:	c9                   	leave  
   2016c:	c3                   	ret    
   2016d:	66 90                	xchg   ax,ax
   2016f:	90                   	nop

00020170 <fatfs_total_path_levels>:
fatfs_total_path_levels():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:45
//        c:\folder\file.zip
//        /dev/etc/samba.conf
// Returns: -1 = Error, 0 or more = Ok
//-----------------------------------------------------------------------------
int fatfs_total_path_levels(char *path)
{
   20170:	55                   	push   ebp
   20171:	89 e5                	mov    ebp,esp
   20173:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:46
    int levels = 0;
   20176:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:49
    char expectedchar;

    if (!path)
   2017d:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   20181:	75 07                	jne    2018a <fatfs_total_path_levels+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:50
        return -1;
   20183:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20188:	eb 74                	jmp    201fe <fatfs_total_path_levels+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:55

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   2018a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2018d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20190:	3c 2f                	cmp    al,0x2f
   20192:	75 0a                	jne    2019e <fatfs_total_path_levels+0x2e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:57
    {
        expectedchar = '/';
   20194:	c6 45 fb 2f          	mov    BYTE PTR [ebp-0x5],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:58
        path++;
   20198:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   2019c:	eb 50                	jmp    201ee <fatfs_total_path_levels+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:60
    }
    else if (path[1] == ':' || path[2] == '\\')
   2019e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201a1:	83 c0 01             	add    eax,0x1
   201a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201a7:	3c 3a                	cmp    al,0x3a
   201a9:	74 0d                	je     201b8 <fatfs_total_path_levels+0x48>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:60 (discriminator 1)
   201ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201ae:	83 c0 02             	add    eax,0x2
   201b1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201b4:	3c 5c                	cmp    al,0x5c
   201b6:	75 0a                	jne    201c2 <fatfs_total_path_levels+0x52>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:62
    {
        expectedchar = '\\';
   201b8:	c6 45 fb 5c          	mov    BYTE PTR [ebp-0x5],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:63
        path += 3;
   201bc:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   201c0:	eb 07                	jmp    201c9 <fatfs_total_path_levels+0x59>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:66
    }
    else
        return -1;
   201c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
   201c7:	eb 35                	jmp    201fe <fatfs_total_path_levels+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:69

    // Count levels in path string
    while (*path)
   201c9:	eb 23                	jmp    201ee <fatfs_total_path_levels+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   201cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201ce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201d1:	3a 45 fb             	cmp    al,BYTE PTR [ebp-0x5]
   201d4:	75 06                	jne    201dc <fatfs_total_path_levels+0x6c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:75 (discriminator 1)
   201d6:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   201da:	eb 0e                	jmp    201ea <fatfs_total_path_levels+0x7a>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:76
            path++;
   201dc:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:72

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
   201e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201e3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201e6:	84 c0                	test   al,al
   201e8:	75 e1                	jne    201cb <fatfs_total_path_levels+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:80
            if (*path == expectedchar) { path++; break; }
            path++;
        }

        // Increase number of subdirs founds
        levels++;
   201ea:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:69
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   201ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201f4:	84 c0                	test   al,al
   201f6:	75 e8                	jne    201e0 <fatfs_total_path_levels+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:84
        // Increase number of subdirs founds
        levels++;
    }

    // Subtract the file itself
    return levels-1;
   201f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   201fb:	83 e8 01             	sub    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:85
}
   201fe:	c9                   	leave  
   201ff:	c3                   	ret    

00020200 <fatfs_get_substring>:
fatfs_get_substring():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:93
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
   20200:	55                   	push   ebp
   20201:	89 e5                	mov    ebp,esp
   20203:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:95
    int i;
    int pathlen=0;
   20206:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:96
    int levels=0;
   2020d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:97
    int copypnt=0;
   20214:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:100
    char expectedchar;

    if (!path || max_len <= 0)
   2021b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2021f:	74 06                	je     20227 <fatfs_get_substring+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:100 (discriminator 1)
   20221:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   20225:	7f 0a                	jg     20231 <fatfs_get_substring+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:101
        return -1;
   20227:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2022c:	e9 d2 00 00 00       	jmp    20303 <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:106

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   20231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20234:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20237:	3c 2f                	cmp    al,0x2f
   20239:	75 0a                	jne    20245 <fatfs_get_substring+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:108
    {
        expectedchar = '/';
   2023b:	c6 45 eb 2f          	mov    BYTE PTR [ebp-0x15],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:109
        path++;
   2023f:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   20243:	eb 2e                	jmp    20273 <fatfs_get_substring+0x73>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:111
    }
    else if (path[1] == ':' || path[2] == '\\')
   20245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20248:	83 c0 01             	add    eax,0x1
   2024b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2024e:	3c 3a                	cmp    al,0x3a
   20250:	74 0d                	je     2025f <fatfs_get_substring+0x5f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:111 (discriminator 1)
   20252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20255:	83 c0 02             	add    eax,0x2
   20258:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2025b:	3c 5c                	cmp    al,0x5c
   2025d:	75 0a                	jne    20269 <fatfs_get_substring+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:113
    {
        expectedchar = '\\';
   2025f:	c6 45 eb 5c          	mov    BYTE PTR [ebp-0x15],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:114
        path += 3;
   20263:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   20267:	eb 0a                	jmp    20273 <fatfs_get_substring+0x73>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:117
    }
    else
        return -1;
   20269:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2026e:	e9 90 00 00 00       	jmp    20303 <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:120

    // Get string length of path
    pathlen = (int)strlen (path);
   20273:	83 ec 0c             	sub    esp,0xc
   20276:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20279:	e8 f6 77 00 00       	call   27a74 <strlen>
   2027e:	83 c4 10             	add    esp,0x10
   20281:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   20284:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2028b:	eb 4d                	jmp    202da <fatfs_get_substring+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:126
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
   2028d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20290:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20293:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   20296:	75 04                	jne    2029c <fatfs_get_substring+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:126 (discriminator 1)
   20298:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   2029c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2029f:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   202a2:	75 2e                	jne    202d2 <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129 (discriminator 1)
   202a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   202a7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   202aa:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   202ad:	74 23                	je     202d2 <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129 (discriminator 2)
   202af:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   202b2:	83 e8 01             	sub    eax,0x1
   202b5:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   202b8:	7e 18                	jle    202d2 <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:130
            output[copypnt++] = *path;
   202ba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   202bd:	8d 50 01             	lea    edx,[eax+0x1]
   202c0:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   202c3:	89 c2                	mov    edx,eax
   202c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   202c8:	01 c2                	add    edx,eax
   202ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   202cd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   202d0:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:133 (discriminator 2)

        // Increment through path string
        path++;
   202d2:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123 (discriminator 2)

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   202d6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123 (discriminator 1)
   202da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   202dd:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   202e0:	7c ab                	jl     2028d <fatfs_get_substring+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:137
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
   202e2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   202e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   202e8:	01 d0                	add    eax,edx
   202ea:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:140

    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
   202ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   202f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   202f3:	84 c0                	test   al,al
   202f5:	74 07                	je     202fe <fatfs_get_substring+0xfe>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:141
        return 0;    // OK
   202f7:	b8 00 00 00 00       	mov    eax,0x0
   202fc:	eb 05                	jmp    20303 <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:143
    else
        return -1;    // Error
   202fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:144
}
   20303:	c9                   	leave  
   20304:	c3                   	ret    

00020305 <fatfs_split_path>:
fatfs_split_path():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:152
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
   20305:	55                   	push   ebp
   20306:	89 e5                	mov    ebp,esp
   20308:	53                   	push   ebx
   20309:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:156
    int strindex;

    // Count the levels to the filepath
    int levels = fatfs_total_path_levels(full_path);
   2030c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2030f:	e8 5c fe ff ff       	call   20170 <fatfs_total_path_levels>
   20314:	83 c4 04             	add    esp,0x4
   20317:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:157
    if (levels == -1)
   2031a:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   2031e:	75 0a                	jne    2032a <fatfs_split_path+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:158
        return -1;
   20320:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20325:	e9 88 00 00 00       	jmp    203b2 <fatfs_split_path+0xad>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:161

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
   2032a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   2032d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   20330:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20333:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20336:	e8 c5 fe ff ff       	call   20200 <fatfs_get_substring>
   2033b:	83 c4 10             	add    esp,0x10
   2033e:	85 c0                	test   eax,eax
   20340:	74 07                	je     20349 <fatfs_split_path+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:162
        return -1;
   20342:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20347:	eb 69                	jmp    203b2 <fatfs_split_path+0xad>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:165

    // If root file
    if (levels == 0)
   20349:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2034d:	75 08                	jne    20357 <fatfs_split_path+0x52>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:166
        path[0] = '\0';
   2034f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20352:	c6 00 00             	mov    BYTE PTR [eax],0x0
   20355:	eb 56                	jmp    203ad <fatfs_split_path+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:169
    else
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
   20357:	83 ec 0c             	sub    esp,0xc
   2035a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2035d:	e8 12 77 00 00       	call   27a74 <strlen>
   20362:	83 c4 10             	add    esp,0x10
   20365:	89 c3                	mov    ebx,eax
   20367:	83 ec 0c             	sub    esp,0xc
   2036a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   2036d:	e8 02 77 00 00       	call   27a74 <strlen>
   20372:	83 c4 10             	add    esp,0x10
   20375:	29 c3                	sub    ebx,eax
   20377:	89 d8                	mov    eax,ebx
   20379:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:170
        if (strindex > max_path)
   2037c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2037f:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   20382:	7e 06                	jle    2038a <fatfs_split_path+0x85>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:171
            strindex = max_path;
   20384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20387:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:173

        memcpy(path, full_path, strindex);
   2038a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2038d:	83 ec 04             	sub    esp,0x4
   20390:	50                   	push   eax
   20391:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20394:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20397:	e8 68 5e 00 00       	call   26204 <memcpy>
   2039c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:174
        path[strindex-1] = '\0';
   2039f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   203a2:	8d 50 ff             	lea    edx,[eax-0x1]
   203a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   203a8:	01 d0                	add    eax,edx
   203aa:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:177
    }

    return 0;
   203ad:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:178
}
   203b2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   203b5:	c9                   	leave  
   203b6:	c3                   	ret    

000203b7 <FileString_StrCmpNoCase>:
FileString_StrCmpNoCase():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:183
//-----------------------------------------------------------------------------
// FileString_StrCmpNoCase: Compare two strings case with case sensitivity
//-----------------------------------------------------------------------------
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
   203b7:	55                   	push   ebp
   203b8:	89 e5                	mov    ebp,esp
   203ba:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:187
    int diff;
    char a,b;

    while (n--)
   203bd:	eb 74                	jmp    20433 <FileString_StrCmpNoCase+0x7c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:189
    {
        a = *s1;
   203bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203c2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   203c5:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:190
        b = *s2;
   203c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   203cb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   203ce:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:193

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
   203d1:	80 7d ff 40          	cmp    BYTE PTR [ebp-0x1],0x40
   203d5:	7e 10                	jle    203e7 <FileString_StrCmpNoCase+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:193 (discriminator 1)
   203d7:	80 7d ff 5a          	cmp    BYTE PTR [ebp-0x1],0x5a
   203db:	7f 0a                	jg     203e7 <FileString_StrCmpNoCase+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:194
            a+= 32;
   203dd:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   203e1:	83 c0 20             	add    eax,0x20
   203e4:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:195
        if ((b>='A') && (b<='Z'))
   203e7:	80 7d fe 40          	cmp    BYTE PTR [ebp-0x2],0x40
   203eb:	7e 10                	jle    203fd <FileString_StrCmpNoCase+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:195 (discriminator 1)
   203ed:	80 7d fe 5a          	cmp    BYTE PTR [ebp-0x2],0x5a
   203f1:	7f 0a                	jg     203fd <FileString_StrCmpNoCase+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:196
            b+= 32;
   203f3:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   203f7:	83 c0 20             	add    eax,0x20
   203fa:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:198

        diff = a - b;
   203fd:	0f be 55 ff          	movsx  edx,BYTE PTR [ebp-0x1]
   20401:	0f be 45 fe          	movsx  eax,BYTE PTR [ebp-0x2]
   20405:	29 c2                	sub    edx,eax
   20407:	89 d0                	mov    eax,edx
   20409:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:201

        // If different
        if (diff)
   2040c:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
   20410:	74 05                	je     20417 <FileString_StrCmpNoCase+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:202
            return diff;
   20412:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   20415:	eb 32                	jmp    20449 <FileString_StrCmpNoCase+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:205

        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
   20417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2041a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2041d:	84 c0                	test   al,al
   2041f:	74 23                	je     20444 <FileString_StrCmpNoCase+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:205 (discriminator 1)
   20421:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20424:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20427:	84 c0                	test   al,al
   20429:	74 19                	je     20444 <FileString_StrCmpNoCase+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:208
            break;

        s1++;
   2042b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:209
        s2++;
   2042f:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:187
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
   20433:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20436:	8d 50 ff             	lea    edx,[eax-0x1]
   20439:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2043c:	85 c0                	test   eax,eax
   2043e:	0f 85 7b ff ff ff    	jne    203bf <FileString_StrCmpNoCase+0x8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:211
            break;

        s1++;
        s2++;
    }
    return 0;
   20444:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:212
}
   20449:	c9                   	leave  
   2044a:	c3                   	ret    

0002044b <FileString_GetExtension>:
FileString_GetExtension():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:218
//-----------------------------------------------------------------------------
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
   2044b:	55                   	push   ebp
   2044c:	89 e5                	mov    ebp,esp
   2044e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:219
    int dotPos = -1;
   20451:	c7 45 fc ff ff ff ff 	mov    DWORD PTR [ebp-0x4],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:220
    char *strSrc = str;
   20458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2045b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:223

    // Find last '.' in string (if at all)
    while (*strSrc)
   2045e:	eb 1b                	jmp    2047b <FileString_GetExtension+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:225
    {
        if (*strSrc=='.')
   20460:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   20463:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20466:	3c 2e                	cmp    al,0x2e
   20468:	75 0d                	jne    20477 <FileString_GetExtension+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:226
            dotPos = (int)(strSrc-str);
   2046a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   2046d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20470:	29 c2                	sub    edx,eax
   20472:	89 d0                	mov    eax,edx
   20474:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:228

        strSrc++;
   20477:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:223
{
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   2047b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   2047e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20481:	84 c0                	test   al,al
   20483:	75 db                	jne    20460 <FileString_GetExtension+0x15>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:231
            dotPos = (int)(strSrc-str);

        strSrc++;
    }

    return dotPos;
   20485:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:232
}
   20488:	c9                   	leave  
   20489:	c3                   	ret    

0002048a <FileString_TrimLength>:
FileString_TrimLength():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:238
//-----------------------------------------------------------------------------
// FileString_TrimLength: Get length of string excluding trailing spaces
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
   2048a:	55                   	push   ebp
   2048b:	89 e5                	mov    ebp,esp
   2048d:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:239
    int length = strLen;
   20490:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20493:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:240
    char *strSrc = str+strLen-1;
   20496:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20499:	8d 50 ff             	lea    edx,[eax-0x1]
   2049c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2049f:	01 d0                	add    eax,edx
   204a1:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
   204a4:	eb 1f                	jmp    204c5 <FileString_TrimLength+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:245
    {
        if (*strSrc == ' ')
   204a6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   204a9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   204ac:	3c 20                	cmp    al,0x20
   204ae:	75 1d                	jne    204cd <FileString_TrimLength+0x43>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:246
            length = (int)(strSrc - str);
   204b0:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   204b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   204b6:	29 c2                	sub    edx,eax
   204b8:	89 d0                	mov    eax,edx
   204ba:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:250
        else
            break;

        strSrc--;
   204bd:	83 6d f8 01          	sub    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:251
        strLen--;
   204c1:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:243
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
   204c5:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   204c9:	75 db                	jne    204a6 <FileString_TrimLength+0x1c>
   204cb:	eb 01                	jmp    204ce <FileString_TrimLength+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:248
    {
        if (*strSrc == ' ')
            length = (int)(strSrc - str);
        else
            break;
   204cd:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:254

        strSrc--;
        strLen--;
    }

    return length;
   204ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:255
}
   204d1:	c9                   	leave  
   204d2:	c3                   	ret    

000204d3 <fatfs_compare_names>:
fatfs_compare_names():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:261
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
   204d3:	55                   	push   ebp
   204d4:	89 e5                	mov    ebp,esp
   204d6:	53                   	push   ebx
   204d7:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:262
    char *ext1 = NULL;
   204da:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:263
    char *ext2 = NULL;
   204e1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:268
    int ext1Pos, ext2Pos;
    int file1Len, file2Len;

    // Get both files extension
    ext1Pos = FileString_GetExtension(strA);
   204e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   204eb:	e8 5b ff ff ff       	call   2044b <FileString_GetExtension>
   204f0:	83 c4 04             	add    esp,0x4
   204f3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:269
    ext2Pos = FileString_GetExtension(strB);
   204f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   204f9:	e8 4d ff ff ff       	call   2044b <FileString_GetExtension>
   204fe:	83 c4 04             	add    esp,0x4
   20501:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:274

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
   20504:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   20508:	75 10                	jne    2051a <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:274 (discriminator 1)
   2050a:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   2050e:	74 0a                	je     2051a <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:275
        return 0;
   20510:	b8 00 00 00 00       	mov    eax,0x0
   20515:	e9 21 01 00 00       	jmp    2063b <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:276
    if ((ext2Pos==-1) && (ext1Pos!=-1))
   2051a:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   2051e:	75 10                	jne    20530 <fatfs_compare_names+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:276 (discriminator 1)
   20520:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   20524:	74 0a                	je     20530 <fatfs_compare_names+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:277
        return 0;
   20526:	b8 00 00 00 00       	mov    eax,0x0
   2052b:	e9 0b 01 00 00       	jmp    2063b <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:280

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
   20530:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   20534:	0f 84 84 00 00 00    	je     205be <fatfs_compare_names+0xeb>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:283
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
   2053a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2053d:	8d 50 01             	lea    edx,[eax+0x1]
   20540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20543:	01 d0                	add    eax,edx
   20545:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:284
        ext2 = strB+ext2Pos+1;
   20548:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2054b:	8d 50 01             	lea    edx,[eax+0x1]
   2054e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20551:	01 d0                	add    eax,edx
   20553:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:287

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
   20556:	83 ec 0c             	sub    esp,0xc
   20559:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2055c:	e8 13 75 00 00       	call   27a74 <strlen>
   20561:	83 c4 10             	add    esp,0x10
   20564:	89 c3                	mov    ebx,eax
   20566:	83 ec 0c             	sub    esp,0xc
   20569:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   2056c:	e8 03 75 00 00       	call   27a74 <strlen>
   20571:	83 c4 10             	add    esp,0x10
   20574:	39 c3                	cmp    ebx,eax
   20576:	74 0a                	je     20582 <fatfs_compare_names+0xaf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:288
            return 0;
   20578:	b8 00 00 00 00       	mov    eax,0x0
   2057d:	e9 b9 00 00 00       	jmp    2063b <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:291

        // If they dont match
        if (FileString_StrCmpNoCase(ext1, ext2, (int)strlen(ext1))!=0)
   20582:	83 ec 0c             	sub    esp,0xc
   20585:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   20588:	e8 e7 74 00 00       	call   27a74 <strlen>
   2058d:	83 c4 10             	add    esp,0x10
   20590:	83 ec 04             	sub    esp,0x4
   20593:	50                   	push   eax
   20594:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   20597:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2059a:	e8 18 fe ff ff       	call   203b7 <FileString_StrCmpNoCase>
   2059f:	83 c4 10             	add    esp,0x10
   205a2:	85 c0                	test   eax,eax
   205a4:	74 0a                	je     205b0 <fatfs_compare_names+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:292
            return 0;
   205a6:	b8 00 00 00 00       	mov    eax,0x0
   205ab:	e9 8b 00 00 00       	jmp    2063b <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:295

        // Filelength is upto extensions
        file1Len = ext1Pos;
   205b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   205b3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:296
        file2Len = ext2Pos;
   205b6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   205b9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   205bc:	eb 22                	jmp    205e0 <fatfs_compare_names+0x10d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:302
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
   205be:	83 ec 0c             	sub    esp,0xc
   205c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   205c4:	e8 ab 74 00 00       	call   27a74 <strlen>
   205c9:	83 c4 10             	add    esp,0x10
   205cc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:303
        file2Len = (int)strlen(strB);
   205cf:	83 ec 0c             	sub    esp,0xc
   205d2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   205d5:	e8 9a 74 00 00       	call   27a74 <strlen>
   205da:	83 c4 10             	add    esp,0x10
   205dd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:307
    }

    // Find length without trailing spaces (before ext)
    file1Len = FileString_TrimLength(strA, file1Len);
   205e0:	83 ec 08             	sub    esp,0x8
   205e3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   205e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   205e9:	e8 9c fe ff ff       	call   2048a <FileString_TrimLength>
   205ee:	83 c4 10             	add    esp,0x10
   205f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:308
    file2Len = FileString_TrimLength(strB, file2Len);
   205f4:	83 ec 08             	sub    esp,0x8
   205f7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   205fa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   205fd:	e8 88 fe ff ff       	call   2048a <FileString_TrimLength>
   20602:	83 c4 10             	add    esp,0x10
   20605:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:311

    // Check the file lengths match
    if (file1Len!=file2Len)
   20608:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2060b:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   2060e:	74 07                	je     20617 <fatfs_compare_names+0x144>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:312
        return 0;
   20610:	b8 00 00 00 00       	mov    eax,0x0
   20615:	eb 24                	jmp    2063b <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:315

    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
   20617:	83 ec 04             	sub    esp,0x4
   2061a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2061d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20620:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20623:	e8 8f fd ff ff       	call   203b7 <FileString_StrCmpNoCase>
   20628:	83 c4 10             	add    esp,0x10
   2062b:	85 c0                	test   eax,eax
   2062d:	74 07                	je     20636 <fatfs_compare_names+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:316
        return 0;
   2062f:	b8 00 00 00 00       	mov    eax,0x0
   20634:	eb 05                	jmp    2063b <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:318
    else
        return 1;
   20636:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:319
}
   2063b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2063e:	c9                   	leave  
   2063f:	c3                   	ret    

00020640 <fatfs_string_ends_with_slash>:
fatfs_string_ends_with_slash():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:324
//-----------------------------------------------------------------------------
// fatfs_string_ends_with_slash: Does the string end with a slash (\ or /)
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
   20640:	55                   	push   ebp
   20641:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:325
    if (path)
   20643:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   20647:	74 38                	je     20681 <fatfs_string_ends_with_slash+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:327
    {
        while (*path)
   20649:	eb 2c                	jmp    20677 <fatfs_string_ends_with_slash+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:330
        {
            // Last character?
            if (!(*(path+1)))
   2064b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2064e:	83 c0 01             	add    eax,0x1
   20651:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20654:	84 c0                	test   al,al
   20656:	75 1b                	jne    20673 <fatfs_string_ends_with_slash+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:332
            {
                if (*path == '\\' || *path == '/')
   20658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2065b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2065e:	3c 5c                	cmp    al,0x5c
   20660:	74 0a                	je     2066c <fatfs_string_ends_with_slash+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:332 (discriminator 1)
   20662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20665:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20668:	3c 2f                	cmp    al,0x2f
   2066a:	75 07                	jne    20673 <fatfs_string_ends_with_slash+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:333
                    return 1;
   2066c:	b8 01 00 00 00       	mov    eax,0x1
   20671:	eb 13                	jmp    20686 <fatfs_string_ends_with_slash+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:336
            }

            path++;
   20673:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:327
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
    if (path)
    {
        while (*path)
   20677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2067a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2067d:	84 c0                	test   al,al
   2067f:	75 ca                	jne    2064b <fatfs_string_ends_with_slash+0xb>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:340

            path++;
        }
    }

    return 0;
   20681:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:341
}
   20686:	5d                   	pop    ebp
   20687:	c3                   	ret    

00020688 <fatfs_get_sfn_display_name>:
fatfs_get_sfn_display_name():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:346
//-----------------------------------------------------------------------------
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
   20688:	55                   	push   ebp
   20689:	89 e5                	mov    ebp,esp
   2068b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:347
    int len = 0;
   2068e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348
    while (*in && len <= 11)
   20695:	eb 40                	jmp    206d7 <fatfs_get_sfn_display_name+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:350
    {
        char a = *in++;
   20697:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2069a:	8d 50 01             	lea    edx,[eax+0x1]
   2069d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   206a0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   206a3:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:352

        if (a == ' ')
   206a6:	80 7d fb 20          	cmp    BYTE PTR [ebp-0x5],0x20
   206aa:	75 02                	jne    206ae <fatfs_get_sfn_display_name+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:353
            continue;
   206ac:	eb 29                	jmp    206d7 <fatfs_get_sfn_display_name+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:355
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
   206ae:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   206b2:	7e 10                	jle    206c4 <fatfs_get_sfn_display_name+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:355 (discriminator 1)
   206b4:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   206b8:	7f 0a                	jg     206c4 <fatfs_get_sfn_display_name+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:356
            a+= 32;
   206ba:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   206be:	83 c0 20             	add    eax,0x20
   206c1:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:358

        *out++ = a;
   206c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   206c7:	8d 50 01             	lea    edx,[eax+0x1]
   206ca:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   206cd:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   206d1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:359
        len++;
   206d3:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
   206d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   206da:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   206dd:	84 c0                	test   al,al
   206df:	74 06                	je     206e7 <fatfs_get_sfn_display_name+0x5f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348 (discriminator 1)
   206e1:	83 7d fc 0b          	cmp    DWORD PTR [ebp-0x4],0xb
   206e5:	7e b0                	jle    20697 <fatfs_get_sfn_display_name+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:362

        *out++ = a;
        len++;
    }

    *out = '\0';
   206e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   206ea:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:363
    return 1;
   206ed:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:364
}
   206f2:	c9                   	leave  
   206f3:	c3                   	ret    

000206f4 <fatfs_get_extension>:
fatfs_get_extension():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:371
// fatfs_get_extension: Get extension of filename passed in 'filename'.
// Returned extension is always lower case.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_get_extension(char* filename, char* out, int maxlen)
{
   206f4:	55                   	push   ebp
   206f5:	89 e5                	mov    ebp,esp
   206f7:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:372
    int len = 0;
   206fa:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:375

    // Get files extension offset
    int ext_pos = FileString_GetExtension(filename);
   20701:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20704:	e8 42 fd ff ff       	call   2044b <FileString_GetExtension>
   20709:	83 c4 04             	add    esp,0x4
   2070c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377

    if (ext_pos > 0 && out && maxlen)
   2070f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20713:	7e 71                	jle    20786 <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377 (discriminator 1)
   20715:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20719:	74 6b                	je     20786 <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377 (discriminator 2)
   2071b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2071f:	74 65                	je     20786 <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:379
    {
        filename += ext_pos + 1;
   20721:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20724:	83 c0 01             	add    eax,0x1
   20727:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381

        while (*filename && len < (maxlen-1))
   2072a:	eb 38                	jmp    20764 <fatfs_get_extension+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:383
        {
            char a = *filename++;
   2072c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2072f:	8d 50 01             	lea    edx,[eax+0x1]
   20732:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   20735:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20738:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:386

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
   2073b:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   2073f:	7e 10                	jle    20751 <fatfs_get_extension+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:386 (discriminator 1)
   20741:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   20745:	7f 0a                	jg     20751 <fatfs_get_extension+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:387
                a+= 32;
   20747:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   2074b:	83 c0 20             	add    eax,0x20
   2074e:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:389

            *out++ = a;
   20751:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20754:	8d 50 01             	lea    edx,[eax+0x1]
   20757:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   2075a:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   2075e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:390
            len++;
   20760:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381

    if (ext_pos > 0 && out && maxlen)
    {
        filename += ext_pos + 1;

        while (*filename && len < (maxlen-1))
   20764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20767:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2076a:	84 c0                	test   al,al
   2076c:	74 0b                	je     20779 <fatfs_get_extension+0x85>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381 (discriminator 1)
   2076e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20771:	83 e8 01             	sub    eax,0x1
   20774:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   20777:	7f b3                	jg     2072c <fatfs_get_extension+0x38>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:393

            *out++ = a;
            len++;
        }

        *out = '\0';
   20779:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2077c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:394
        return 1;
   2077f:	b8 01 00 00 00       	mov    eax,0x1
   20784:	eb 05                	jmp    2078b <fatfs_get_extension+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:397
    }

    return 0;
   20786:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:398
}
   2078b:	c9                   	leave  
   2078c:	c3                   	ret    

0002078d <fatfs_create_path_string>:
fatfs_create_path_string():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:404
//-----------------------------------------------------------------------------
// fatfs_create_path_string: Append path & filename to create file path string.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
{
   2078d:	55                   	push   ebp
   2078e:	89 e5                	mov    ebp,esp
   20790:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:405
    int len = 0;
   20793:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:406
    char last = 0;
   2079a:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:407
    char seperator = '/';
   2079e:	c6 45 fa 2f          	mov    BYTE PTR [ebp-0x6],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409

    if (path && filename && out && maxlen > 0)
   207a2:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   207a6:	0f 84 bb 00 00 00    	je     20867 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 1)
   207ac:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   207b0:	0f 84 b1 00 00 00    	je     20867 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 2)
   207b6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   207ba:	0f 84 a7 00 00 00    	je     20867 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 3)
   207c0:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   207c4:	0f 8e 9d 00 00 00    	jle    20867 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411
    {
        while (*path && len < (maxlen-2))
   207ca:	eb 2c                	jmp    207f8 <fatfs_create_path_string+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:413
        {
            last = *path++;
   207cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   207cf:	8d 50 01             	lea    edx,[eax+0x1]
   207d2:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   207d5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   207d8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:414
            if (last == '\\')
   207db:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   207df:	75 04                	jne    207e5 <fatfs_create_path_string+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:415
                seperator = '\\';
   207e1:	c6 45 fa 5c          	mov    BYTE PTR [ebp-0x6],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:416
            *out++ = last;
   207e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   207e8:	8d 50 01             	lea    edx,[eax+0x1]
   207eb:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   207ee:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   207f2:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:417
            len++;
   207f4:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
   207f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   207fb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   207fe:	84 c0                	test   al,al
   20800:	74 0b                	je     2080d <fatfs_create_path_string+0x80>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411 (discriminator 1)
   20802:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20805:	83 e8 02             	sub    eax,0x2
   20808:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   2080b:	7f bf                	jg     207cc <fatfs_create_path_string+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:421
            *out++ = last;
            len++;
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
   2080d:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   20811:	74 32                	je     20845 <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:421 (discriminator 1)
   20813:	80 7d fb 2f          	cmp    BYTE PTR [ebp-0x5],0x2f
   20817:	74 2c                	je     20845 <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:422
            *out++ = seperator;
   20819:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2081c:	8d 50 01             	lea    edx,[eax+0x1]
   2081f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   20822:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   20826:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424

        while (*filename && len < (maxlen-1))
   20828:	eb 1b                	jmp    20845 <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:426
        {
            *out++ = *filename++;
   2082a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2082d:	8d 50 01             	lea    edx,[eax+0x1]
   20830:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   20833:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20836:	8d 4a 01             	lea    ecx,[edx+0x1]
   20839:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   2083c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   2083f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:427
            len++;
   20841:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;

        while (*filename && len < (maxlen-1))
   20845:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20848:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2084b:	84 c0                	test   al,al
   2084d:	74 0b                	je     2085a <fatfs_create_path_string+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424 (discriminator 1)
   2084f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20852:	83 e8 01             	sub    eax,0x1
   20855:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   20858:	7f d0                	jg     2082a <fatfs_create_path_string+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:430
        {
            *out++ = *filename++;
            len++;
        }

        *out = '\0';
   2085a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2085d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:432

        return 1;
   20860:	b8 01 00 00 00       	mov    eax,0x1
   20865:	eb 05                	jmp    2086c <fatfs_create_path_string+0xdf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:435
    }

    return 0;
   20867:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:436
}
   2086c:	c9                   	leave  
   2086d:	c3                   	ret    
   2086e:	66 90                	xchg   ax,ax

00020870 <fatfs_fat_init>:
fatfs_fat_init():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:61

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
   20870:	55                   	push   ebp
   20871:	89 e5                	mov    ebp,esp
   20873:	53                   	push   ebx
   20874:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:65
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
   20877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2087a:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   20881:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67

    for (i=0;i<FAT_BUFFERS;i++)
   20884:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2088b:	e9 cf 00 00 00       	jmp    2095f <fatfs_fat_init+0xef>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:70 (discriminator 3)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   20890:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20893:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20896:	c1 e0 04             	shl    eax,0x4
   20899:	89 c1                	mov    ecx,eax
   2089b:	c1 e1 05             	shl    ecx,0x5
   2089e:	01 c8                	add    eax,ecx
   208a0:	01 d0                	add    eax,edx
   208a2:	05 58 04 00 00       	add    eax,0x458
   208a7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:71 (discriminator 3)
        fs->fat_buffers[i].dirty = 0;
   208ad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   208b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208b3:	c1 e0 04             	shl    eax,0x4
   208b6:	89 c1                	mov    ecx,eax
   208b8:	c1 e1 05             	shl    ecx,0x5
   208bb:	01 c8                	add    eax,ecx
   208bd:	01 d0                	add    eax,edx
   208bf:	05 5c 04 00 00       	add    eax,0x45c
   208c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:72 (discriminator 3)
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   208ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208cd:	c1 e0 04             	shl    eax,0x4
   208d0:	89 c2                	mov    edx,eax
   208d2:	c1 e2 05             	shl    edx,0x5
   208d5:	01 d0                	add    eax,edx
   208d7:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   208dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208e0:	01 d0                	add    eax,edx
   208e2:	83 c0 08             	add    eax,0x8
   208e5:	83 ec 04             	sub    esp,0x4
   208e8:	68 00 02 00 00       	push   0x200
   208ed:	6a 00                	push   0x0
   208ef:	50                   	push   eax
   208f0:	e8 48 4d 00 00       	call   2563d <memset>
   208f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:73 (discriminator 3)
        fs->fat_buffers[i].ptr = NULL;
   208f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   208fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208fe:	c1 e0 04             	shl    eax,0x4
   20901:	89 c1                	mov    ecx,eax
   20903:	c1 e1 05             	shl    ecx,0x5
   20906:	01 c8                	add    eax,ecx
   20908:	01 d0                	add    eax,edx
   2090a:	05 60 04 00 00       	add    eax,0x460
   2090f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:76 (discriminator 3)

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   20915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20918:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   2091e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   20921:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20924:	c1 e0 04             	shl    eax,0x4
   20927:	89 c3                	mov    ebx,eax
   20929:	c1 e3 05             	shl    ebx,0x5
   2092c:	01 d8                	add    eax,ebx
   2092e:	01 c8                	add    eax,ecx
   20930:	05 64 04 00 00       	add    eax,0x464
   20935:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:77 (discriminator 3)
        fs->fat_buffer_head = &fs->fat_buffers[i];
   20937:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2093a:	c1 e0 04             	shl    eax,0x4
   2093d:	89 c2                	mov    edx,eax
   2093f:	c1 e2 05             	shl    edx,0x5
   20942:	01 d0                	add    eax,edx
   20944:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   2094a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2094d:	01 d0                	add    eax,edx
   2094f:	8d 50 08             	lea    edx,[eax+0x8]
   20952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20955:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67 (discriminator 3)
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
   2095b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67 (discriminator 1)
   2095f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20963:	0f 8e 27 ff ff ff    	jle    20890 <fatfs_fat_init+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:79

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
    }
}
   20969:	90                   	nop
   2096a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2096d:	c9                   	leave  
   2096e:	c3                   	ret    

0002096f <fatfs_fat_writeback>:
fatfs_fat_writeback():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:84
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
   2096f:	55                   	push   ebp
   20970:	89 e5                	mov    ebp,esp
   20972:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:85
    if (pcur)
   20975:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20979:	0f 84 9b 00 00 00    	je     20a1a <fatfs_fat_writeback+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:88
    {
        // Writeback sector if changed
        if (pcur->dirty)
   2097f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20982:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20988:	85 c0                	test   eax,eax
   2098a:	0f 84 83 00 00 00    	je     20a13 <fatfs_fat_writeback+0xa4>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:90
        {
            if (fs->disk_io.write_media)
   20990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20993:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20996:	85 c0                	test   eax,eax
   20998:	74 6c                	je     20a06 <fatfs_fat_writeback+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:92
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
   2099a:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:93
                uint32 offset = pcur->address - fs->fat_begin_lba;
   209a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   209a4:	8b 90 00 02 00 00    	mov    edx,DWORD PTR [eax+0x200]
   209aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   209ad:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   209b0:	29 c2                	sub    edx,eax
   209b2:	89 d0                	mov    eax,edx
   209b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:96

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
   209b7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   209ba:	8d 50 01             	lea    edx,[eax+0x1]
   209bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   209c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   209c3:	39 c2                	cmp    edx,eax
   209c5:	77 09                	ja     209d0 <fatfs_fat_writeback+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:97
                    sectors = FAT_BUFFER_SECTORS;
   209c7:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   209ce:	eb 0c                	jmp    209dc <fatfs_fat_writeback+0x6d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:99
                else
                    sectors = fs->fat_sectors - offset;
   209d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   209d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   209d6:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   209d9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:101

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
   209dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   209df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   209e2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   209e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   209e8:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   209ee:	83 ec 04             	sub    esp,0x4
   209f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   209f4:	51                   	push   ecx
   209f5:	52                   	push   edx
   209f6:	ff d0                	call   eax
   209f8:	83 c4 10             	add    esp,0x10
   209fb:	85 c0                	test   eax,eax
   209fd:	75 07                	jne    20a06 <fatfs_fat_writeback+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:102
                    return 0;
   209ff:	b8 00 00 00 00       	mov    eax,0x0
   20a04:	eb 19                	jmp    20a1f <fatfs_fat_writeback+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:105
            }

            pcur->dirty = 0;
   20a06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20a09:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   20a10:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:108
        }

        return 1;
   20a13:	b8 01 00 00 00       	mov    eax,0x1
   20a18:	eb 05                	jmp    20a1f <fatfs_fat_writeback+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:111
    }
    else
        return 0;
   20a1a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:112
}
   20a1f:	c9                   	leave  
   20a20:	c3                   	ret    

00020a21 <fatfs_fat_read_sector>:
fatfs_fat_read_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:117
//-----------------------------------------------------------------------------
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
   20a21:	55                   	push   ebp
   20a22:	89 e5                	mov    ebp,esp
   20a24:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:118
    struct fat_buffer *last = NULL;
   20a27:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:119
    struct fat_buffer *pcur = fs->fat_buffer_head;
   20a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20a31:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   20a37:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:122

    // Itterate through sector buffer list
    while (pcur)
   20a3a:	eb 60                	jmp    20a9c <fatfs_fat_read_sector+0x7b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:125
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
   20a3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a3f:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   20a45:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   20a48:	77 11                	ja     20a5b <fatfs_fat_read_sector+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:125 (discriminator 1)
   20a4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a4d:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   20a53:	83 c0 01             	add    eax,0x1
   20a56:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   20a59:	77 49                	ja     20aa4 <fatfs_fat_read_sector+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:129
            break;

        // End of list?
        if (pcur->next == NULL)
   20a5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a5e:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   20a64:	85 c0                	test   eax,eax
   20a66:	75 22                	jne    20a8a <fatfs_fat_read_sector+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:132
        {
            // Remove buffer from list
            if (last)
   20a68:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20a6c:	74 0f                	je     20a7d <fatfs_fat_read_sector+0x5c>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:133
                last->next = NULL;
   20a6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20a71:	c7 80 0c 02 00 00 00 	mov    DWORD PTR [eax+0x20c],0x0
   20a78:	00 00 00 
   20a7b:	eb 0d                	jmp    20a8a <fatfs_fat_read_sector+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:136
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
   20a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20a80:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   20a87:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:139
        }

        last = pcur;
   20a8a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a8d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:140
        pcur = pcur->next;
   20a90:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a93:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   20a99:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:122
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   20a9c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20aa0:	75 9a                	jne    20a3c <fatfs_fat_read_sector+0x1b>
   20aa2:	eb 01                	jmp    20aa5 <fatfs_fat_read_sector+0x84>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:126
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
            break;
   20aa4:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:144
        last = pcur;
        pcur = pcur->next;
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
   20aa5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20aa9:	74 29                	je     20ad4 <fatfs_fat_read_sector+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:146
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
   20aab:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20aae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20ab1:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   20ab7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   20aba:	29 c1                	sub    ecx,eax
   20abc:	89 c8                	mov    eax,ecx
   20abe:	c1 e0 09             	shl    eax,0x9
   20ac1:	01 c2                	add    edx,eax
   20ac3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20ac6:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:147
        return pcur;
   20acc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20acf:	e9 9e 00 00 00       	jmp    20b72 <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:151
    }

    // Else, we removed the last item from the list
    pcur = last;
   20ad4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20ad7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:154

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
   20ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20add:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   20ae3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20ae6:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:155
    fs->fat_buffer_head = pcur;
   20aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20aef:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20af2:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:158

    // Writeback sector if changed
    if (pcur->dirty)
   20af8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20afb:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20b01:	85 c0                	test   eax,eax
   20b03:	74 1c                	je     20b21 <fatfs_fat_read_sector+0x100>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:159
        if (!fatfs_fat_writeback(fs, pcur))
   20b05:	83 ec 08             	sub    esp,0x8
   20b08:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20b0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20b0e:	e8 5c fe ff ff       	call   2096f <fatfs_fat_writeback>
   20b13:	83 c4 10             	add    esp,0x10
   20b16:	85 c0                	test   eax,eax
   20b18:	75 07                	jne    20b21 <fatfs_fat_read_sector+0x100>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:160
            return 0;
   20b1a:	b8 00 00 00 00       	mov    eax,0x0
   20b1f:	eb 51                	jmp    20b72 <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:163

    // Address is now new sector
    pcur->address = sector;
   20b21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b24:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20b27:	89 90 00 02 00 00    	mov    DWORD PTR [eax+0x200],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:166

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
   20b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20b30:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   20b33:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   20b36:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20b39:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   20b3f:	83 ec 04             	sub    esp,0x4
   20b42:	6a 01                	push   0x1
   20b44:	51                   	push   ecx
   20b45:	52                   	push   edx
   20b46:	ff d0                	call   eax
   20b48:	83 c4 10             	add    esp,0x10
   20b4b:	85 c0                	test   eax,eax
   20b4d:	75 14                	jne    20b63 <fatfs_fat_read_sector+0x142>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:169
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
   20b4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b52:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   20b59:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:170
        return NULL;
   20b5c:	b8 00 00 00 00       	mov    eax,0x0
   20b61:	eb 0f                	jmp    20b72 <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:173
    }

    pcur->ptr = pcur->sector;
   20b63:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20b66:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b69:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:174
    return pcur;
   20b6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:175
}
   20b72:	c9                   	leave  
   20b73:	c3                   	ret    

00020b74 <fatfs_fat_purge>:
fatfs_fat_purge():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:180
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
   20b74:	55                   	push   ebp
   20b75:	89 e5                	mov    ebp,esp
   20b77:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:181
    struct fat_buffer *pcur = fs->fat_buffer_head;
   20b7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20b7d:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   20b83:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:184

    // Itterate through sector buffer list
    while (pcur)
   20b86:	eb 35                	jmp    20bbd <fatfs_fat_purge+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:187
    {
        // Writeback sector if changed
        if (pcur->dirty)
   20b88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20b8b:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20b91:	85 c0                	test   eax,eax
   20b93:	74 1c                	je     20bb1 <fatfs_fat_purge+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:188
            if (!fatfs_fat_writeback(fs, pcur))
   20b95:	83 ec 08             	sub    esp,0x8
   20b98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20b9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20b9e:	e8 cc fd ff ff       	call   2096f <fatfs_fat_writeback>
   20ba3:	83 c4 10             	add    esp,0x10
   20ba6:	85 c0                	test   eax,eax
   20ba8:	75 07                	jne    20bb1 <fatfs_fat_purge+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:189
                return 0;
   20baa:	b8 00 00 00 00       	mov    eax,0x0
   20baf:	eb 17                	jmp    20bc8 <fatfs_fat_purge+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:191

        pcur = pcur->next;
   20bb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20bb4:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   20bba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:184
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   20bbd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20bc1:	75 c5                	jne    20b88 <fatfs_fat_purge+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:194
                return 0;

        pcur = pcur->next;
    }

    return 1;
   20bc3:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:195
}
   20bc8:	c9                   	leave  
   20bc9:	c3                   	ret    

00020bca <fatfs_find_next_cluster>:
fatfs_find_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:206
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
   20bca:	55                   	push   ebp
   20bcb:	89 e5                	mov    ebp,esp
   20bcd:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:212
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
   20bd0:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20bd4:	75 07                	jne    20bdd <fatfs_find_next_cluster+0x13>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:213
        current_cluster = 2;
   20bd6:	c7 45 0c 02 00 00 00 	mov    DWORD PTR [ebp+0xc],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:216

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   20bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20be0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20be3:	85 c0                	test   eax,eax
   20be5:	75 0b                	jne    20bf2 <fatfs_find_next_cluster+0x28>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:217
        fat_sector_offset = current_cluster / 256;
   20be7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20bea:	c1 e8 08             	shr    eax,0x8
   20bed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20bf0:	eb 09                	jmp    20bfb <fatfs_find_next_cluster+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:219
    else
        fat_sector_offset = current_cluster / 128;
   20bf2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20bf5:	c1 e8 07             	shr    eax,0x7
   20bf8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:222

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20bfe:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20c01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20c04:	01 d0                	add    eax,edx
   20c06:	83 ec 08             	sub    esp,0x8
   20c09:	50                   	push   eax
   20c0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20c0d:	e8 0f fe ff ff       	call   20a21 <fatfs_fat_read_sector>
   20c12:	83 c4 10             	add    esp,0x10
   20c15:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:223
    if (!pbuf)
   20c18:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   20c1c:	75 0a                	jne    20c28 <fatfs_find_next_cluster+0x5e>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:224
        return (FAT32_LAST_CLUSTER);
   20c1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20c23:	e9 2a 01 00 00       	jmp    20d52 <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:226

    if (fs->fat_type == FAT_TYPE_16)
   20c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20c2b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20c2e:	85 c0                	test   eax,eax
   20c30:	75 71                	jne    20ca3 <fatfs_find_next_cluster+0xd9>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:229
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;
   20c32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20c35:	c1 e0 08             	shl    eax,0x8
   20c38:	89 c2                	mov    edx,eax
   20c3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20c3d:	29 d0                	sub    eax,edx
   20c3f:	01 c0                	add    eax,eax
   20c41:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:232

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   20c44:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20c47:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20c4d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20c50:	0f b7 d2             	movzx  edx,dx
   20c53:	83 c2 01             	add    edx,0x1
   20c56:	01 d0                	add    eax,edx
   20c58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20c5b:	0f b6 c0             	movzx  eax,al
   20c5e:	c1 e0 08             	shl    eax,0x8
   20c61:	89 c1                	mov    ecx,eax
   20c63:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20c66:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20c6c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20c6f:	0f b7 c0             	movzx  eax,ax
   20c72:	01 d0                	add    eax,edx
   20c74:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20c77:	0f b6 c0             	movzx  eax,al
   20c7a:	01 c8                	add    eax,ecx
   20c7c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:235

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF)
   20c7f:	81 7d f0 f7 ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xfff7
   20c86:	0f 86 c3 00 00 00    	jbe    20d4f <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:235 (discriminator 1)
   20c8c:	81 7d f0 ff ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xffff
   20c93:	0f 87 b6 00 00 00    	ja     20d4f <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:236
            return (FAT32_LAST_CLUSTER);
   20c99:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20c9e:	e9 af 00 00 00       	jmp    20d52 <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:241
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 128)) * 4;
   20ca3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20ca6:	c1 e0 07             	shl    eax,0x7
   20ca9:	89 c2                	mov    edx,eax
   20cab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20cae:	29 d0                	sub    eax,edx
   20cb0:	c1 e0 02             	shl    eax,0x2
   20cb3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:244

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   20cb6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20cb9:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20cbf:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20cc2:	0f b7 d2             	movzx  edx,dx
   20cc5:	83 c2 03             	add    edx,0x3
   20cc8:	01 d0                	add    eax,edx
   20cca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20ccd:	0f b6 c0             	movzx  eax,al
   20cd0:	c1 e0 18             	shl    eax,0x18
   20cd3:	89 c1                	mov    ecx,eax
   20cd5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20cd8:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20cde:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20ce1:	0f b7 d2             	movzx  edx,dx
   20ce4:	83 c2 02             	add    edx,0x2
   20ce7:	01 d0                	add    eax,edx
   20ce9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20cec:	0f b6 c0             	movzx  eax,al
   20cef:	c1 e0 10             	shl    eax,0x10
   20cf2:	01 c1                	add    ecx,eax
   20cf4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20cf7:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20cfd:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20d00:	0f b7 d2             	movzx  edx,dx
   20d03:	83 c2 01             	add    edx,0x1
   20d06:	01 d0                	add    eax,edx
   20d08:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d0b:	0f b6 c0             	movzx  eax,al
   20d0e:	c1 e0 08             	shl    eax,0x8
   20d11:	01 c1                	add    ecx,eax
   20d13:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20d16:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20d1c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20d1f:	0f b7 c0             	movzx  eax,ax
   20d22:	01 d0                	add    eax,edx
   20d24:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d27:	0f b6 c0             	movzx  eax,al
   20d2a:	01 c8                	add    eax,ecx
   20d2c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:247

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;
   20d2f:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:250

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF)
   20d36:	81 7d f0 f7 ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xffffff7
   20d3d:	76 10                	jbe    20d4f <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:250 (discriminator 1)
   20d3f:	81 7d f0 ff ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xfffffff
   20d46:	77 07                	ja     20d4f <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:251
            return (FAT32_LAST_CLUSTER);
   20d48:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20d4d:	eb 03                	jmp    20d52 <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:255
    }

    // Else return next cluster
    return (nextcluster);
   20d4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:256
}
   20d52:	c9                   	leave  
   20d53:	c3                   	ret    

00020d54 <fatfs_set_fs_info_next_free_cluster>:
fatfs_set_fs_info_next_free_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:261
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
   20d54:	55                   	push   ebp
   20d55:	89 e5                	mov    ebp,esp
   20d57:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:262
    if (fs->fat_type == FAT_TYPE_16)
   20d5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d5d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20d60:	85 c0                	test   eax,eax
   20d62:	0f 84 de 00 00 00    	je     20e46 <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:267
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
   20d68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d6b:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   20d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d71:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   20d75:	0f b7 c0             	movzx  eax,ax
   20d78:	01 d0                	add    eax,edx
   20d7a:	83 ec 08             	sub    esp,0x8
   20d7d:	50                   	push   eax
   20d7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20d81:	e8 9b fc ff ff       	call   20a21 <fatfs_fat_read_sector>
   20d86:	83 c4 10             	add    esp,0x10
   20d89:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:268
        if (!pbuf)
   20d8c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20d90:	0f 84 af 00 00 00    	je     20e45 <fatfs_set_fs_info_next_free_cluster+0xf1>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:272
            return ;

        // Change
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
   20d96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20d99:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20d9f:	05 ec 01 00 00       	add    eax,0x1ec
   20da4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20da7:	88 10                	mov    BYTE PTR [eax],dl
   20da9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20dac:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20db2:	05 ed 01 00 00       	add    eax,0x1ed
   20db7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20dba:	c1 ea 08             	shr    edx,0x8
   20dbd:	88 10                	mov    BYTE PTR [eax],dl
   20dbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20dc2:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20dc8:	05 ee 01 00 00       	add    eax,0x1ee
   20dcd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20dd0:	c1 ea 10             	shr    edx,0x10
   20dd3:	88 10                	mov    BYTE PTR [eax],dl
   20dd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20dd8:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20dde:	05 ef 01 00 00       	add    eax,0x1ef
   20de3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20de6:	c1 ea 18             	shr    edx,0x18
   20de9:	88 10                	mov    BYTE PTR [eax],dl
   20deb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20dee:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20df5:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:273
        fs->next_free_cluster = newValue;
   20df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20dfb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20dfe:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:276

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
   20e01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e04:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20e07:	85 c0                	test   eax,eax
   20e09:	74 1e                	je     20e29 <fatfs_set_fs_info_next_free_cluster+0xd5>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:277
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);
   20e0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20e11:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   20e14:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   20e17:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   20e1d:	83 ec 04             	sub    esp,0x4
   20e20:	6a 01                	push   0x1
   20e22:	51                   	push   ecx
   20e23:	52                   	push   edx
   20e24:	ff d0                	call   eax
   20e26:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:280

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
   20e29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20e2c:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   20e33:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:281
        pbuf->dirty = 0;
   20e36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20e39:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   20e40:	00 00 00 
   20e43:	eb 01                	jmp    20e46 <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:269
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
        if (!pbuf)
            return ;
   20e45:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:283

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
        pbuf->dirty = 0;
    }
}
   20e46:	c9                   	leave  
   20e47:	c3                   	ret    

00020e48 <fatfs_find_blank_cluster>:
fatfs_find_blank_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:289
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
   20e48:	55                   	push   ebp
   20e49:	89 e5                	mov    ebp,esp
   20e4b:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:292
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    uint32 current_cluster = start_cluster;
   20e4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20e51:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:298
    struct fat_buffer *pbuf;

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
   20e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e57:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20e5a:	85 c0                	test   eax,eax
   20e5c:	75 0b                	jne    20e69 <fatfs_find_blank_cluster+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:299
            fat_sector_offset = current_cluster / 256;
   20e5e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20e61:	c1 e8 08             	shr    eax,0x8
   20e64:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20e67:	eb 09                	jmp    20e72 <fatfs_find_blank_cluster+0x2a>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:301
        else
            fat_sector_offset = current_cluster / 128;
   20e69:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20e6c:	c1 e8 07             	shr    eax,0x7
   20e6f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:303

        if ( fat_sector_offset < fs->fat_sectors)
   20e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20e78:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   20e7b:	0f 86 28 01 00 00    	jbe    20fa9 <fatfs_find_blank_cluster+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:306
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20e81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e84:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20e87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20e8a:	01 d0                	add    eax,edx
   20e8c:	83 ec 08             	sub    esp,0x8
   20e8f:	50                   	push   eax
   20e90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20e93:	e8 89 fb ff ff       	call   20a21 <fatfs_fat_read_sector>
   20e98:	83 c4 10             	add    esp,0x10
   20e9b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:307
            if (!pbuf)
   20e9e:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   20ea2:	75 0a                	jne    20eae <fatfs_find_blank_cluster+0x66>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:308
                return 0;
   20ea4:	b8 00 00 00 00       	mov    eax,0x0
   20ea9:	e9 19 01 00 00       	jmp    20fc7 <fatfs_find_blank_cluster+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:310

            if (fs->fat_type == FAT_TYPE_16)
   20eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20eb1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20eb4:	85 c0                	test   eax,eax
   20eb6:	75 52                	jne    20f0a <fatfs_find_blank_cluster+0xc2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:313
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;
   20eb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20ebb:	c1 e0 08             	shl    eax,0x8
   20ebe:	89 c2                	mov    edx,eax
   20ec0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20ec3:	29 d0                	sub    eax,edx
   20ec5:	01 c0                	add    eax,eax
   20ec7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:316

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   20eca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20ecd:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20ed3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20ed6:	0f b7 d2             	movzx  edx,dx
   20ed9:	83 c2 01             	add    edx,0x1
   20edc:	01 d0                	add    eax,edx
   20ede:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20ee1:	0f b6 c0             	movzx  eax,al
   20ee4:	c1 e0 08             	shl    eax,0x8
   20ee7:	89 c1                	mov    ecx,eax
   20ee9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20eec:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20ef2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20ef5:	0f b7 c0             	movzx  eax,ax
   20ef8:	01 d0                	add    eax,edx
   20efa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20efd:	0f b6 c0             	movzx  eax,al
   20f00:	01 c8                	add    eax,ecx
   20f02:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   20f05:	e9 93 00 00 00       	jmp    20f9d <fatfs_find_blank_cluster+0x155>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:321
            }
            else
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;
   20f0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20f0d:	c1 e0 07             	shl    eax,0x7
   20f10:	89 c2                	mov    edx,eax
   20f12:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20f15:	29 d0                	sub    eax,edx
   20f17:	c1 e0 02             	shl    eax,0x2
   20f1a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:324

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   20f1d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20f20:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20f26:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20f29:	0f b7 d2             	movzx  edx,dx
   20f2c:	83 c2 03             	add    edx,0x3
   20f2f:	01 d0                	add    eax,edx
   20f31:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20f34:	0f b6 c0             	movzx  eax,al
   20f37:	c1 e0 18             	shl    eax,0x18
   20f3a:	89 c1                	mov    ecx,eax
   20f3c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20f3f:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20f45:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20f48:	0f b7 d2             	movzx  edx,dx
   20f4b:	83 c2 02             	add    edx,0x2
   20f4e:	01 d0                	add    eax,edx
   20f50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20f53:	0f b6 c0             	movzx  eax,al
   20f56:	c1 e0 10             	shl    eax,0x10
   20f59:	01 c1                	add    ecx,eax
   20f5b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20f5e:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20f64:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20f67:	0f b7 d2             	movzx  edx,dx
   20f6a:	83 c2 01             	add    edx,0x1
   20f6d:	01 d0                	add    eax,edx
   20f6f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20f72:	0f b6 c0             	movzx  eax,al
   20f75:	c1 e0 08             	shl    eax,0x8
   20f78:	01 c1                	add    ecx,eax
   20f7a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20f7d:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20f83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20f86:	0f b7 c0             	movzx  eax,ax
   20f89:	01 d0                	add    eax,edx
   20f8b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20f8e:	0f b6 c0             	movzx  eax,al
   20f91:	01 c8                	add    eax,ecx
   20f93:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:327

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;
   20f96:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:330
            }

            if (nextcluster !=0 )
   20f9d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20fa1:	74 0d                	je     20fb0 <fatfs_find_blank_cluster+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:331
                current_cluster++;
   20fa3:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   20fa7:	eb 07                	jmp    20fb0 <fatfs_find_blank_cluster+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:335
        }
        else
            // Otherwise, run out of FAT sectors to check...
            return 0;
   20fa9:	b8 00 00 00 00       	mov    eax,0x0
   20fae:	eb 17                	jmp    20fc7 <fatfs_find_blank_cluster+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:337
    }
    while (nextcluster != 0x0);
   20fb0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20fb4:	0f 85 9a fe ff ff    	jne    20e54 <fatfs_find_blank_cluster+0xc>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:340

    // Found blank entry
    *free_cluster = current_cluster;
   20fba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20fbd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20fc0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:341
    return 1;
   20fc2:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:342
}
   20fc7:	c9                   	leave  
   20fc8:	c3                   	ret    

00020fc9 <fatfs_fat_set_cluster>:
fatfs_fat_set_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:350
// fatfs_fat_set_cluster: Set a cluster link in the chain. NOTE: Immediate
// write (slow).
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
   20fc9:	55                   	push   ebp
   20fca:	89 e5                	mov    ebp,esp
   20fcc:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:355
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   20fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20fd2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20fd5:	85 c0                	test   eax,eax
   20fd7:	75 0b                	jne    20fe4 <fatfs_fat_set_cluster+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:356
        fat_sector_offset = cluster / 256;
   20fd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20fdc:	c1 e8 08             	shr    eax,0x8
   20fdf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20fe2:	eb 09                	jmp    20fed <fatfs_fat_set_cluster+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:358
    else
        fat_sector_offset = cluster / 128;
   20fe4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20fe7:	c1 e8 07             	shr    eax,0x7
   20fea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:361

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20ff0:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20ff3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20ff6:	01 d0                	add    eax,edx
   20ff8:	83 ec 08             	sub    esp,0x8
   20ffb:	50                   	push   eax
   20ffc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20fff:	e8 1d fa ff ff       	call   20a21 <fatfs_fat_read_sector>
   21004:	83 c4 10             	add    esp,0x10
   21007:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:362
    if (!pbuf)
   2100a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2100e:	75 0a                	jne    2101a <fatfs_fat_set_cluster+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:363
        return 0;
   21010:	b8 00 00 00 00       	mov    eax,0x0
   21015:	e9 f2 00 00 00       	jmp    2110c <fatfs_fat_set_cluster+0x143>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:365

    if (fs->fat_type == FAT_TYPE_16)
   2101a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2101d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   21020:	85 c0                	test   eax,eax
   21022:	75 59                	jne    2107d <fatfs_fat_set_cluster+0xb4>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:368
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;
   21024:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   21027:	c1 e0 08             	shl    eax,0x8
   2102a:	89 c2                	mov    edx,eax
   2102c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2102f:	29 d0                	sub    eax,edx
   21031:	01 c0                	add    eax,eax
   21033:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:371

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
   21036:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21039:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   2103f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21042:	0f b7 c0             	movzx  eax,ax
   21045:	01 d0                	add    eax,edx
   21047:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   2104a:	88 10                	mov    BYTE PTR [eax],dl
   2104c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2104f:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   21055:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   21058:	0f b7 d2             	movzx  edx,dx
   2105b:	83 c2 01             	add    edx,0x1
   2105e:	01 d0                	add    eax,edx
   21060:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   21063:	0f b7 d2             	movzx  edx,dx
   21066:	c1 fa 08             	sar    edx,0x8
   21069:	88 10                	mov    BYTE PTR [eax],dl
   2106b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2106e:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   21075:	00 00 00 
   21078:	e9 8a 00 00 00       	jmp    21107 <fatfs_fat_set_cluster+0x13e>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:376
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;
   2107d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   21080:	c1 e0 07             	shl    eax,0x7
   21083:	89 c2                	mov    edx,eax
   21085:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21088:	29 d0                	sub    eax,edx
   2108a:	c1 e0 02             	shl    eax,0x2
   2108d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:379

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   21090:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21093:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   21099:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2109c:	0f b7 c0             	movzx  eax,ax
   2109f:	01 d0                	add    eax,edx
   210a1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   210a4:	88 10                	mov    BYTE PTR [eax],dl
   210a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   210a9:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   210af:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   210b2:	0f b7 d2             	movzx  edx,dx
   210b5:	83 c2 01             	add    edx,0x1
   210b8:	01 d0                	add    eax,edx
   210ba:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   210bd:	c1 ea 08             	shr    edx,0x8
   210c0:	88 10                	mov    BYTE PTR [eax],dl
   210c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   210c5:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   210cb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   210ce:	0f b7 d2             	movzx  edx,dx
   210d1:	83 c2 02             	add    edx,0x2
   210d4:	01 d0                	add    eax,edx
   210d6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   210d9:	c1 ea 10             	shr    edx,0x10
   210dc:	88 10                	mov    BYTE PTR [eax],dl
   210de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   210e1:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   210e7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   210ea:	0f b7 d2             	movzx  edx,dx
   210ed:	83 c2 03             	add    edx,0x3
   210f0:	01 d0                	add    eax,edx
   210f2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   210f5:	c1 ea 18             	shr    edx,0x18
   210f8:	88 10                	mov    BYTE PTR [eax],dl
   210fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   210fd:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   21104:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:382
    }

    return 1;
   21107:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:383
}
   2110c:	c9                   	leave  
   2110d:	c3                   	ret    

0002110e <fatfs_free_cluster_chain>:
fatfs_free_cluster_chain():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:390
//-----------------------------------------------------------------------------
// fatfs_free_cluster_chain: Follow a chain marking each element as free
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster)
{
   2110e:	55                   	push   ebp
   2110f:	89 e5                	mov    ebp,esp
   21111:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:392
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
   21114:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21117:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   2111a:	eb 2d                	jmp    21149 <fatfs_free_cluster_chain+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:397
    {
        last_cluster = next_cluster;
   2111c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2111f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:400

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   21122:	83 ec 08             	sub    esp,0x8
   21125:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21128:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2112b:	e8 9a fa ff ff       	call   20bca <fatfs_find_next_cluster>
   21130:	83 c4 10             	add    esp,0x10
   21133:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:403

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
   21136:	83 ec 04             	sub    esp,0x4
   21139:	6a 00                	push   0x0
   2113b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2113e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21141:	e8 83 fe ff ff       	call   20fc9 <fatfs_fat_set_cluster>
   21146:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   21149:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   2114d:	74 06                	je     21155 <fatfs_free_cluster_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395 (discriminator 1)
   2114f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   21153:	75 c7                	jne    2111c <fatfs_free_cluster_chain+0xe>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:406

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
    }

    return 1;
   21155:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:407
}
   2115a:	c9                   	leave  
   2115b:	c3                   	ret    

0002115c <fatfs_fat_add_cluster_to_chain>:
fatfs_fat_add_cluster_to_chain():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:415
// fatfs_fat_add_cluster_to_chain: Follow a chain marking and then add a new entry
// to the current tail.
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
   2115c:	55                   	push   ebp
   2115d:	89 e5                	mov    ebp,esp
   2115f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:416
    uint32 last_cluster = FAT32_LAST_CLUSTER;
   21162:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:417
    uint32 next_cluster = start_cluster;
   21169:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2116c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:419

    if (start_cluster == FAT32_LAST_CLUSTER)
   2116f:	83 7d 0c ff          	cmp    DWORD PTR [ebp+0xc],0xffffffff
   21173:	75 2e                	jne    211a3 <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:420
        return 0;
   21175:	b8 00 00 00 00       	mov    eax,0x0
   2117a:	eb 59                	jmp    211d5 <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:425

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
    {
        last_cluster = next_cluster;
   2117c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2117f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:428

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   21182:	83 ec 08             	sub    esp,0x8
   21185:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21188:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2118b:	e8 3a fa ff ff       	call   20bca <fatfs_find_next_cluster>
   21190:	83 c4 10             	add    esp,0x10
   21193:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:429
        if (!next_cluster)
   21196:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2119a:	75 07                	jne    211a3 <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:430
            return 0;
   2119c:	b8 00 00 00 00       	mov    eax,0x0
   211a1:	eb 32                	jmp    211d5 <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:423

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
   211a3:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   211a7:	75 d3                	jne    2117c <fatfs_fat_add_cluster_to_chain+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:434
        if (!next_cluster)
            return 0;
    }

    // Add link in for new cluster
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);
   211a9:	83 ec 04             	sub    esp,0x4
   211ac:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   211af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   211b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   211b5:	e8 0f fe ff ff       	call   20fc9 <fatfs_fat_set_cluster>
   211ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:437

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);
   211bd:	83 ec 04             	sub    esp,0x4
   211c0:	6a ff                	push   0xffffffff
   211c2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   211c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   211c8:	e8 fc fd ff ff       	call   20fc9 <fatfs_fat_set_cluster>
   211cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:439

    return 1;
   211d0:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:440
}
   211d5:	c9                   	leave  
   211d6:	c3                   	ret    

000211d7 <fatfs_count_free_clusters>:
fatfs_count_free_clusters():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:446
#endif
//-----------------------------------------------------------------------------
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
   211d7:	55                   	push   ebp
   211d8:	89 e5                	mov    ebp,esp
   211da:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:448
    uint32 i,j;
    uint32 count = 0;
   211dd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   211e4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   211eb:	e9 19 01 00 00       	jmp    21309 <fatfs_count_free_clusters+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:454
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
   211f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   211f3:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   211f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   211f9:	01 d0                	add    eax,edx
   211fb:	83 ec 08             	sub    esp,0x8
   211fe:	50                   	push   eax
   211ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21202:	e8 1a f8 ff ff       	call   20a21 <fatfs_fat_read_sector>
   21207:	83 c4 10             	add    esp,0x10
   2120a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:455
        if (!pbuf)
   2120d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   21211:	0f 84 03 01 00 00    	je     2131a <fatfs_count_free_clusters+0x143>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:458
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   21217:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   2121e:	e9 d5 00 00 00       	jmp    212f8 <fatfs_count_free_clusters+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:460
        {
            if (fs->fat_type == FAT_TYPE_16)
   21223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21226:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   21229:	85 c0                	test   eax,eax
   2122b:	75 49                	jne    21276 <fatfs_count_free_clusters+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:462
            {
                if (FAT16_GET_16BIT_WORD(pbuf, (uint16)j) == 0)
   2122d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   21230:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   21236:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   21239:	0f b7 d2             	movzx  edx,dx
   2123c:	83 c2 01             	add    edx,0x1
   2123f:	01 d0                	add    eax,edx
   21241:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21244:	0f b6 c0             	movzx  eax,al
   21247:	c1 e0 08             	shl    eax,0x8
   2124a:	89 c1                	mov    ecx,eax
   2124c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2124f:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   21255:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21258:	0f b7 c0             	movzx  eax,ax
   2125b:	01 d0                	add    eax,edx
   2125d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21260:	0f b6 c0             	movzx  eax,al
   21263:	01 c8                	add    eax,ecx
   21265:	85 c0                	test   eax,eax
   21267:	75 04                	jne    2126d <fatfs_count_free_clusters+0x96>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:463
                    count++;
   21269:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:465

                j += 2;
   2126d:	83 45 f0 02          	add    DWORD PTR [ebp-0x10],0x2
   21271:	e9 82 00 00 00       	jmp    212f8 <fatfs_count_free_clusters+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:469
            }
            else
            {
                if (FAT32_GET_32BIT_WORD(pbuf, (uint16)j) == 0)
   21276:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   21279:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2127f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   21282:	0f b7 d2             	movzx  edx,dx
   21285:	83 c2 03             	add    edx,0x3
   21288:	01 d0                	add    eax,edx
   2128a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2128d:	0f b6 c0             	movzx  eax,al
   21290:	c1 e0 18             	shl    eax,0x18
   21293:	89 c1                	mov    ecx,eax
   21295:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   21298:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2129e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   212a1:	0f b7 d2             	movzx  edx,dx
   212a4:	83 c2 02             	add    edx,0x2
   212a7:	01 d0                	add    eax,edx
   212a9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   212ac:	0f b6 c0             	movzx  eax,al
   212af:	c1 e0 10             	shl    eax,0x10
   212b2:	01 c1                	add    ecx,eax
   212b4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   212b7:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   212bd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   212c0:	0f b7 d2             	movzx  edx,dx
   212c3:	83 c2 01             	add    edx,0x1
   212c6:	01 d0                	add    eax,edx
   212c8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   212cb:	0f b6 c0             	movzx  eax,al
   212ce:	c1 e0 08             	shl    eax,0x8
   212d1:	01 c1                	add    ecx,eax
   212d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   212d6:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   212dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   212df:	0f b7 c0             	movzx  eax,ax
   212e2:	01 d0                	add    eax,edx
   212e4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   212e7:	0f b6 c0             	movzx  eax,al
   212ea:	01 c8                	add    eax,ecx
   212ec:	85 c0                	test   eax,eax
   212ee:	75 04                	jne    212f4 <fatfs_count_free_clusters+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:470
                    count++;
   212f0:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:472

                j += 4;
   212f4:	83 45 f0 04          	add    DWORD PTR [ebp-0x10],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:458 (discriminator 1)
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   212f8:	81 7d f0 ff 01 00 00 	cmp    DWORD PTR [ebp-0x10],0x1ff
   212ff:	0f 86 1e ff ff ff    	jbe    21223 <fatfs_count_free_clusters+0x4c>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451 (discriminator 2)
{
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   21305:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451 (discriminator 1)
   21309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2130c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   2130f:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   21312:	0f 87 d8 fe ff ff    	ja     211f0 <fatfs_count_free_clusters+0x19>
   21318:	eb 01                	jmp    2131b <fatfs_count_free_clusters+0x144>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:456
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;
   2131a:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:477
                j += 4;
            }
        }
    }

    return count;
   2131b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:478
}
   2131e:	c9                   	leave  
   2131f:	c3                   	ret    

00021320 <fatfs_add_free_space>:
fatfs_add_free_space():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:46
//-----------------------------------------------------------------------------
// fatfs_add_free_space: Allocate another cluster of free space to the end
// of a files cluster chain.
//-----------------------------------------------------------------------------
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters)
{
   21320:	55                   	push   ebp
   21321:	89 e5                	mov    ebp,esp
   21323:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:49
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;
   21326:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21329:	8b 00                	mov    eax,DWORD PTR [eax]
   2132b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:52

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   2132e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21331:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   21334:	83 f8 ff             	cmp    eax,0xffffffff
   21337:	74 10                	je     21349 <fatfs_add_free_space+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:53
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   21339:	83 ec 08             	sub    esp,0x8
   2133c:	6a ff                	push   0xffffffff
   2133e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21341:	e8 0e fa ff ff       	call   20d54 <fatfs_set_fs_info_next_free_cluster>
   21346:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55

    for (i=0;i<clusters;i++)
   21349:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   21350:	eb 67                	jmp    213b9 <fatfs_add_free_space+0x99>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:58
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   21352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21355:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   21358:	83 ec 04             	sub    esp,0x4
   2135b:	8d 55 ec             	lea    edx,[ebp-0x14]
   2135e:	52                   	push   edx
   2135f:	50                   	push   eax
   21360:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21363:	e8 e0 fa ff ff       	call   20e48 <fatfs_find_blank_cluster>
   21368:	83 c4 10             	add    esp,0x10
   2136b:	85 c0                	test   eax,eax
   2136d:	74 3f                	je     213ae <fatfs_add_free_space+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:61
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
   2136f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21372:	83 ec 04             	sub    esp,0x4
   21375:	50                   	push   eax
   21376:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21379:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2137c:	e8 48 fc ff ff       	call   20fc9 <fatfs_fat_set_cluster>
   21381:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:64

            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   21384:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21387:	83 ec 04             	sub    esp,0x4
   2138a:	6a ff                	push   0xffffffff
   2138c:	50                   	push   eax
   2138d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21390:	e8 34 fc ff ff       	call   20fc9 <fatfs_fat_set_cluster>
   21395:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:67

            // Adjust argument reference
            start = nextcluster;
   21398:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2139b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:68
            if (i == 0)
   2139e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   213a2:	75 11                	jne    213b5 <fatfs_add_free_space+0x95>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:69
                *startCluster = nextcluster;
   213a4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   213a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   213aa:	89 10                	mov    DWORD PTR [eax],edx
   213ac:	eb 07                	jmp    213b5 <fatfs_add_free_space+0x95>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:72
        }
        else
            return 0;
   213ae:	b8 00 00 00 00       	mov    eax,0x0
   213b3:	eb 11                	jmp    213c6 <fatfs_add_free_space+0xa6>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55 (discriminator 2)

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
   213b5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55 (discriminator 1)
   213b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   213bc:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   213bf:	72 91                	jb     21352 <fatfs_add_free_space+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:75
        }
        else
            return 0;
    }

    return 1;
   213c1:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:76 (discriminator 1)
}
   213c6:	c9                   	leave  
   213c7:	c3                   	ret    

000213c8 <fatfs_allocate_free_space>:
fatfs_allocate_free_space():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:83
// fatfs_allocate_free_space: Add an ammount of free space to a file either from
// 'startCluster' if newFile = false, or allocating a new start to the chain if
// newFile = true.
//-----------------------------------------------------------------------------
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size)
{
   213c8:	55                   	push   ebp
   213c9:	89 e5                	mov    ebp,esp
   213cb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:88
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
   213ce:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   213d2:	75 0a                	jne    213de <fatfs_allocate_free_space+0x16>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:89
        return 0;
   213d4:	b8 00 00 00 00       	mov    eax,0x0
   213d9:	e9 c8 00 00 00       	jmp    214a6 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:92

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   213de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213e1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   213e4:	83 f8 ff             	cmp    eax,0xffffffff
   213e7:	74 10                	je     213f9 <fatfs_allocate_free_space+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:93
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   213e9:	83 ec 08             	sub    esp,0x8
   213ec:	6a ff                	push   0xffffffff
   213ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   213f1:	e8 5e f9 ff ff       	call   20d54 <fatfs_set_fs_info_next_free_cluster>
   213f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:96

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
   213f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213fc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   213ff:	0f b6 c0             	movzx  eax,al
   21402:	c1 e0 09             	shl    eax,0x9
   21405:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:97
    clusterCount = (size / clusterSize);
   21408:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2140b:	ba 00 00 00 00       	mov    edx,0x0
   21410:	f7 75 f0             	div    DWORD PTR [ebp-0x10]
   21413:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:100

    // If any left over
    if (size-(clusterSize*clusterCount))
   21416:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21419:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   2141d:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   21420:	74 04                	je     21426 <fatfs_allocate_free_space+0x5e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:101
        clusterCount++;
   21422:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:104

    // Allocated first link in the chain if a new file
    if (newFile)
   21426:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   2142a:	74 4d                	je     21479 <fatfs_allocate_free_space+0xb1>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:106
    {
        if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   2142c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2142f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   21432:	83 ec 04             	sub    esp,0x4
   21435:	8d 55 ec             	lea    edx,[ebp-0x14]
   21438:	52                   	push   edx
   21439:	50                   	push   eax
   2143a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2143d:	e8 06 fa ff ff       	call   20e48 <fatfs_find_blank_cluster>
   21442:	83 c4 10             	add    esp,0x10
   21445:	85 c0                	test   eax,eax
   21447:	75 07                	jne    21450 <fatfs_allocate_free_space+0x88>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:107
            return 0;
   21449:	b8 00 00 00 00       	mov    eax,0x0
   2144e:	eb 56                	jmp    214a6 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:110

        // If this is all that is needed then all done
        if (clusterCount==1)
   21450:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   21454:	75 2b                	jne    21481 <fatfs_allocate_free_space+0xb9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:112
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   21456:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21459:	83 ec 04             	sub    esp,0x4
   2145c:	6a ff                	push   0xffffffff
   2145e:	50                   	push   eax
   2145f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21462:	e8 62 fb ff ff       	call   20fc9 <fatfs_fat_set_cluster>
   21467:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:113
            *startCluster = nextcluster;
   2146a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2146d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   21470:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:114
            return 1;
   21472:	b8 01 00 00 00       	mov    eax,0x1
   21477:	eb 2d                	jmp    214a6 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:119
        }
    }
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;
   21479:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2147c:	8b 00                	mov    eax,DWORD PTR [eax]
   2147e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:121

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
   21481:	83 ec 04             	sub    esp,0x4
   21484:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21487:	8d 45 ec             	lea    eax,[ebp-0x14]
   2148a:	50                   	push   eax
   2148b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2148e:	e8 8d fe ff ff       	call   21320 <fatfs_add_free_space>
   21493:	83 c4 10             	add    esp,0x10
   21496:	85 c0                	test   eax,eax
   21498:	75 07                	jne    214a1 <fatfs_allocate_free_space+0xd9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:122
            return 0;
   2149a:	b8 00 00 00 00       	mov    eax,0x0
   2149f:	eb 05                	jmp    214a6 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:124

    return 1;
   214a1:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:125 (discriminator 1)
}
   214a6:	c9                   	leave  
   214a7:	c3                   	ret    

000214a8 <fatfs_find_free_dir_offset>:
fatfs_find_free_dir_offset():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:131
//-----------------------------------------------------------------------------
// fatfs_find_free_dir_offset: Find a free space in the directory for a new entry
// which takes up 'entryCount' blocks (or allocate some more)
//-----------------------------------------------------------------------------
static int fatfs_find_free_dir_offset(struct fatfs *fs, uint32 dirCluster, int entryCount, uint32 *pSector, uint8 *pOffset)
{
   214a8:	55                   	push   ebp
   214a9:	89 e5                	mov    ebp,esp
   214ab:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:133
    struct fat_dir_entry *directoryEntry;
    uint8 item=0;
   214ae:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:134
    uint16 recordoffset = 0;
   214b2:	66 c7 45 e6 00 00    	mov    WORD PTR [ebp-0x1a],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:135
    uint8 i=0;
   214b8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:136
    int x=0;
   214bc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:137
    int possible_spaces = 0;
   214c3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:138
    int start_recorded = 0;
   214ca:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:141

    // No entries required?
    if (entryCount == 0)
   214d1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   214d5:	75 0a                	jne    214e1 <fatfs_find_free_dir_offset+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:142
        return 0;
   214d7:	b8 00 00 00 00       	mov    eax,0x0
   214dc:	e9 fd 01 00 00       	jmp    216de <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:148

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   214e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   214e4:	8d 50 01             	lea    edx,[eax+0x1]
   214e7:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   214ea:	6a 00                	push   0x0
   214ec:	50                   	push   eax
   214ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   214f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   214f3:	e8 70 a2 ff ff       	call   1b768 <fatfs_sector_reader>
   214f8:	83 c4 10             	add    esp,0x10
   214fb:	85 c0                	test   eax,eax
   214fd:	0f 84 1a 01 00 00    	je     2161d <fatfs_find_free_dir_offset+0x175>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   21503:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   21507:	e9 02 01 00 00       	jmp    2160e <fatfs_find_free_dir_offset+0x166>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:154
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   2150c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   21510:	c1 e0 05             	shl    eax,0x5
   21513:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:157

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   21517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2151a:	8d 50 44             	lea    edx,[eax+0x44]
   2151d:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   21521:	01 d0                	add    eax,edx
   21523:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:160

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   21526:	83 ec 0c             	sub    esp,0xc
   21529:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   2152c:	e8 09 e4 ff ff       	call   1f93a <fatfs_entry_lfn_text>
   21531:	83 c4 10             	add    esp,0x10
   21534:	85 c0                	test   eax,eax
   21536:	74 2c                	je     21564 <fatfs_find_free_dir_offset+0xbc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:163
                {
                    // First entry?
                    if (possible_spaces == 0)
   21538:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   2153c:	75 1d                	jne    2155b <fatfs_find_free_dir_offset+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:166
                    {
                        // Store start
                        *pSector = x-1;
   2153e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21541:	83 e8 01             	sub    eax,0x1
   21544:	89 c2                	mov    edx,eax
   21546:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   21549:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:167
                        *pOffset = item;
   2154b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   2154e:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   21552:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:168
                        start_recorded = 1;
   21554:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:173
                    }

                    // Increment the count in-case the file turns
                    // out to be deleted...
                    possible_spaces++;
   2155b:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   2155f:	e9 a0 00 00 00       	jmp    21604 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:179
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   21564:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   21568:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2156b:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   21570:	3c e5                	cmp    al,0xe5
   21572:	75 39                	jne    215ad <fatfs_find_free_dir_offset+0x105>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:182
                    {
                        // First entry?
                        if (possible_spaces == 0)
   21574:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21578:	75 1d                	jne    21597 <fatfs_find_free_dir_offset+0xef>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:185
                        {
                            // Store start
                            *pSector = x-1;
   2157a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2157d:	83 e8 01             	sub    eax,0x1
   21580:	89 c2                	mov    edx,eax
   21582:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   21585:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:186
                            *pOffset = item;
   21587:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   2158a:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2158e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:187
                            start_recorded = 1;
   21590:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:190
                        }

                        possible_spaces++;
   21597:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:193

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   2159b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2159e:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   215a1:	7c 61                	jl     21604 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:194
                            return 1;
   215a3:	b8 01 00 00 00       	mov    eax,0x1
   215a8:	e9 31 01 00 00       	jmp    216de <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:199

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   215ad:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   215b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   215b4:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   215b9:	84 c0                	test   al,al
   215bb:	75 39                	jne    215f6 <fatfs_find_free_dir_offset+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:202
                    {
                        // First entry?
                        if (possible_spaces == 0)
   215bd:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   215c1:	75 1d                	jne    215e0 <fatfs_find_free_dir_offset+0x138>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:205
                        {
                            // Store start
                            *pSector = x-1;
   215c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   215c6:	83 e8 01             	sub    eax,0x1
   215c9:	89 c2                	mov    edx,eax
   215cb:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   215ce:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:206
                            *pOffset = item;
   215d0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   215d3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   215d7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:207
                            start_recorded = 1;
   215d9:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:211
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   215e0:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:214

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   215e4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   215e7:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   215ea:	7c 18                	jl     21604 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:215
                            return 1;
   215ec:	b8 01 00 00 00       	mov    eax,0x1
   215f1:	e9 e8 00 00 00       	jmp    216de <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:221
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   215f6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:222
                        start_recorded = 0;
   215fd:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   21604:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   21608:	83 c0 01             	add    eax,0x1
   2160b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151 (discriminator 1)
   2160e:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   21612:	0f 86 f4 fe ff ff    	jbe    2150c <fatfs_find_free_dir_offset+0x64>
   21618:	e9 c4 fe ff ff       	jmp    214e1 <fatfs_find_free_dir_offset+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:233
        else
        {
            uint32 newCluster;

            // Get a new cluster for directory
            if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
   2161d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21620:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   21623:	83 ec 04             	sub    esp,0x4
   21626:	8d 55 dc             	lea    edx,[ebp-0x24]
   21629:	52                   	push   edx
   2162a:	50                   	push   eax
   2162b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2162e:	e8 15 f8 ff ff       	call   20e48 <fatfs_find_blank_cluster>
   21633:	83 c4 10             	add    esp,0x10
   21636:	85 c0                	test   eax,eax
   21638:	75 0a                	jne    21644 <fatfs_find_free_dir_offset+0x19c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:234
                return 0;
   2163a:	b8 00 00 00 00       	mov    eax,0x0
   2163f:	e9 9a 00 00 00       	jmp    216de <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:237

            // Add cluster to end of directory tree
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
   21644:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   21647:	83 ec 04             	sub    esp,0x4
   2164a:	50                   	push   eax
   2164b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2164e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21651:	e8 06 fb ff ff       	call   2115c <fatfs_fat_add_cluster_to_chain>
   21656:	83 c4 10             	add    esp,0x10
   21659:	85 c0                	test   eax,eax
   2165b:	75 07                	jne    21664 <fatfs_find_free_dir_offset+0x1bc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:238
                return 0;
   2165d:	b8 00 00 00 00       	mov    eax,0x0
   21662:	eb 7a                	jmp    216de <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:241

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
   21664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21667:	83 c0 44             	add    eax,0x44
   2166a:	83 ec 04             	sub    esp,0x4
   2166d:	68 00 02 00 00       	push   0x200
   21672:	6a 00                	push   0x0
   21674:	50                   	push   eax
   21675:	e8 c3 3f 00 00       	call   2563d <memset>
   2167a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242
            for (i=0;i<fs->sectors_per_cluster;i++)
   2167d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   21681:	eb 2b                	jmp    216ae <fatfs_find_free_dir_offset+0x206>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:244
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
   21683:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   21687:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   2168a:	6a 00                	push   0x0
   2168c:	52                   	push   edx
   2168d:	50                   	push   eax
   2168e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21691:	e8 27 a3 ff ff       	call   1b9bd <fatfs_write_sector>
   21696:	83 c4 10             	add    esp,0x10
   21699:	85 c0                	test   eax,eax
   2169b:	75 07                	jne    216a4 <fatfs_find_free_dir_offset+0x1fc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:245
                    return 0;
   2169d:	b8 00 00 00 00       	mov    eax,0x0
   216a2:	eb 3a                	jmp    216de <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242 (discriminator 2)
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
            for (i=0;i<fs->sectors_per_cluster;i++)
   216a4:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   216a8:	83 c0 01             	add    eax,0x1
   216ab:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242 (discriminator 1)
   216ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   216b1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   216b4:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   216b7:	77 ca                	ja     21683 <fatfs_find_free_dir_offset+0x1db>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:249
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded)
   216b9:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   216bd:	75 1a                	jne    216d9 <fatfs_find_free_dir_offset+0x231>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:252
            {
                // Store start
                *pSector = (x-1);
   216bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   216c2:	83 e8 01             	sub    eax,0x1
   216c5:	89 c2                	mov    edx,eax
   216c7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   216ca:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:253
                *pOffset = 0;
   216cc:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   216cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:254
                start_recorded = 1;
   216d2:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:257
            }

            return 1;
   216d9:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:262 (discriminator 2)
        }
    } // End of while loop

    return 0;
}
   216de:	c9                   	leave  
   216df:	c3                   	ret    

000216e0 <fatfs_add_file_entry>:
fatfs_add_file_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:267
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
   216e0:	55                   	push   ebp
   216e1:	89 e5                	mov    ebp,esp
   216e3:	83 ec 58             	sub    esp,0x58
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:268
    uint8 item=0;
   216e6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:269
    uint16 recordoffset = 0;
   216ea:	66 c7 45 da 00 00    	mov    WORD PTR [ebp-0x26],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:270
    uint8 i=0;
   216f0:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:271
    uint32 x=0;
   216f4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:274
    int entryCount;
    struct fat_dir_entry shortEntry;
    int dirtySector = 0;
   216fb:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:276

    uint32 dirSector = 0;
   21702:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:277
    uint8 dirOffset = 0;
   21709:	c6 45 b3 00          	mov    BYTE PTR [ebp-0x4d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:278
    int foundEnd = 0;
   2170d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:284

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
   21714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21717:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2171a:	85 c0                	test   eax,eax
   2171c:	75 0a                	jne    21728 <fatfs_add_file_entry+0x48>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:285
        return 0;
   2171e:	b8 00 00 00 00       	mov    eax,0x0
   21723:	e9 0c 02 00 00       	jmp    21934 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:290

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
   21728:	83 ec 0c             	sub    esp,0xc
   2172b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   2172e:	e8 55 e3 ff ff       	call   1fa88 <fatfs_lfn_entries_required>
   21733:	83 c4 10             	add    esp,0x10
   21736:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:291
    if (!entryCount)
   21739:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   2173d:	75 0a                	jne    21749 <fatfs_add_file_entry+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:292
        return 0;
   2173f:	b8 00 00 00 00       	mov    eax,0x0
   21744:	e9 eb 01 00 00       	jmp    21934 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:299
    entryCount = 0;
#endif

    // Find space in the directory for this filename (or allocate some more)
    // NOTE: We need to find space for at least the LFN + SFN (or just the SFN if LFNs not supported).
    if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
   21749:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2174c:	8d 50 01             	lea    edx,[eax+0x1]
   2174f:	83 ec 0c             	sub    esp,0xc
   21752:	8d 45 b3             	lea    eax,[ebp-0x4d]
   21755:	50                   	push   eax
   21756:	8d 45 b4             	lea    eax,[ebp-0x4c]
   21759:	50                   	push   eax
   2175a:	52                   	push   edx
   2175b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2175e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21761:	e8 42 fd ff ff       	call   214a8 <fatfs_find_free_dir_offset>
   21766:	83 c4 20             	add    esp,0x20
   21769:	85 c0                	test   eax,eax
   2176b:	75 0a                	jne    21777 <fatfs_add_file_entry+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:300
        return 0;
   2176d:	b8 00 00 00 00       	mov    eax,0x0
   21772:	e9 bd 01 00 00       	jmp    21934 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:303

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
   21777:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2177a:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:304
    checksum = 0;
   2177d:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   21781:	c6 45 f6 0b          	mov    BYTE PTR [ebp-0xa],0xb
   21785:	eb 3b                	jmp    217c2 <fatfs_add_file_entry+0xe2>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 7)
   21787:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   2178b:	83 e0 01             	and    eax,0x1
   2178e:	85 c0                	test   eax,eax
   21790:	74 07                	je     21799 <fatfs_add_file_entry+0xb9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 2)
   21792:	ba 80 ff ff ff       	mov    edx,0xffffff80
   21797:	eb 05                	jmp    2179e <fatfs_add_file_entry+0xbe>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 3)
   21799:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 5)
   2179e:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   217a2:	d0 e8                	shr    al,1
   217a4:	8d 0c 02             	lea    ecx,[edx+eax*1]
   217a7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   217aa:	8d 50 01             	lea    edx,[eax+0x1]
   217ad:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
   217b0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   217b3:	01 c8                	add    eax,ecx
   217b5:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
   217b8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   217bc:	83 e8 01             	sub    eax,0x1
   217bf:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 6)
   217c2:	80 7d f6 00          	cmp    BYTE PTR [ebp-0xa],0x0
   217c6:	75 bf                	jne    21787 <fatfs_add_file_entry+0xa7>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:308

    // Start from current sector where space was found!
    x = dirSector;
   217c8:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   217cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:314

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   217ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   217d1:	8d 50 01             	lea    edx,[eax+0x1]
   217d4:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   217d7:	6a 00                	push   0x0
   217d9:	50                   	push   eax
   217da:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   217dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   217e0:	e8 83 9f ff ff       	call   1b768 <fatfs_sector_reader>
   217e5:	83 c4 10             	add    esp,0x10
   217e8:	85 c0                	test   eax,eax
   217ea:	0f 84 3f 01 00 00    	je     2192f <fatfs_add_file_entry+0x24f>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   217f0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   217f4:	e9 ea 00 00 00       	jmp    218e3 <fatfs_add_file_entry+0x203>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:320
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   217f9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   217fd:	c1 e0 05             	shl    eax,0x5
   21800:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:323

                // If the start position for the entry has been found
                if (foundEnd==0)
   21804:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   21808:	75 1d                	jne    21827 <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:324
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
   2180a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2180d:	8d 50 ff             	lea    edx,[eax-0x1]
   21810:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   21813:	39 c2                	cmp    edx,eax
   21815:	75 10                	jne    21827 <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:324 (discriminator 1)
   21817:	0f b6 45 b3          	movzx  eax,BYTE PTR [ebp-0x4d]
   2181b:	3a 45 f7             	cmp    al,BYTE PTR [ebp-0x9]
   2181e:	75 07                	jne    21827 <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:325
                        foundEnd = 1;
   21820:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:328

                // Start adding filename
                if (foundEnd)
   21827:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   2182b:	0f 84 a8 00 00 00    	je     218d9 <fatfs_add_file_entry+0x1f9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:330
                {
                    if (entryCount==0)
   21831:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21835:	75 74                	jne    218ab <fatfs_add_file_entry+0x1cb>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:333
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
   21837:	83 ec 0c             	sub    esp,0xc
   2183a:	ff 75 20             	push   DWORD PTR [ebp+0x20]
   2183d:	8d 45 ba             	lea    eax,[ebp-0x46]
   21840:	50                   	push   eax
   21841:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   21844:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   21847:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   2184a:	e8 e8 e3 ff ff       	call   1fc37 <fatfs_sfn_create_entry>
   2184f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:337

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
   21852:	6a 01                	push   0x1
   21854:	6a 01                	push   0x1
   21856:	6a 01                	push   0x1
   21858:	8d 45 ba             	lea    eax,[ebp-0x46]
   2185b:	50                   	push   eax
   2185c:	e8 77 a6 ff ff       	call   1bed8 <fatfs_update_timestamps>
   21861:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:340
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
   21864:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
   21868:	8d 50 40             	lea    edx,[eax+0x40]
   2186b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2186e:	01 d0                	add    eax,edx
   21870:	8d 50 04             	lea    edx,[eax+0x4]
   21873:	83 ec 04             	sub    esp,0x4
   21876:	6a 20                	push   0x20
   21878:	8d 45 ba             	lea    eax,[ebp-0x46]
   2187b:	50                   	push   eax
   2187c:	52                   	push   edx
   2187d:	e8 82 49 00 00       	call   26204 <memcpy>
   21882:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:343

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   21885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21888:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2188b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2188e:	8d 4a 44             	lea    ecx,[edx+0x44]
   21891:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21894:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   2189a:	83 ec 04             	sub    esp,0x4
   2189d:	6a 01                	push   0x1
   2189f:	51                   	push   ecx
   218a0:	52                   	push   edx
   218a1:	ff d0                	call   eax
   218a3:	83 c4 10             	add    esp,0x10
   218a6:	e9 89 00 00 00       	jmp    21934 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:348
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   218ab:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:351

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   218af:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   218b3:	0f b7 55 da          	movzx  edx,WORD PTR [ebp-0x26]
   218b7:	8d 4a 40             	lea    ecx,[edx+0x40]
   218ba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   218bd:	01 ca                	add    edx,ecx
   218bf:	83 c2 04             	add    edx,0x4
   218c2:	50                   	push   eax
   218c3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   218c6:	52                   	push   edx
   218c7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   218ca:	e8 fa e1 ff ff       	call   1fac9 <fatfs_filename_to_lfn>
   218cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:352
                        dirtySector = 1;
   218d2:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   218d9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   218dd:	83 c0 01             	add    eax,0x1
   218e0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317 (discriminator 1)
   218e3:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   218e7:	0f 86 0c ff ff ff    	jbe    217f9 <fatfs_add_file_entry+0x119>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:359
#endif
                }
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
   218ed:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   218f1:	0f 84 d7 fe ff ff    	je     217ce <fatfs_add_file_entry+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:361
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
   218f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   218fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   218fd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21900:	8d 4a 44             	lea    ecx,[edx+0x44]
   21903:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21906:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   2190c:	83 ec 04             	sub    esp,0x4
   2190f:	6a 01                	push   0x1
   21911:	51                   	push   ecx
   21912:	52                   	push   edx
   21913:	ff d0                	call   eax
   21915:	83 c4 10             	add    esp,0x10
   21918:	85 c0                	test   eax,eax
   2191a:	75 07                	jne    21923 <fatfs_add_file_entry+0x243>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:362
                    return 0;
   2191c:	b8 00 00 00 00       	mov    eax,0x0
   21921:	eb 11                	jmp    21934 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:364

                dirtySector = 0;
   21923:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   2192a:	e9 9f fe ff ff       	jmp    217ce <fatfs_add_file_entry+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:368
            }
        }
        else
            return 0;
   2192f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:372 (discriminator 2)
    } // End of while loop

    return 0;
}
   21934:	c9                   	leave  
   21935:	c3                   	ret    
   21936:	66 90                	xchg   ax,ax

00021938 <printMBR>:
printMBR():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:13
uint8_t partBuffer[512*20]; //10240
gptHeader_t* gptHdr;
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
   21938:	55                   	push   ebp
   21939:	89 e5                	mov    ebp,esp
   2193b:	57                   	push   edi
   2193c:	56                   	push   esi
   2193d:	53                   	push   ebx
   2193e:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:14
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
   21941:	83 ec 0c             	sub    esp,0xc
   21944:	68 60 3b 08 00       	push   0x83b60
   21949:	e8 55 5f 00 00       	call   278a3 <printk>
   2194e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   21951:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   21958:	e9 8b 00 00 00       	jmp    219e8 <printMBR+0xb0>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:17
    {
        if (mbr->parts[cnt].partStartSector>0)
   2195d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21960:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21963:	c1 e2 04             	shl    edx,0x4
   21966:	01 d0                	add    eax,edx
   21968:	8b 00                	mov    eax,DWORD PTR [eax]
   2196a:	85 c0                	test   eax,eax
   2196c:	74 76                	je     219e4 <printMBR+0xac>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
   2196e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21971:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21974:	c1 e2 04             	shl    edx,0x4
   21977:	01 d0                	add    eax,edx
   21979:	83 c0 0c             	add    eax,0xc
   2197c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2197f:	84 c0                	test   al,al
   21981:	74 07                	je     2198a <printMBR+0x52>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 1)
   21983:	bf 87 3b 08 00       	mov    edi,0x83b87
   21988:	eb 05                	jmp    2198f <printMBR+0x57>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 2)
   2198a:	bf 89 3b 08 00       	mov    edi,0x83b89
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 4)
   2198f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21992:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21995:	c1 e2 04             	shl    edx,0x4
   21998:	01 d0                	add    eax,edx
   2199a:	83 c0 0d             	add    eax,0xd
   2199d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   219a0:	0f b6 d8             	movzx  ebx,al
   219a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   219a6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   219a9:	c1 e2 04             	shl    edx,0x4
   219ac:	01 d0                	add    eax,edx
   219ae:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   219b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   219b4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   219b7:	c1 e2 04             	shl    edx,0x4
   219ba:	01 d0                	add    eax,edx
   219bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   219bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   219c2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   219c5:	c1 e6 04             	shl    esi,0x4
   219c8:	01 f0                	add    eax,esi
   219ca:	8b 00                	mov    eax,DWORD PTR [eax]
   219cc:	83 ec 04             	sub    esp,0x4
   219cf:	57                   	push   edi
   219d0:	53                   	push   ebx
   219d1:	51                   	push   ecx
   219d2:	52                   	push   edx
   219d3:	50                   	push   eax
   219d4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   219d7:	68 8b 3b 08 00       	push   0x83b8b
   219dc:	e8 c2 5e 00 00       	call   278a3 <printk>
   219e1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15 (discriminator 2)
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   219e4:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15 (discriminator 1)
   219e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   219eb:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   219f1:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   219f4:	0f 8f 63 ff ff ff    	jg     2195d <printMBR+0x25>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:20
    {
        if (mbr->parts[cnt].partStartSector>0)
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
    }
    printk("\n");
   219fa:	83 ec 0c             	sub    esp,0xc
   219fd:	68 a2 3b 08 00       	push   0x83ba2
   21a02:	e8 9c 5e 00 00       	call   278a3 <printk>
   21a07:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:21
}
   21a0a:	90                   	nop
   21a0b:	8d 65 f4             	lea    esp,[ebp-0xc]
   21a0e:	5b                   	pop    ebx
   21a0f:	5e                   	pop    esi
   21a10:	5f                   	pop    edi
   21a11:	5d                   	pop    ebp
   21a12:	c3                   	ret    

00021a13 <parseMBR>:
parseMBR():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:24
    
bool parseMBR(struct ataDeviceInfo_t* devInfo, struct mbr_t* mbr)
{
   21a13:	55                   	push   ebp
   21a14:	89 e5                	mov    ebp,esp
   21a16:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:25
    HBA_PORT* port=(HBA_PORT*)devInfo->ioPort;
   21a19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21a1c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21a22:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:27
    
    memset(mbr,0,sizeof(struct mbr_t));
   21a25:	83 ec 04             	sub    esp,0x4
   21a28:	68 17 04 00 00       	push   0x417
   21a2d:	6a 00                	push   0x0
   21a2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   21a32:	e8 06 3c 00 00       	call   2563d <memset>
   21a37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:28
    mbr->parts[0].partStartSector=0;
   21a3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:29
    printd(DEBUG_HARDDRIVE,"devInfo->ABAR=0x%08X\n",devInfo->ABAR);
   21a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21a46:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   21a4c:	83 ec 04             	sub    esp,0x4
   21a4f:	50                   	push   eax
   21a50:	68 a4 3b 08 00       	push   0x83ba4
   21a55:	6a 08                	push   0x8
   21a57:	e8 67 5e 00 00       	call   278c3 <printd>
   21a5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:30
    if (devInfo->ABAR)
   21a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21a62:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   21a68:	85 c0                	test   eax,eax
   21a6a:	74 66                	je     21ad2 <parseMBR+0xbf>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:32
    {
        printd(DEBUG_HARDDRIVE,"Disk is SATA\n");
   21a6c:	83 ec 08             	sub    esp,0x8
   21a6f:	68 ba 3b 08 00       	push   0x83bba
   21a74:	6a 08                	push   0x8
   21a76:	e8 48 5e 00 00       	call   278c3 <printd>
   21a7b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:33
        ahciSetCurrentDisk(port);
   21a7e:	83 ec 0c             	sub    esp,0xc
   21a81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21a84:	e8 3a 39 ff ff       	call   153c3 <ahciSetCurrentDisk>
   21a89:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:34
        bool lResult=ahciRead(port,0,mbrBuffer,1);
   21a8c:	6a 01                	push   0x1
   21a8e:	68 a0 8d 09 00       	push   0x98da0
   21a93:	6a 00                	push   0x0
   21a95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21a98:	e8 5a 39 ff ff       	call   153f7 <ahciRead>
   21a9d:	83 c4 10             	add    esp,0x10
   21aa0:	85 c0                	test   eax,eax
   21aa2:	0f 95 c0             	setne  al
   21aa5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:35
        if (!lResult)
   21aa8:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   21aac:	83 f0 01             	xor    eax,0x1
   21aaf:	84 c0                	test   al,al
   21ab1:	74 75                	je     21b28 <parseMBR+0x115>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:37
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   21ab3:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   21ab7:	83 ec 08             	sub    esp,0x8
   21aba:	50                   	push   eax
   21abb:	68 c8 3b 08 00       	push   0x83bc8
   21ac0:	e8 de 5d 00 00       	call   278a3 <printk>
   21ac5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:38
            return false;
   21ac8:	b8 00 00 00 00       	mov    eax,0x0
   21acd:	e9 98 03 00 00       	jmp    21e6a <parseMBR+0x457>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:43
        }
    }
    else
    {
        printd(DEBUG_HARDDRIVE,"Disk is ATA\n");
   21ad2:	83 ec 08             	sub    esp,0x8
   21ad5:	68 e8 3b 08 00       	push   0x83be8
   21ada:	6a 08                	push   0x8
   21adc:	e8 e2 5d 00 00       	call   278c3 <printd>
   21ae1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:44
        int lResult=ataReadDisk(devInfo, mbr->parts, 0, mbrBuffer, 1);
   21ae4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ae7:	83 ec 0c             	sub    esp,0xc
   21aea:	6a 01                	push   0x1
   21aec:	68 a0 8d 09 00       	push   0x98da0
   21af1:	6a 00                	push   0x0
   21af3:	50                   	push   eax
   21af4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21af7:	e8 ff 14 00 00       	call   22ffb <ataReadDisk>
   21afc:	83 c4 20             	add    esp,0x20
   21aff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:45
        if (lResult!=512)
   21b02:	81 7d ec 00 02 00 00 	cmp    DWORD PTR [ebp-0x14],0x200
   21b09:	74 1d                	je     21b28 <parseMBR+0x115>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:47
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   21b0b:	83 ec 08             	sub    esp,0x8
   21b0e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   21b11:	68 c8 3b 08 00       	push   0x83bc8
   21b16:	e8 88 5d 00 00       	call   278a3 <printk>
   21b1b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:48
            return false;
   21b1e:	b8 00 00 00 00       	mov    eax,0x0
   21b23:	e9 42 03 00 00       	jmp    21e6a <parseMBR+0x457>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:51
        }
    }
    memcpy(mbr->diskID, &mbrBuffer[0x1b4], 10);
   21b28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b2b:	05 04 04 00 00       	add    eax,0x404
   21b30:	83 ec 04             	sub    esp,0x4
   21b33:	6a 0a                	push   0xa
   21b35:	68 54 8f 09 00       	push   0x98f54
   21b3a:	50                   	push   eax
   21b3b:	e8 c4 46 00 00       	call   26204 <memcpy>
   21b40:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52
    mbr->validBootSector=mbrBuffer[0x1FE]==0x55 && mbrBuffer[0x1FF]==0xAA;
   21b43:	0f b6 05 9e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9e
   21b4a:	3c 55                	cmp    al,0x55
   21b4c:	75 12                	jne    21b60 <parseMBR+0x14d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 1)
   21b4e:	0f b6 05 9f 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9f
   21b55:	3c aa                	cmp    al,0xaa
   21b57:	75 07                	jne    21b60 <parseMBR+0x14d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 3)
   21b59:	b8 01 00 00 00       	mov    eax,0x1
   21b5e:	eb 05                	jmp    21b65 <parseMBR+0x152>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 4)
   21b60:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 6)
   21b65:	83 e0 01             	and    eax,0x1
   21b68:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21b6b:	88 82 0e 04 00 00    	mov    BYTE PTR [edx+0x40e],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:53 (discriminator 6)
    mbr->parts[0].bootable = mbrBuffer[MBR_PART1_OFFSET+0]==0x80;
   21b71:	0f b6 05 5e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f5e
   21b78:	3c 80                	cmp    al,0x80
   21b7a:	0f 94 c2             	sete   dl
   21b7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b80:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:54 (discriminator 6)
    mbr->parts[0].systemID = mbrBuffer[MBR_PART1_OFFSET+4];
   21b83:	0f b6 15 62 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f62
   21b8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b8d:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:55 (discriminator 6)
    mbr->parts[0].partStartSector = mbrBuffer[MBR_PART1_OFFSET+8] | (mbrBuffer[MBR_PART1_OFFSET+9]<<8) | (mbrBuffer[MBR_PART1_OFFSET+10]<<16) | (mbrBuffer[MBR_PART1_OFFSET+11]<<24);
   21b90:	0f b6 05 66 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f66
   21b97:	0f b6 c0             	movzx  eax,al
   21b9a:	0f b6 15 67 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f67
   21ba1:	0f b6 d2             	movzx  edx,dl
   21ba4:	c1 e2 08             	shl    edx,0x8
   21ba7:	09 c2                	or     edx,eax
   21ba9:	0f b6 05 68 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f68
   21bb0:	0f b6 c0             	movzx  eax,al
   21bb3:	c1 e0 10             	shl    eax,0x10
   21bb6:	09 c2                	or     edx,eax
   21bb8:	0f b6 05 69 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f69
   21bbf:	0f b6 c0             	movzx  eax,al
   21bc2:	c1 e0 18             	shl    eax,0x18
   21bc5:	09 d0                	or     eax,edx
   21bc7:	89 c2                	mov    edx,eax
   21bc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21bcc:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:56 (discriminator 6)
    mbr->parts[0].partTotalSectors = mbrBuffer[MBR_PART1_OFFSET+12] | (mbrBuffer[MBR_PART1_OFFSET+13]<<8) | (mbrBuffer[MBR_PART1_OFFSET+14]<<16) | (mbrBuffer[MBR_PART1_OFFSET+15]<<24);
   21bce:	0f b6 05 6a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6a
   21bd5:	0f b6 c0             	movzx  eax,al
   21bd8:	0f b6 15 6b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f6b
   21bdf:	0f b6 d2             	movzx  edx,dl
   21be2:	c1 e2 08             	shl    edx,0x8
   21be5:	09 c2                	or     edx,eax
   21be7:	0f b6 05 6c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6c
   21bee:	0f b6 c0             	movzx  eax,al
   21bf1:	c1 e0 10             	shl    eax,0x10
   21bf4:	09 c2                	or     edx,eax
   21bf6:	0f b6 05 6d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6d
   21bfd:	0f b6 c0             	movzx  eax,al
   21c00:	c1 e0 18             	shl    eax,0x18
   21c03:	09 d0                	or     eax,edx
   21c05:	89 c2                	mov    edx,eax
   21c07:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c0a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:57 (discriminator 6)
    mbr->parts[0].partEndSector = mbr->parts[0].partStartSector + mbr->parts[0].partTotalSectors;
   21c0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c10:	8b 10                	mov    edx,DWORD PTR [eax]
   21c12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c15:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   21c18:	01 c2                	add    edx,eax
   21c1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:59 (discriminator 6)

    mbr->parts[1].bootable = mbrBuffer[MBR_PART2_OFFSET+0]==0x80;
   21c20:	0f b6 05 6e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6e
   21c27:	3c 80                	cmp    al,0x80
   21c29:	0f 94 c2             	sete   dl
   21c2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c2f:	88 50 1c             	mov    BYTE PTR [eax+0x1c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:60 (discriminator 6)
    mbr->parts[1].systemID = mbrBuffer[MBR_PART2_OFFSET+4];
   21c32:	0f b6 15 72 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f72
   21c39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c3c:	88 50 1d             	mov    BYTE PTR [eax+0x1d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:61 (discriminator 6)
    mbr->parts[1].partStartSector = mbrBuffer[MBR_PART2_OFFSET+8] | (mbrBuffer[MBR_PART2_OFFSET+9]<<8) | (mbrBuffer[MBR_PART2_OFFSET+10]<<16) | (mbrBuffer[MBR_PART2_OFFSET+11]<<24);
   21c3f:	0f b6 05 76 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f76
   21c46:	0f b6 c0             	movzx  eax,al
   21c49:	0f b6 15 77 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f77
   21c50:	0f b6 d2             	movzx  edx,dl
   21c53:	c1 e2 08             	shl    edx,0x8
   21c56:	09 c2                	or     edx,eax
   21c58:	0f b6 05 78 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f78
   21c5f:	0f b6 c0             	movzx  eax,al
   21c62:	c1 e0 10             	shl    eax,0x10
   21c65:	09 c2                	or     edx,eax
   21c67:	0f b6 05 79 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f79
   21c6e:	0f b6 c0             	movzx  eax,al
   21c71:	c1 e0 18             	shl    eax,0x18
   21c74:	09 d0                	or     eax,edx
   21c76:	89 c2                	mov    edx,eax
   21c78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c7b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:62 (discriminator 6)
    mbr->parts[1].partTotalSectors = mbrBuffer[MBR_PART2_OFFSET+12] | (mbrBuffer[MBR_PART2_OFFSET+13]<<8) | (mbrBuffer[MBR_PART2_OFFSET+14]<<16) | (mbrBuffer[MBR_PART2_OFFSET+15]<<24);
   21c7e:	0f b6 05 7a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7a
   21c85:	0f b6 c0             	movzx  eax,al
   21c88:	0f b6 15 7b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f7b
   21c8f:	0f b6 d2             	movzx  edx,dl
   21c92:	c1 e2 08             	shl    edx,0x8
   21c95:	09 c2                	or     edx,eax
   21c97:	0f b6 05 7c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7c
   21c9e:	0f b6 c0             	movzx  eax,al
   21ca1:	c1 e0 10             	shl    eax,0x10
   21ca4:	09 c2                	or     edx,eax
   21ca6:	0f b6 05 7d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7d
   21cad:	0f b6 c0             	movzx  eax,al
   21cb0:	c1 e0 18             	shl    eax,0x18
   21cb3:	09 d0                	or     eax,edx
   21cb5:	89 c2                	mov    edx,eax
   21cb7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21cba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:63 (discriminator 6)
    mbr->parts[1].partEndSector = mbr->parts[1].partStartSector + mbr->parts[1].partTotalSectors;
   21cbd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21cc0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   21cc3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21cc6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   21cc9:	01 c2                	add    edx,eax
   21ccb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21cce:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:65 (discriminator 6)

    mbr->parts[2].bootable = mbrBuffer[MBR_PART3_OFFSET+0]==0x80;
   21cd1:	0f b6 05 7e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7e
   21cd8:	3c 80                	cmp    al,0x80
   21cda:	0f 94 c2             	sete   dl
   21cdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ce0:	88 50 2c             	mov    BYTE PTR [eax+0x2c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:66 (discriminator 6)
    mbr->parts[2].systemID = mbrBuffer[MBR_PART3_OFFSET+4];
   21ce3:	0f b6 15 82 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f82
   21cea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ced:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:67 (discriminator 6)
    mbr->parts[2].partStartSector = mbrBuffer[MBR_PART3_OFFSET+8] | (mbrBuffer[MBR_PART3_OFFSET+9]<<8) | (mbrBuffer[MBR_PART3_OFFSET+10]<<16) | (mbrBuffer[MBR_PART3_OFFSET+11]<<24);
   21cf0:	0f b6 05 86 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f86
   21cf7:	0f b6 c0             	movzx  eax,al
   21cfa:	0f b6 15 87 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f87
   21d01:	0f b6 d2             	movzx  edx,dl
   21d04:	c1 e2 08             	shl    edx,0x8
   21d07:	09 c2                	or     edx,eax
   21d09:	0f b6 05 88 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f88
   21d10:	0f b6 c0             	movzx  eax,al
   21d13:	c1 e0 10             	shl    eax,0x10
   21d16:	09 c2                	or     edx,eax
   21d18:	0f b6 05 89 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f89
   21d1f:	0f b6 c0             	movzx  eax,al
   21d22:	c1 e0 18             	shl    eax,0x18
   21d25:	09 d0                	or     eax,edx
   21d27:	89 c2                	mov    edx,eax
   21d29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d2c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:68 (discriminator 6)
    mbr->parts[2].partTotalSectors = mbrBuffer[MBR_PART3_OFFSET+12] | (mbrBuffer[MBR_PART3_OFFSET+13]<<8) | (mbrBuffer[MBR_PART3_OFFSET+14]<<16) | (mbrBuffer[MBR_PART3_OFFSET+15]<<24);
   21d2f:	0f b6 05 8a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8a
   21d36:	0f b6 c0             	movzx  eax,al
   21d39:	0f b6 15 8b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f8b
   21d40:	0f b6 d2             	movzx  edx,dl
   21d43:	c1 e2 08             	shl    edx,0x8
   21d46:	09 c2                	or     edx,eax
   21d48:	0f b6 05 8c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8c
   21d4f:	0f b6 c0             	movzx  eax,al
   21d52:	c1 e0 10             	shl    eax,0x10
   21d55:	09 c2                	or     edx,eax
   21d57:	0f b6 05 8d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8d
   21d5e:	0f b6 c0             	movzx  eax,al
   21d61:	c1 e0 18             	shl    eax,0x18
   21d64:	09 d0                	or     eax,edx
   21d66:	89 c2                	mov    edx,eax
   21d68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d6b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:69 (discriminator 6)
    mbr->parts[2].partEndSector = mbr->parts[2].partStartSector + mbr->parts[2].partTotalSectors;
   21d6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d71:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   21d74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d77:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   21d7a:	01 c2                	add    edx,eax
   21d7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d7f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:71 (discriminator 6)

    mbr->parts[3].bootable = mbrBuffer[MBR_PART4_OFFSET+0]==0x80;
   21d82:	0f b6 05 8e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8e
   21d89:	3c 80                	cmp    al,0x80
   21d8b:	0f 94 c2             	sete   dl
   21d8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d91:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:72 (discriminator 6)
    mbr->parts[3].systemID = mbrBuffer[MBR_PART4_OFFSET+4];
   21d94:	0f b6 15 92 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f92
   21d9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d9e:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:73 (discriminator 6)
    mbr->parts[3].partStartSector = mbrBuffer[MBR_PART4_OFFSET+8] | (mbrBuffer[MBR_PART4_OFFSET+9]<<8) | (mbrBuffer[MBR_PART4_OFFSET+10]<<16) | (mbrBuffer[MBR_PART4_OFFSET+11]<<24);
   21da1:	0f b6 05 96 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f96
   21da8:	0f b6 c0             	movzx  eax,al
   21dab:	0f b6 15 97 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f97
   21db2:	0f b6 d2             	movzx  edx,dl
   21db5:	c1 e2 08             	shl    edx,0x8
   21db8:	09 c2                	or     edx,eax
   21dba:	0f b6 05 98 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f98
   21dc1:	0f b6 c0             	movzx  eax,al
   21dc4:	c1 e0 10             	shl    eax,0x10
   21dc7:	09 c2                	or     edx,eax
   21dc9:	0f b6 05 99 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f99
   21dd0:	0f b6 c0             	movzx  eax,al
   21dd3:	c1 e0 18             	shl    eax,0x18
   21dd6:	09 d0                	or     eax,edx
   21dd8:	89 c2                	mov    edx,eax
   21dda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ddd:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:74 (discriminator 6)
    mbr->parts[3].partTotalSectors = mbrBuffer[MBR_PART4_OFFSET+12] | (mbrBuffer[MBR_PART4_OFFSET+13]<<8) | (mbrBuffer[MBR_PART4_OFFSET+14]<<16) | (mbrBuffer[MBR_PART4_OFFSET+15]<<24);
   21de0:	0f b6 05 9a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9a
   21de7:	0f b6 c0             	movzx  eax,al
   21dea:	0f b6 15 9b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f9b
   21df1:	0f b6 d2             	movzx  edx,dl
   21df4:	c1 e2 08             	shl    edx,0x8
   21df7:	09 c2                	or     edx,eax
   21df9:	0f b6 05 9c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9c
   21e00:	0f b6 c0             	movzx  eax,al
   21e03:	c1 e0 10             	shl    eax,0x10
   21e06:	09 c2                	or     edx,eax
   21e08:	0f b6 05 9d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9d
   21e0f:	0f b6 c0             	movzx  eax,al
   21e12:	c1 e0 18             	shl    eax,0x18
   21e15:	09 d0                	or     eax,edx
   21e17:	89 c2                	mov    edx,eax
   21e19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e1c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:75 (discriminator 6)
    mbr->parts[3].partEndSector = mbr->parts[3].partStartSector + mbr->parts[3].partTotalSectors;
   21e1f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e22:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
   21e25:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e28:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   21e2b:	01 c2                	add    edx,eax
   21e2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e30:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:76 (discriminator 6)
    mbr->partCount=4;
   21e33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e36:	c7 80 00 04 00 00 04 	mov    DWORD PTR [eax+0x400],0x4
   21e3d:	00 00 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:77 (discriminator 6)
    if (mbr->parts[0].systemID=0xEE)
   21e40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e43:	c6 40 0d ee          	mov    BYTE PTR [eax+0xd],0xee
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:79 (discriminator 6)
    {
        printd(DEBUG_HARDDRIVE,"Found GPT partition table\n");
   21e47:	83 ec 08             	sub    esp,0x8
   21e4a:	68 f5 3b 08 00       	push   0x83bf5
   21e4f:	6a 08                	push   0x8
   21e51:	e8 6d 5a 00 00       	call   278c3 <printd>
   21e56:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:80 (discriminator 6)
        return parseGPT(port, mbr);
   21e59:	83 ec 08             	sub    esp,0x8
   21e5c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   21e5f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21e62:	e8 05 00 00 00       	call   21e6c <parseGPT>
   21e67:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:83
    }
    return true;
}
   21e6a:	c9                   	leave  
   21e6b:	c3                   	ret    

00021e6c <parseGPT>:
parseGPT():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:86

bool parseGPT(HBA_PORT* port, struct mbr_t* mbr)
{
   21e6c:	55                   	push   ebp
   21e6d:	89 e5                	mov    ebp,esp
   21e6f:	53                   	push   ebx
   21e70:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:87
int readLen=0;
   21e73:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:89

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
   21e7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e7d:	8b 00                	mov    eax,DWORD PTR [eax]
   21e7f:	6a 01                	push   0x1
   21e81:	68 a0 8d 09 00       	push   0x98da0
   21e86:	50                   	push   eax
   21e87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21e8a:	e8 68 35 ff ff       	call   153f7 <ahciRead>
   21e8f:	83 c4 10             	add    esp,0x10
   21e92:	85 c0                	test   eax,eax
   21e94:	0f 95 c0             	setne  al
   21e97:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:90
    gptHdr=mbrBuffer;
   21e9a:	c7 05 84 8d 09 00 a0 	mov    DWORD PTR ds:0x98d84,0x98da0
   21ea1:	8d 09 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:96

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
   21ea4:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21ea9:	8b 58 30             	mov    ebx,DWORD PTR [eax+0x30]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:95
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
   21eac:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21eb1:	8b 48 54             	mov    ecx,DWORD PTR [eax+0x54]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:94
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
   21eb4:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21eb9:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:93
            gptHdr->partEntryLBAL,
   21ebc:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21ec1:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21ec4:	83 ec 08             	sub    esp,0x8
   21ec7:	53                   	push   ebx
   21ec8:	51                   	push   ecx
   21ec9:	52                   	push   edx
   21eca:	50                   	push   eax
   21ecb:	68 10 3c 08 00       	push   0x83c10
   21ed0:	6a 08                	push   0x8
   21ed2:	e8 ec 59 00 00       	call   278c3 <printd>
   21ed7:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:97
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
    readLen=((gptHdr->partEntryCount*gptHdr->partEntrySize)/512)+1;
   21eda:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21edf:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
   21ee2:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21ee7:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
   21eea:	0f af c2             	imul   eax,edx
   21eed:	c1 e8 09             	shr    eax,0x9
   21ef0:	83 c0 01             	add    eax,0x1
   21ef3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:99
    
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
   21ef6:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21efb:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21efe:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21f01:	50                   	push   eax
   21f02:	68 5c 3c 08 00       	push   0x83c5c
   21f07:	6a 08                	push   0x8
   21f09:	e8 b5 59 00 00       	call   278c3 <printd>
   21f0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:100
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
   21f11:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21f16:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21f19:	6a 0a                	push   0xa
   21f1b:	68 80 65 09 00       	push   0x96580
   21f20:	50                   	push   eax
   21f21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21f24:	e8 ce 34 ff ff       	call   153f7 <ahciRead>
   21f29:	83 c4 10             	add    esp,0x10
   21f2c:	85 c0                	test   eax,eax
   21f2e:	0f 95 c0             	setne  al
   21f31:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:102
    
    gptPart=partBuffer;
   21f34:	c7 05 80 8d 09 00 80 	mov    DWORD PTR ds:0x98d80,0x96580
   21f3b:	65 09 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:103
    mbr->partCount=0;
   21f3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21f41:	c7 80 00 04 00 00 00 	mov    DWORD PTR [eax+0x400],0x0
   21f48:	00 00 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104
    for (int cnt=0;cnt<20;cnt++)
   21f4b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   21f52:	e9 b6 00 00 00       	jmp    2200d <parseGPT+0x1a1>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:106
    {
        printd(DEBUG_HARDDRIVE,"Part %u, first=%u\n",cnt,gptPart[cnt].partFirstLBAL);
   21f57:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21f5c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21f5f:	c1 e2 07             	shl    edx,0x7
   21f62:	01 d0                	add    eax,edx
   21f64:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21f67:	50                   	push   eax
   21f68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21f6b:	68 91 3c 08 00       	push   0x83c91
   21f70:	6a 08                	push   0x8
   21f72:	e8 4c 59 00 00       	call   278c3 <printd>
   21f77:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:107
        if (gptPart[cnt].partFirstLBAL>0)
   21f7a:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21f7f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21f82:	c1 e2 07             	shl    edx,0x7
   21f85:	01 d0                	add    eax,edx
   21f87:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21f8a:	85 c0                	test   eax,eax
   21f8c:	74 7b                	je     22009 <parseGPT+0x19d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:109
        {
            mbr->parts[cnt].partStartSector=gptPart[cnt].partFirstLBAL;
   21f8e:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21f93:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21f96:	c1 e2 07             	shl    edx,0x7
   21f99:	01 d0                	add    eax,edx
   21f9b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21f9e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21fa1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21fa4:	c1 e1 04             	shl    ecx,0x4
   21fa7:	01 ca                	add    edx,ecx
   21fa9:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:110
            mbr->parts[cnt].partEndSector=gptPart[cnt].partLastLBAL;
   21fab:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21fb0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21fb3:	c1 e2 07             	shl    edx,0x7
   21fb6:	01 d0                	add    eax,edx
   21fb8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   21fbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21fbe:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21fc1:	c1 e1 04             	shl    ecx,0x4
   21fc4:	01 ca                	add    edx,ecx
   21fc6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:111
            mbr->parts[cnt].partTotalSectors=mbr->parts[cnt].partEndSector-mbr->parts[cnt].partStartSector;
   21fc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21fcc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21fcf:	c1 e2 04             	shl    edx,0x4
   21fd2:	01 d0                	add    eax,edx
   21fd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   21fd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21fda:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21fdd:	c1 e1 04             	shl    ecx,0x4
   21fe0:	01 c8                	add    eax,ecx
   21fe2:	8b 00                	mov    eax,DWORD PTR [eax]
   21fe4:	29 c2                	sub    edx,eax
   21fe6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21fe9:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21fec:	c1 e1 04             	shl    ecx,0x4
   21fef:	01 c8                	add    eax,ecx
   21ff1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:113
            //mbr->parts[cnt].systemID
            mbr->partCount++;
   21ff4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ff7:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   21ffd:	8d 50 01             	lea    edx,[eax+0x1]
   22000:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   22003:	89 90 00 04 00 00    	mov    DWORD PTR [eax+0x400],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104 (discriminator 2)
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
    
    gptPart=partBuffer;
    mbr->partCount=0;
    for (int cnt=0;cnt<20;cnt++)
   22009:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104 (discriminator 1)
   2200d:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   22011:	0f 8e 40 ff ff ff    	jle    21f57 <parseGPT+0xeb>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:118
            mbr->partCount++;
        }
    }


    return true;
   22017:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:120
        
}
   2201c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2201f:	c9                   	leave  
   22020:	c3                   	ret    
   22021:	66 90                	xchg   ax,ax
   22023:	90                   	nop

00022024 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   22024:	55                   	push   ebp
   22025:	89 e5                	mov    ebp,esp
   22027:	83 ec 08             	sub    esp,0x8
   2202a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2202d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   22030:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   22034:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   22037:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   2203b:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   2203f:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   22040:	90                   	nop
   22041:	c9                   	leave  
   22042:	c3                   	ret    

00022043 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   22043:	55                   	push   ebp
   22044:	89 e5                	mov    ebp,esp
   22046:	83 ec 14             	sub    esp,0x14
   22049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2204c:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   22050:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   22054:	89 c2                	mov    edx,eax
   22056:	ec                   	in     al,dx
   22057:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   2205a:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   2205e:	c9                   	leave  
   2205f:	c3                   	ret    

00022060 <inw>:
inw():
/home/yogi/src/os/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   22060:	55                   	push   ebp
   22061:	89 e5                	mov    ebp,esp
   22063:	83 ec 14             	sub    esp,0x14
   22066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22069:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   2206d:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   22071:	89 c2                	mov    edx,eax
   22073:	66 ed                	in     ax,dx
   22075:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/include/io.h:47
	return __val;
   22079:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/include/io.h:48
}
   2207d:	c9                   	leave  
   2207e:	c3                   	ret    

0002207f <insw>:
insw():
/home/yogi/src/os/chrisOS/include/io.h:86
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}

static __inline void insw(unsigned short __port, void *__buf, unsigned long __n)
{
   2207f:	55                   	push   ebp
   22080:	89 e5                	mov    ebp,esp
   22082:	57                   	push   edi
   22083:	53                   	push   ebx
   22084:	83 ec 04             	sub    esp,0x4
   22087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2208a:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/src/os/chrisOS/include/io.h:87
	__asm__ volatile ("cld; rep; insw"
   2208e:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   22092:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   22095:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22098:	89 cb                	mov    ebx,ecx
   2209a:	89 df                	mov    edi,ebx
   2209c:	89 c1                	mov    ecx,eax
   2209e:	fc                   	cld    
   2209f:	f3 66 6d             	rep ins WORD PTR es:[edi],dx
   220a2:	89 c8                	mov    eax,ecx
   220a4:	89 fb                	mov    ebx,edi
   220a6:	89 5d 0c             	mov    DWORD PTR [ebp+0xc],ebx
   220a9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/include/io.h:90
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}
   220ac:	90                   	nop
   220ad:	83 c4 04             	add    esp,0x4
   220b0:	5b                   	pop    ebx
   220b1:	5f                   	pop    edi
   220b2:	5d                   	pop    ebp
   220b3:	c3                   	ret    

000220b4 <ataWaitForDRQ>:
ataWaitForDRQ():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:22
float ticks=0;
struct ataDeviceInfo_t* atablockingReadDev;

//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
   220b4:	55                   	push   ebp
   220b5:	89 e5                	mov    ebp,esp
   220b7:	83 ec 14             	sub    esp,0x14
   220ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   220bd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:23
    int ticks = forHowManyMS*kTicksPerMS;
   220c0:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
   220c5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   220c8:	0f af c2             	imul   eax,edx
   220cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:24
    uint8_t inValue=0;
   220ce:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:25
    while (ticks > 0)
   220d2:	eb 57                	jmp    2212b <ataWaitForDRQ+0x77>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:27
    {
        STI
   220d4:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:29
        //waitTicks(1);
        __asm__("sti\nhlt\n");
   220d5:	fb                   	sti    
   220d6:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:30
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   220d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   220da:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   220e0:	83 c0 07             	add    eax,0x7
   220e3:	0f b7 c0             	movzx  eax,ax
   220e6:	50                   	push   eax
   220e7:	e8 57 ff ff ff       	call   22043 <inb>
   220ec:	83 c4 04             	add    esp,0x4
   220ef:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:31
        if (toBeSet && (inValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ)
   220f2:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   220f6:	74 12                	je     2210a <ataWaitForDRQ+0x56>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:31 (discriminator 1)
   220f8:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   220fc:	83 e0 08             	and    eax,0x8
   220ff:	85 c0                	test   eax,eax
   22101:	74 07                	je     2210a <ataWaitForDRQ+0x56>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:32
                return 0;
   22103:	b8 00 00 00 00       	mov    eax,0x0
   22108:	eb 5e                	jmp    22168 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:33
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
   2210a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
   2210e:	83 f0 01             	xor    eax,0x1
   22111:	84 c0                	test   al,al
   22113:	74 12                	je     22127 <ataWaitForDRQ+0x73>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:33 (discriminator 1)
   22115:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   22119:	83 e0 08             	and    eax,0x8
   2211c:	85 c0                	test   eax,eax
   2211e:	75 07                	jne    22127 <ataWaitForDRQ+0x73>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:34
                return 0;
   22120:	b8 00 00 00 00       	mov    eax,0x0
   22125:	eb 41                	jmp    22168 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:35
        ticks--;
   22127:	83 6d fc 01          	sub    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:25
//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
    while (ticks > 0)
   2212b:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   2212f:	7f a3                	jg     220d4 <ataWaitForDRQ+0x20>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:37
                return 0;
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
                return 0;
        ticks--;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   22131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22134:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2213a:	83 c0 01             	add    eax,0x1
   2213d:	0f b7 c0             	movzx  eax,ax
   22140:	50                   	push   eax
   22141:	e8 fd fe ff ff       	call   22043 <inb>
   22146:	83 c4 04             	add    esp,0x4
   22149:	0f b6 c0             	movzx  eax,al
   2214c:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:38
    if ((hdError & 0x4)==0x4)
   22151:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   22156:	83 e0 04             	and    eax,0x4
   22159:	85 c0                	test   eax,eax
   2215b:	74 07                	je     22164 <ataWaitForDRQ+0xb0>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:39
        return 0;
   2215d:	b8 00 00 00 00       	mov    eax,0x0
   22162:	eb 04                	jmp    22168 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:40
    return inValue;
   22164:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:41
}
   22168:	c9                   	leave  
   22169:	c3                   	ret    

0002216a <ataWaitForIdle>:
ataWaitForIdle():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:44

uint8_t ataWaitForIdle(struct ataDeviceInfo_t* devInfo)
{
   2216a:	55                   	push   ebp
   2216b:	89 e5                	mov    ebp,esp
   2216d:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:45
    ticks = 0;
   22170:	d9 ee                	fldz   
   22172:	d9 1d e8 a5 09 00    	fstp   DWORD PTR ds:0x9a5e8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:46
    uint8_t lValue=0;
   22178:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:48
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   2217c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2217f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22185:	83 c0 07             	add    eax,0x7
   22188:	0f b7 c0             	movzx  eax,ax
   2218b:	50                   	push   eax
   2218c:	e8 b2 fe ff ff       	call   22043 <inb>
   22191:	83 c4 04             	add    esp,0x4
   22194:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:49
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
   22197:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   2219b:	83 e0 08             	and    eax,0x8
   2219e:	85 c0                	test   eax,eax
   221a0:	74 76                	je     22218 <ataWaitForIdle+0xae>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:49 (discriminator 1)
   221a2:	d9 05 e8 a5 09 00    	fld    DWORD PTR ds:0x9a5e8
   221a8:	d9 ee                	fldz   
   221aa:	df e9                	fucomip st,st(1)
   221ac:	7a 0a                	jp     221b8 <ataWaitForIdle+0x4e>
   221ae:	d9 ee                	fldz   
   221b0:	df e9                	fucomip st,st(1)
   221b2:	dd d8                	fstp   st(0)
   221b4:	74 19                	je     221cf <ataWaitForIdle+0x65>
   221b6:	eb 02                	jmp    221ba <ataWaitForIdle+0x50>
   221b8:	dd d8                	fstp   st(0)
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:50
        inw(devInfo->ioPort+ATA_PORT_DATA);
   221ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   221bd:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   221c3:	0f b7 c0             	movzx  eax,ax
   221c6:	50                   	push   eax
   221c7:	e8 94 fe ff ff       	call   22060 <inw>
   221cc:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:51
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   221cf:	eb 47                	jmp    22218 <ataWaitForIdle+0xae>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:53
    {
        __asm__("sti\nhlt\n");
   221d1:	fb                   	sti    
   221d2:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:54
        lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   221d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   221d6:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   221dc:	83 c0 07             	add    eax,0x7
   221df:	0f b7 c0             	movzx  eax,ax
   221e2:	50                   	push   eax
   221e3:	e8 5b fe ff ff       	call   22043 <inb>
   221e8:	83 c4 04             	add    esp,0x4
   221eb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:56
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
   221ee:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   221f2:	25 88 00 00 00       	and    eax,0x88
   221f7:	85 c0                	test   eax,eax
   221f9:	75 07                	jne    22202 <ataWaitForIdle+0x98>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:57
                    return 0;
   221fb:	b8 00 00 00 00       	mov    eax,0x0
   22200:	eb 73                	jmp    22275 <ataWaitForIdle+0x10b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:58
        ticks++;
   22202:	d9 05 e8 a5 09 00    	fld    DWORD PTR ds:0x9a5e8
   22208:	d9 e8                	fld1   
   2220a:	de c1                	faddp  st(1),st
   2220c:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   2220f:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   22212:	d9 1d e8 a5 09 00    	fstp   DWORD PTR ds:0x9a5e8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:51
    uint8_t lValue=0;
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   22218:	d9 05 e8 a5 09 00    	fld    DWORD PTR ds:0x9a5e8
   2221e:	d9 c0                	fld    st(0)
   22220:	d9 e8                	fld1   
   22222:	de c1                	faddp  st(1),st
   22224:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   22227:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   2222a:	d9 1d e8 a5 09 00    	fstp   DWORD PTR ds:0x9a5e8
   22230:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   22236:	89 d0                	mov    eax,edx
   22238:	c1 e0 02             	shl    eax,0x2
   2223b:	01 d0                	add    eax,edx
   2223d:	01 c0                	add    eax,eax
   2223f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   22242:	db 45 e8             	fild   DWORD PTR [ebp-0x18]
   22245:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   22248:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   2224b:	df e9                	fucomip st,st(1)
   2224d:	dd d8                	fstp   st(0)
   2224f:	73 80                	jae    221d1 <ataWaitForIdle+0x67>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:60
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
                    return 0;
        ticks++;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   22251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22254:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2225a:	83 c0 01             	add    eax,0x1
   2225d:	0f b7 c0             	movzx  eax,ax
   22260:	50                   	push   eax
   22261:	e8 dd fd ff ff       	call   22043 <inb>
   22266:	83 c4 04             	add    esp,0x4
   22269:	0f b6 c0             	movzx  eax,al
   2226c:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:61
    return lValue;
   22271:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:62
}
   22275:	c9                   	leave  
   22276:	c3                   	ret    

00022277 <ataControllerIsReady>:
ataControllerIsReady():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:66


uint8_t ataControllerIsReady(struct ataDeviceInfo_t* devInfo)
{
   22277:	55                   	push   ebp
   22278:	89 e5                	mov    ebp,esp
   2227a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:67
    int ticks = 0;
   2227d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:69
    
    int lStatus=0;
   22284:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:70
    uint8_t err=0;
   2228b:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:72

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   2228f:	eb 4a                	jmp    222db <ataControllerIsReady+0x64>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:74
    {
        lStatus=inb(devInfo->ioPort+ATA_PORT_STATUS);
   22291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22294:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2229a:	83 c0 07             	add    eax,0x7
   2229d:	0f b7 c0             	movzx  eax,ax
   222a0:	50                   	push   eax
   222a1:	e8 9d fd ff ff       	call   22043 <inb>
   222a6:	83 c4 04             	add    esp,0x4
   222a9:	0f b6 c0             	movzx  eax,al
   222ac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:75
        wait(1);
   222af:	83 ec 0c             	sub    esp,0xc
   222b2:	6a 01                	push   0x1
   222b4:	e8 29 68 00 00       	call   28ae2 <wait>
   222b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:76
        ticks++;
   222bc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:77
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
   222c0:	81 65 f0 d0 00 00 00 	and    DWORD PTR [ebp-0x10],0xd0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:78
        if (lStatus & ATA_STATUS_READY )
   222c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   222ca:	83 e0 40             	and    eax,0x40
   222cd:	85 c0                	test   eax,eax
   222cf:	74 0a                	je     222db <ataControllerIsReady+0x64>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:79
                return true;
   222d1:	b8 01 00 00 00       	mov    eax,0x1
   222d6:	e9 9c 00 00 00       	jmp    22377 <ataControllerIsReady+0x100>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:72
    int ticks = 0;
    
    int lStatus=0;
    uint8_t err=0;

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   222db:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   222de:	8d 42 01             	lea    eax,[edx+0x1]
   222e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   222e4:	8b 0d c4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297c4
   222ea:	89 c8                	mov    eax,ecx
   222ec:	c1 e0 02             	shl    eax,0x2
   222ef:	01 c8                	add    eax,ecx
   222f1:	01 c0                	add    eax,eax
   222f3:	39 c2                	cmp    edx,eax
   222f5:	7e 9a                	jle    22291 <ataControllerIsReady+0x1a>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:82
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
        if (lStatus & ATA_STATUS_READY )
                return true;
    }

    if (lStatus==ATA_STATUS_ERROR || lStatus==ATA_STATUS_BUSY)
   222f7:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
   222fb:	74 09                	je     22306 <ataControllerIsReady+0x8f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:82 (discriminator 1)
   222fd:	81 7d f0 80 00 00 00 	cmp    DWORD PTR [ebp-0x10],0x80
   22304:	75 36                	jne    2233c <ataControllerIsReady+0xc5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:84
    {
         err=inb(0x1f1);
   22306:	83 ec 0c             	sub    esp,0xc
   22309:	68 f1 01 00 00       	push   0x1f1
   2230e:	e8 30 fd ff ff       	call   22043 <inb>
   22313:	83 c4 10             	add    esp,0x10
   22316:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:86
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22319:	a1 78 98 12 00       	mov    eax,ds:0x129878
   2231e:	83 e0 08             	and    eax,0x8
   22321:	85 c0                	test   eax,eax
   22323:	74 17                	je     2233c <ataControllerIsReady+0xc5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:87
            printd(DEBUG_HARDDRIVE,"ataControllerIsReady: DRQ wait failed, lStatus=%02X, err=%02X\n",lStatus,err);
   22325:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   22329:	50                   	push   eax
   2232a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2232d:	68 c0 3d 08 00       	push   0x83dc0
   22332:	6a 08                	push   0x8
   22334:	e8 8a 55 00 00       	call   278c3 <printd>
   22339:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:90
#endif
    }
    if ( (lStatus & ATA_STATUS_READY)==0 && err==4)
   2233c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2233f:	83 e0 40             	and    eax,0x40
   22342:	85 c0                	test   eax,eax
   22344:	75 0d                	jne    22353 <ataControllerIsReady+0xdc>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:90 (discriminator 1)
   22346:	80 7d ef 04          	cmp    BYTE PTR [ebp-0x11],0x4
   2234a:	75 07                	jne    22353 <ataControllerIsReady+0xdc>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:91
        lStatus=ATA_STATUS_READY;
   2234c:	c7 45 f0 40 00 00 00 	mov    DWORD PTR [ebp-0x10],0x40
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:93
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22353:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22358:	83 e0 08             	and    eax,0x8
   2235b:	85 c0                	test   eax,eax
   2235d:	74 13                	je     22372 <ataControllerIsReady+0xfb>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:94
            printk("ataControllerIsReady: returning %02X\n",lStatus);
   2235f:	83 ec 08             	sub    esp,0x8
   22362:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   22365:	68 00 3e 08 00       	push   0x83e00
   2236a:	e8 34 55 00 00       	call   278a3 <printk>
   2236f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:96
#endif
    return true;
   22372:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:97
}
   22377:	c9                   	leave  
   22378:	c3                   	ret    

00022379 <ataStatusIsOk>:
ataStatusIsOk():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:100

static bool ataStatusIsOk(struct ataDeviceInfo_t* devInfo)
{
   22379:	55                   	push   ebp
   2237a:	89 e5                	mov    ebp,esp
   2237c:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:101
	unsigned char status = inb(devInfo->ioPort+ATA_PORT_STATUS);
   2237f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22382:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22388:	83 c0 07             	add    eax,0x7
   2238b:	0f b7 c0             	movzx  eax,ax
   2238e:	50                   	push   eax
   2238f:	e8 af fc ff ff       	call   22043 <inb>
   22394:	83 c4 04             	add    esp,0x4
   22397:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:103

	if (status & ATA_STATUS_BUSY)
   2239a:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   2239e:	84 c0                	test   al,al
   223a0:	79 07                	jns    223a9 <ataStatusIsOk+0x30>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:104
		return false;
   223a2:	b8 00 00 00 00       	mov    eax,0x0
   223a7:	eb 3b                	jmp    223e4 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:105
	if (status & ATA_STATUS_WRITE_ERROR)
   223a9:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   223ad:	83 e0 20             	and    eax,0x20
   223b0:	85 c0                	test   eax,eax
   223b2:	74 07                	je     223bb <ataStatusIsOk+0x42>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:106
		return true;
   223b4:	b8 01 00 00 00       	mov    eax,0x1
   223b9:	eb 29                	jmp    223e4 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:107
	if (!(status & ATA_STATUS_READY))
   223bb:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   223bf:	83 e0 40             	and    eax,0x40
   223c2:	85 c0                	test   eax,eax
   223c4:	75 07                	jne    223cd <ataStatusIsOk+0x54>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:108
		return true;
   223c6:	b8 01 00 00 00       	mov    eax,0x1
   223cb:	eb 17                	jmp    223e4 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:109
	if (!(status & ATA_STATUS_SEEK))
   223cd:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   223d1:	83 e0 10             	and    eax,0x10
   223d4:	85 c0                	test   eax,eax
   223d6:	75 07                	jne    223df <ataStatusIsOk+0x66>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:110
		return true;
   223d8:	b8 01 00 00 00       	mov    eax,0x1
   223dd:	eb 05                	jmp    223e4 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:111
	return 1;
   223df:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:112
}
   223e4:	c9                   	leave  
   223e5:	c3                   	ret    

000223e6 <ataSelectDrive>:
ataSelectDrive():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:115

bool ataSelectDrive(struct ataDeviceInfo_t* devInfo, uint8_t head)
{
   223e6:	55                   	push   ebp
   223e7:	89 e5                	mov    ebp,esp
   223e9:	83 ec 28             	sub    esp,0x28
   223ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   223ef:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:116
    ataWaitForIdle(devInfo);
   223f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   223f5:	e8 70 fd ff ff       	call   2216a <ataWaitForIdle>
   223fa:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:117
    outb(devInfo->ioPort+ATA_DRIVE_SELECT, devInfo->driveHeadPortDesignation | (head& 0xF) ); 
   223fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22400:	0f b6 80 6e 02 00 00 	movzx  eax,BYTE PTR [eax+0x26e]
   22407:	89 c2                	mov    edx,eax
   22409:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   2240d:	83 e0 0f             	and    eax,0xf
   22410:	09 d0                	or     eax,edx
   22412:	0f b6 d0             	movzx  edx,al
   22415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22418:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2241e:	83 c0 06             	add    eax,0x6
   22421:	0f b7 c0             	movzx  eax,ax
   22424:	52                   	push   edx
   22425:	50                   	push   eax
   22426:	e8 f9 fb ff ff       	call   22024 <outb>
   2242b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:119
    //printk("Sending 0x%02X", drive==master?ATA_DRIVE_MASTER:ATA_DRIVE_SLAVE | (head& 0xF));
    if (!ataStatusIsOk(devInfo))
   2242e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22431:	e8 43 ff ff ff       	call   22379 <ataStatusIsOk>
   22436:	83 c4 04             	add    esp,0x4
   22439:	83 f0 01             	xor    eax,0x1
   2243c:	84 c0                	test   al,al
   2243e:	74 6e                	je     224ae <ataSelectDrive+0xc8>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:122
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22440:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22445:	83 e0 08             	and    eax,0x8
   22448:	85 c0                	test   eax,eax
   2244a:	74 3d                	je     22489 <ataSelectDrive+0xa3>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:123
            printk("ataSelectDrive: Failed to select drive %u, bus %u, status=0x%02X is not ok\n", devInfo->driveNo, devInfo->bus, inb(devInfo->ioPort+ATA_PORT_STATUS));
   2244c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2244f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22455:	83 c0 07             	add    eax,0x7
   22458:	0f b7 c0             	movzx  eax,ax
   2245b:	50                   	push   eax
   2245c:	e8 e2 fb ff ff       	call   22043 <inb>
   22461:	83 c4 04             	add    esp,0x4
   22464:	0f b6 c8             	movzx  ecx,al
   22467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2246a:	8b 90 61 02 00 00    	mov    edx,DWORD PTR [eax+0x261]
   22470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22473:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22479:	51                   	push   ecx
   2247a:	52                   	push   edx
   2247b:	50                   	push   eax
   2247c:	68 28 3e 08 00       	push   0x83e28
   22481:	e8 1d 54 00 00       	call   278a3 <printk>
   22486:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:125
#endif
            return inb(devInfo->ioPort+ATA_PORT_STATUS);
   22489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2248c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22492:	83 c0 07             	add    eax,0x7
   22495:	0f b7 c0             	movzx  eax,ax
   22498:	83 ec 0c             	sub    esp,0xc
   2249b:	50                   	push   eax
   2249c:	e8 a2 fb ff ff       	call   22043 <inb>
   224a1:	83 c4 10             	add    esp,0x10
   224a4:	84 c0                	test   al,al
   224a6:	0f 95 c0             	setne  al
   224a9:	e9 96 00 00 00       	jmp    22544 <ataSelectDrive+0x15e>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:128
    }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   224ae:	a1 78 98 12 00       	mov    eax,ds:0x129878
   224b3:	83 e0 08             	and    eax,0x8
   224b6:	85 c0                	test   eax,eax
   224b8:	0f 84 81 00 00 00    	je     2253f <ataSelectDrive+0x159>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:130
    {
        wait(10);
   224be:	83 ec 0c             	sub    esp,0xc
   224c1:	6a 0a                	push   0xa
   224c3:	e8 1a 66 00 00       	call   28ae2 <wait>
   224c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:131
        unsigned lDrive=inb(devInfo->ioPort+ATA_DRIVE_SELECT);
   224cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224ce:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   224d4:	83 c0 06             	add    eax,0x6
   224d7:	0f b7 c0             	movzx  eax,ax
   224da:	83 ec 0c             	sub    esp,0xc
   224dd:	50                   	push   eax
   224de:	e8 60 fb ff ff       	call   22043 <inb>
   224e3:	83 c4 10             	add    esp,0x10
   224e6:	0f b6 c0             	movzx  eax,al
   224e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
   224ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224ef:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   224f5:	83 c0 01             	add    eax,0x1
   224f8:	0f b7 c0             	movzx  eax,ax
   224fb:	83 ec 0c             	sub    esp,0xc
   224fe:	50                   	push   eax
   224ff:	e8 3f fb ff ff       	call   22043 <inb>
   22504:	83 c4 10             	add    esp,0x10
   22507:	0f b6 d0             	movzx  edx,al
   2250a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2250d:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22513:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   22516:	83 e1 10             	and    ecx,0x10
   22519:	85 c9                	test   ecx,ecx
   2251b:	74 07                	je     22524 <ataSelectDrive+0x13e>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 1)
   2251d:	b9 74 3e 08 00       	mov    ecx,0x83e74
   22522:	eb 05                	jmp    22529 <ataSelectDrive+0x143>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 2)
   22524:	b9 7a 3e 08 00       	mov    ecx,0x83e7a
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 4)
   22529:	83 ec 0c             	sub    esp,0xc
   2252c:	52                   	push   edx
   2252d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22530:	50                   	push   eax
   22531:	51                   	push   ecx
   22532:	68 84 3e 08 00       	push   0x83e84
   22537:	e8 67 53 00 00       	call   278a3 <printk>
   2253c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:136
    }
#endif
        
    return 0;
   2253f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:137
}
   22544:	c9                   	leave  
   22545:	c3                   	ret    

00022546 <ataResetController>:
ataResetController():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:161
	outb(++port, 0xA0 |(drive<<4)|head);
	outb(++port, cmd);
}
*/
static void ataResetController(struct ataDeviceInfo_t* devInfo)
{
   22546:	55                   	push   ebp
   22547:	89 e5                	mov    ebp,esp
   22549:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:162
        outb(devInfo->ioPort+ATA_PORT_COMMAND, 4);
   2254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2254f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22555:	83 c0 07             	add    eax,0x7
   22558:	0f b7 c0             	movzx  eax,ax
   2255b:	6a 04                	push   0x4
   2255d:	50                   	push   eax
   2255e:	e8 c1 fa ff ff       	call   22024 <outb>
   22563:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:163
        waitTicks(kTicksPerSecond/10);
   22566:	8b 0d c0 97 12 00    	mov    ecx,DWORD PTR ds:0x1297c0
   2256c:	ba 67 66 66 66       	mov    edx,0x66666667
   22571:	89 c8                	mov    eax,ecx
   22573:	f7 ea                	imul   edx
   22575:	c1 fa 02             	sar    edx,0x2
   22578:	89 c8                	mov    eax,ecx
   2257a:	c1 f8 1f             	sar    eax,0x1f
   2257d:	29 c2                	sub    edx,eax
   2257f:	89 d0                	mov    eax,edx
   22581:	83 ec 0c             	sub    esp,0xc
   22584:	50                   	push   eax
   22585:	e8 3d 65 00 00       	call   28ac7 <waitTicks>
   2258a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:164
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 1<<2);
   2258d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22590:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22596:	66 05 f6 03          	add    ax,0x3f6
   2259a:	0f b7 c0             	movzx  eax,ax
   2259d:	83 ec 08             	sub    esp,0x8
   225a0:	6a 04                	push   0x4
   225a2:	50                   	push   eax
   225a3:	e8 7c fa ff ff       	call   22024 <outb>
   225a8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:165
        wait(10);
   225ab:	83 ec 0c             	sub    esp,0xc
   225ae:	6a 0a                	push   0xa
   225b0:	e8 2d 65 00 00       	call   28ae2 <wait>
   225b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:166
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 0);
   225b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225bb:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   225c1:	66 05 f6 03          	add    ax,0x3f6
   225c5:	0f b7 c0             	movzx  eax,ax
   225c8:	83 ec 08             	sub    esp,0x8
   225cb:	6a 00                	push   0x0
   225cd:	50                   	push   eax
   225ce:	e8 51 fa ff ff       	call   22024 <outb>
   225d3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:167
        if (!ataControllerIsReady(devInfo))
   225d6:	83 ec 0c             	sub    esp,0xc
   225d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   225dc:	e8 96 fc ff ff       	call   22277 <ataControllerIsReady>
   225e1:	83 c4 10             	add    esp,0x10
   225e4:	84 c0                	test   al,al
   225e6:	75 1c                	jne    22604 <ataResetController+0xbe>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:169
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   225e8:	a1 78 98 12 00       	mov    eax,ds:0x129878
   225ed:	83 e0 08             	and    eax,0x8
   225f0:	85 c0                	test   eax,eax
   225f2:	74 10                	je     22604 <ataResetController+0xbe>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:170
            printk("HD-controller still busy\n");
   225f4:	83 ec 0c             	sub    esp,0xc
   225f7:	68 c1 3e 08 00       	push   0x83ec1
   225fc:	e8 a2 52 00 00       	call   278a3 <printk>
   22601:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:172
#endif
        if ((hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 0 && (hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 4)
   22604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22607:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2260d:	83 c0 01             	add    eax,0x1
   22610:	0f b7 c0             	movzx  eax,ax
   22613:	83 ec 0c             	sub    esp,0xc
   22616:	50                   	push   eax
   22617:	e8 27 fa ff ff       	call   22043 <inb>
   2261c:	83 c4 10             	add    esp,0x10
   2261f:	0f b6 c0             	movzx  eax,al
   22622:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
   22627:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   2262c:	85 c0                	test   eax,eax
   2262e:	74 5d                	je     2268d <ataResetController+0x147>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:172 (discriminator 1)
   22630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22633:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22639:	83 c0 01             	add    eax,0x1
   2263c:	0f b7 c0             	movzx  eax,ax
   2263f:	83 ec 0c             	sub    esp,0xc
   22642:	50                   	push   eax
   22643:	e8 fb f9 ff ff       	call   22043 <inb>
   22648:	83 c4 10             	add    esp,0x10
   2264b:	0f b6 c0             	movzx  eax,al
   2264e:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
   22653:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   22658:	83 f8 04             	cmp    eax,0x4
   2265b:	74 30                	je     2268d <ataResetController+0x147>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173
            printk("Controller reset failed on %s bus: %02x\n",devInfo->bus==0?"Primary":"Secondary", hdError);
   2265d:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   22662:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   22665:	8b 92 61 02 00 00    	mov    edx,DWORD PTR [edx+0x261]
   2266b:	85 d2                	test   edx,edx
   2266d:	75 07                	jne    22676 <ataResetController+0x130>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 1)
   2266f:	ba db 3e 08 00       	mov    edx,0x83edb
   22674:	eb 05                	jmp    2267b <ataResetController+0x135>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 2)
   22676:	ba e3 3e 08 00       	mov    edx,0x83ee3
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 4)
   2267b:	83 ec 04             	sub    esp,0x4
   2267e:	50                   	push   eax
   2267f:	52                   	push   edx
   22680:	68 f0 3e 08 00       	push   0x83ef0
   22685:	e8 19 52 00 00       	call   278a3 <printk>
   2268a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:175
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   2268d:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22692:	83 e0 08             	and    eax,0x8
   22695:	85 c0                	test   eax,eax
   22697:	74 10                	je     226a9 <ataResetController+0x163>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:176
            printk("ataResetController: controller is ready\n");
   22699:	83 ec 0c             	sub    esp,0xc
   2269c:	68 1c 3f 08 00       	push   0x83f1c
   226a1:	e8 fd 51 00 00       	call   278a3 <printk>
   226a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:178
#endif
}
   226a9:	90                   	nop
   226aa:	c9                   	leave  
   226ab:	c3                   	ret    

000226ac <ataInit>:
ataInit():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:180
int ataInit(struct ataDeviceInfo_t* devInfo)
{
   226ac:	55                   	push   ebp
   226ad:	89 e5                	mov    ebp,esp
   226af:	53                   	push   ebx
   226b0:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:181
    ataResetController(devInfo);
   226b3:	83 ec 0c             	sub    esp,0xc
   226b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   226b9:	e8 88 fe ff ff       	call   22546 <ataResetController>
   226be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:182
    int cStatus=0, ticks=0;
   226c1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   226c8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:183
    ataSelectDrive(devInfo,0);
   226cf:	83 ec 08             	sub    esp,0x8
   226d2:	6a 00                	push   0x0
   226d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   226d7:	e8 0a fd ff ff       	call   223e6 <ataSelectDrive>
   226dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:184
    outb(devInfo->ioPort+ATA_PORT_SECTORCOUNT, 0x55);
   226df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226e2:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   226e8:	83 c0 02             	add    eax,0x2
   226eb:	0f b7 c0             	movzx  eax,ax
   226ee:	83 ec 08             	sub    esp,0x8
   226f1:	6a 55                	push   0x55
   226f3:	50                   	push   eax
   226f4:	e8 2b f9 ff ff       	call   22024 <outb>
   226f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:185
    outb(devInfo->ioPort+ATA_PORT_SECTOR_NUMBER, 0xAA);
   226fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226ff:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22705:	83 c0 03             	add    eax,0x3
   22708:	0f b7 c0             	movzx  eax,ax
   2270b:	83 ec 08             	sub    esp,0x8
   2270e:	68 aa 00 00 00       	push   0xaa
   22713:	50                   	push   eax
   22714:	e8 0b f9 ff ff       	call   22024 <outb>
   22719:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:186
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW,0x55);
   2271c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2271f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22725:	83 c0 04             	add    eax,0x4
   22728:	0f b7 c0             	movzx  eax,ax
   2272b:	83 ec 08             	sub    esp,0x8
   2272e:	6a 55                	push   0x55
   22730:	50                   	push   eax
   22731:	e8 ee f8 ff ff       	call   22024 <outb>
   22736:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:187
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH,0xAA);
   22739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2273c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22742:	83 c0 05             	add    eax,0x5
   22745:	0f b7 c0             	movzx  eax,ax
   22748:	83 ec 08             	sub    esp,0x8
   2274b:	68 aa 00 00 00       	push   0xaa
   22750:	50                   	push   eax
   22751:	e8 ce f8 ff ff       	call   22024 <outb>
   22756:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:188
    outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   22759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2275c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22762:	83 c0 07             	add    eax,0x7
   22765:	0f b7 c0             	movzx  eax,ax
   22768:	83 ec 08             	sub    esp,0x8
   2276b:	68 ec 00 00 00       	push   0xec
   22770:	50                   	push   eax
   22771:	e8 ae f8 ff ff       	call   22024 <outb>
   22776:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:189
    wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22779:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   2277f:	89 d0                	mov    eax,edx
   22781:	c1 e0 02             	shl    eax,0x2
   22784:	01 d0                	add    eax,edx
   22786:	01 c0                	add    eax,eax
   22788:	83 ec 0c             	sub    esp,0xc
   2278b:	50                   	push   eax
   2278c:	e8 51 63 00 00       	call   28ae2 <wait>
   22791:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:190
    cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   22794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22797:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2279d:	83 c0 07             	add    eax,0x7
   227a0:	0f b7 c0             	movzx  eax,ax
   227a3:	83 ec 0c             	sub    esp,0xc
   227a6:	50                   	push   eax
   227a7:	e8 97 f8 ff ff       	call   22043 <inb>
   227ac:	83 c4 10             	add    esp,0x10
   227af:	0f b6 c0             	movzx  eax,al
   227b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:191
    if (cStatus==0)
   227b5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   227b9:	75 33                	jne    227ee <ataInit+0x142>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:194
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   227bb:	a1 78 98 12 00       	mov    eax,ds:0x129878
   227c0:	83 e0 08             	and    eax,0x8
   227c3:	85 c0                	test   eax,eax
   227c5:	74 1d                	je     227e4 <ataInit+0x138>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:195
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   227c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   227ca:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   227d0:	83 ec 04             	sub    esp,0x4
   227d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   227d6:	50                   	push   eax
   227d7:	68 45 3f 08 00       	push   0x83f45
   227dc:	e8 c2 50 00 00       	call   278a3 <printk>
   227e1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:197
#endif
        return false;
   227e4:	b8 00 00 00 00       	mov    eax,0x0
   227e9:	e9 f3 01 00 00       	jmp    229e1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:199
    }
    if ((cStatus & 1) == 1)
   227ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   227f1:	83 e0 01             	and    eax,0x1
   227f4:	85 c0                	test   eax,eax
   227f6:	0f 84 bb 00 00 00    	je     228b7 <ataInit+0x20b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:201
    {
        int err = inb(devInfo->ioPort+ATA_PORT_ERROR);
   227fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   227ff:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22805:	83 c0 01             	add    eax,0x1
   22808:	0f b7 c0             	movzx  eax,ax
   2280b:	83 ec 0c             	sub    esp,0xc
   2280e:	50                   	push   eax
   2280f:	e8 2f f8 ff ff       	call   22043 <inb>
   22814:	83 c4 10             	add    esp,0x10
   22817:	0f b6 c0             	movzx  eax,al
   2281a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:203
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   2281d:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22822:	83 e0 08             	and    eax,0x8
   22825:	85 c0                	test   eax,eax
   22827:	74 1d                	je     22846 <ataInit+0x19a>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:204
            printk("drive %02X, cStatus=%02X, errreg=%02X\n",devInfo->driveNo, cStatus,err);
   22829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2282c:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22832:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   22835:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22838:	50                   	push   eax
   22839:	68 64 3f 08 00       	push   0x83f64
   2283e:	e8 60 50 00 00       	call   278a3 <printk>
   22843:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:206
#endif
        if (err!=4)
   22846:	83 7d ec 04          	cmp    DWORD PTR [ebp-0x14],0x4
   2284a:	74 0a                	je     22856 <ataInit+0x1aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:207
            return false;
   2284c:	b8 00 00 00 00       	mov    eax,0x0
   22851:	e9 8b 01 00 00       	jmp    229e1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:208
        useCDROMIdentify = true;
   22856:	c6 05 d8 a5 09 00 01 	mov    BYTE PTR ds:0x9a5d8,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:209
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   2285d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22860:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22866:	83 c0 07             	add    eax,0x7
   22869:	0f b7 c0             	movzx  eax,ax
   2286c:	83 ec 0c             	sub    esp,0xc
   2286f:	50                   	push   eax
   22870:	e8 ce f7 ff ff       	call   22043 <inb>
   22875:	83 c4 10             	add    esp,0x10
   22878:	0f b6 c0             	movzx  eax,al
   2287b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:210
        if (cStatus==0)
   2287e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   22882:	75 33                	jne    228b7 <ataInit+0x20b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:213
        {
#ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22884:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22889:	83 e0 08             	and    eax,0x8
   2288c:	85 c0                	test   eax,eax
   2288e:	74 1d                	je     228ad <ataInit+0x201>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:214
                printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   22890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22893:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22899:	83 ec 04             	sub    esp,0x4
   2289c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2289f:	50                   	push   eax
   228a0:	68 45 3f 08 00       	push   0x83f45
   228a5:	e8 f9 4f 00 00       	call   278a3 <printk>
   228aa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:216
#endif
            return false;
   228ad:	b8 00 00 00 00       	mov    eax,0x0
   228b2:	e9 2a 01 00 00       	jmp    229e1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:219
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
   228b7:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   228bd:	89 d0                	mov    eax,edx
   228bf:	c1 e0 02             	shl    eax,0x2
   228c2:	01 d0                	add    eax,edx
   228c4:	01 c0                	add    eax,eax
   228c6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   228c9:	eb 32                	jmp    228fd <ataInit+0x251>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:222
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   228cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   228ce:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   228d4:	83 c0 07             	add    eax,0x7
   228d7:	0f b7 c0             	movzx  eax,ax
   228da:	83 ec 0c             	sub    esp,0xc
   228dd:	50                   	push   eax
   228de:	e8 60 f7 ff ff       	call   22043 <inb>
   228e3:	83 c4 10             	add    esp,0x10
   228e6:	0f b6 c0             	movzx  eax,al
   228e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:223
        wait(1);
   228ec:	83 ec 0c             	sub    esp,0xc
   228ef:	6a 01                	push   0x1
   228f1:	e8 ec 61 00 00       	call   28ae2 <wait>
   228f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:224
        ticks--;
   228f9:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220
#endif
            return false;
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   228fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22900:	25 80 00 00 00       	and    eax,0x80
   22905:	85 c0                	test   eax,eax
   22907:	74 06                	je     2290f <ataInit+0x263>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220 (discriminator 1)
   22909:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2290d:	7f bc                	jg     228cb <ataInit+0x21f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:226
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
        ticks--;
    }
    if (!ataControllerIsReady(devInfo))
   2290f:	83 ec 0c             	sub    esp,0xc
   22912:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22915:	e8 5d f9 ff ff       	call   22277 <ataControllerIsReady>
   2291a:	83 c4 10             	add    esp,0x10
   2291d:	84 c0                	test   al,al
   2291f:	75 0a                	jne    2292b <ataInit+0x27f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:227
        return false;
   22921:	b8 00 00 00 00       	mov    eax,0x0
   22926:	e9 b6 00 00 00       	jmp    229e1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:228
    if (inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW)!=0x55 || inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH)!=0xaa)
   2292b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2292e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22934:	83 c0 04             	add    eax,0x4
   22937:	0f b7 c0             	movzx  eax,ax
   2293a:	83 ec 0c             	sub    esp,0xc
   2293d:	50                   	push   eax
   2293e:	e8 00 f7 ff ff       	call   22043 <inb>
   22943:	83 c4 10             	add    esp,0x10
   22946:	3c 55                	cmp    al,0x55
   22948:	75 1f                	jne    22969 <ataInit+0x2bd>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:228 (discriminator 1)
   2294a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2294d:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22953:	83 c0 05             	add    eax,0x5
   22956:	0f b7 c0             	movzx  eax,ax
   22959:	83 ec 0c             	sub    esp,0xc
   2295c:	50                   	push   eax
   2295d:	e8 e1 f6 ff ff       	call   22043 <inb>
   22962:	83 c4 10             	add    esp,0x10
   22965:	3c aa                	cmp    al,0xaa
   22967:	74 73                	je     229dc <ataInit+0x330>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:231
    {
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22969:	a1 78 98 12 00       	mov    eax,ds:0x129878
   2296e:	83 e0 08             	and    eax,0x8
   22971:	85 c0                	test   eax,eax
   22973:	74 4e                	je     229c3 <ataInit+0x317>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:232
        printk("Cylinder port non-zero (%X,%X), device is non-ATA\n",inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW), inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH));
   22975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22978:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2297e:	83 c0 05             	add    eax,0x5
   22981:	0f b7 c0             	movzx  eax,ax
   22984:	83 ec 0c             	sub    esp,0xc
   22987:	50                   	push   eax
   22988:	e8 b6 f6 ff ff       	call   22043 <inb>
   2298d:	83 c4 10             	add    esp,0x10
   22990:	0f b6 d8             	movzx  ebx,al
   22993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22996:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2299c:	83 c0 04             	add    eax,0x4
   2299f:	0f b7 c0             	movzx  eax,ax
   229a2:	83 ec 0c             	sub    esp,0xc
   229a5:	50                   	push   eax
   229a6:	e8 98 f6 ff ff       	call   22043 <inb>
   229ab:	83 c4 10             	add    esp,0x10
   229ae:	0f b6 c0             	movzx  eax,al
   229b1:	83 ec 04             	sub    esp,0x4
   229b4:	53                   	push   ebx
   229b5:	50                   	push   eax
   229b6:	68 8c 3f 08 00       	push   0x83f8c
   229bb:	e8 e3 4e 00 00       	call   278a3 <printk>
   229c0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:234
#endif
        if (useCDROMIdentify)
   229c3:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   229ca:	84 c0                	test   al,al
   229cc:	74 07                	je     229d5 <ataInit+0x329>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:235
            return true;
   229ce:	b8 01 00 00 00       	mov    eax,0x1
   229d3:	eb 0c                	jmp    229e1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:237
        else
            return false;
   229d5:	b8 00 00 00 00       	mov    eax,0x0
   229da:	eb 05                	jmp    229e1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:239
    }
    return true;
   229dc:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:240
}
   229e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   229e4:	c9                   	leave  
   229e5:	c3                   	ret    

000229e6 <ataGetModelFromIdentify>:
ataGetModelFromIdentify():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:243

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
   229e6:	55                   	push   ebp
   229e7:	89 e5                	mov    ebp,esp
   229e9:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:244
    uint16_t* ident=devInfo->ATAIdentifyData+27;
   229ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   229ef:	83 c0 36             	add    eax,0x36
   229f2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245
    for (int cnt=0;cnt<40;cnt+=2)
   229f5:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   229fc:	eb 3d                	jmp    22a3b <ataGetModelFromIdentify+0x55>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:247 (discriminator 3)
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
   229fe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   22a01:	0f b7 00             	movzx  eax,WORD PTR [eax]
   22a04:	66 c1 e8 08          	shr    ax,0x8
   22a08:	89 c1                	mov    ecx,eax
   22a0a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   22a0d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   22a10:	01 d0                	add    eax,edx
   22a12:	05 00 02 00 00       	add    eax,0x200
   22a17:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:248 (discriminator 3)
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
   22a19:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   22a1c:	8d 48 01             	lea    ecx,[eax+0x1]
   22a1f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   22a22:	8d 50 02             	lea    edx,[eax+0x2]
   22a25:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   22a28:	0f b7 00             	movzx  eax,WORD PTR [eax]
   22a2b:	89 c2                	mov    edx,eax
   22a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a30:	88 94 08 00 02 00 00 	mov    BYTE PTR [eax+ecx*1+0x200],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245 (discriminator 3)
}

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
    uint16_t* ident=devInfo->ATAIdentifyData+27;
    for (int cnt=0;cnt<40;cnt+=2)
   22a37:	83 45 f8 02          	add    DWORD PTR [ebp-0x8],0x2
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245 (discriminator 1)
   22a3b:	83 7d f8 27          	cmp    DWORD PTR [ebp-0x8],0x27
   22a3f:	7e bd                	jle    229fe <ataGetModelFromIdentify+0x18>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:250
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
    }
    devInfo->ATADeviceModel[79]='\0';
   22a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a44:	c6 80 4f 02 00 00 00 	mov    BYTE PTR [eax+0x24f],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:251
}
   22a4b:	90                   	nop
   22a4c:	c9                   	leave  
   22a4d:	c3                   	ret    

00022a4e <ataIdentify>:
ataIdentify():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:254

int ataIdentify(struct ataDeviceInfo_t* devInfo)
{
   22a4e:	55                   	push   ebp
   22a4f:	89 e5                	mov    ebp,esp
   22a51:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:256
    //For ATA devices, read the identity data.  For SATA, we've already read it into ATAIdentityData
    if (devInfo->queryATAData)
   22a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a57:	0f b6 80 50 02 00 00 	movzx  eax,BYTE PTR [eax+0x250]
   22a5e:	84 c0                	test   al,al
   22a60:	0f 84 9c 00 00 00    	je     22b02 <ataIdentify+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:258
    {
        if (useCDROMIdentify)
   22a66:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22a6d:	84 c0                	test   al,al
   22a6f:	74 1f                	je     22a90 <ataIdentify+0x42>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:259
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
   22a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a74:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22a7a:	83 c0 07             	add    eax,0x7
   22a7d:	0f b7 c0             	movzx  eax,ax
   22a80:	68 a1 00 00 00       	push   0xa1
   22a85:	50                   	push   eax
   22a86:	e8 99 f5 ff ff       	call   22024 <outb>
   22a8b:	83 c4 08             	add    esp,0x8
   22a8e:	eb 1d                	jmp    22aad <ataIdentify+0x5f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:261
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   22a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a93:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22a99:	83 c0 07             	add    eax,0x7
   22a9c:	0f b7 c0             	movzx  eax,ax
   22a9f:	68 ec 00 00 00       	push   0xec
   22aa4:	50                   	push   eax
   22aa5:	e8 7a f5 ff ff       	call   22024 <outb>
   22aaa:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:262
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22aad:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   22ab3:	89 d0                	mov    eax,edx
   22ab5:	c1 e0 02             	shl    eax,0x2
   22ab8:	01 d0                	add    eax,edx
   22aba:	01 c0                	add    eax,eax
   22abc:	83 ec 0c             	sub    esp,0xc
   22abf:	50                   	push   eax
   22ac0:	e8 1d 60 00 00       	call   28ae2 <wait>
   22ac5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263
        for (int readCount=0;readCount<=255;readCount++)
   22ac8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   22acf:	eb 28                	jmp    22af9 <ataIdentify+0xab>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:265 (discriminator 3)
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
   22ad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22ad4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22ada:	0f b7 c0             	movzx  eax,ax
   22add:	83 ec 0c             	sub    esp,0xc
   22ae0:	50                   	push   eax
   22ae1:	e8 7a f5 ff ff       	call   22060 <inw>
   22ae6:	83 c4 10             	add    esp,0x10
   22ae9:	89 c1                	mov    ecx,eax
   22aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22aee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   22af1:	66 89 0c 50          	mov    WORD PTR [eax+edx*2],cx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263 (discriminator 3)
        if (useCDROMIdentify)
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
        for (int readCount=0;readCount<=255;readCount++)
   22af5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263 (discriminator 1)
   22af9:	81 7d f4 ff 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xff
   22b00:	7e cf                	jle    22ad1 <ataIdentify+0x83>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:268
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
   22b02:	83 ec 0c             	sub    esp,0xc
   22b05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22b08:	e8 d9 fe ff ff       	call   229e6 <ataGetModelFromIdentify>
   22b0d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:269
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
   22b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b13:	0f b7 40 78          	movzx  eax,WORD PTR [eax+0x78]
   22b17:	0f b7 d0             	movzx  edx,ax
   22b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b1d:	0f b7 40 7a          	movzx  eax,WORD PTR [eax+0x7a]
   22b21:	0f b7 c0             	movzx  eax,ax
   22b24:	c1 e0 10             	shl    eax,0x10
   22b27:	09 d0                	or     eax,edx
   22b29:	89 c2                	mov    edx,eax
   22b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b2e:	89 90 56 02 00 00    	mov    DWORD PTR [eax+0x256],edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   22b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b37:	0f b7 80 d4 00 00 00 	movzx  eax,WORD PTR [eax+0xd4]
   22b3e:	0f b7 c0             	movzx  eax,ax
   22b41:	25 00 10 00 00       	and    eax,0x1000
   22b46:	85 c0                	test   eax,eax
   22b48:	74 20                	je     22b6a <ataIdentify+0x11c>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:271 (discriminator 1)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
   22b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b4d:	0f b7 80 ea 00 00 00 	movzx  eax,WORD PTR [eax+0xea]
   22b54:	0f b7 d0             	movzx  edx,ax
   22b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b5a:	0f b7 40 24          	movzx  eax,WORD PTR [eax+0x24]
   22b5e:	0f b7 c0             	movzx  eax,ax
   22b61:	c1 e0 10             	shl    eax,0x10
   22b64:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 1)
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   22b66:	89 c2                	mov    edx,eax
   22b68:	eb 05                	jmp    22b6f <ataIdentify+0x121>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 2)
   22b6a:	ba 00 02 00 00       	mov    edx,0x200
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 4)
   22b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b72:	89 90 5a 02 00 00    	mov    DWORD PTR [eax+0x25a],edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:273 (discriminator 4)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
            :512;
    devInfo->dmaSupported=devInfo->ATAIdentifyData[49]>>8 & 0x1;
   22b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b7b:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   22b7f:	66 c1 e8 08          	shr    ax,0x8
   22b83:	0f b7 c0             	movzx  eax,ax
   22b86:	83 e0 01             	and    eax,0x1
   22b89:	85 c0                	test   eax,eax
   22b8b:	0f 95 c2             	setne  dl
   22b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b91:	88 90 60 02 00 00    	mov    BYTE PTR [eax+0x260],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:274 (discriminator 4)
    devInfo->lbaSupported=devInfo->ATAIdentifyData[49]>>9 & 0x1;
   22b97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b9a:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   22b9e:	66 c1 e8 09          	shr    ax,0x9
   22ba2:	0f b7 c0             	movzx  eax,ax
   22ba5:	83 e0 01             	and    eax,0x1
   22ba8:	85 c0                	test   eax,eax
   22baa:	0f 95 c2             	setne  dl
   22bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22bb0:	88 90 5e 02 00 00    	mov    BYTE PTR [eax+0x25e],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:275 (discriminator 4)
    devInfo->lba48Supported=devInfo->ATAIdentifyData[83]>>10 & 0x1;
   22bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22bb9:	0f b7 80 a6 00 00 00 	movzx  eax,WORD PTR [eax+0xa6]
   22bc0:	66 c1 e8 0a          	shr    ax,0xa
   22bc4:	0f b7 c0             	movzx  eax,ax
   22bc7:	83 e0 01             	and    eax,0x1
   22bca:	85 c0                	test   eax,eax
   22bcc:	0f 95 c2             	setne  dl
   22bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22bd2:	88 90 5f 02 00 00    	mov    BYTE PTR [eax+0x25f],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:278 (discriminator 4)
    
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22bd8:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22bdd:	83 e0 08             	and    eax,0x8
   22be0:	85 c0                	test   eax,eax
   22be2:	74 24                	je     22c08 <ataIdentify+0x1ba>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:279
        printk("drive %d, model=%s\n",devInfo->driveNo, devInfo->ATADeviceModel);
   22be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22be7:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   22bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22bf0:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22bf6:	83 ec 04             	sub    esp,0x4
   22bf9:	52                   	push   edx
   22bfa:	50                   	push   eax
   22bfb:	68 bf 3f 08 00       	push   0x83fbf
   22c00:	e8 9e 4c 00 00       	call   278a3 <printk>
   22c05:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:281
#endif
    return 1;
   22c08:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:282
}
   22c0d:	c9                   	leave  
   22c0e:	c3                   	ret    

00022c0f <ataScanForHarddrives>:
ataScanForHarddrives():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:285

int ataScanForHarddrives()
{
   22c0f:	55                   	push   ebp
   22c10:	89 e5                	mov    ebp,esp
   22c12:	53                   	push   ebx
   22c13:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:286
    kATADeviceInfo[0].bus=ATAPrimary;
   22c16:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c1b:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   22c22:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:287
    kATADeviceInfo[0].driveNo=0;
   22c25:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c2a:	c7 80 65 02 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
   22c31:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:288
    kATADeviceInfo[0].ioPort=0x1F0;
   22c34:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c39:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   22c40:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:289
    kATADeviceInfo[0].irqNum=0x14;
   22c43:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c48:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:290
    kATADeviceInfo[0].driveHeadPortDesignation=0xA0;
   22c4f:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c54:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:291
    kATADeviceInfo[0].queryATAData=true;
   22c5b:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c60:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:292
    kATADeviceInfo[0].ATADeviceAvailable=ataInit(&kATADeviceInfo[0]);
   22c67:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
   22c6d:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c72:	83 ec 0c             	sub    esp,0xc
   22c75:	50                   	push   eax
   22c76:	e8 31 fa ff ff       	call   226ac <ataInit>
   22c7b:	83 c4 10             	add    esp,0x10
   22c7e:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:293
    if (kATADeviceInfo[0].ATADeviceAvailable)
   22c84:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c89:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22c90:	84 c0                	test   al,al
   22c92:	74 3c                	je     22cd0 <ataScanForHarddrives+0xc1>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:295
    {
        ataIdentify(&kATADeviceInfo[0]);
   22c94:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c99:	83 ec 0c             	sub    esp,0xc
   22c9c:	50                   	push   eax
   22c9d:	e8 ac fd ff ff       	call   22a4e <ataIdentify>
   22ca2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:296
        if (useCDROMIdentify)
   22ca5:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22cac:	84 c0                	test   al,al
   22cae:	74 11                	je     22cc1 <ataScanForHarddrives+0xb2>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:297
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22cb0:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22cb5:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22cbc:	00 00 00 
   22cbf:	eb 0f                	jmp    22cd0 <ataScanForHarddrives+0xc1>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:299
        else
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22cc1:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22cc6:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22ccd:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:301
    }
    useCDROMIdentify=false;
   22cd0:	c6 05 d8 a5 09 00 00 	mov    BYTE PTR ds:0x9a5d8,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:303

    kATADeviceInfo[1].bus=ATAPrimary;
   22cd7:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22cdc:	05 73 02 00 00       	add    eax,0x273
   22ce1:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   22ce8:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:304
    kATADeviceInfo[1].driveNo=1;
   22ceb:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22cf0:	05 73 02 00 00       	add    eax,0x273
   22cf5:	c7 80 65 02 00 00 01 	mov    DWORD PTR [eax+0x265],0x1
   22cfc:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:305
    kATADeviceInfo[1].ioPort=0x1F0;
   22cff:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d04:	05 73 02 00 00       	add    eax,0x273
   22d09:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   22d10:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:306
    kATADeviceInfo[1].irqNum=0x14;
   22d13:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d18:	05 73 02 00 00       	add    eax,0x273
   22d1d:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:307
    kATADeviceInfo[1].driveHeadPortDesignation=0xB0;
   22d24:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d29:	05 73 02 00 00       	add    eax,0x273
   22d2e:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:308
    kATADeviceInfo[1].queryATAData=true;
   22d35:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d3a:	05 73 02 00 00       	add    eax,0x273
   22d3f:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:309
    kATADeviceInfo[1].ATADeviceAvailable=ataInit(&kATADeviceInfo[1]);
   22d46:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d4b:	8d 98 73 02 00 00    	lea    ebx,[eax+0x273]
   22d51:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d56:	05 73 02 00 00       	add    eax,0x273
   22d5b:	83 ec 0c             	sub    esp,0xc
   22d5e:	50                   	push   eax
   22d5f:	e8 48 f9 ff ff       	call   226ac <ataInit>
   22d64:	83 c4 10             	add    esp,0x10
   22d67:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:310
    if (kATADeviceInfo[1].ATADeviceAvailable)
   22d6d:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d72:	05 73 02 00 00       	add    eax,0x273
   22d77:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22d7e:	84 c0                	test   al,al
   22d80:	74 4b                	je     22dcd <ataScanForHarddrives+0x1be>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:312
    {
        ataIdentify(&kATADeviceInfo[1]);
   22d82:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d87:	05 73 02 00 00       	add    eax,0x273
   22d8c:	83 ec 0c             	sub    esp,0xc
   22d8f:	50                   	push   eax
   22d90:	e8 b9 fc ff ff       	call   22a4e <ataIdentify>
   22d95:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:313
        if (useCDROMIdentify)
   22d98:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22d9f:	84 c0                	test   al,al
   22da1:	74 16                	je     22db9 <ataScanForHarddrives+0x1aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:314
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22da3:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22da8:	05 73 02 00 00       	add    eax,0x273
   22dad:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22db4:	00 00 00 
   22db7:	eb 14                	jmp    22dcd <ataScanForHarddrives+0x1be>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:316
        else
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22db9:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22dbe:	05 73 02 00 00       	add    eax,0x273
   22dc3:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22dca:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:318
    }
    kATADeviceInfo[2].bus=ATASecondary;
   22dcd:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22dd2:	05 e6 04 00 00       	add    eax,0x4e6
   22dd7:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   22dde:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:319
    kATADeviceInfo[2].driveNo=2;
   22de1:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22de6:	05 e6 04 00 00       	add    eax,0x4e6
   22deb:	c7 80 65 02 00 00 02 	mov    DWORD PTR [eax+0x265],0x2
   22df2:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:320
    kATADeviceInfo[2].ioPort=0x170;
   22df5:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22dfa:	05 e6 04 00 00       	add    eax,0x4e6
   22dff:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   22e06:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:321
    kATADeviceInfo[2].irqNum=0x15;
   22e09:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e0e:	05 e6 04 00 00       	add    eax,0x4e6
   22e13:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:322
    kATADeviceInfo[2].driveHeadPortDesignation=0xA0;
   22e1a:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e1f:	05 e6 04 00 00       	add    eax,0x4e6
   22e24:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:323
    kATADeviceInfo[2].queryATAData=false;
   22e2b:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e30:	05 e6 04 00 00       	add    eax,0x4e6
   22e35:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:324
    kATADeviceInfo[2].ATADeviceAvailable=ataInit(&kATADeviceInfo[2]);
   22e3c:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e41:	8d 98 e6 04 00 00    	lea    ebx,[eax+0x4e6]
   22e47:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e4c:	05 e6 04 00 00       	add    eax,0x4e6
   22e51:	83 ec 0c             	sub    esp,0xc
   22e54:	50                   	push   eax
   22e55:	e8 52 f8 ff ff       	call   226ac <ataInit>
   22e5a:	83 c4 10             	add    esp,0x10
   22e5d:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:325
    if (kATADeviceInfo[2].ATADeviceAvailable)
   22e63:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e68:	05 e6 04 00 00       	add    eax,0x4e6
   22e6d:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22e74:	84 c0                	test   al,al
   22e76:	74 4b                	je     22ec3 <ataScanForHarddrives+0x2b4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:327
    {
        ataIdentify(&kATADeviceInfo[2]);
   22e78:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e7d:	05 e6 04 00 00       	add    eax,0x4e6
   22e82:	83 ec 0c             	sub    esp,0xc
   22e85:	50                   	push   eax
   22e86:	e8 c3 fb ff ff       	call   22a4e <ataIdentify>
   22e8b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:328
        if (useCDROMIdentify)
   22e8e:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22e95:	84 c0                	test   al,al
   22e97:	74 16                	je     22eaf <ataScanForHarddrives+0x2a0>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:329
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22e99:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e9e:	05 e6 04 00 00       	add    eax,0x4e6
   22ea3:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22eaa:	00 00 00 
   22ead:	eb 14                	jmp    22ec3 <ataScanForHarddrives+0x2b4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:331
        else
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22eaf:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22eb4:	05 e6 04 00 00       	add    eax,0x4e6
   22eb9:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22ec0:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:334
    }

    kATADeviceInfo[3].bus=ATASecondary;
   22ec3:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22ec8:	05 59 07 00 00       	add    eax,0x759
   22ecd:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   22ed4:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:335
    kATADeviceInfo[3].driveNo=3;
   22ed7:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22edc:	05 59 07 00 00       	add    eax,0x759
   22ee1:	c7 80 65 02 00 00 03 	mov    DWORD PTR [eax+0x265],0x3
   22ee8:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:336
    kATADeviceInfo[3].ioPort=0x170;
   22eeb:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22ef0:	05 59 07 00 00       	add    eax,0x759
   22ef5:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   22efc:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:337
    kATADeviceInfo[3].irqNum=0x15;
   22eff:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f04:	05 59 07 00 00       	add    eax,0x759
   22f09:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:338
    kATADeviceInfo[3].driveHeadPortDesignation=0xB0;
   22f10:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f15:	05 59 07 00 00       	add    eax,0x759
   22f1a:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:339
    kATADeviceInfo[3].queryATAData=true;
   22f21:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f26:	05 59 07 00 00       	add    eax,0x759
   22f2b:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:340
    kATADeviceInfo[3].ATADeviceAvailable=ataInit(&kATADeviceInfo[3]);
   22f32:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f37:	8d 98 59 07 00 00    	lea    ebx,[eax+0x759]
   22f3d:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f42:	05 59 07 00 00       	add    eax,0x759
   22f47:	83 ec 0c             	sub    esp,0xc
   22f4a:	50                   	push   eax
   22f4b:	e8 5c f7 ff ff       	call   226ac <ataInit>
   22f50:	83 c4 10             	add    esp,0x10
   22f53:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:341
    if (kATADeviceInfo[3].ATADeviceAvailable)
   22f59:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f5e:	05 59 07 00 00       	add    eax,0x759
   22f63:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22f6a:	84 c0                	test   al,al
   22f6c:	74 4b                	je     22fb9 <ataScanForHarddrives+0x3aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:343
    {
        ataIdentify(&kATADeviceInfo[3]);
   22f6e:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f73:	05 59 07 00 00       	add    eax,0x759
   22f78:	83 ec 0c             	sub    esp,0xc
   22f7b:	50                   	push   eax
   22f7c:	e8 cd fa ff ff       	call   22a4e <ataIdentify>
   22f81:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:344
        if (useCDROMIdentify)
   22f84:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22f8b:	84 c0                	test   al,al
   22f8d:	74 16                	je     22fa5 <ataScanForHarddrives+0x396>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:345
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22f8f:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f94:	05 59 07 00 00       	add    eax,0x759
   22f99:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22fa0:	00 00 00 
   22fa3:	eb 14                	jmp    22fb9 <ataScanForHarddrives+0x3aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:347
        else
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22fa5:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22faa:	05 59 07 00 00       	add    eax,0x759
   22faf:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22fb6:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:351
    }

#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22fb9:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22fbe:	83 e0 08             	and    eax,0x8
   22fc1:	85 c0                	test   eax,eax
   22fc3:	74 2c                	je     22ff1 <ataScanForHarddrives+0x3e2>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:352
        printk("INIT: Disk1=%s  Disk2=%s\n", kATADeviceInfo[0].ATADeviceModel, kATADeviceInfo[1].ATADeviceModel);
   22fc5:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22fca:	05 73 02 00 00       	add    eax,0x273
   22fcf:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   22fd5:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22fda:	05 00 02 00 00       	add    eax,0x200
   22fdf:	83 ec 04             	sub    esp,0x4
   22fe2:	52                   	push   edx
   22fe3:	50                   	push   eax
   22fe4:	68 d3 3f 08 00       	push   0x83fd3
   22fe9:	e8 b5 48 00 00       	call   278a3 <printk>
   22fee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:354
#endif
            return 0;
   22ff1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:355
}
   22ff6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   22ff9:	c9                   	leave  
   22ffa:	c3                   	ret    

00022ffb <ataReadDisk>:
ataReadDisk():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:357
int ataReadDisk(struct ataDeviceInfo_t* devInfo, uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22ffb:	55                   	push   ebp
   22ffc:	89 e5                	mov    ebp,esp
   22ffe:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:358
    atablockingReadDev = devInfo;
   23001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23004:	a3 a0 8f 09 00       	mov    ds:0x98fa0,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:359
    if (sector_count==0)    //this function can be called with a sector_count of 0 in order to set partOffset
   23009:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   2300d:	75 07                	jne    23016 <ataReadDisk+0x1b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:360
        return -1;
   2300f:	b8 ff ff ff ff       	mov    eax,0xffffffff
   23014:	eb 14                	jmp    2302a <ataReadDisk+0x2f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:361
    return ataBlockingRead28(sector, buffer, sector_count);
   23016:	83 ec 04             	sub    esp,0x4
   23019:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   2301c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   2301f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23022:	e8 05 00 00 00       	call   2302c <ataBlockingRead28>
   23027:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:362
}
   2302a:	c9                   	leave  
   2302b:	c3                   	ret    

0002302c <ataBlockingRead28>:
ataBlockingRead28():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:365

int ataBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   2302c:	55                   	push   ebp
   2302d:	89 e5                	mov    ebp,esp
   2302f:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:367
    //For now if the FAT library calls this, we assume we've already read the same partition most recently
    int lResult=0;
   23032:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:368
    uint8_t* bufp=buffer;
   23039:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2303c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:369
    uint32_t lSectorsLeft=sector_count;
   2303f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23042:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:370
    uint32_t lSector=sector+partOffset; //this represents the start of the partition
   23045:	a1 e0 a5 09 00       	mov    eax,ds:0x9a5e0
   2304a:	89 c2                	mov    edx,eax
   2304c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2304f:	01 d0                	add    eax,edx
   23051:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:373

#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   23054:	a1 78 98 12 00       	mov    eax,ds:0x129878
   23059:	83 e0 08             	and    eax,0x8
   2305c:	85 c0                	test   eax,eax
   2305e:	74 1b                	je     2307b <ataBlockingRead28+0x4f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:375
        {
            printk("ataBlockingRead28: sec: 0x%08X, buf 0x%08X, cnt 0x%08X\n", lSector, bufp, sector_count);
   23060:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   23063:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   23066:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   23069:	68 f0 3f 08 00       	push   0x83ff0
   2306e:	e8 30 48 00 00       	call   278a3 <printk>
   23073:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:376
            waitForKeyboardKey();
   23076:	e8 dc e1 fe ff       	call   11257 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:379
        }
#endif
    lResult=ataWaitForIdle(atablockingReadDev);
   2307b:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23080:	83 ec 0c             	sub    esp,0xc
   23083:	50                   	push   eax
   23084:	e8 e1 f0 ff ff       	call   2216a <ataWaitForIdle>
   23089:	83 c4 10             	add    esp,0x10
   2308c:	0f b6 c0             	movzx  eax,al
   2308f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:380
    if (lResult)
   23092:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   23096:	74 13                	je     230ab <ataBlockingRead28+0x7f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:381
        panic("ataBlockingRead28: Timeout waiting for DRQ and BSY to be clear (0x%02X)", lResult);
   23098:	83 ec 08             	sub    esp,0x8
   2309b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   2309e:	68 28 40 08 00       	push   0x84028
   230a3:	e8 7c 43 00 00       	call   27424 <panic>
   230a8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:386
        //Select the drive we want
        //NOTE: Drive selected prior to calling this function
        //ataSelectDrive(drive,0);
        //Magic bit (6) to set LBA mode and top 4 bits of LBA28 sector # go in bottom 4
    outb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT, inb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT) | (1 << 6) | ((lSector >> 24) & 0x0F));
   230ab:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   230b0:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   230b6:	83 c0 06             	add    eax,0x6
   230b9:	0f b7 c0             	movzx  eax,ax
   230bc:	83 ec 0c             	sub    esp,0xc
   230bf:	50                   	push   eax
   230c0:	e8 7e ef ff ff       	call   22043 <inb>
   230c5:	83 c4 10             	add    esp,0x10
   230c8:	89 c2                	mov    edx,eax
   230ca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   230cd:	c1 e8 18             	shr    eax,0x18
   230d0:	83 e0 0f             	and    eax,0xf
   230d3:	09 d0                	or     eax,edx
   230d5:	83 c8 40             	or     eax,0x40
   230d8:	0f b6 d0             	movzx  edx,al
   230db:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   230e0:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   230e6:	83 c0 06             	add    eax,0x6
   230e9:	0f b7 c0             	movzx  eax,ax
   230ec:	83 ec 08             	sub    esp,0x8
   230ef:	52                   	push   edx
   230f0:	50                   	push   eax
   230f1:	e8 2e ef ff ff       	call   22024 <outb>
   230f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:389

    //Send the sector count (8 bit))
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTORCOUNT, sector_count);
   230f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   230fc:	0f b6 d0             	movzx  edx,al
   230ff:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23104:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2310a:	83 c0 02             	add    eax,0x2
   2310d:	0f b7 c0             	movzx  eax,ax
   23110:	83 ec 08             	sub    esp,0x8
   23113:	52                   	push   edx
   23114:	50                   	push   eax
   23115:	e8 0a ef ff ff       	call   22024 <outb>
   2311a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:392

    //Send the LBA sector number in the next 3 fields + high bit in the 
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTOR_NUMBER, (lSector) & 0xFF);
   2311d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23120:	0f b6 d0             	movzx  edx,al
   23123:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23128:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2312e:	83 c0 03             	add    eax,0x3
   23131:	0f b7 c0             	movzx  eax,ax
   23134:	83 ec 08             	sub    esp,0x8
   23137:	52                   	push   edx
   23138:	50                   	push   eax
   23139:	e8 e6 ee ff ff       	call   22024 <outb>
   2313e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:393
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_LOW, (lSector >> 8) & 0xFF);
   23141:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23144:	c1 e8 08             	shr    eax,0x8
   23147:	0f b6 d0             	movzx  edx,al
   2314a:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   2314f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   23155:	83 c0 04             	add    eax,0x4
   23158:	0f b7 c0             	movzx  eax,ax
   2315b:	83 ec 08             	sub    esp,0x8
   2315e:	52                   	push   edx
   2315f:	50                   	push   eax
   23160:	e8 bf ee ff ff       	call   22024 <outb>
   23165:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:394
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
   23168:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2316b:	c1 e8 10             	shr    eax,0x10
   2316e:	0f b6 d0             	movzx  edx,al
   23171:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23176:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2317c:	83 c0 05             	add    eax,0x5
   2317f:	0f b7 c0             	movzx  eax,ax
   23182:	83 ec 08             	sub    esp,0x8
   23185:	52                   	push   edx
   23186:	50                   	push   eax
   23187:	e8 98 ee ff ff       	call   22024 <outb>
   2318c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:395
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
   2318f:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23194:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2319a:	83 c0 07             	add    eax,0x7
   2319d:	0f b7 c0             	movzx  eax,ax
   231a0:	83 ec 08             	sub    esp,0x8
   231a3:	6a 20                	push   0x20
   231a5:	50                   	push   eax
   231a6:	e8 79 ee ff ff       	call   22024 <outb>
   231ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:396
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   231ae:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   231b4:	89 d0                	mov    eax,edx
   231b6:	c1 e0 02             	shl    eax,0x2
   231b9:	01 d0                	add    eax,edx
   231bb:	01 c0                	add    eax,eax
   231bd:	89 c2                	mov    edx,eax
   231bf:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   231c4:	83 ec 04             	sub    esp,0x4
   231c7:	52                   	push   edx
   231c8:	6a 01                	push   0x1
   231ca:	50                   	push   eax
   231cb:	e8 e4 ee ff ff       	call   220b4 <ataWaitForDRQ>
   231d0:	83 c4 10             	add    esp,0x10
   231d3:	0f b6 c0             	movzx  eax,al
   231d6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:397
    if (lResult)
   231d9:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   231dd:	0f 84 35 01 00 00    	je     23318 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:398
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   231e3:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   231e8:	83 ec 04             	sub    esp,0x4
   231eb:	50                   	push   eax
   231ec:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   231ef:	68 70 40 08 00       	push   0x84070
   231f4:	e8 2b 42 00 00       	call   27424 <panic>
   231f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:399
    while (lSectorsLeft)
   231fc:	e9 17 01 00 00       	jmp    23318 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:401
    {
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
   23201:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23206:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2320c:	0f b7 c0             	movzx  eax,ax
   2320f:	83 ec 04             	sub    esp,0x4
   23212:	68 00 01 00 00       	push   0x100
   23217:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2321a:	50                   	push   eax
   2321b:	e8 5f ee ff ff       	call   2207f <insw>
   23220:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:403
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   23223:	a1 78 98 12 00       	mov    eax,ds:0x129878
   23228:	83 e0 08             	and    eax,0x8
   2322b:	85 c0                	test   eax,eax
   2322d:	74 52                	je     23281 <ataBlockingRead28+0x255>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:405
            {
                printk("ataBlockingRead28: Debugging: ");
   2322f:	83 ec 0c             	sub    esp,0xc
   23232:	68 c0 40 08 00       	push   0x840c0
   23237:	e8 67 46 00 00       	call   278a3 <printk>
   2323c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406
                for (int cnt2=0;cnt2<20;cnt2++)
   2323f:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   23246:	eb 23                	jmp    2326b <ataBlockingRead28+0x23f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:407 (discriminator 3)
                    printk("%02X ", bufp[cnt2]);
   23248:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   2324b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2324e:	01 d0                	add    eax,edx
   23250:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   23253:	0f b6 c0             	movzx  eax,al
   23256:	83 ec 08             	sub    esp,0x8
   23259:	50                   	push   eax
   2325a:	68 df 40 08 00       	push   0x840df
   2325f:	e8 3f 46 00 00       	call   278a3 <printk>
   23264:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406 (discriminator 3)
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            {
                printk("ataBlockingRead28: Debugging: ");
                for (int cnt2=0;cnt2<20;cnt2++)
   23267:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406 (discriminator 1)
   2326b:	83 7d e8 13          	cmp    DWORD PTR [ebp-0x18],0x13
   2326f:	7e d7                	jle    23248 <ataBlockingRead28+0x21c>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:408
                    printk("%02X ", bufp[cnt2]);
                printk("\n");
   23271:	83 ec 0c             	sub    esp,0xc
   23274:	68 e5 40 08 00       	push   0x840e5
   23279:	e8 25 46 00 00       	call   278a3 <printk>
   2327e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:411
            }
        #endif
        if (--lSectorsLeft>0) //zero based vs 1 based
   23281:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
   23285:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   23289:	0f 84 89 00 00 00    	je     23318 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:413
        {
            wait(50);
   2328f:	83 ec 0c             	sub    esp,0xc
   23292:	6a 32                	push   0x32
   23294:	e8 49 58 00 00       	call   28ae2 <wait>
   23299:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:414
            lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   2329c:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   232a2:	89 d0                	mov    eax,edx
   232a4:	c1 e0 02             	shl    eax,0x2
   232a7:	01 d0                	add    eax,edx
   232a9:	01 c0                	add    eax,eax
   232ab:	89 c2                	mov    edx,eax
   232ad:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   232b2:	83 ec 04             	sub    esp,0x4
   232b5:	52                   	push   edx
   232b6:	6a 01                	push   0x1
   232b8:	50                   	push   eax
   232b9:	e8 f6 ed ff ff       	call   220b4 <ataWaitForDRQ>
   232be:	83 c4 10             	add    esp,0x10
   232c1:	0f b6 c0             	movzx  eax,al
   232c4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:415
            bufp+=512;
   232c7:	81 45 f4 00 02 00 00 	add    DWORD PTR [ebp-0xc],0x200
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:416
            lSector++;
   232ce:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:417
            if (lResult)
   232d2:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   232d6:	74 19                	je     232f1 <ataBlockingRead28+0x2c5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:418
                panic("ataBlockingRead28: Timeout in read loop, waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   232d8:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   232dd:	83 ec 04             	sub    esp,0x4
   232e0:	50                   	push   eax
   232e1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   232e4:	68 e8 40 08 00       	push   0x840e8
   232e9:	e8 36 41 00 00       	call   27424 <panic>
   232ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:420
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   232f1:	a1 78 98 12 00       	mov    eax,ds:0x129878
   232f6:	83 e0 08             	and    eax,0x8
   232f9:	85 c0                	test   eax,eax
   232fb:	74 1b                	je     23318 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:422
        {
            printk("ataBlockingRead28: sec=0x%08X, buf=0x%08X, rep=0x%08X    \n", lSector, bufp, lSectorsLeft);
   232fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   23300:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   23303:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   23306:	68 44 41 08 00       	push   0x84144
   2330b:	e8 93 45 00 00       	call   278a3 <printk>
   23310:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:423
            waitForKeyboardKey();
   23313:	e8 3f df fe ff       	call   11257 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:399
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
    if (lResult)
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
    while (lSectorsLeft)
   23318:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2331c:	0f 85 df fe ff ff    	jne    23201 <ataBlockingRead28+0x1d5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:428
            waitForKeyboardKey();
        }
#endif
        }
    }
    return 512*sector_count;
   23322:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23325:	c1 e0 09             	shl    eax,0x9
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:429
}
   23328:	c9                   	leave  
   23329:	c3                   	ret    

0002332a <ataBlockingWrite28>:
ataBlockingWrite28():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:432

int ataBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   2332a:	55                   	push   ebp
   2332b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:468
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataBlockingWrite28: Finished sending data\n");
#endif
    return 512;
*/}
   2332d:	90                   	nop
   2332e:	5d                   	pop    ebp
   2332f:	c3                   	ret    

00023330 <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   23330:	55                   	push   ebp
   23331:	89 e5                	mov    ebp,esp
   23333:	53                   	push   ebx
   23334:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   23337:	9c                   	pushf  
   23338:	9c                   	pushf  
   23339:	5a                   	pop    edx
   2333a:	89 d0                	mov    eax,edx
   2333c:	81 f2 00 00 20 00    	xor    edx,0x200000
   23342:	52                   	push   edx
   23343:	9d                   	popf   
   23344:	9c                   	pushf  
   23345:	5a                   	pop    edx
   23346:	9d                   	popf   
   23347:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   2334a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   2334d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   23350:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   23353:	25 00 00 20 00       	and    eax,0x200000
   23358:	85 c0                	test   eax,eax
   2335a:	75 07                	jne    23363 <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   2335c:	b8 00 00 00 00       	mov    eax,0x0
   23361:	eb 22                	jmp    23385 <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   23363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23366:	0f a2                	cpuid  
   23368:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   2336b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   2336e:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   23371:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   23374:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   23378:	74 08                	je     23382 <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   2337a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2337d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23380:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   23382:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   23385:	83 c4 10             	add    esp,0x10
   23388:	5b                   	pop    ebx
   23389:	5d                   	pop    ebp
   2338a:	c3                   	ret    

0002338b <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   2338b:	55                   	push   ebp
   2338c:	89 e5                	mov    ebp,esp
   2338e:	56                   	push   esi
   2338f:	53                   	push   ebx
   23390:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   23393:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23396:	25 00 00 00 80       	and    eax,0x80000000
   2339b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   2339e:	6a 00                	push   0x0
   233a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   233a3:	e8 88 ff ff ff       	call   23330 <__get_cpuid_max>
   233a8:	83 c4 08             	add    esp,0x8
   233ab:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   233ae:	73 07                	jae    233b7 <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   233b0:	b8 00 00 00 00       	mov    eax,0x0
   233b5:	eb 1e                	jmp    233d5 <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   233b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   233ba:	0f a2                	cpuid  
   233bc:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   233bf:	89 06                	mov    DWORD PTR [esi],eax
   233c1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   233c4:	89 18                	mov    DWORD PTR [eax],ebx
   233c6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   233c9:	89 08                	mov    DWORD PTR [eax],ecx
   233cb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   233ce:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   233d0:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   233d5:	8d 65 f8             	lea    esp,[ebp-0x8]
   233d8:	5b                   	pop    ebx
   233d9:	5e                   	pop    esi
   233da:	5d                   	pop    ebp
   233db:	c3                   	ret    

000233dc <detect_cpu>:
detect_cpu():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:45
void printregs(int eax, int ebx, int ecx, int edx);
extern struct cpuinfo_t kcpuInfo;


/* Simply call this function detect_cpu(); */
int HIGH_CODE_SECTION detect_cpu(void) { /* or main() if your trying to port this as an independant application */
   233dc:	55                   	push   ebp
   233dd:	89 e5                	mov    ebp,esp
   233df:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:47
	unsigned int ebx, unused;
        __get_cpuid(0, &unused, &ebx, &unused, &unused);
   233e2:	8d 45 f0             	lea    eax,[ebp-0x10]
   233e5:	50                   	push   eax
   233e6:	8d 45 f0             	lea    eax,[ebp-0x10]
   233e9:	50                   	push   eax
   233ea:	8d 45 f4             	lea    eax,[ebp-0xc]
   233ed:	50                   	push   eax
   233ee:	8d 45 f0             	lea    eax,[ebp-0x10]
   233f1:	50                   	push   eax
   233f2:	6a 00                	push   0x0
   233f4:	e8 92 ff ff ff       	call   2338b <__get_cpuid>
   233f9:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:48
	switch(ebx) {
   233fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   233ff:	3d 41 75 74 68       	cmp    eax,0x68747541
   23404:	74 0e                	je     23414 <detect_cpu+0x38>
   23406:	3d 47 65 6e 75       	cmp    eax,0x756e6547
   2340b:	75 0e                	jne    2341b <detect_cpu+0x3f>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:50
		case 0x756e6547: /* Intel Magic Code */
		do_intel();
   2340d:	e8 2a 00 00 00       	call   2343c <do_intel>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:51
		break;
   23412:	eb 21                	jmp    23435 <detect_cpu+0x59>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:53
		case 0x68747541: /* AMD Magic Code */
		do_amd();
   23414:	e8 27 06 00 00       	call   23a40 <do_amd>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:54
		break;
   23419:	eb 1a                	jmp    23435 <detect_cpu+0x59>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:56
		default:
		printk("Unknown x86 CPU Detected\n");
   2341b:	83 ec 0c             	sub    esp,0xc
   2341e:	68 80 41 08 00       	push   0x84180
   23423:	e8 7b 44 00 00       	call   278a3 <printk>
   23428:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:57
                __asm__("pushf\n pop eax\n and eax,0xFFDFFFFF\n push eax\n popf\n");
   2342b:	9c                   	pushf  
   2342c:	58                   	pop    eax
   2342d:	25 ff ff df ff       	and    eax,0xffdfffff
   23432:	50                   	push   eax
   23433:	9d                   	popf   
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:58
		break;
   23434:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:60
	}
	return 0;
   23435:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:61
}
   2343a:	c9                   	leave  
   2343b:	c3                   	ret    

0002343c <do_intel>:
do_intel():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:120
	"Reserved", 
	"Reserved"
};

/* Intel-specific information */
int HIGH_CODE_SECTION do_intel(void) {
   2343c:	55                   	push   ebp
   2343d:	89 e5                	mov    ebp,esp
   2343f:	53                   	push   ebx
   23440:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:121
	unsigned int eax=0, ebx=0, ecx=0, edx=0, max_eax=0, signature, unused;
   23443:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   2344a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   23451:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   23458:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   2345f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:122
	sprintf(kcpuInfo.vendor,"Intel");
   23466:	83 ec 08             	sub    esp,0x8
   23469:	68 d7 43 08 00       	push   0x843d7
   2346e:	68 b8 95 12 00       	push   0x1295b8
   23473:	e8 7f 44 00 00       	call   278f7 <sprintf>
   23478:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:123
        __get_cpuid(1, &eax, &ebx, &unused, &unused);
   2347b:	83 ec 0c             	sub    esp,0xc
   2347e:	8d 45 dc             	lea    eax,[ebp-0x24]
   23481:	50                   	push   eax
   23482:	8d 45 dc             	lea    eax,[ebp-0x24]
   23485:	50                   	push   eax
   23486:	8d 45 ec             	lea    eax,[ebp-0x14]
   23489:	50                   	push   eax
   2348a:	8d 45 f0             	lea    eax,[ebp-0x10]
   2348d:	50                   	push   eax
   2348e:	6a 01                	push   0x1
   23490:	e8 f6 fe ff ff       	call   2338b <__get_cpuid>
   23495:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:124
	kcpuInfo.model = (eax >> 4) & 0xf;
   23498:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2349b:	c1 e8 04             	shr    eax,0x4
   2349e:	83 e0 0f             	and    eax,0xf
   234a1:	a3 a4 95 12 00       	mov    ds:0x1295a4,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:125
	kcpuInfo.family = (eax >> 8) & 0xf;
   234a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   234a9:	c1 e8 08             	shr    eax,0x8
   234ac:	83 e0 0f             	and    eax,0xf
   234af:	a3 a0 95 12 00       	mov    ds:0x1295a0,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:126
	kcpuInfo.type = (eax >> 12) & 0x3;
   234b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   234b7:	c1 e8 0c             	shr    eax,0xc
   234ba:	83 e0 03             	and    eax,0x3
   234bd:	a3 ac 95 12 00       	mov    ds:0x1295ac,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:127
	kcpuInfo.brand = ebx & 0xff;
   234c2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   234c5:	0f b6 c0             	movzx  eax,al
   234c8:	a3 b0 95 12 00       	mov    ds:0x1295b0,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:128
	kcpuInfo.stepping = eax & 0xf;
   234cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   234d0:	83 e0 0f             	and    eax,0xf
   234d3:	a3 a8 95 12 00       	mov    ds:0x1295a8,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:129
	signature = eax;
   234d8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   234db:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:130
	switch(kcpuInfo.type) {
   234de:	a1 ac 95 12 00       	mov    eax,ds:0x1295ac
   234e3:	83 f8 01             	cmp    eax,0x1
   234e6:	74 2e                	je     23516 <do_intel+0xda>
   234e8:	83 f8 01             	cmp    eax,0x1
   234eb:	7f 06                	jg     234f3 <do_intel+0xb7>
   234ed:	85 c0                	test   eax,eax
   234ef:	74 0e                	je     234ff <do_intel+0xc3>
   234f1:	eb 67                	jmp    2355a <do_intel+0x11e>
   234f3:	83 f8 02             	cmp    eax,0x2
   234f6:	74 35                	je     2352d <do_intel+0xf1>
   234f8:	83 f8 03             	cmp    eax,0x3
   234fb:	74 47                	je     23544 <do_intel+0x108>
   234fd:	eb 5b                	jmp    2355a <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:132
		case 0:
		sprintf(kcpuInfo.type_name,"Original OEM");
   234ff:	83 ec 08             	sub    esp,0x8
   23502:	68 dd 43 08 00       	push   0x843dd
   23507:	68 4e 96 12 00       	push   0x12964e
   2350c:	e8 e6 43 00 00       	call   278f7 <sprintf>
   23511:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:133
		break;
   23514:	eb 44                	jmp    2355a <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:135
		case 1:
		sprintf(kcpuInfo.type_name,"Overdrive");
   23516:	83 ec 08             	sub    esp,0x8
   23519:	68 ea 43 08 00       	push   0x843ea
   2351e:	68 4e 96 12 00       	push   0x12964e
   23523:	e8 cf 43 00 00       	call   278f7 <sprintf>
   23528:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:136
		break;
   2352b:	eb 2d                	jmp    2355a <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:138
		case 2:
		sprintf(kcpuInfo.type_name,"Dual-capable");
   2352d:	83 ec 08             	sub    esp,0x8
   23530:	68 f4 43 08 00       	push   0x843f4
   23535:	68 4e 96 12 00       	push   0x12964e
   2353a:	e8 b8 43 00 00       	call   278f7 <sprintf>
   2353f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:139
		break;
   23542:	eb 16                	jmp    2355a <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:141
		case 3:
		sprintf(kcpuInfo.type_name,"Reserved");
   23544:	83 ec 08             	sub    esp,0x8
   23547:	68 1e 42 08 00       	push   0x8421e
   2354c:	68 4e 96 12 00       	push   0x12964e
   23551:	e8 a1 43 00 00       	call   278f7 <sprintf>
   23556:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:142
		break;
   23559:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:144
	}
	switch(kcpuInfo.family) {
   2355a:	a1 a0 95 12 00       	mov    eax,ds:0x1295a0
   2355f:	83 e8 03             	sub    eax,0x3
   23562:	83 f8 0c             	cmp    eax,0xc
   23565:	77 7a                	ja     235e1 <do_intel+0x1a5>
   23567:	8b 04 85 2c 45 08 00 	mov    eax,DWORD PTR [eax*4+0x8452c]
   2356e:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:146
		case 3:
		sprintf(kcpuInfo.family_name,"i386");
   23570:	83 ec 08             	sub    esp,0x8
   23573:	68 01 44 08 00       	push   0x84401
   23578:	68 80 96 12 00       	push   0x129680
   2357d:	e8 75 43 00 00       	call   278f7 <sprintf>
   23582:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:147
		break;
   23585:	eb 5a                	jmp    235e1 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:149
		case 4:
		sprintf(kcpuInfo.family_name,"i486");
   23587:	83 ec 08             	sub    esp,0x8
   2358a:	68 06 44 08 00       	push   0x84406
   2358f:	68 80 96 12 00       	push   0x129680
   23594:	e8 5e 43 00 00       	call   278f7 <sprintf>
   23599:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:150
		break;
   2359c:	eb 43                	jmp    235e1 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:152
		case 5:
		sprintf(kcpuInfo.family_name,"Pentium");
   2359e:	83 ec 08             	sub    esp,0x8
   235a1:	68 0b 44 08 00       	push   0x8440b
   235a6:	68 80 96 12 00       	push   0x129680
   235ab:	e8 47 43 00 00       	call   278f7 <sprintf>
   235b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:153
		break;
   235b3:	eb 2c                	jmp    235e1 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:155
		case 6:
		sprintf(kcpuInfo.family_name,"Pentium Pro");
   235b5:	83 ec 08             	sub    esp,0x8
   235b8:	68 13 44 08 00       	push   0x84413
   235bd:	68 80 96 12 00       	push   0x129680
   235c2:	e8 30 43 00 00       	call   278f7 <sprintf>
   235c7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:156
		break;
   235ca:	eb 15                	jmp    235e1 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:158
		case 15:
		sprintf(kcpuInfo.family_name,"Pentium 4");
   235cc:	83 ec 08             	sub    esp,0x8
   235cf:	68 1f 44 08 00       	push   0x8441f
   235d4:	68 80 96 12 00       	push   0x129680
   235d9:	e8 19 43 00 00       	call   278f7 <sprintf>
   235de:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:160
	}
	if(kcpuInfo.family == 15) {
   235e1:	a1 a0 95 12 00       	mov    eax,ds:0x1295a0
   235e6:	83 f8 0f             	cmp    eax,0xf
   235e9:	75 0e                	jne    235f9 <do_intel+0x1bd>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:161
		kcpuInfo.extended_family = (eax >> 20) & 0xff;
   235eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   235ee:	c1 e8 14             	shr    eax,0x14
   235f1:	0f b6 c0             	movzx  eax,al
   235f4:	a3 b4 95 12 00       	mov    ds:0x1295b4,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:163
	}
	switch(kcpuInfo.family) {
   235f9:	a1 a0 95 12 00       	mov    eax,ds:0x1295a0
   235fe:	83 e8 03             	sub    eax,0x3
   23601:	83 f8 0c             	cmp    eax,0xc
   23604:	0f 87 f6 01 00 00    	ja     23800 <do_intel+0x3c4>
   2360a:	8b 04 85 60 45 08 00 	mov    eax,DWORD PTR [eax*4+0x84560]
   23611:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:167
		case 3:
		break;
		case 4:
		switch(kcpuInfo.model) {
   23613:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23618:	83 f8 08             	cmp    eax,0x8
   2361b:	0f 87 db 01 00 00    	ja     237fc <do_intel+0x3c0>
   23621:	8b 04 85 94 45 08 00 	mov    eax,DWORD PTR [eax*4+0x84594]
   23628:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:170
			case 0:
			case 1:
			sprintf(kcpuInfo.model_name,"DX");
   2362a:	83 ec 08             	sub    esp,0x8
   2362d:	68 29 44 08 00       	push   0x84429
   23632:	68 ea 95 12 00       	push   0x1295ea
   23637:	e8 bb 42 00 00       	call   278f7 <sprintf>
   2363c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:171
			break;
   2363f:	e9 89 00 00 00       	jmp    236cd <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:173
			case 2:
			sprintf(kcpuInfo.model_name,"SX");
   23644:	83 ec 08             	sub    esp,0x8
   23647:	68 2c 44 08 00       	push   0x8442c
   2364c:	68 ea 95 12 00       	push   0x1295ea
   23651:	e8 a1 42 00 00       	call   278f7 <sprintf>
   23656:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:174
			break;
   23659:	eb 72                	jmp    236cd <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:176
			case 3:
			sprintf(kcpuInfo.model_name,"487/DX2");
   2365b:	83 ec 08             	sub    esp,0x8
   2365e:	68 2f 44 08 00       	push   0x8442f
   23663:	68 ea 95 12 00       	push   0x1295ea
   23668:	e8 8a 42 00 00       	call   278f7 <sprintf>
   2366d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:177
			break;
   23670:	eb 5b                	jmp    236cd <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:179
			case 4:
			sprintf(kcpuInfo.model_name,"SL");
   23672:	83 ec 08             	sub    esp,0x8
   23675:	68 37 44 08 00       	push   0x84437
   2367a:	68 ea 95 12 00       	push   0x1295ea
   2367f:	e8 73 42 00 00       	call   278f7 <sprintf>
   23684:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:180
			break;
   23687:	eb 44                	jmp    236cd <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:182
			case 5:
			sprintf(kcpuInfo.model_name,"SX2");
   23689:	83 ec 08             	sub    esp,0x8
   2368c:	68 3a 44 08 00       	push   0x8443a
   23691:	68 ea 95 12 00       	push   0x1295ea
   23696:	e8 5c 42 00 00       	call   278f7 <sprintf>
   2369b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:183
			break;
   2369e:	eb 2d                	jmp    236cd <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:185
			case 7:
			sprintf(kcpuInfo.model_name,"Write-back enhanced DX2");
   236a0:	83 ec 08             	sub    esp,0x8
   236a3:	68 3e 44 08 00       	push   0x8443e
   236a8:	68 ea 95 12 00       	push   0x1295ea
   236ad:	e8 45 42 00 00       	call   278f7 <sprintf>
   236b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:186
			break;
   236b5:	eb 16                	jmp    236cd <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:188
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
   236b7:	83 ec 08             	sub    esp,0x8
   236ba:	68 56 44 08 00       	push   0x84456
   236bf:	68 ea 95 12 00       	push   0x1295ea
   236c4:	e8 2e 42 00 00       	call   278f7 <sprintf>
   236c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:189
			break;
   236cc:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:191
		}
		break;
   236cd:	e9 2a 01 00 00       	jmp    237fc <do_intel+0x3c0>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:193
		case 5:
		switch(kcpuInfo.model) {
   236d2:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   236d7:	83 f8 02             	cmp    eax,0x2
   236da:	74 35                	je     23711 <do_intel+0x2d5>
   236dc:	83 f8 02             	cmp    eax,0x2
   236df:	7f 0a                	jg     236eb <do_intel+0x2af>
   236e1:	83 f8 01             	cmp    eax,0x1
   236e4:	74 14                	je     236fa <do_intel+0x2be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   236e6:	e9 15 01 00 00       	jmp    23800 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:193
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
   236eb:	83 f8 03             	cmp    eax,0x3
   236ee:	74 38                	je     23728 <do_intel+0x2ec>
   236f0:	83 f8 04             	cmp    eax,0x4
   236f3:	74 4a                	je     2373f <do_intel+0x303>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   236f5:	e9 06 01 00 00       	jmp    23800 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:195
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
			case 1:
			sprintf(kcpuInfo.model_name,"60/66");
   236fa:	83 ec 08             	sub    esp,0x8
   236fd:	68 5a 44 08 00       	push   0x8445a
   23702:	68 ea 95 12 00       	push   0x1295ea
   23707:	e8 eb 41 00 00       	call   278f7 <sprintf>
   2370c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:196
			break;
   2370f:	eb 44                	jmp    23755 <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:198
			case 2:
			sprintf(kcpuInfo.model_name,"75-200");
   23711:	83 ec 08             	sub    esp,0x8
   23714:	68 60 44 08 00       	push   0x84460
   23719:	68 ea 95 12 00       	push   0x1295ea
   2371e:	e8 d4 41 00 00       	call   278f7 <sprintf>
   23723:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:199
			break;
   23726:	eb 2d                	jmp    23755 <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:201
			case 3:
			sprintf(kcpuInfo.model_name,"for 486 system");
   23728:	83 ec 08             	sub    esp,0x8
   2372b:	68 67 44 08 00       	push   0x84467
   23730:	68 ea 95 12 00       	push   0x1295ea
   23735:	e8 bd 41 00 00       	call   278f7 <sprintf>
   2373a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:202
			break;
   2373d:	eb 16                	jmp    23755 <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:204
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
   2373f:	83 ec 08             	sub    esp,0x8
   23742:	68 76 44 08 00       	push   0x84476
   23747:	68 ea 95 12 00       	push   0x1295ea
   2374c:	e8 a6 41 00 00       	call   278f7 <sprintf>
   23751:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:205
			break;
   23754:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
		}
		break;
   23755:	e9 a6 00 00 00       	jmp    23800 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:209
		case 6:
		switch(kcpuInfo.model) {
   2375a:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   2375f:	83 f8 08             	cmp    eax,0x8
   23762:	0f 87 97 00 00 00    	ja     237ff <do_intel+0x3c3>
   23768:	8b 04 85 b8 45 08 00 	mov    eax,DWORD PTR [eax*4+0x845b8]
   2376f:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:211
			case 1:
			sprintf(kcpuInfo.model_name,"Pentium Pro");
   23771:	83 ec 08             	sub    esp,0x8
   23774:	68 13 44 08 00       	push   0x84413
   23779:	68 ea 95 12 00       	push   0x1295ea
   2377e:	e8 74 41 00 00       	call   278f7 <sprintf>
   23783:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:212
			break;
   23786:	eb 72                	jmp    237fa <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:214
			case 3:
			sprintf(kcpuInfo.model_name,"Pentium II Model 3");
   23788:	83 ec 08             	sub    esp,0x8
   2378b:	68 7a 44 08 00       	push   0x8447a
   23790:	68 ea 95 12 00       	push   0x1295ea
   23795:	e8 5d 41 00 00       	call   278f7 <sprintf>
   2379a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:215
			break;
   2379d:	eb 5b                	jmp    237fa <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:217
			case 5:
			sprintf(kcpuInfo.model_name,"Pentium II Model 5/Xeon/Celeron");
   2379f:	83 ec 08             	sub    esp,0x8
   237a2:	68 90 44 08 00       	push   0x84490
   237a7:	68 ea 95 12 00       	push   0x1295ea
   237ac:	e8 46 41 00 00       	call   278f7 <sprintf>
   237b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:218
			break;
   237b4:	eb 44                	jmp    237fa <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:220
			case 6:
			sprintf(kcpuInfo.model_name,"Celeron");
   237b6:	83 ec 08             	sub    esp,0x8
   237b9:	68 b0 44 08 00       	push   0x844b0
   237be:	68 ea 95 12 00       	push   0x1295ea
   237c3:	e8 2f 41 00 00       	call   278f7 <sprintf>
   237c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:221
			break;
   237cb:	eb 2d                	jmp    237fa <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:223
			case 7:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - external L2 cache");
   237cd:	83 ec 08             	sub    esp,0x8
   237d0:	68 b8 44 08 00       	push   0x844b8
   237d5:	68 ea 95 12 00       	push   0x1295ea
   237da:	e8 18 41 00 00       	call   278f7 <sprintf>
   237df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:224
			break;
   237e2:	eb 16                	jmp    237fa <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:226
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
   237e4:	83 ec 08             	sub    esp,0x8
   237e7:	68 ec 44 08 00       	push   0x844ec
   237ec:	68 ea 95 12 00       	push   0x1295ea
   237f1:	e8 01 41 00 00       	call   278f7 <sprintf>
   237f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:227
			break;
   237f9:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:229
		}
		break;
   237fa:	eb 03                	jmp    237ff <do_intel+0x3c3>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:191
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
   237fc:	90                   	nop
   237fd:	eb 01                	jmp    23800 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:229
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
			break;
		}
		break;
   237ff:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:233
		case 15:
		break;
	}
	__get_cpuid(0x80000000, &max_eax, &unused, &unused, &unused);
   23800:	83 ec 0c             	sub    esp,0xc
   23803:	8d 45 dc             	lea    eax,[ebp-0x24]
   23806:	50                   	push   eax
   23807:	8d 45 dc             	lea    eax,[ebp-0x24]
   2380a:	50                   	push   eax
   2380b:	8d 45 dc             	lea    eax,[ebp-0x24]
   2380e:	50                   	push   eax
   2380f:	8d 45 e0             	lea    eax,[ebp-0x20]
   23812:	50                   	push   eax
   23813:	68 00 00 00 80       	push   0x80000000
   23818:	e8 6e fb ff ff       	call   2338b <__get_cpuid>
   2381d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:239
	/* Quok said: If the max extended eax value is high enough to support the processor brand string
	(values 0x80000002 to 0x80000004), then we'll use that information to return the brand information. 
	Otherwise, we'll refer back to the brand tables above for backwards compatibility with older processors. 
	According to the Sept. 2006 Intel Arch Software Developer's Guide, if extended eax values are supported, 
	then all 3 values for the processor brand string are supported, but we'll test just to make sure and be safe. */
	if(max_eax >= 0x80000004) {
   23820:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23823:	3d 03 00 00 80       	cmp    eax,0x80000003
   23828:	0f 86 e1 00 00 00    	jbe    2390f <do_intel+0x4d3>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:240
		if(max_eax >= 0x80000002) {
   2382e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23831:	3d 01 00 00 80       	cmp    eax,0x80000001
   23836:	76 3e                	jbe    23876 <do_intel+0x43a>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:241
			__get_cpuid(0x80000002, &eax, &ebx, &ecx, &edx);
   23838:	83 ec 0c             	sub    esp,0xc
   2383b:	8d 45 e4             	lea    eax,[ebp-0x1c]
   2383e:	50                   	push   eax
   2383f:	8d 45 e8             	lea    eax,[ebp-0x18]
   23842:	50                   	push   eax
   23843:	8d 45 ec             	lea    eax,[ebp-0x14]
   23846:	50                   	push   eax
   23847:	8d 45 f0             	lea    eax,[ebp-0x10]
   2384a:	50                   	push   eax
   2384b:	68 02 00 00 80       	push   0x80000002
   23850:	e8 36 fb ff ff       	call   2338b <__get_cpuid>
   23855:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:242
			printregs(eax, ebx, ecx, edx);
   23858:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2385b:	89 c3                	mov    ebx,eax
   2385d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23860:	89 c1                	mov    ecx,eax
   23862:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23865:	89 c2                	mov    edx,eax
   23867:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2386a:	53                   	push   ebx
   2386b:	51                   	push   ecx
   2386c:	52                   	push   edx
   2386d:	50                   	push   eax
   2386e:	e8 28 01 00 00       	call   2399b <printregs>
   23873:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:244
		}
		if(max_eax >= 0x80000003) {
   23876:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23879:	3d 02 00 00 80       	cmp    eax,0x80000002
   2387e:	76 3e                	jbe    238be <do_intel+0x482>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:245
			__get_cpuid(0x80000003, &eax, &ebx, &ecx, &edx);
   23880:	83 ec 0c             	sub    esp,0xc
   23883:	8d 45 e4             	lea    eax,[ebp-0x1c]
   23886:	50                   	push   eax
   23887:	8d 45 e8             	lea    eax,[ebp-0x18]
   2388a:	50                   	push   eax
   2388b:	8d 45 ec             	lea    eax,[ebp-0x14]
   2388e:	50                   	push   eax
   2388f:	8d 45 f0             	lea    eax,[ebp-0x10]
   23892:	50                   	push   eax
   23893:	68 03 00 00 80       	push   0x80000003
   23898:	e8 ee fa ff ff       	call   2338b <__get_cpuid>
   2389d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:246
			printregs(eax, ebx, ecx, edx);
   238a0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   238a3:	89 c3                	mov    ebx,eax
   238a5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   238a8:	89 c1                	mov    ecx,eax
   238aa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   238ad:	89 c2                	mov    edx,eax
   238af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   238b2:	53                   	push   ebx
   238b3:	51                   	push   ecx
   238b4:	52                   	push   edx
   238b5:	50                   	push   eax
   238b6:	e8 e0 00 00 00       	call   2399b <printregs>
   238bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:248
		}
		if(max_eax >= 0x80000004) {
   238be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   238c1:	3d 03 00 00 80       	cmp    eax,0x80000003
   238c6:	0f 86 c5 00 00 00    	jbe    23991 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:249
			__get_cpuid(0x80000004, &eax, &ebx, &ecx, &edx);
   238cc:	83 ec 0c             	sub    esp,0xc
   238cf:	8d 45 e4             	lea    eax,[ebp-0x1c]
   238d2:	50                   	push   eax
   238d3:	8d 45 e8             	lea    eax,[ebp-0x18]
   238d6:	50                   	push   eax
   238d7:	8d 45 ec             	lea    eax,[ebp-0x14]
   238da:	50                   	push   eax
   238db:	8d 45 f0             	lea    eax,[ebp-0x10]
   238de:	50                   	push   eax
   238df:	68 04 00 00 80       	push   0x80000004
   238e4:	e8 a2 fa ff ff       	call   2338b <__get_cpuid>
   238e9:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:250
			printregs(eax, ebx, ecx, edx);
   238ec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   238ef:	89 c3                	mov    ebx,eax
   238f1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   238f4:	89 c1                	mov    ecx,eax
   238f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   238f9:	89 c2                	mov    edx,eax
   238fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   238fe:	53                   	push   ebx
   238ff:	51                   	push   ecx
   23900:	52                   	push   edx
   23901:	50                   	push   eax
   23902:	e8 94 00 00 00       	call   2399b <printregs>
   23907:	83 c4 10             	add    esp,0x10
   2390a:	e9 82 00 00 00       	jmp    23991 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:252
		}
	} else if(kcpuInfo.brand > 0) {
   2390f:	a1 b0 95 12 00       	mov    eax,ds:0x1295b0
   23914:	85 c0                	test   eax,eax
   23916:	7e 79                	jle    23991 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:253
		if(kcpuInfo.brand < 0x18) {
   23918:	a1 b0 95 12 00       	mov    eax,ds:0x1295b0
   2391d:	83 f8 17             	cmp    eax,0x17
   23920:	7f 5a                	jg     2397c <do_intel+0x540>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:254
			if(signature == 0x000006B1 || signature == 0x00000F13) {
   23922:	81 7d f4 b1 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x6b1
   23929:	74 09                	je     23934 <do_intel+0x4f8>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:254 (discriminator 1)
   2392b:	81 7d f4 13 0f 00 00 	cmp    DWORD PTR [ebp-0xc],0xf13
   23932:	75 24                	jne    23958 <do_intel+0x51c>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:255
				sprintf(kcpuInfo.brand_name,"%s\n", Intel_Other[kcpuInfo.brand]);
   23934:	a1 b0 95 12 00       	mov    eax,ds:0x1295b0
   23939:	8b 04 85 60 e2 02 00 	mov    eax,DWORD PTR [eax*4+0x2e260]
   23940:	83 ec 04             	sub    esp,0x4
   23943:	50                   	push   eax
   23944:	68 1d 45 08 00       	push   0x8451d
   23949:	68 b2 96 12 00       	push   0x1296b2
   2394e:	e8 a4 3f 00 00       	call   278f7 <sprintf>
   23953:	83 c4 10             	add    esp,0x10
   23956:	eb 39                	jmp    23991 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:257
			} else {
				sprintf(kcpuInfo.brand_name, "%s\n", Intel[kcpuInfo.brand]);
   23958:	a1 b0 95 12 00       	mov    eax,ds:0x1295b0
   2395d:	8b 04 85 00 e2 02 00 	mov    eax,DWORD PTR [eax*4+0x2e200]
   23964:	83 ec 04             	sub    esp,0x4
   23967:	50                   	push   eax
   23968:	68 1d 45 08 00       	push   0x8451d
   2396d:	68 b2 96 12 00       	push   0x1296b2
   23972:	e8 80 3f 00 00       	call   278f7 <sprintf>
   23977:	83 c4 10             	add    esp,0x10
   2397a:	eb 15                	jmp    23991 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:260
			}
		} else {
			sprintf(kcpuInfo.brand_name, "Reserved\n");
   2397c:	83 ec 08             	sub    esp,0x8
   2397f:	68 21 45 08 00       	push   0x84521
   23984:	68 b2 96 12 00       	push   0x1296b2
   23989:	e8 69 3f 00 00       	call   278f7 <sprintf>
   2398e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:263
		}
	}
	return 0;
   23991:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:264
}
   23996:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23999:	c9                   	leave  
   2399a:	c3                   	ret    

0002399b <printregs>:
printregs():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:267

/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
   2399b:	55                   	push   ebp
   2399c:	89 e5                	mov    ebp,esp
   2399e:	53                   	push   ebx
   2399f:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:270
	int j;
	char string[17];
	string[16] = '\0';
   239a2:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271
	for(j = 0; j < 4; j++) {
   239a6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   239ad:	eb 6a                	jmp    23a19 <printregs+0x7e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:272 (discriminator 3)
		string[j] = eax >> (8 * j);
   239af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   239b2:	c1 e0 03             	shl    eax,0x3
   239b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   239b8:	89 c1                	mov    ecx,eax
   239ba:	d3 fa                	sar    edx,cl
   239bc:	89 d0                	mov    eax,edx
   239be:	89 c1                	mov    ecx,eax
   239c0:	8d 55 e3             	lea    edx,[ebp-0x1d]
   239c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   239c6:	01 d0                	add    eax,edx
   239c8:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:273 (discriminator 3)
		string[j + 4] = ebx >> (8 * j);
   239ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   239cd:	83 c0 04             	add    eax,0x4
   239d0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   239d3:	c1 e2 03             	shl    edx,0x3
   239d6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
   239d9:	89 d1                	mov    ecx,edx
   239db:	d3 fb                	sar    ebx,cl
   239dd:	89 da                	mov    edx,ebx
   239df:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:274 (discriminator 3)
		string[j + 8] = ecx >> (8 * j);
   239e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   239e6:	83 c0 08             	add    eax,0x8
   239e9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   239ec:	c1 e2 03             	shl    edx,0x3
   239ef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
   239f2:	89 d1                	mov    ecx,edx
   239f4:	d3 fb                	sar    ebx,cl
   239f6:	89 da                	mov    edx,ebx
   239f8:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:275 (discriminator 3)
		string[j + 12] = edx >> (8 * j);
   239fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   239ff:	83 c0 0c             	add    eax,0xc
   23a02:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23a05:	c1 e2 03             	shl    edx,0x3
   23a08:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
   23a0b:	89 d1                	mov    ecx,edx
   23a0d:	d3 fb                	sar    ebx,cl
   23a0f:	89 da                	mov    edx,ebx
   23a11:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271 (discriminator 3)
/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
	int j;
	char string[17];
	string[16] = '\0';
	for(j = 0; j < 4; j++) {
   23a15:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271 (discriminator 1)
   23a19:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
   23a1d:	7e 90                	jle    239af <printregs+0x14>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:277
		string[j] = eax >> (8 * j);
		string[j + 4] = ebx >> (8 * j);
		string[j + 8] = ecx >> (8 * j);
		string[j + 12] = edx >> (8 * j);
	}
	sprintf(kcpuInfo.brand_name, "%s%s", kcpuInfo.brand_name, string);
   23a1f:	8d 45 e3             	lea    eax,[ebp-0x1d]
   23a22:	50                   	push   eax
   23a23:	68 b2 96 12 00       	push   0x1296b2
   23a28:	68 dc 45 08 00       	push   0x845dc
   23a2d:	68 b2 96 12 00       	push   0x1296b2
   23a32:	e8 c0 3e 00 00       	call   278f7 <sprintf>
   23a37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:278
}
   23a3a:	90                   	nop
   23a3b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23a3e:	c9                   	leave  
   23a3f:	c3                   	ret    

00023a40 <do_amd>:
do_amd():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:281

/* AMD-specific information */
int HIGH_CODE_SECTION do_amd(void) {
   23a40:	55                   	push   ebp
   23a41:	89 e5                	mov    ebp,esp
   23a43:	53                   	push   ebx
   23a44:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:283
	//printf("AMD Specific Features:\n");
	unsigned int extended=0, eax=0, ebx=0, ecx=0, edx=0, unused=0;
   23a47:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   23a4e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   23a55:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   23a5c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   23a63:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   23a6a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:284
	__get_cpuid(1, &eax, &unused, &unused, &unused);
   23a71:	8d 45 dc             	lea    eax,[ebp-0x24]
   23a74:	50                   	push   eax
   23a75:	8d 45 dc             	lea    eax,[ebp-0x24]
   23a78:	50                   	push   eax
   23a79:	8d 45 dc             	lea    eax,[ebp-0x24]
   23a7c:	50                   	push   eax
   23a7d:	8d 45 ec             	lea    eax,[ebp-0x14]
   23a80:	50                   	push   eax
   23a81:	6a 01                	push   0x1
   23a83:	e8 03 f9 ff ff       	call   2338b <__get_cpuid>
   23a88:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:285
	kcpuInfo.model = (eax >> 4) & 0xf;
   23a8b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23a8e:	c1 e8 04             	shr    eax,0x4
   23a91:	83 e0 0f             	and    eax,0xf
   23a94:	a3 a4 95 12 00       	mov    ds:0x1295a4,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:286
	kcpuInfo.family = (eax >> 8) & 0xf;
   23a99:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23a9c:	c1 e8 08             	shr    eax,0x8
   23a9f:	83 e0 0f             	and    eax,0xf
   23aa2:	a3 a0 95 12 00       	mov    ds:0x1295a0,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:287
	kcpuInfo.stepping = eax & 0xf;
   23aa7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23aaa:	83 e0 0f             	and    eax,0xf
   23aad:	a3 a8 95 12 00       	mov    ds:0x1295a8,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:289
	//reserved = eax >> 12;
	sprintf(kcpuInfo.vendor, "AMD");
   23ab2:	83 ec 08             	sub    esp,0x8
   23ab5:	68 e1 45 08 00       	push   0x845e1
   23aba:	68 b8 95 12 00       	push   0x1295b8
   23abf:	e8 33 3e 00 00       	call   278f7 <sprintf>
   23ac4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:290
	switch(kcpuInfo.family) 
   23ac7:	a1 a0 95 12 00       	mov    eax,ds:0x1295a0
   23acc:	83 f8 05             	cmp    eax,0x5
   23acf:	74 46                	je     23b17 <do_amd+0xd7>
   23ad1:	83 f8 05             	cmp    eax,0x5
   23ad4:	7f 0a                	jg     23ae0 <do_amd+0xa0>
   23ad6:	83 f8 04             	cmp    eax,0x4
   23ad9:	74 1c                	je     23af7 <do_amd+0xb7>
   23adb:	e9 a1 01 00 00       	jmp    23c81 <do_amd+0x241>
   23ae0:	83 f8 06             	cmp    eax,0x6
   23ae3:	0f 84 ad 00 00 00    	je     23b96 <do_amd+0x156>
   23ae9:	83 f8 0f             	cmp    eax,0xf
   23aec:	0f 84 37 01 00 00    	je     23c29 <do_amd+0x1e9>
   23af2:	e9 8a 01 00 00       	jmp    23c81 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:293
        {
		case 4:
		sprintf(kcpuInfo.model_name, "486 Model %d", kcpuInfo.model);
   23af7:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23afc:	83 ec 04             	sub    esp,0x4
   23aff:	50                   	push   eax
   23b00:	68 e5 45 08 00       	push   0x845e5
   23b05:	68 ea 95 12 00       	push   0x1295ea
   23b0a:	e8 e8 3d 00 00       	call   278f7 <sprintf>
   23b0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:294
		break;
   23b12:	e9 6a 01 00 00       	jmp    23c81 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:296
		case 5:
		switch(kcpuInfo.model) {
   23b17:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23b1c:	83 f8 09             	cmp    eax,0x9
   23b1f:	77 54                	ja     23b75 <do_amd+0x135>
   23b21:	8b 04 85 3c 47 08 00 	mov    eax,DWORD PTR [eax*4+0x8473c]
   23b28:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:304
			case 2:
			case 3:
			case 6:
			case 7:
			
                            sprintf(kcpuInfo.model_name, "K6 Model %d", kcpuInfo.model);
   23b2a:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23b2f:	83 ec 04             	sub    esp,0x4
   23b32:	50                   	push   eax
   23b33:	68 f2 45 08 00       	push   0x845f2
   23b38:	68 ea 95 12 00       	push   0x1295ea
   23b3d:	e8 b5 3d 00 00       	call   278f7 <sprintf>
   23b42:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:305
			break;
   23b45:	eb 4a                	jmp    23b91 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:307
			case 8:
			sprintf(kcpuInfo.model_name, "K6-2 Model 8");
   23b47:	83 ec 08             	sub    esp,0x8
   23b4a:	68 fe 45 08 00       	push   0x845fe
   23b4f:	68 ea 95 12 00       	push   0x1295ea
   23b54:	e8 9e 3d 00 00       	call   278f7 <sprintf>
   23b59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:308
			break;
   23b5c:	eb 33                	jmp    23b91 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:310
			case 9:
			sprintf(kcpuInfo.model_name, "K6-III Model 9");
   23b5e:	83 ec 08             	sub    esp,0x8
   23b61:	68 0b 46 08 00       	push   0x8460b
   23b66:	68 ea 95 12 00       	push   0x1295ea
   23b6b:	e8 87 3d 00 00       	call   278f7 <sprintf>
   23b70:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:311
			break;
   23b73:	eb 1c                	jmp    23b91 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:313
			default:
			sprintf(kcpuInfo.model_name, "K5/K6 Model %d", kcpuInfo.model);
   23b75:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23b7a:	83 ec 04             	sub    esp,0x4
   23b7d:	50                   	push   eax
   23b7e:	68 1a 46 08 00       	push   0x8461a
   23b83:	68 ea 95 12 00       	push   0x1295ea
   23b88:	e8 6a 3d 00 00       	call   278f7 <sprintf>
   23b8d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:314
			break;
   23b90:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:316
		}
		break;
   23b91:	e9 eb 00 00 00       	jmp    23c81 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:318
		case 6:
		switch(kcpuInfo.model) {
   23b96:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23b9b:	83 f8 07             	cmp    eax,0x7
   23b9e:	77 6b                	ja     23c0b <do_amd+0x1cb>
   23ba0:	8b 04 85 64 47 08 00 	mov    eax,DWORD PTR [eax*4+0x84764]
   23ba7:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:322
			case 1:
			case 2:
			case 4:
			sprintf(kcpuInfo.model_name, "Athlon Model %d", kcpuInfo.model);
   23ba9:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23bae:	83 ec 04             	sub    esp,0x4
   23bb1:	50                   	push   eax
   23bb2:	68 29 46 08 00       	push   0x84629
   23bb7:	68 ea 95 12 00       	push   0x1295ea
   23bbc:	e8 36 3d 00 00       	call   278f7 <sprintf>
   23bc1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:323
			break;
   23bc4:	eb 61                	jmp    23c27 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:325
			case 3:
			sprintf(kcpuInfo.model_name, "Duron Model 3");
   23bc6:	83 ec 08             	sub    esp,0x8
   23bc9:	68 39 46 08 00       	push   0x84639
   23bce:	68 ea 95 12 00       	push   0x1295ea
   23bd3:	e8 1f 3d 00 00       	call   278f7 <sprintf>
   23bd8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:326
			break;
   23bdb:	eb 4a                	jmp    23c27 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:328
			case 6:
			sprintf(kcpuInfo.model_name, "Athlon MP/Mobile Athlon Model 6");
   23bdd:	83 ec 08             	sub    esp,0x8
   23be0:	68 48 46 08 00       	push   0x84648
   23be5:	68 ea 95 12 00       	push   0x1295ea
   23bea:	e8 08 3d 00 00       	call   278f7 <sprintf>
   23bef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:329
			break;
   23bf2:	eb 33                	jmp    23c27 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:331
			case 7:
			sprintf(kcpuInfo.model_name, "Mobile Duron Model 7");
   23bf4:	83 ec 08             	sub    esp,0x8
   23bf7:	68 68 46 08 00       	push   0x84668
   23bfc:	68 ea 95 12 00       	push   0x1295ea
   23c01:	e8 f1 3c 00 00       	call   278f7 <sprintf>
   23c06:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:332
			break;
   23c09:	eb 1c                	jmp    23c27 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:334
			default:
			sprintf(kcpuInfo.model_name, "Duron/Athlon Model %d", kcpuInfo.model);
   23c0b:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23c10:	83 ec 04             	sub    esp,0x4
   23c13:	50                   	push   eax
   23c14:	68 7d 46 08 00       	push   0x8467d
   23c19:	68 ea 95 12 00       	push   0x1295ea
   23c1e:	e8 d4 3c 00 00       	call   278f7 <sprintf>
   23c23:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:335
			break;
   23c26:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:337
		}
		break;
   23c27:	eb 58                	jmp    23c81 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:339
                case 15:
                    switch(kcpuInfo.model)
   23c29:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23c2e:	83 f8 1e             	cmp    eax,0x1e
   23c31:	77 4d                	ja     23c80 <do_amd+0x240>
   23c33:	8b 04 85 84 47 08 00 	mov    eax,DWORD PTR [eax*4+0x84784]
   23c3a:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:343
                    {
                        case 1:
                        case 2:
                            sprintf(kcpuInfo.model_name, "FX Series/Opertron (Piledriver)");
   23c3c:	83 ec 08             	sub    esp,0x8
   23c3f:	68 94 46 08 00       	push   0x84694
   23c44:	68 ea 95 12 00       	push   0x1295ea
   23c49:	e8 a9 3c 00 00       	call   278f7 <sprintf>
   23c4e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:344
                            break;
   23c51:	eb 2d                	jmp    23c80 <do_amd+0x240>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:347
                        case 10:
                        case 13:
                            sprintf(kcpuInfo.model_name, "A/R-Series/Athlon/Semperon/Firepro (Piledriver)");
   23c53:	83 ec 08             	sub    esp,0x8
   23c56:	68 b4 46 08 00       	push   0x846b4
   23c5b:	68 ea 95 12 00       	push   0x1295ea
   23c60:	e8 92 3c 00 00       	call   278f7 <sprintf>
   23c65:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:348
                            break;
   23c68:	eb 16                	jmp    23c80 <do_amd+0x240>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:350
                        case 30:
                            sprintf(kcpuInfo.model_name, "Elite A-Series/R-Series/Opertron (SteamRoller)");
   23c6a:	83 ec 08             	sub    esp,0x8
   23c6d:	68 e4 46 08 00       	push   0x846e4
   23c72:	68 ea 95 12 00       	push   0x1295ea
   23c77:	e8 7b 3c 00 00       	call   278f7 <sprintf>
   23c7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:351
                            break;
   23c7f:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:353
                    }
                    break;
   23c80:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:355
	}
	__get_cpuid(0x80000000, &extended, &unused, &unused, &unused);
   23c81:	83 ec 0c             	sub    esp,0xc
   23c84:	8d 45 dc             	lea    eax,[ebp-0x24]
   23c87:	50                   	push   eax
   23c88:	8d 45 dc             	lea    eax,[ebp-0x24]
   23c8b:	50                   	push   eax
   23c8c:	8d 45 dc             	lea    eax,[ebp-0x24]
   23c8f:	50                   	push   eax
   23c90:	8d 45 f0             	lea    eax,[ebp-0x10]
   23c93:	50                   	push   eax
   23c94:	68 00 00 00 80       	push   0x80000000
   23c99:	e8 ed f6 ff ff       	call   2338b <__get_cpuid>
   23c9e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:356
	if(extended == 0) {
   23ca1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23ca4:	85 c0                	test   eax,eax
   23ca6:	75 0a                	jne    23cb2 <do_amd+0x272>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:357
		return 0;
   23ca8:	b8 00 00 00 00       	mov    eax,0x0
   23cad:	e9 a5 00 00 00       	jmp    23d57 <do_amd+0x317>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:359
	}
	if(extended >= 0x80000002) {
   23cb2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23cb5:	3d 01 00 00 80       	cmp    eax,0x80000001
   23cba:	76 52                	jbe    23d0e <do_amd+0x2ce>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   23cbc:	c7 45 f4 02 00 00 80 	mov    DWORD PTR [ebp-0xc],0x80000002
   23cc3:	eb 40                	jmp    23d05 <do_amd+0x2c5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:362 (discriminator 3)
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
   23cc5:	83 ec 0c             	sub    esp,0xc
   23cc8:	8d 45 e0             	lea    eax,[ebp-0x20]
   23ccb:	50                   	push   eax
   23ccc:	8d 45 e4             	lea    eax,[ebp-0x1c]
   23ccf:	50                   	push   eax
   23cd0:	8d 45 e8             	lea    eax,[ebp-0x18]
   23cd3:	50                   	push   eax
   23cd4:	8d 45 ec             	lea    eax,[ebp-0x14]
   23cd7:	50                   	push   eax
   23cd8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   23cdb:	e8 ab f6 ff ff       	call   2338b <__get_cpuid>
   23ce0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:363 (discriminator 3)
			printregs(eax, ebx, ecx, edx);
   23ce3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23ce6:	89 c3                	mov    ebx,eax
   23ce8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   23ceb:	89 c1                	mov    ecx,eax
   23ced:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23cf0:	89 c2                	mov    edx,eax
   23cf2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23cf5:	53                   	push   ebx
   23cf6:	51                   	push   ecx
   23cf7:	52                   	push   edx
   23cf8:	50                   	push   eax
   23cf9:	e8 9d fc ff ff       	call   2399b <printregs>
   23cfe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361 (discriminator 3)
	if(extended == 0) {
		return 0;
	}
	if(extended >= 0x80000002) {
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   23d01:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361 (discriminator 1)
   23d05:	81 7d f4 04 00 00 80 	cmp    DWORD PTR [ebp-0xc],0x80000004
   23d0c:	76 b7                	jbe    23cc5 <do_amd+0x285>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:366
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
			printregs(eax, ebx, ecx, edx);
		}
	}
	if(extended >= 0x80000007) {
   23d0e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23d11:	3d 06 00 00 80       	cmp    eax,0x80000006
   23d16:	76 3a                	jbe    23d52 <do_amd+0x312>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:367
		__get_cpuid(0x80000007, &unused, &unused, &unused, &edx);
   23d18:	83 ec 0c             	sub    esp,0xc
   23d1b:	8d 45 e0             	lea    eax,[ebp-0x20]
   23d1e:	50                   	push   eax
   23d1f:	8d 45 dc             	lea    eax,[ebp-0x24]
   23d22:	50                   	push   eax
   23d23:	8d 45 dc             	lea    eax,[ebp-0x24]
   23d26:	50                   	push   eax
   23d27:	8d 45 dc             	lea    eax,[ebp-0x24]
   23d2a:	50                   	push   eax
   23d2b:	68 07 00 00 80       	push   0x80000007
   23d30:	e8 56 f6 ff ff       	call   2338b <__get_cpuid>
   23d35:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:368
		if(edx & 1) {
   23d38:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23d3b:	83 e0 01             	and    eax,0x1
   23d3e:	85 c0                	test   eax,eax
   23d40:	74 10                	je     23d52 <do_amd+0x312>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:369
			printk("Temperature Sensing Diode Detected!\n");
   23d42:	83 ec 0c             	sub    esp,0xc
   23d45:	68 14 47 08 00       	push   0x84714
   23d4a:	e8 54 3b 00 00       	call   278a3 <printk>
   23d4f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:372
		}
	}
	return 0;
   23d52:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:373 (discriminator 1)
}
   23d57:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23d5a:	c9                   	leave  
   23d5b:	c3                   	ret    

00023d5c <print_e820_entry>:
print_e820_entry():
/home/yogi/src/os/chrisOS/src/init/e820.c:10

extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
   23d5c:	55                   	push   ebp
   23d5d:	89 e5                	mov    ebp,esp
   23d5f:	53                   	push   ebx
   23d60:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/init/e820.c:13
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   23d63:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
/home/yogi/src/os/chrisOS/src/init/e820.c:11
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   23d66:	83 f8 01             	cmp    eax,0x1
   23d69:	74 34                	je     23d9f <print_e820_entry+0x43>
/home/yogi/src/os/chrisOS/src/init/e820.c:13
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   23d6b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23d6e:	83 f8 02             	cmp    eax,0x2
   23d71:	74 25                	je     23d98 <print_e820_entry+0x3c>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 1)
   23d73:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23d76:	83 f8 03             	cmp    eax,0x3
   23d79:	74 16                	je     23d91 <print_e820_entry+0x35>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 3)
   23d7b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23d7e:	83 f8 04             	cmp    eax,0x4
   23d81:	75 07                	jne    23d8a <print_e820_entry+0x2e>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 5)
   23d83:	b8 00 49 08 00       	mov    eax,0x84900
   23d88:	eb 1a                	jmp    23da4 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 6)
   23d8a:	b8 04 49 08 00       	mov    eax,0x84904
   23d8f:	eb 13                	jmp    23da4 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 4)
   23d91:	b8 09 49 08 00       	mov    eax,0x84909
   23d96:	eb 0c                	jmp    23da4 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 2)
   23d98:	b8 0e 49 08 00       	mov    eax,0x8490e
   23d9d:	eb 05                	jmp    23da4 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 1)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   23d9f:	b8 16 49 08 00       	mov    eax,0x84916
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 3)
   23da4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/init/e820.c:12 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
   23da7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   23daa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23dad:	01 da                	add    edx,ebx
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 3)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   23daf:	8d 5a ff             	lea    ebx,[edx-0x1]
   23db2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23db5:	83 ec 0c             	sub    esp,0xc
   23db8:	50                   	push   eax
   23db9:	51                   	push   ecx
   23dba:	53                   	push   ebx
   23dbb:	52                   	push   edx
   23dbc:	68 1d 49 08 00       	push   0x8491d
   23dc1:	e8 dd 3a 00 00       	call   278a3 <printk>
   23dc6:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:14 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
}
   23dc9:	90                   	nop
   23dca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23dcd:	c9                   	leave  
   23dce:	c3                   	ret    

00023dcf <printE820Map>:
printE820Map():
/home/yogi/src/os/chrisOS/src/init/e820.c:17

void printE820Map()
{
   23dcf:	55                   	push   ebp
   23dd0:	89 e5                	mov    ebp,esp
   23dd2:	53                   	push   ebx
   23dd3:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/e820.c:18
    SMAP_entry* buffer=smap_table;
   23dd6:	a1 80 95 12 00       	mov    eax,ds:0x129580
   23ddb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:19
    int entryCount=kE820RecordCount;
   23dde:	0f b7 05 90 95 12 00 	movzx  eax,WORD PTR ds:0x129590
   23de5:	98                   	cwde   
   23de6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:20
    print_e820_map(smap_table, kE820RecordCount);
   23de9:	0f b7 05 90 95 12 00 	movzx  eax,WORD PTR ds:0x129590
   23df0:	0f bf d0             	movsx  edx,ax
   23df3:	a1 80 95 12 00       	mov    eax,ds:0x129580
   23df8:	83 ec 08             	sub    esp,0x8
   23dfb:	52                   	push   edx
   23dfc:	50                   	push   eax
   23dfd:	e8 b4 00 00 00       	call   23eb6 <print_e820_map>
   23e02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:21
        for (int cnt=0;cnt<entryCount;cnt++)
   23e05:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   23e0c:	e9 93 00 00 00       	jmp    23ea4 <printE820Map+0xd5>
/home/yogi/src/os/chrisOS/src/init/e820.c:23
        {
        print_e820_entry(buffer[cnt]);
   23e11:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23e14:	89 d0                	mov    eax,edx
   23e16:	01 c0                	add    eax,eax
   23e18:	01 d0                	add    eax,edx
   23e1a:	c1 e0 03             	shl    eax,0x3
   23e1d:	89 c2                	mov    edx,eax
   23e1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23e22:	01 d0                	add    eax,edx
   23e24:	83 ec 08             	sub    esp,0x8
   23e27:	83 ec 18             	sub    esp,0x18
   23e2a:	89 e2                	mov    edx,esp
   23e2c:	8b 08                	mov    ecx,DWORD PTR [eax]
   23e2e:	89 0a                	mov    DWORD PTR [edx],ecx
   23e30:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23e33:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23e36:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23e39:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23e3c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23e3f:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23e42:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23e45:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23e48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23e4b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23e4e:	e8 09 ff ff ff       	call   23d5c <print_e820_entry>
   23e53:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:24
        cnt++;
   23e56:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:25
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   23e5a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   23e5e:	7e 40                	jle    23ea0 <printE820Map+0xd1>
/home/yogi/src/os/chrisOS/src/init/e820.c:25 (discriminator 1)
   23e60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23e63:	8d 58 02             	lea    ebx,[eax+0x2]
   23e66:	e8 3c 45 ff ff       	call   183a7 <cursorGetMaxY>
   23e6b:	89 c1                	mov    ecx,eax
   23e6d:	89 d8                	mov    eax,ebx
   23e6f:	99                   	cdq    
   23e70:	f7 f9                	idiv   ecx
   23e72:	89 d0                	mov    eax,edx
   23e74:	85 c0                	test   eax,eax
   23e76:	75 28                	jne    23ea0 <printE820Map+0xd1>
/home/yogi/src/os/chrisOS/src/init/e820.c:27
        {
            puts("Paused, press a key to continue");
   23e78:	83 ec 0c             	sub    esp,0xc
   23e7b:	68 3c 49 08 00       	push   0x8493c
   23e80:	e8 e1 45 ff ff       	call   18466 <puts>
   23e85:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:28
            waitForKeyboardKey();
   23e88:	e8 ca d3 fe ff       	call   11257 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/e820.c:29
            cursorMoveTo(0,cursorGetPosY());
   23e8d:	e8 45 45 ff ff       	call   183d7 <cursorGetPosY>
   23e92:	83 ec 08             	sub    esp,0x8
   23e95:	50                   	push   eax
   23e96:	6a 00                	push   0x0
   23e98:	e8 9a 44 ff ff       	call   18337 <cursorMoveTo>
   23e9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:21 (discriminator 2)
void printE820Map()
{
    SMAP_entry* buffer=smap_table;
    int entryCount=kE820RecordCount;
    print_e820_map(smap_table, kE820RecordCount);
        for (int cnt=0;cnt<entryCount;cnt++)
   23ea0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:21 (discriminator 1)
   23ea4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23ea7:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   23eaa:	0f 8c 61 ff ff ff    	jl     23e11 <printE820Map+0x42>
/home/yogi/src/os/chrisOS/src/init/e820.c:32
            puts("Paused, press a key to continue");
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }
        }
}
   23eb0:	90                   	nop
   23eb1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23eb4:	c9                   	leave  
   23eb5:	c3                   	ret    

00023eb6 <print_e820_map>:
print_e820_map():
/home/yogi/src/os/chrisOS/src/init/e820.c:35

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
   23eb6:	55                   	push   ebp
   23eb7:	89 e5                	mov    ebp,esp
   23eb9:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/e820.c:36
    bool printOnlyUsable=entryCount>10?true:false;
   23ebc:	83 7d 0c 0a          	cmp    DWORD PTR [ebp+0xc],0xa
   23ec0:	0f 9f c0             	setg   al
   23ec3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/init/e820.c:38
    
        for (int cnt=0;cnt<entryCount;cnt++)
   23ec6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   23ecd:	e9 bc 00 00 00       	jmp    23f8e <print_e820_map+0xd8>
/home/yogi/src/os/chrisOS/src/init/e820.c:40
        {
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
   23ed2:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   23ed6:	83 f0 01             	xor    eax,0x1
   23ed9:	84 c0                	test   al,al
   23edb:	75 21                	jne    23efe <print_e820_map+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:40 (discriminator 1)
   23edd:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
   23ee1:	74 62                	je     23f45 <print_e820_map+0x8f>
/home/yogi/src/os/chrisOS/src/init/e820.c:40 (discriminator 2)
   23ee3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23ee6:	89 d0                	mov    eax,edx
   23ee8:	01 c0                	add    eax,eax
   23eea:	01 d0                	add    eax,edx
   23eec:	c1 e0 03             	shl    eax,0x3
   23eef:	89 c2                	mov    edx,eax
   23ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23ef4:	01 d0                	add    eax,edx
   23ef6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   23ef9:	83 f8 01             	cmp    eax,0x1
   23efc:	75 47                	jne    23f45 <print_e820_map+0x8f>
/home/yogi/src/os/chrisOS/src/init/e820.c:41
                print_e820_entry(buffer[cnt]);
   23efe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23f01:	89 d0                	mov    eax,edx
   23f03:	01 c0                	add    eax,eax
   23f05:	01 d0                	add    eax,edx
   23f07:	c1 e0 03             	shl    eax,0x3
   23f0a:	89 c2                	mov    edx,eax
   23f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23f0f:	01 d0                	add    eax,edx
   23f11:	83 ec 08             	sub    esp,0x8
   23f14:	83 ec 18             	sub    esp,0x18
   23f17:	89 e2                	mov    edx,esp
   23f19:	8b 08                	mov    ecx,DWORD PTR [eax]
   23f1b:	89 0a                	mov    DWORD PTR [edx],ecx
   23f1d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23f20:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23f23:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23f26:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23f29:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23f2c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23f2f:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23f32:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23f35:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23f38:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23f3b:	e8 1c fe ff ff       	call   23d5c <print_e820_entry>
   23f40:	83 c4 20             	add    esp,0x20
   23f43:	eb 45                	jmp    23f8a <print_e820_map+0xd4>
/home/yogi/src/os/chrisOS/src/init/e820.c:43
            else
                print_e820_entry(buffer[cnt]);
   23f45:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23f48:	89 d0                	mov    eax,edx
   23f4a:	01 c0                	add    eax,eax
   23f4c:	01 d0                	add    eax,edx
   23f4e:	c1 e0 03             	shl    eax,0x3
   23f51:	89 c2                	mov    edx,eax
   23f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23f56:	01 d0                	add    eax,edx
   23f58:	83 ec 08             	sub    esp,0x8
   23f5b:	83 ec 18             	sub    esp,0x18
   23f5e:	89 e2                	mov    edx,esp
   23f60:	8b 08                	mov    ecx,DWORD PTR [eax]
   23f62:	89 0a                	mov    DWORD PTR [edx],ecx
   23f64:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23f67:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23f6a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23f6d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23f70:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23f73:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23f76:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23f79:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23f7c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23f7f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23f82:	e8 d5 fd ff ff       	call   23d5c <print_e820_entry>
   23f87:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:38 (discriminator 2)

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
    bool printOnlyUsable=entryCount>10?true:false;
    
        for (int cnt=0;cnt<entryCount;cnt++)
   23f8a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:38 (discriminator 1)
   23f8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23f91:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   23f94:	0f 8c 38 ff ff ff    	jl     23ed2 <print_e820_map+0x1c>
/home/yogi/src/os/chrisOS/src/init/e820.c:45
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
                print_e820_entry(buffer[cnt]);
            else
                print_e820_entry(buffer[cnt]);
        }
}
   23f9a:	90                   	nop
   23f9b:	c9                   	leave  
   23f9c:	c3                   	ret    

00023f9d <sum_e820_usable_memory>:
sum_e820_usable_memory():
/home/yogi/src/os/chrisOS/src/init/e820.c:48

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
   23f9d:	55                   	push   ebp
   23f9e:	89 e5                	mov    ebp,esp
   23fa0:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:49
    qword lRetVal = 0;
   23fa3:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/init/e820.c:51
    
    for (int cnt=0;cnt<entryCount;cnt++)
   23faa:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   23fb1:	eb 38                	jmp    23feb <sum_e820_usable_memory+0x4e>
/home/yogi/src/os/chrisOS/src/init/e820.c:53
    {
        if (buffer[cnt].Type==1)    
   23fb3:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   23fb6:	89 d0                	mov    eax,edx
   23fb8:	01 c0                	add    eax,eax
   23fba:	01 d0                	add    eax,edx
   23fbc:	c1 e0 03             	shl    eax,0x3
   23fbf:	89 c2                	mov    edx,eax
   23fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23fc4:	01 d0                	add    eax,edx
   23fc6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   23fc9:	83 f8 01             	cmp    eax,0x1
   23fcc:	75 19                	jne    23fe7 <sum_e820_usable_memory+0x4a>
/home/yogi/src/os/chrisOS/src/init/e820.c:54
            lRetVal += buffer[cnt].LengthL;
   23fce:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   23fd1:	89 d0                	mov    eax,edx
   23fd3:	01 c0                	add    eax,eax
   23fd5:	01 d0                	add    eax,edx
   23fd7:	c1 e0 03             	shl    eax,0x3
   23fda:	89 c2                	mov    edx,eax
   23fdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23fdf:	01 d0                	add    eax,edx
   23fe1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   23fe4:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:51 (discriminator 2)

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
    qword lRetVal = 0;
    
    for (int cnt=0;cnt<entryCount;cnt++)
   23fe7:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:51 (discriminator 1)
   23feb:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   23fee:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   23ff1:	7c c0                	jl     23fb3 <sum_e820_usable_memory+0x16>
/home/yogi/src/os/chrisOS/src/init/e820.c:56
    {
        if (buffer[cnt].Type==1)    
            lRetVal += buffer[cnt].LengthL;
    }
    return lRetVal;
   23ff3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   23ff6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/init/e820.c:57
   23ffb:	c9                   	leave  
   23ffc:	c3                   	ret    
   23ffd:	66 90                	xchg   ax,ax
   23fff:	90                   	nop

00024000 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   24000:	55                   	push   ebp
   24001:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   24003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24006:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   2400d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24010:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   24013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24016:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:51
}
   24018:	90                   	nop
   24019:	5d                   	pop    ebp
   2401a:	c3                   	ret    

0002401b <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   2401b:	55                   	push   ebp
   2401c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   2401e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24021:	8b 00                	mov    eax,DWORD PTR [eax]
   24023:	85 c0                	test   eax,eax
   24025:	75 0d                	jne    24034 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:61
        list->head = node->next;
   24027:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2402a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2402d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24030:	89 10                	mov    DWORD PTR [eax],edx
   24032:	eb 0e                	jmp    24042 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:63
    else
        node->previous->next = node->next;
   24034:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24037:	8b 00                	mov    eax,DWORD PTR [eax]
   24039:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2403c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   2403f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:65

    if(!node->next)
   24042:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24045:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   24048:	85 c0                	test   eax,eax
   2404a:	75 0d                	jne    24059 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:66
        list->tail = node->previous;
   2404c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2404f:	8b 10                	mov    edx,DWORD PTR [eax]
   24051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24054:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   24057:	eb 0d                	jmp    24066 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   24059:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2405c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2405f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   24062:	8b 12                	mov    edx,DWORD PTR [edx]
   24064:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:69
}
   24066:	90                   	nop
   24067:	5d                   	pop    ebp
   24068:	c3                   	ret    

00024069 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   24069:	55                   	push   ebp
   2406a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   2406c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2406f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   24072:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:80
    new_node->next = node->next;
   24074:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24077:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2407a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2407d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:81
    if (!node->next)
   24080:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24083:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   24086:	85 c0                	test   eax,eax
   24088:	75 0b                	jne    24095 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:82
        list->tail = new_node;
   2408a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2408d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   24090:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   24093:	eb 0b                	jmp    240a0 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:84
    else
        node->next->previous = new_node;
   24095:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2409b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   2409e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:85
    node->next = new_node;
   240a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   240a3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   240a6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:86
}
   240a9:	90                   	nop
   240aa:	5d                   	pop    ebp
   240ab:	c3                   	ret    

000240ac <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   240ac:	55                   	push   ebp
   240ad:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   240af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   240b2:	8b 10                	mov    edx,DWORD PTR [eax]
   240b4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   240b7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:97
    new_node->next = node;
   240b9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   240bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   240bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:98
    if (!node->previous)
   240c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   240c5:	8b 00                	mov    eax,DWORD PTR [eax]
   240c7:	85 c0                	test   eax,eax
   240c9:	75 0a                	jne    240d5 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:99
        list->head = new_node;
   240cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   240ce:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   240d1:	89 10                	mov    DWORD PTR [eax],edx
   240d3:	eb 0b                	jmp    240e0 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:101
    else
        node->previous->next = new_node;
   240d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   240d8:	8b 00                	mov    eax,DWORD PTR [eax]
   240da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   240dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:102
    node->previous = new_node;
   240e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   240e3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   240e6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:103
}
   240e8:	90                   	nop
   240e9:	5d                   	pop    ebp
   240ea:	c3                   	ret    

000240eb <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   240eb:	55                   	push   ebp
   240ec:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   240ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   240f1:	8b 00                	mov    eax,DWORD PTR [eax]
   240f3:	85 c0                	test   eax,eax
   240f5:	75 26                	jne    2411d <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:114
    {
        list->head = node;
   240f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   240fa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   240fd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:115
        list->tail = node;
   240ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24102:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   24105:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:116
        node->previous = 0;
   24108:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2410b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:117
        node->next = 0;
   24111:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24114:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   2411b:	eb 14                	jmp    24131 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   2411d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24120:	8b 00                	mov    eax,DWORD PTR [eax]
   24122:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   24125:	50                   	push   eax
   24126:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   24129:	e8 7e ff ff ff       	call   240ac <fat_list_insert_before>
   2412e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:121
}
   24131:	90                   	nop
   24132:	c9                   	leave  
   24133:	c3                   	ret    

00024134 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   24134:	55                   	push   ebp
   24135:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   24137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2413a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2413d:	85 c0                	test   eax,eax
   2413f:	75 10                	jne    24151 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:131
        fat_list_insert_first(list, node);
   24141:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   24144:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   24147:	e8 9f ff ff ff       	call   240eb <fat_list_insert_first>
   2414c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   2414f:	eb 15                	jmp    24166 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   24151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   24157:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2415a:	50                   	push   eax
   2415b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2415e:	e8 06 ff ff ff       	call   24069 <fat_list_insert_after>
   24163:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:134
}
   24166:	90                   	nop
   24167:	c9                   	leave  
   24168:	c3                   	ret    

00024169 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   24169:	55                   	push   ebp
   2416a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   2416c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2416f:	8b 00                	mov    eax,DWORD PTR [eax]
   24171:	85 c0                	test   eax,eax
   24173:	0f 94 c0             	sete   al
   24176:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:143
}
   24179:	5d                   	pop    ebp
   2417a:	c3                   	ret    

0002417b <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   2417b:	55                   	push   ebp
   2417c:	89 e5                	mov    ebp,esp
   2417e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   24181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24184:	8b 00                	mov    eax,DWORD PTR [eax]
   24186:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:154
    if (node)
   24189:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   2418d:	74 0e                	je     2419d <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:155
        fat_list_remove(list, node);
   2418f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   24192:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   24195:	e8 81 fe ff ff       	call   2401b <fat_list_remove>
   2419a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:157

    return node;
   2419d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:158
}
   241a0:	c9                   	leave  
   241a1:	c3                   	ret    

000241a2 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   241a2:	55                   	push   ebp
   241a3:	89 e5                	mov    ebp,esp
   241a5:	83 ec 08             	sub    esp,0x8
   241a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   241ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   241ae:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   241b2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   241b5:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   241b9:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   241bd:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   241be:	90                   	nop
   241bf:	c9                   	leave  
   241c0:	c3                   	ret    

000241c1 <gdt_init>:
gdt_init():
/home/yogi/src/os/chrisOS/src/init/init.c:83
 3 (0x18) - data @ 0x0          <-- Non-kernel data (DS/ES/FS/GS/SS): Will always be 0x0
 4 (0x20) - code @ 0xC0000000   <-- will belong to the kernel proper
 5 (0x28) - code @ 0x0          <-- Non-kernel code (CS): Will always be 0x0
 */
void HIGH_CODE_SECTION gdt_init()
{
   241c1:	55                   	push   ebp
   241c2:	89 e5                	mov    ebp,esp
   241c4:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:84
    gdtEntry(0x1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE | 0x10,       //Kernel code segment starting at 0x00
   241c7:	83 ec 08             	sub    esp,0x8
   241ca:	6a 01                	push   0x1
   241cc:	6a c0                	push   0xffffffc0
   241ce:	6a 98                	push   0xffffff98
   241d0:	68 ff ff 0f 00       	push   0xfffff
   241d5:	6a 00                	push   0x0
   241d7:	6a 01                	push   0x1
   241d9:	e8 90 4b ff ff       	call   18d6e <gdtEntry>
   241de:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:86
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE | 0x10,       //Kernel data segment starting at 0x0
   241e1:	83 ec 08             	sub    esp,0x8
   241e4:	6a 01                	push   0x1
   241e6:	6a c0                	push   0xffffffc0
   241e8:	6a 92                	push   0xffffff92
   241ea:	68 ff ff 0f 00       	push   0xfffff
   241ef:	6a 00                	push   0x0
   241f1:	6a 02                	push   0x2
   241f3:	e8 76 4b ff ff       	call   18d6e <gdtEntry>
   241f8:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:88
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x3, 0, 0xFFFFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE | 0x10,    //18 - kernel data segment starting at 0x0 ***Need to change this to KERNEL_PAGED_BASE_ADDRESS base
   241fb:	83 ec 08             	sub    esp,0x8
   241fe:	6a 01                	push   0x1
   24200:	6a c0                	push   0xffffffc0
   24202:	6a 92                	push   0xffffff92
   24204:	6a ff                	push   0xffffffff
   24206:	6a 00                	push   0x0
   24208:	6a 03                	push   0x3
   2420a:	e8 5f 4b ff ff       	call   18d6e <gdtEntry>
   2420f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:90
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x4, KERNEL_PAGED_BASE_ADDRESS , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE | 0x10,  //20 - Kernel code segment (main) starting at 0xC0000000
   24212:	83 ec 08             	sub    esp,0x8
   24215:	6a 01                	push   0x1
   24217:	6a c0                	push   0xffffffc0
   24219:	6a 98                	push   0xffffff98
   2421b:	68 ff ff 0f 00       	push   0xfffff
   24220:	68 00 00 00 c0       	push   0xc0000000
   24225:	6a 04                	push   0x4
   24227:	e8 42 4b ff ff       	call   18d6e <gdtEntry>
   2422c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:92
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x5, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE | GDT_GROW_DOWN | 0x10,       //kernel data segment starting at 0x0
   2422f:	83 ec 08             	sub    esp,0x8
   24232:	6a 01                	push   0x1
   24234:	6a c0                	push   0xffffffc0
   24236:	6a 9c                	push   0xffffff9c
   24238:	68 ff ff 0f 00       	push   0xfffff
   2423d:	6a 00                	push   0x0
   2423f:	6a 05                	push   0x5
   24241:	e8 28 4b ff ff       	call   18d6e <gdtEntry>
   24246:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:95
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x6, 0, 0xFFFFFFFF, GDT_PRESENT | GDT_DPL3 | GDT_DATA | GDT_WRITABLE | 0x10,    //30 (33) - user data segment starting at 0x0
   24249:	83 ec 08             	sub    esp,0x8
   2424c:	6a 01                	push   0x1
   2424e:	6a c0                	push   0xffffffc0
   24250:	6a f2                	push   0xfffffff2
   24252:	6a ff                	push   0xffffffff
   24254:	6a 00                	push   0x0
   24256:	6a 06                	push   0x6
   24258:	e8 11 4b ff ff       	call   18d6e <gdtEntry>
   2425d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:98
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x7, 0 , 0xFFFFF, GDT_PRESENT | GDT_DPL3 | GDT_CODE | GDT_READABLE  | 0x10,       //38 (3b) - user code segment starting at 0x0
   24260:	83 ec 08             	sub    esp,0x8
   24263:	6a 01                	push   0x1
   24265:	6a c0                	push   0xffffffc0
   24267:	6a f8                	push   0xfffffff8
   24269:	68 ff ff 0f 00       	push   0xfffff
   2426e:	6a 00                	push   0x0
   24270:	6a 07                	push   0x7
   24272:	e8 f7 4a ff ff       	call   18d6e <gdtEntry>
   24277:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:101
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x8, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL3 | GDT_DATA | GDT_WRITABLE | GDT_GROW_DOWN | 0x10,       //40 (43) - user stack segment starting at 0x0
   2427a:	83 ec 08             	sub    esp,0x8
   2427d:	6a 01                	push   0x1
   2427f:	6a c0                	push   0xffffffc0
   24281:	6a f6                	push   0xfffffff6
   24283:	68 ff ff 0f 00       	push   0xfffff
   24288:	6a 00                	push   0x0
   2428a:	6a 08                	push   0x8
   2428c:	e8 dd 4a ff ff       	call   18d6e <gdtEntry>
   24291:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:104
          GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x20, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE | 0x10,  //100 - Kernel code segment will always start at 0
   24294:	83 ec 08             	sub    esp,0x8
   24297:	6a 01                	push   0x1
   24299:	6a c0                	push   0xffffffc0
   2429b:	6a 98                	push   0xffffff98
   2429d:	68 ff ff 0f 00       	push   0xfffff
   242a2:	6a 00                	push   0x0
   242a4:	6a 20                	push   0x20
   242a6:	e8 c3 4a ff ff       	call   18d6e <gdtEntry>
   242ab:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:107
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x21, 0x0, 0xFFFFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE  | 0x10/*| GDT_GROW_DOWN*/,       //108 Kernel stack segment starting at 0x0
   242ae:	83 ec 08             	sub    esp,0x8
   242b1:	6a 01                	push   0x1
   242b3:	6a c0                	push   0xffffffc0
   242b5:	6a 92                	push   0xffffff92
   242b7:	6a ff                	push   0xffffffff
   242b9:	6a 00                	push   0x0
   242bb:	6a 21                	push   0x21
   242bd:	e8 ac 4a ff ff       	call   18d6e <gdtEntry>
   242c2:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:111
              GDT_GRANULAR | GDT_32BIT,true);
    
    
    gdtEntryRM(1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   242c5:	83 ec 0c             	sub    esp,0xc
   242c8:	68 80 00 00 00       	push   0x80
   242cd:	68 88 00 00 00       	push   0x88
   242d2:	68 ff ff 0f 00       	push   0xfffff
   242d7:	6a 00                	push   0x0
   242d9:	6a 01                	push   0x1
   242db:	e8 5e 4b ff ff       	call   18e3e <gdtEntryRM>
   242e0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:113
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   242e3:	83 ec 0c             	sub    esp,0xc
   242e6:	68 80 00 00 00       	push   0x80
   242eb:	68 82 00 00 00       	push   0x82
   242f0:	68 ff ff 0f 00       	push   0xfffff
   242f5:	6a 00                	push   0x0
   242f7:	6a 02                	push   0x2
   242f9:	e8 40 4b ff ff       	call   18e3e <gdtEntryRM>
   242fe:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:115
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(3, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_WRITABLE,
   24301:	83 ec 0c             	sub    esp,0xc
   24304:	68 c0 00 00 00       	push   0xc0
   24309:	68 8a 00 00 00       	push   0x8a
   2430e:	68 ff ff 0f 00       	push   0xfffff
   24313:	6a 00                	push   0x0
   24315:	6a 03                	push   0x3
   24317:	e8 22 4b ff ff       	call   18e3e <gdtEntryRM>
   2431c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:118
              GDT_GRANULAR | GDT_32BIT);

    kernelGDT.limit = 0x7ff; // (sizeof(sGDT) * GDT_ENTRIES) - 1;
   2431f:	66 c7 05 88 99 12 00 	mov    WORD PTR ds:0x129988,0x7ff
   24326:	ff 07 
/home/yogi/src/os/chrisOS/src/init/init.c:119
    kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   24328:	c7 05 8a 99 12 00 00 	mov    DWORD PTR ds:0x12998a,0x164800
   2432f:	48 16 00 
/home/yogi/src/os/chrisOS/src/init/init.c:120
    rmGdtp.limit = sizeof(sGDT) * (GDT_TABLE_SIZE*8) - 1;
   24332:	66 c7 05 78 99 12 00 	mov    WORD PTR ds:0x129978,0xffff
   24339:	ff ff 
/home/yogi/src/os/chrisOS/src/init/init.c:121
    rmGdtp.base = (unsigned int)rmGdt;
   2433b:	a1 80 99 12 00       	mov    eax,ds:0x129980
   24340:	a3 7a 99 12 00       	mov    ds:0x12997a,eax
/home/yogi/src/os/chrisOS/src/init/init.c:122
    set_gdt(&kernelGDT);
   24345:	83 ec 0c             	sub    esp,0xc
   24348:	68 88 99 12 00       	push   0x129988
   2434d:	e8 eb cd fd ff       	call   113d <set_gdt>
   24352:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:123
}
   24355:	90                   	nop
   24356:	c9                   	leave  
   24357:	c3                   	ret    

00024358 <quietHardware>:
quietHardware():
/home/yogi/src/os/chrisOS/src/init/init.c:126

void HIGH_CODE_SECTION quietHardware()
{
   24358:	55                   	push   ebp
   24359:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/init.c:127
    outb(0xa1, 0x7f);
   2435b:	6a 7f                	push   0x7f
   2435d:	68 a1 00 00 00       	push   0xa1
   24362:	e8 3b fe ff ff       	call   241a2 <outb>
   24367:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:128
    outb(0x21, 0xff);
   2436a:	68 ff 00 00 00       	push   0xff
   2436f:	6a 21                	push   0x21
   24371:	e8 2c fe ff ff       	call   241a2 <outb>
   24376:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:129
}
   24379:	90                   	nop
   2437a:	c9                   	leave  
   2437b:	c3                   	ret    

0002437c <doHDSetup>:
doHDSetup():
/home/yogi/src/os/chrisOS/src/init/init.c:132

void doHDSetup()
{
   2437c:	55                   	push   ebp
   2437d:	89 e5                	mov    ebp,esp
   2437f:	57                   	push   edi
   24380:	56                   	push   esi
   24381:	53                   	push   ebx
   24382:	81 ec 2c 08 00 00    	sub    esp,0x82c
/home/yogi/src/os/chrisOS/src/init/init.c:133
    printk("ATA: Scanning for hard drives on primary bus ...\n");
   24388:	83 ec 0c             	sub    esp,0xc
   2438b:	68 40 4b 08 00       	push   0x84b40
   24390:	e8 0e 35 00 00       	call   278a3 <printk>
   24395:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:134
    ataScanForHarddrives();
   24398:	e8 72 e8 ff ff       	call   22c0f <ataScanForHarddrives>
/home/yogi/src/os/chrisOS/src/init/init.c:136
    char* p1[512];
    memset(p1,0,512);
   2439d:	83 ec 04             	sub    esp,0x4
   243a0:	68 00 02 00 00       	push   0x200
   243a5:	6a 00                	push   0x0
   243a7:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   243ad:	50                   	push   eax
   243ae:	e8 8a 12 00 00       	call   2563d <memset>
   243b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:138
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
   243b6:	a1 00 98 12 00       	mov    eax,ds:0x129800
   243bb:	05 00 02 00 00       	add    eax,0x200
   243c0:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:139
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   243c6:	a1 00 98 12 00       	mov    eax,ds:0x129800
   243cb:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   243d2:	3c 01                	cmp    al,0x1
   243d4:	75 14                	jne    243ea <doHDSetup+0x6e>
/home/yogi/src/os/chrisOS/src/init/init.c:139 (discriminator 1)
   243d6:	83 ec 0c             	sub    esp,0xc
   243d9:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   243df:	50                   	push   eax
   243e0:	e8 d3 39 00 00       	call   27db8 <strtrim>
   243e5:	83 c4 10             	add    esp,0x10
   243e8:	eb 05                	jmp    243ef <doHDSetup+0x73>
/home/yogi/src/os/chrisOS/src/init/init.c:139 (discriminator 2)
   243ea:	b8 72 4b 08 00       	mov    eax,0x84b72
/home/yogi/src/os/chrisOS/src/init/init.c:139 (discriminator 4)
   243ef:	83 ec 08             	sub    esp,0x8
   243f2:	50                   	push   eax
   243f3:	68 78 4b 08 00       	push   0x84b78
   243f8:	e8 a6 34 00 00       	call   278a3 <printk>
   243fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:140 (discriminator 4)
    if (kATADeviceInfo[0].ATADeviceAvailable)
   24400:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24405:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   2440c:	84 c0                	test   al,al
   2440e:	0f 84 92 00 00 00    	je     244a6 <doHDSetup+0x12a>
/home/yogi/src/os/chrisOS/src/init/init.c:146
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
   24414:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24419:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:142
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   24420:	84 c0                	test   al,al
   24422:	74 07                	je     2442b <doHDSetup+0xaf>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 1)
   24424:	bf 89 4b 08 00       	mov    edi,0x84b89
   24429:	eb 05                	jmp    24430 <doHDSetup+0xb4>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 2)
   2442b:	bf 8e 4b 08 00       	mov    edi,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:145 (discriminator 4)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
   24430:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24435:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 4)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   2443c:	84 c0                	test   al,al
   2443e:	74 07                	je     24447 <doHDSetup+0xcb>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 5)
   24440:	be 8f 4b 08 00       	mov    esi,0x84b8f
   24445:	eb 05                	jmp    2444c <doHDSetup+0xd0>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 6)
   24447:	be 8e 4b 08 00       	mov    esi,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:144 (discriminator 8)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
   2444c:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24451:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 8)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   24458:	84 c0                	test   al,al
   2445a:	74 07                	je     24463 <doHDSetup+0xe7>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 9)
   2445c:	bb 96 4b 08 00       	mov    ebx,0x84b96
   24461:	eb 05                	jmp    24468 <doHDSetup+0xec>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 10)
   24463:	bb 8e 4b 08 00       	mov    ebx,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:143 (discriminator 12)
                kATADeviceInfo[0].sectorSize,
   24468:	a1 00 98 12 00       	mov    eax,ds:0x129800
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 12)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   2446d:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24473:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24479:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   2447f:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24485:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   2448b:	0f af d1             	imul   edx,ecx
   2448e:	c1 ea 14             	shr    edx,0x14
   24491:	83 ec 08             	sub    esp,0x8
   24494:	57                   	push   edi
   24495:	56                   	push   esi
   24496:	53                   	push   ebx
   24497:	50                   	push   eax
   24498:	52                   	push   edx
   24499:	68 9b 4b 08 00       	push   0x84b9b
   2449e:	e8 00 34 00 00       	call   278a3 <printk>
   244a3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:148
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
   244a6:	a1 00 98 12 00       	mov    eax,ds:0x129800
   244ab:	05 73 02 00 00       	add    eax,0x273
   244b0:	05 00 02 00 00       	add    eax,0x200
   244b5:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:149
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   244bb:	a1 00 98 12 00       	mov    eax,ds:0x129800
   244c0:	05 73 02 00 00       	add    eax,0x273
   244c5:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   244cc:	3c 01                	cmp    al,0x1
   244ce:	75 14                	jne    244e4 <doHDSetup+0x168>
/home/yogi/src/os/chrisOS/src/init/init.c:149 (discriminator 1)
   244d0:	83 ec 0c             	sub    esp,0xc
   244d3:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   244d9:	50                   	push   eax
   244da:	e8 d9 38 00 00       	call   27db8 <strtrim>
   244df:	83 c4 10             	add    esp,0x10
   244e2:	eb 05                	jmp    244e9 <doHDSetup+0x16d>
/home/yogi/src/os/chrisOS/src/init/init.c:149 (discriminator 2)
   244e4:	b8 72 4b 08 00       	mov    eax,0x84b72
/home/yogi/src/os/chrisOS/src/init/init.c:149 (discriminator 4)
   244e9:	83 ec 08             	sub    esp,0x8
   244ec:	50                   	push   eax
   244ed:	68 b0 4b 08 00       	push   0x84bb0
   244f2:	e8 ac 33 00 00       	call   278a3 <printk>
   244f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:150 (discriminator 4)
    if (kATADeviceInfo[1].ATADeviceAvailable)
   244fa:	a1 00 98 12 00       	mov    eax,ds:0x129800
   244ff:	05 73 02 00 00       	add    eax,0x273
   24504:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   2450b:	84 c0                	test   al,al
   2450d:	0f 84 b2 00 00 00    	je     245c5 <doHDSetup+0x249>
/home/yogi/src/os/chrisOS/src/init/init.c:156
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
   24513:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24518:	05 73 02 00 00       	add    eax,0x273
   2451d:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:152
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   24524:	84 c0                	test   al,al
   24526:	74 07                	je     2452f <doHDSetup+0x1b3>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 1)
   24528:	bf 89 4b 08 00       	mov    edi,0x84b89
   2452d:	eb 05                	jmp    24534 <doHDSetup+0x1b8>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 2)
   2452f:	bf 8e 4b 08 00       	mov    edi,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:155 (discriminator 4)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
   24534:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24539:	05 73 02 00 00       	add    eax,0x273
   2453e:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 4)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   24545:	84 c0                	test   al,al
   24547:	74 07                	je     24550 <doHDSetup+0x1d4>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 5)
   24549:	be 8f 4b 08 00       	mov    esi,0x84b8f
   2454e:	eb 05                	jmp    24555 <doHDSetup+0x1d9>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 6)
   24550:	be 8e 4b 08 00       	mov    esi,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:154 (discriminator 8)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
   24555:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2455a:	05 73 02 00 00       	add    eax,0x273
   2455f:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 8)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   24566:	84 c0                	test   al,al
   24568:	74 07                	je     24571 <doHDSetup+0x1f5>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 9)
   2456a:	bb 96 4b 08 00       	mov    ebx,0x84b96
   2456f:	eb 05                	jmp    24576 <doHDSetup+0x1fa>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 10)
   24571:	bb 8e 4b 08 00       	mov    ebx,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:153 (discriminator 12)
                kATADeviceInfo[1].sectorSize,
   24576:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2457b:	05 73 02 00 00       	add    eax,0x273
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 12)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   24580:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24586:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   2458c:	81 c2 73 02 00 00    	add    edx,0x273
   24592:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   24598:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   2459e:	81 c2 73 02 00 00    	add    edx,0x273
   245a4:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   245aa:	0f af d1             	imul   edx,ecx
   245ad:	c1 ea 14             	shr    edx,0x14
   245b0:	83 ec 08             	sub    esp,0x8
   245b3:	57                   	push   edi
   245b4:	56                   	push   esi
   245b5:	53                   	push   ebx
   245b6:	50                   	push   eax
   245b7:	52                   	push   edx
   245b8:	68 c1 4b 08 00       	push   0x84bc1
   245bd:	e8 e1 32 00 00       	call   278a3 <printk>
   245c2:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:158
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
    }
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
   245c5:	83 ec 0c             	sub    esp,0xc
   245c8:	68 d8 4b 08 00       	push   0x84bd8
   245cd:	e8 d1 32 00 00       	call   278a3 <printk>
   245d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:159
    *p1=kATADeviceInfo[2].ATADeviceModel;
   245d5:	a1 00 98 12 00       	mov    eax,ds:0x129800
   245da:	05 e6 04 00 00       	add    eax,0x4e6
   245df:	05 00 02 00 00       	add    eax,0x200
   245e4:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:160
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   245ea:	a1 00 98 12 00       	mov    eax,ds:0x129800
   245ef:	05 e6 04 00 00       	add    eax,0x4e6
   245f4:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   245fb:	3c 01                	cmp    al,0x1
   245fd:	75 14                	jne    24613 <doHDSetup+0x297>
/home/yogi/src/os/chrisOS/src/init/init.c:160 (discriminator 1)
   245ff:	83 ec 0c             	sub    esp,0xc
   24602:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24608:	50                   	push   eax
   24609:	e8 aa 37 00 00       	call   27db8 <strtrim>
   2460e:	83 c4 10             	add    esp,0x10
   24611:	eb 05                	jmp    24618 <doHDSetup+0x29c>
/home/yogi/src/os/chrisOS/src/init/init.c:160 (discriminator 2)
   24613:	b8 72 4b 08 00       	mov    eax,0x84b72
/home/yogi/src/os/chrisOS/src/init/init.c:160 (discriminator 4)
   24618:	83 ec 08             	sub    esp,0x8
   2461b:	50                   	push   eax
   2461c:	68 78 4b 08 00       	push   0x84b78
   24621:	e8 7d 32 00 00       	call   278a3 <printk>
   24626:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:161 (discriminator 4)
    if (kATADeviceInfo[2].ATADeviceAvailable)
   24629:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2462e:	05 e6 04 00 00       	add    eax,0x4e6
   24633:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   2463a:	84 c0                	test   al,al
   2463c:	0f 84 b2 00 00 00    	je     246f4 <doHDSetup+0x378>
/home/yogi/src/os/chrisOS/src/init/init.c:167
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
   24642:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24647:	05 e6 04 00 00       	add    eax,0x4e6
   2464c:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:163
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24653:	84 c0                	test   al,al
   24655:	74 07                	je     2465e <doHDSetup+0x2e2>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 1)
   24657:	bf 89 4b 08 00       	mov    edi,0x84b89
   2465c:	eb 05                	jmp    24663 <doHDSetup+0x2e7>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 2)
   2465e:	bf 8e 4b 08 00       	mov    edi,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:166 (discriminator 4)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
   24663:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24668:	05 e6 04 00 00       	add    eax,0x4e6
   2466d:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 4)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24674:	84 c0                	test   al,al
   24676:	74 07                	je     2467f <doHDSetup+0x303>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 5)
   24678:	be 8f 4b 08 00       	mov    esi,0x84b8f
   2467d:	eb 05                	jmp    24684 <doHDSetup+0x308>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 6)
   2467f:	be 8e 4b 08 00       	mov    esi,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:165 (discriminator 8)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
   24684:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24689:	05 e6 04 00 00       	add    eax,0x4e6
   2468e:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 8)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24695:	84 c0                	test   al,al
   24697:	74 07                	je     246a0 <doHDSetup+0x324>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 9)
   24699:	bb 96 4b 08 00       	mov    ebx,0x84b96
   2469e:	eb 05                	jmp    246a5 <doHDSetup+0x329>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 10)
   246a0:	bb 8e 4b 08 00       	mov    ebx,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:164 (discriminator 12)
                kATADeviceInfo[2].sectorSize,
   246a5:	a1 00 98 12 00       	mov    eax,ds:0x129800
   246aa:	05 e6 04 00 00       	add    eax,0x4e6
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 12)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   246af:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   246b5:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   246bb:	81 c2 e6 04 00 00    	add    edx,0x4e6
   246c1:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   246c7:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   246cd:	81 c2 e6 04 00 00    	add    edx,0x4e6
   246d3:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   246d9:	0f af d1             	imul   edx,ecx
   246dc:	c1 ea 14             	shr    edx,0x14
   246df:	83 ec 08             	sub    esp,0x8
   246e2:	57                   	push   edi
   246e3:	56                   	push   esi
   246e4:	53                   	push   ebx
   246e5:	50                   	push   eax
   246e6:	52                   	push   edx
   246e7:	68 9b 4b 08 00       	push   0x84b9b
   246ec:	e8 b2 31 00 00       	call   278a3 <printk>
   246f1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:169
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
   246f4:	a1 00 98 12 00       	mov    eax,ds:0x129800
   246f9:	05 59 07 00 00       	add    eax,0x759
   246fe:	05 00 02 00 00       	add    eax,0x200
   24703:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:170
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24709:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2470e:	05 59 07 00 00       	add    eax,0x759
   24713:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   2471a:	3c 01                	cmp    al,0x1
   2471c:	75 14                	jne    24732 <doHDSetup+0x3b6>
/home/yogi/src/os/chrisOS/src/init/init.c:170 (discriminator 1)
   2471e:	83 ec 0c             	sub    esp,0xc
   24721:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24727:	50                   	push   eax
   24728:	e8 8b 36 00 00       	call   27db8 <strtrim>
   2472d:	83 c4 10             	add    esp,0x10
   24730:	eb 05                	jmp    24737 <doHDSetup+0x3bb>
/home/yogi/src/os/chrisOS/src/init/init.c:170 (discriminator 2)
   24732:	b8 72 4b 08 00       	mov    eax,0x84b72
/home/yogi/src/os/chrisOS/src/init/init.c:170 (discriminator 4)
   24737:	83 ec 08             	sub    esp,0x8
   2473a:	50                   	push   eax
   2473b:	68 b0 4b 08 00       	push   0x84bb0
   24740:	e8 5e 31 00 00       	call   278a3 <printk>
   24745:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:171 (discriminator 4)
    if (kATADeviceInfo[3].ATADeviceAvailable)
   24748:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2474d:	05 59 07 00 00       	add    eax,0x759
   24752:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24759:	84 c0                	test   al,al
   2475b:	0f 84 b2 00 00 00    	je     24813 <doHDSetup+0x497>
/home/yogi/src/os/chrisOS/src/init/init.c:177
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
   24761:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24766:	05 59 07 00 00       	add    eax,0x759
   2476b:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:173
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24772:	84 c0                	test   al,al
   24774:	74 07                	je     2477d <doHDSetup+0x401>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 1)
   24776:	bf 89 4b 08 00       	mov    edi,0x84b89
   2477b:	eb 05                	jmp    24782 <doHDSetup+0x406>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 2)
   2477d:	bf 8e 4b 08 00       	mov    edi,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:176 (discriminator 4)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
   24782:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24787:	05 59 07 00 00       	add    eax,0x759
   2478c:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 4)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24793:	84 c0                	test   al,al
   24795:	74 07                	je     2479e <doHDSetup+0x422>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 5)
   24797:	be 8f 4b 08 00       	mov    esi,0x84b8f
   2479c:	eb 05                	jmp    247a3 <doHDSetup+0x427>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 6)
   2479e:	be 8e 4b 08 00       	mov    esi,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 8)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
   247a3:	a1 00 98 12 00       	mov    eax,ds:0x129800
   247a8:	05 59 07 00 00       	add    eax,0x759
   247ad:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 8)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   247b4:	84 c0                	test   al,al
   247b6:	74 07                	je     247bf <doHDSetup+0x443>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 9)
   247b8:	bb 96 4b 08 00       	mov    ebx,0x84b96
   247bd:	eb 05                	jmp    247c4 <doHDSetup+0x448>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 10)
   247bf:	bb 8e 4b 08 00       	mov    ebx,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:174 (discriminator 12)
                kATADeviceInfo[3].sectorSize,
   247c4:	a1 00 98 12 00       	mov    eax,ds:0x129800
   247c9:	05 59 07 00 00       	add    eax,0x759
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 12)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   247ce:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   247d4:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   247da:	81 c2 59 07 00 00    	add    edx,0x759
   247e0:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   247e6:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   247ec:	81 c2 59 07 00 00    	add    edx,0x759
   247f2:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   247f8:	0f af d1             	imul   edx,ecx
   247fb:	c1 ea 14             	shr    edx,0x14
   247fe:	83 ec 08             	sub    esp,0x8
   24801:	57                   	push   edi
   24802:	56                   	push   esi
   24803:	53                   	push   ebx
   24804:	50                   	push   eax
   24805:	52                   	push   edx
   24806:	68 c1 4b 08 00       	push   0x84bc1
   2480b:	e8 93 30 00 00       	call   278a3 <printk>
   24810:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:179
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
   24813:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   24818:	83 ec 04             	sub    esp,0x4
   2481b:	50                   	push   eax
   2481c:	68 0c 4c 08 00       	push   0x84c0c
   24821:	68 e0 8f 09 00       	push   0x98fe0
   24826:	e8 e0 01 00 00       	call   24a0b <ParamExists>
   2482b:	83 c4 10             	add    esp,0x10
   2482e:	84 c0                	test   al,al
   24830:	74 15                	je     24847 <doHDSetup+0x4cb>
/home/yogi/src/os/chrisOS/src/init/init.c:180
        printk("AHCI: No scanning per parameter 'noahci'\n");
   24832:	83 ec 0c             	sub    esp,0xc
   24835:	68 14 4c 08 00       	push   0x84c14
   2483a:	e8 64 30 00 00       	call   278a3 <printk>
   2483f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:200
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   24842:	e9 bb 01 00 00       	jmp    24a02 <doHDSetup+0x686>
/home/yogi/src/os/chrisOS/src/init/init.c:183
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
        printk("AHCI: No scanning per parameter 'noahci'\n");
    else
    {
        printk("AHCI: Initializing ...\n");
   24847:	83 ec 0c             	sub    esp,0xc
   2484a:	68 3e 4c 08 00       	push   0x84c3e
   2484f:	e8 4f 30 00 00       	call   278a3 <printk>
   24854:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:184
        ahciInit();
   24857:	e8 b0 0e ff ff       	call   1570c <ahciInit>
/home/yogi/src/os/chrisOS/src/init/init.c:185
        printk(" done\n");
   2485c:	83 ec 0c             	sub    esp,0xc
   2485f:	68 56 4c 08 00       	push   0x84c56
   24864:	e8 3a 30 00 00       	call   278a3 <printk>
   24869:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:186
        printk("AHCI: SATA Disks:\n");
   2486c:	83 ec 0c             	sub    esp,0xc
   2486f:	68 5d 4c 08 00       	push   0x84c5d
   24874:	e8 2a 30 00 00       	call   278a3 <printk>
   24879:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:187
        for (int cnt=4;cnt<10;cnt++)
   2487c:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   24883:	e9 70 01 00 00       	jmp    249f8 <doHDSetup+0x67c>
/home/yogi/src/os/chrisOS/src/init/init.c:188
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
   24888:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   2488e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24891:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24897:	01 d0                	add    eax,edx
   24899:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   248a0:	84 c0                	test   al,al
   248a2:	0f 84 4c 01 00 00    	je     249f4 <doHDSetup+0x678>
/home/yogi/src/os/chrisOS/src/init/init.c:190
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
   248a8:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   248ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   248b1:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   248b7:	01 d0                	add    eax,edx
   248b9:	05 00 02 00 00       	add    eax,0x200
   248be:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:191
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   248c4:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   248ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   248cd:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   248d3:	01 d0                	add    eax,edx
   248d5:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   248dc:	3c 01                	cmp    al,0x1
   248de:	75 14                	jne    248f4 <doHDSetup+0x578>
/home/yogi/src/os/chrisOS/src/init/init.c:191 (discriminator 1)
   248e0:	83 ec 0c             	sub    esp,0xc
   248e3:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   248e9:	50                   	push   eax
   248ea:	e8 c9 34 00 00       	call   27db8 <strtrim>
   248ef:	83 c4 10             	add    esp,0x10
   248f2:	eb 05                	jmp    248f9 <doHDSetup+0x57d>
/home/yogi/src/os/chrisOS/src/init/init.c:191 (discriminator 2)
   248f4:	b8 72 4b 08 00       	mov    eax,0x84b72
/home/yogi/src/os/chrisOS/src/init/init.c:191 (discriminator 4)
   248f9:	83 ec 04             	sub    esp,0x4
   248fc:	50                   	push   eax
   248fd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   24900:	68 70 4c 08 00       	push   0x84c70
   24905:	e8 99 2f 00 00       	call   278a3 <printk>
   2490a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:197 (discriminator 4)
                printk("\t%uMB (%ubps %s%s%s)\n", 
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
   2490d:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24913:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24916:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2491c:	01 d0                	add    eax,edx
   2491e:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   24925:	84 c0                	test   al,al
   24927:	74 0c                	je     24935 <doHDSetup+0x5b9>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 1)
   24929:	c7 85 d4 f7 ff ff 89 	mov    DWORD PTR [ebp-0x82c],0x84b89
   24930:	4b 08 00 
   24933:	eb 0a                	jmp    2493f <doHDSetup+0x5c3>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 2)
   24935:	c7 85 d4 f7 ff ff 8e 	mov    DWORD PTR [ebp-0x82c],0x84b8e
   2493c:	4b 08 00 
/home/yogi/src/os/chrisOS/src/init/init.c:196 (discriminator 4)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
   2493f:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24945:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24948:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2494e:	01 d0                	add    eax,edx
   24950:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   24957:	84 c0                	test   al,al
   24959:	74 07                	je     24962 <doHDSetup+0x5e6>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 5)
   2495b:	bf 8f 4b 08 00       	mov    edi,0x84b8f
   24960:	eb 05                	jmp    24967 <doHDSetup+0x5eb>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 6)
   24962:	bf 8e 4b 08 00       	mov    edi,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:195 (discriminator 8)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
   24967:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   2496d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24970:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24976:	01 d0                	add    eax,edx
   24978:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 8)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   2497f:	84 c0                	test   al,al
   24981:	74 07                	je     2498a <doHDSetup+0x60e>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 9)
   24983:	be 96 4b 08 00       	mov    esi,0x84b96
   24988:	eb 05                	jmp    2498f <doHDSetup+0x613>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 10)
   2498a:	be 8e 4b 08 00       	mov    esi,0x84b8e
/home/yogi/src/os/chrisOS/src/init/init.c:194 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
   2498f:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24995:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24998:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2499e:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   249a0:	8b 88 5a 02 00 00    	mov    ecx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOS/src/init/init.c:193 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
   249a6:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   249ac:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   249af:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   249b5:	01 d0                	add    eax,edx
   249b7:	8b 90 56 02 00 00    	mov    edx,DWORD PTR [eax+0x256]
   249bd:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
   249c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   249c6:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   249cc:	01 d8                	add    eax,ebx
   249ce:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   249d4:	0f af c2             	imul   eax,edx
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   249d7:	c1 e8 14             	shr    eax,0x14
   249da:	83 ec 08             	sub    esp,0x8
   249dd:	ff b5 d4 f7 ff ff    	push   DWORD PTR [ebp-0x82c]
   249e3:	57                   	push   edi
   249e4:	56                   	push   esi
   249e5:	51                   	push   ecx
   249e6:	50                   	push   eax
   249e7:	68 c1 4b 08 00       	push   0x84bc1
   249ec:	e8 b2 2e 00 00       	call   278a3 <printk>
   249f1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:187 (discriminator 2)
    {
        printk("AHCI: Initializing ...\n");
        ahciInit();
        printk(" done\n");
        printk("AHCI: SATA Disks:\n");
        for (int cnt=4;cnt<10;cnt++)
   249f4:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/init/init.c:187 (discriminator 1)
   249f8:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   249fc:	0f 8e 86 fe ff ff    	jle    24888 <doHDSetup+0x50c>
/home/yogi/src/os/chrisOS/src/init/init.c:200
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   24a02:	90                   	nop
   24a03:	8d 65 f4             	lea    esp,[ebp-0xc]
   24a06:	5b                   	pop    ebx
   24a07:	5e                   	pop    esi
   24a08:	5f                   	pop    edi
   24a09:	5d                   	pop    ebp
   24a0a:	c3                   	ret    

00024a0b <ParamExists>:
ParamExists():
/home/yogi/src/os/chrisOS/src/init/init.c:203

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
   24a0b:	55                   	push   ebp
   24a0c:	89 e5                	mov    ebp,esp
   24a0e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/init.c:204
    for (int cnt=0;cnt<paramCount+1;cnt++)
   24a11:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   24a18:	eb 2b                	jmp    24a45 <ParamExists+0x3a>
/home/yogi/src/os/chrisOS/src/init/init.c:205
        if (!strcmp(params[cnt],cmdToFind))
   24a1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24a1d:	c1 e0 09             	shl    eax,0x9
   24a20:	89 c2                	mov    edx,eax
   24a22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24a25:	01 d0                	add    eax,edx
   24a27:	83 ec 08             	sub    esp,0x8
   24a2a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   24a2d:	50                   	push   eax
   24a2e:	e8 7d 2f 00 00       	call   279b0 <strcmp>
   24a33:	83 c4 10             	add    esp,0x10
   24a36:	85 c0                	test   eax,eax
   24a38:	75 07                	jne    24a41 <ParamExists+0x36>
/home/yogi/src/os/chrisOS/src/init/init.c:206
            return true;
   24a3a:	b8 01 00 00 00       	mov    eax,0x1
   24a3f:	eb 14                	jmp    24a55 <ParamExists+0x4a>
/home/yogi/src/os/chrisOS/src/init/init.c:204 (discriminator 2)
    }
}

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
    for (int cnt=0;cnt<paramCount+1;cnt++)
   24a41:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/init.c:204 (discriminator 1)
   24a45:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   24a48:	83 c0 01             	add    eax,0x1
   24a4b:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   24a4e:	7f ca                	jg     24a1a <ParamExists+0xf>
/home/yogi/src/os/chrisOS/src/init/init.c:207
        if (!strcmp(params[cnt],cmdToFind))
            return true;
    return false;
   24a50:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:208
}
   24a55:	c9                   	leave  
   24a56:	c3                   	ret    

00024a57 <testWPBit>:
testWPBit():
/home/yogi/src/os/chrisOS/src/init/init.c:212
void extern enableCR0_WP();

void HIGH_CODE_SECTION testWPBit()
{
   24a57:	55                   	push   ebp
   24a58:	89 e5                	mov    ebp,esp
   24a5a:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:213
    enableCR0_WP();
   24a5d:	e8 41 d3 fe ff       	call   11da3 <enableCR0_WP>
/home/yogi/src/os/chrisOS/src/init/init.c:214
    printk("PAGING: Kernel paged base: 0x%08X\n",KERNEL_PAGED_BASE_ADDRESS);
   24a62:	83 ec 08             	sub    esp,0x8
   24a65:	68 00 00 00 c0       	push   0xc0000000
   24a6a:	68 88 4c 08 00       	push   0x84c88
   24a6f:	e8 2f 2e 00 00       	call   278a3 <printk>
   24a74:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:215
    printk("PAGING: Making page @ 0x00000000 read only\n");
   24a77:	83 ec 0c             	sub    esp,0xc
   24a7a:	68 ac 4c 08 00       	push   0x84cac
   24a7f:	e8 1f 2e 00 00       	call   278a3 <printk>
   24a84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:216
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   24a87:	83 ec 04             	sub    esp,0x4
   24a8a:	6a 01                	push   0x1
   24a8c:	68 ff 0f 00 00       	push   0xfff
   24a91:	6a 00                	push   0x0
   24a93:	e8 a1 d0 fe ff       	call   11b39 <kSetPhysicalRangeRO>
   24a98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:217
    printk("PAGING: Testing whether CPU honors WP flag ... ");
   24a9b:	83 ec 0c             	sub    esp,0xc
   24a9e:	68 d8 4c 08 00       	push   0x84cd8
   24aa3:	e8 fb 2d 00 00       	call   278a3 <printk>
   24aa8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:218
  __asm__("cli\n");
   24aab:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/init/init.c:219
  __asm__("mov %0,[0x0]\n":"=r" (kOriginalAddressZeroValue));
   24aac:	a1 00 00 00 00       	mov    eax,ds:0x0
   24ab1:	a3 20 99 12 00       	mov    ds:0x129920,eax
/home/yogi/src/os/chrisOS/src/init/init.c:220
  __asm__("mov eax,0xdeadbeef\n mov [0x0],eax\n");    //purposely write address 0 which we made "read only"
   24ab6:	b8 ef be ad de       	mov    eax,0xdeadbeef
   24abb:	a3 00 00 00 00       	mov    ds:0x0,eax
/home/yogi/src/os/chrisOS/src/init/init.c:221
  __asm__("mov eax,cr0\n":::"eax");
   24ac0:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/src/init/init.c:222
  if (kPagingExceptionsSinceStart==1)
   24ac3:	a1 b8 97 12 00       	mov    eax,ds:0x1297b8
   24ac8:	83 f8 01             	cmp    eax,0x1
   24acb:	75 12                	jne    24adf <testWPBit+0x88>
/home/yogi/src/os/chrisOS/src/init/init.c:223
    printk("WP bit works!\n");
   24acd:	83 ec 0c             	sub    esp,0xc
   24ad0:	68 08 4d 08 00       	push   0x84d08
   24ad5:	e8 c9 2d 00 00       	call   278a3 <printk>
   24ada:	83 c4 10             	add    esp,0x10
   24add:	eb 10                	jmp    24aef <testWPBit+0x98>
/home/yogi/src/os/chrisOS/src/init/init.c:225
  else
      printk("WP bit does not work\n");
   24adf:	83 ec 0c             	sub    esp,0xc
   24ae2:	68 17 4d 08 00       	push   0x84d17
   24ae7:	e8 b7 2d 00 00       	call   278a3 <printk>
   24aec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:227
  //Can't unmap page 0x0 or the memory manager will see it as free space, so set it read-only again
  __asm__("mov eax,0x0\n mov [0x0],eax\n");    //purposely write address 0 which we made "read only"
   24aef:	b8 00 00 00 00       	mov    eax,0x0
   24af4:	a3 00 00 00 00       	mov    ds:0x0,eax
/home/yogi/src/os/chrisOS/src/init/init.c:228
  kSetPhysicalRangeRO(0x0,0xFFF,true);
   24af9:	83 ec 04             	sub    esp,0x4
   24afc:	6a 01                	push   0x1
   24afe:	68 ff 0f 00 00       	push   0xfff
   24b03:	6a 00                	push   0x0
   24b05:	e8 2f d0 fe ff       	call   11b39 <kSetPhysicalRangeRO>
   24b0a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:229
}
   24b0d:	90                   	nop
   24b0e:	c9                   	leave  
   24b0f:	c3                   	ret    

00024b10 <kernel_main>:
kernel_main():
/home/yogi/src/os/chrisOS/src/init/init.c:231

void HIGH_CODE_SECTION kernel_main(/*multiboot_info_t* mbd, unsigned int magic*/) {
   24b10:	55                   	push   ebp
   24b11:	89 e5                	mov    ebp,esp
   24b13:	56                   	push   esi
   24b14:	53                   	push   ebx
   24b15:	81 ec d0 00 00 00    	sub    esp,0xd0
/home/yogi/src/os/chrisOS/src/init/init.c:237
    
char currTime[150];
struct tm theDateTime;
    //Zero out all of the memory we will be using as rebooting a computer doesn't necessarily clear memory
    //memset(0x200000,0,0x1000000);
__asm__("cli\nsgdt [eax]\n"::"a" (&kernelGDT));
   24b1b:	b8 88 99 12 00       	mov    eax,0x129988
   24b20:	fa                   	cli    
   24b21:	0f 01 00             	sgdtd  [eax]
/home/yogi/src/os/chrisOS/src/init/init.c:238
gdt_init();
   24b24:	e8 98 f6 ff ff       	call   241c1 <gdt_init>
/home/yogi/src/os/chrisOS/src/init/init.c:239
    kTicksPerSecond=TICKS_PER_SECOND;
   24b29:	c7 05 c0 97 12 00 64 	mov    DWORD PTR ds:0x1297c0,0x64
   24b30:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/init.c:240
    kTermInit();
   24b33:	e8 f2 38 ff ff       	call   1842a <kTermInit>
/home/yogi/src/os/chrisOS/src/init/init.c:241
    kInitDone=false;
   24b38:	c6 05 e0 97 12 00 00 	mov    BYTE PTR ds:0x1297e0,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:242
    kPagingInitDone=false;
   24b3f:	c6 05 e1 97 12 00 00 	mov    BYTE PTR ds:0x1297e1,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:243
    kTicksPerMS=1000/kTicksPerSecond;
   24b46:	8b 35 c0 97 12 00    	mov    esi,DWORD PTR ds:0x1297c0
   24b4c:	b8 e8 03 00 00       	mov    eax,0x3e8
   24b51:	99                   	cdq    
   24b52:	f7 fe                	idiv   esi
   24b54:	a3 c4 97 12 00       	mov    ds:0x1297c4,eax
/home/yogi/src/os/chrisOS/src/init/init.c:244
    kDebugStartsNow=false;
   24b59:	c6 05 f0 97 12 00 00 	mov    BYTE PTR ds:0x1297f0,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:245
    memset(kATADeviceInfo,0x0,sizeof(struct ataDeviceInfo_t)*20);
   24b60:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24b65:	83 ec 04             	sub    esp,0x4
   24b68:	68 fc 30 00 00       	push   0x30fc
   24b6d:	6a 00                	push   0x0
   24b6f:	50                   	push   eax
   24b70:	e8 c8 0a 00 00       	call   2563d <memset>
   24b75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:246
    memset(kGDTSlotAvailableInd,0xFF,GDT_TABLE_SIZE);
   24b78:	a1 2c 99 12 00       	mov    eax,ds:0x12992c
   24b7d:	83 ec 04             	sub    esp,0x4
   24b80:	68 00 08 00 00       	push   0x800
   24b85:	68 ff 00 00 00       	push   0xff
   24b8a:	50                   	push   eax
   24b8b:	e8 ad 0a 00 00       	call   2563d <memset>
   24b90:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:247
    memset(kTaskSlotAvailableInd,0xFF,TASK_TABLE_SIZE);
   24b93:	a1 30 99 12 00       	mov    eax,ds:0x129930
   24b98:	83 ec 04             	sub    esp,0x4
   24b9b:	68 00 00 19 00       	push   0x190000
   24ba0:	68 ff 00 00 00       	push   0xff
   24ba5:	50                   	push   eax
   24ba6:	e8 92 0a 00 00       	call   2563d <memset>
   24bab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:249

    __asm__("mov esp,0xff00\n" /*\
   24bae:	bc 00 ff 00 00       	mov    esp,0xff00
/home/yogi/src/os/chrisOS/src/init/init.c:252
            "mov eax,0\nmov dr6,eax":::"eax"*/);
    /* Initialize terminal interface */
    *kTicksSinceStart=0;
   24bb3:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   24bb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/init.c:253
    identify_data_sizes(&kDataSizes);
   24bbe:	83 ec 0c             	sub    esp,0xc
   24bc1:	68 98 97 12 00       	push   0x129798
   24bc6:	e8 40 0a 00 00       	call   2560b <identify_data_sizes>
   24bcb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:254
    terminal_clear();
   24bce:	e8 4f 34 ff ff       	call   18022 <terminal_clear>
/home/yogi/src/os/chrisOS/src/init/init.c:255
    printk("Booting ...\n");
   24bd3:	83 ec 0c             	sub    esp,0xc
   24bd6:	68 2d 4d 08 00       	push   0x84d2d
   24bdb:	e8 c3 2c 00 00       	call   278a3 <printk>
   24be0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:257

    quietHardware();
   24be3:	e8 70 f7 ff ff       	call   24358 <quietHardware>
/home/yogi/src/os/chrisOS/src/init/init.c:258
    int lLowMemKB = getInt12Memory();
   24be8:	e8 80 c4 fd ff       	call   106d <getInt12Memory>
   24bed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/init.c:259
    kE820Status = isE820Available(); //
   24bf0:	e8 33 c4 fd ff       	call   1028 <isE820Available>
   24bf5:	a3 84 95 12 00       	mov    ds:0x129584,eax
/home/yogi/src/os/chrisOS/src/init/init.c:260
    if (kE820Status==0x534d4150)
   24bfa:	a1 84 95 12 00       	mov    eax,ds:0x129584
   24bff:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   24c04:	75 0b                	jne    24c11 <kernel_main+0x101>
/home/yogi/src/os/chrisOS/src/init/init.c:261
        kE820RecordCount = getE820Memory_asm();
   24c06:	e8 2d c6 fd ff       	call   1238 <getE820Memory_asm>
   24c0b:	66 a3 90 95 12 00    	mov    ds:0x129590,ax
/home/yogi/src/os/chrisOS/src/init/init.c:263
    //Move the SMAP table from low memory up to where we want it
    memcpy(smap_table, lowSmapTablePtr, kE820RecordCount*24);
   24c11:	0f b7 05 90 95 12 00 	movzx  eax,WORD PTR ds:0x129590
   24c18:	0f bf d0             	movsx  edx,ax
   24c1b:	89 d0                	mov    eax,edx
   24c1d:	01 c0                	add    eax,eax
   24c1f:	01 d0                	add    eax,edx
   24c21:	c1 e0 03             	shl    eax,0x3
   24c24:	89 c1                	mov    ecx,eax
   24c26:	8b 15 66 13 00 00    	mov    edx,DWORD PTR ds:0x1366
   24c2c:	a1 80 95 12 00       	mov    eax,ds:0x129580
   24c31:	83 ec 04             	sub    esp,0x4
   24c34:	51                   	push   ecx
   24c35:	52                   	push   edx
   24c36:	50                   	push   eax
   24c37:	e8 c8 15 00 00       	call   26204 <memcpy>
   24c3c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:264
    idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   24c3f:	83 ec 08             	sub    esp,0x8
   24c42:	6a 20                	push   0x20
   24c44:	68 e0 a3 09 00       	push   0x9a3e0
   24c49:	e8 77 43 ff ff       	call   18fc5 <idt_init>
   24c4e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:265
    init_PIT(kTicksPerSecond);
   24c51:	a1 c0 97 12 00       	mov    eax,ds:0x1297c0
   24c56:	83 ec 0c             	sub    esp,0xc
   24c59:	50                   	push   eax
   24c5a:	e8 2f c5 fd ff       	call   118e <init_PIT>
   24c5f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:267
    //Remap the exception vectors (0x0-0x1f)
    PIC_remap(0x00+PIC_REMAP_OFFSET, 0x8+PIC_REMAP_OFFSET);
   24c62:	83 ec 08             	sub    esp,0x8
   24c65:	6a 28                	push   0x28
   24c67:	6a 20                	push   0x20
   24c69:	e8 50 52 ff ff       	call   19ebe <PIC_remap>
   24c6e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:268
    IRQ_clear_mask(0);
   24c71:	83 ec 0c             	sub    esp,0xc
   24c74:	6a 00                	push   0x0
   24c76:	e8 e1 51 ff ff       	call   19e5c <IRQ_clear_mask>
   24c7b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:269
    IRQ_clear_mask(1);
   24c7e:	83 ec 0c             	sub    esp,0xc
   24c81:	6a 01                	push   0x1
   24c83:	e8 d4 51 ff ff       	call   19e5c <IRQ_clear_mask>
   24c88:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:270
    __asm__("sti\n");
   24c8b:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/init/init.c:271
    initSystemDate();
   24c8c:	e8 03 0b 00 00       	call   25794 <initSystemDate>
/home/yogi/src/os/chrisOS/src/init/init.c:272
    gmtime_r(&kSystemStartTime,&theDateTime);
   24c91:	83 ec 08             	sub    esp,0x8
   24c94:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   24c9a:	50                   	push   eax
   24c9b:	68 c8 97 12 00       	push   0x1297c8
   24ca0:	e8 60 32 00 00       	call   27f05 <gmtime_r>
   24ca5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:273
    printk("Boot: ");
   24ca8:	83 ec 0c             	sub    esp,0xc
   24cab:	68 3a 4d 08 00       	push   0x84d3a
   24cb0:	e8 ee 2b 00 00       	call   278a3 <printk>
   24cb5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:274
    gets(kBootCmd,150);
   24cb8:	83 ec 08             	sub    esp,0x8
   24cbb:	68 96 00 00 00       	push   0x96
   24cc0:	68 00 a4 09 00       	push   0x9a400
   24cc5:	e8 16 c6 fe ff       	call   112e0 <gets>
   24cca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:275
    kBootParamCount=parseParamsShell(kBootCmd, kBootParams, MAX_PARAM_COUNT*MAX_PARAM_WIDTH);
   24ccd:	83 ec 04             	sub    esp,0x4
   24cd0:	68 00 14 00 00       	push   0x1400
   24cd5:	68 e0 8f 09 00       	push   0x98fe0
   24cda:	68 00 a4 09 00       	push   0x9a400
   24cdf:	e8 78 d8 fe ff       	call   1255c <parseParamsShell>
   24ce4:	83 c4 10             	add    esp,0x10
   24ce7:	a3 c8 8f 09 00       	mov    ds:0x98fc8,eax
/home/yogi/src/os/chrisOS/src/init/init.c:276
    strftime((char*)&currTime, 50, "%H:%M:%S on %m/%d/%y", &theDateTime);
   24cec:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   24cf2:	50                   	push   eax
   24cf3:	68 41 4d 08 00       	push   0x84d41
   24cf8:	6a 32                	push   0x32
   24cfa:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24d00:	50                   	push   eax
   24d01:	e8 b2 b9 fe ff       	call   106b8 <strftime>
   24d06:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:278
    //wait(50);
    printk("chrisOS %s booting @%s",  COMPLETE_VERSION, &currTime);
   24d09:	83 ec 04             	sub    esp,0x4
   24d0c:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24d12:	50                   	push   eax
   24d13:	68 56 4d 08 00       	push   0x84d56
   24d18:	68 6a 4d 08 00       	push   0x84d6a
   24d1d:	e8 81 2b 00 00       	call   278a3 <printk>
   24d22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:280
#ifndef DEBUG_NONE
    if (kDebugLevel > 0)
   24d25:	a1 78 98 12 00       	mov    eax,ds:0x129878
   24d2a:	85 c0                	test   eax,eax
   24d2c:	74 16                	je     24d44 <kernel_main+0x234>
/home/yogi/src/os/chrisOS/src/init/init.c:281
        printk ("(debug=%X)", kDebugLevel);
   24d2e:	a1 78 98 12 00       	mov    eax,ds:0x129878
   24d33:	83 ec 08             	sub    esp,0x8
   24d36:	50                   	push   eax
   24d37:	68 81 4d 08 00       	push   0x84d81
   24d3c:	e8 62 2b 00 00       	call   278a3 <printk>
   24d41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:283
#endif
    printk("\n");
   24d44:	83 ec 0c             	sub    esp,0xc
   24d47:	68 8c 4d 08 00       	push   0x84d8c
   24d4c:	e8 52 2b 00 00       	call   278a3 <printk>
   24d51:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:284
    if (kE820Status==0x534d4150)
   24d54:	a1 84 95 12 00       	mov    eax,ds:0x129584
   24d59:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   24d5e:	75 4f                	jne    24daf <kernel_main+0x29f>
/home/yogi/src/os/chrisOS/src/init/init.c:286
    {
        printk("E820: available (%08X), translating ...", kE820Status);
   24d60:	a1 84 95 12 00       	mov    eax,ds:0x129584
   24d65:	83 ec 08             	sub    esp,0x8
   24d68:	50                   	push   eax
   24d69:	68 90 4d 08 00       	push   0x84d90
   24d6e:	e8 30 2b 00 00       	call   278a3 <printk>
   24d73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:287
        kE820MemoryBytes = sum_e820_usable_memory(smap_table,kE820RecordCount);
   24d76:	0f b7 05 90 95 12 00 	movzx  eax,WORD PTR ds:0x129590
   24d7d:	0f bf d0             	movsx  edx,ax
   24d80:	a1 80 95 12 00       	mov    eax,ds:0x129580
   24d85:	83 ec 08             	sub    esp,0x8
   24d88:	52                   	push   edx
   24d89:	50                   	push   eax
   24d8a:	e8 0e f2 ff ff       	call   23f9d <sum_e820_usable_memory>
   24d8f:	83 c4 10             	add    esp,0x10
   24d92:	a3 88 95 12 00       	mov    ds:0x129588,eax
   24d97:	89 15 8c 95 12 00    	mov    DWORD PTR ds:0x12958c,edx
/home/yogi/src/os/chrisOS/src/init/init.c:288
        printk("done\n");
   24d9d:	83 ec 0c             	sub    esp,0xc
   24da0:	68 b8 4d 08 00       	push   0x84db8
   24da5:	e8 f9 2a 00 00       	call   278a3 <printk>
   24daa:	83 c4 10             	add    esp,0x10
   24dad:	eb 16                	jmp    24dc5 <kernel_main+0x2b5>
/home/yogi/src/os/chrisOS/src/init/init.c:292
        //print_e820_map(smap_table, kE820RecordCount);
    }
    else
        printk("E820: not available (%08X ... looking for alternatives.\n", kE820Status);
   24daf:	a1 84 95 12 00       	mov    eax,ds:0x129584
   24db4:	83 ec 08             	sub    esp,0x8
   24db7:	50                   	push   eax
   24db8:	68 c0 4d 08 00       	push   0x84dc0
   24dbd:	e8 e1 2a 00 00       	call   278a3 <printk>
   24dc2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:294

    printk("E820: Usable memory: Low=%6d (INT12), Total=%10d (E820)\n",lLowMemKB * 1024, kE820MemoryBytes);
   24dc5:	a1 88 95 12 00       	mov    eax,ds:0x129588
   24dca:	8b 15 8c 95 12 00    	mov    edx,DWORD PTR ds:0x12958c
   24dd0:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   24dd3:	c1 e1 0a             	shl    ecx,0xa
   24dd6:	52                   	push   edx
   24dd7:	50                   	push   eax
   24dd8:	51                   	push   ecx
   24dd9:	68 fc 4d 08 00       	push   0x84dfc
   24dde:	e8 c0 2a 00 00       	call   278a3 <printk>
   24de3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:295
    if (kE820MemoryBytes < MINIMUM_USABLE_MEMORY)
   24de6:	a1 88 95 12 00       	mov    eax,ds:0x129588
   24deb:	8b 15 8c 95 12 00    	mov    edx,DWORD PTR ds:0x12958c
   24df1:	83 fa 00             	cmp    edx,0x0
   24df4:	77 3b                	ja     24e31 <kernel_main+0x321>
   24df6:	83 fa 00             	cmp    edx,0x0
   24df9:	72 07                	jb     24e02 <kernel_main+0x2f2>
   24dfb:	3d ff ff ff 0f       	cmp    eax,0xfffffff
   24e00:	77 2f                	ja     24e31 <kernel_main+0x321>
/home/yogi/src/os/chrisOS/src/init/init.c:297
    {
        printk("\n\nE820: Either the available memory is less than the minimum required of %d MB\nor memory capacity cannot be determined\n.", MINIMUM_USABLE_MEMORY / 1024 / 1024);
   24e02:	83 ec 08             	sub    esp,0x8
   24e05:	68 00 01 00 00       	push   0x100
   24e0a:	68 38 4e 08 00       	push   0x84e38
   24e0f:	e8 8f 2a 00 00       	call   278a3 <printk>
   24e14:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:298
        printk("3820: Ignore? ");
   24e17:	83 ec 0c             	sub    esp,0xc
   24e1a:	68 b1 4e 08 00       	push   0x84eb1
   24e1f:	e8 7f 2a 00 00       	call   278a3 <printk>
   24e24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:300
        
        while (waitForKeyboardKey()!='y')
   24e27:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:300 (discriminator 1)
   24e28:	e8 2a c4 fe ff       	call   11257 <waitForKeyboardKey>
   24e2d:	3c 79                	cmp    al,0x79
   24e2f:	75 f7                	jne    24e28 <kernel_main+0x318>
/home/yogi/src/os/chrisOS/src/init/init.c:303
        {}
    }
    __asm__ ("mov eax,%0\n push eax\n pop esp\n"::"r" (STACK_BASE_ADDRESS):"eax");
   24e31:	ba 00 ff ff 00       	mov    edx,0xffff00
   24e36:	89 d0                	mov    eax,edx
   24e38:	50                   	push   eax
   24e39:	5c                   	pop    esp
/home/yogi/src/os/chrisOS/src/init/init.c:304
    detect_cpu();
   24e3a:	e8 9d e5 ff ff       	call   233dc <detect_cpu>
/home/yogi/src/os/chrisOS/src/init/init.c:305
    printk("CPU: Detected CPU: %s\n", kcpuInfo.brand_name);
   24e3f:	83 ec 08             	sub    esp,0x8
   24e42:	68 b2 96 12 00       	push   0x1296b2
   24e47:	68 c0 4e 08 00       	push   0x84ec0
   24e4c:	e8 52 2a 00 00       	call   278a3 <printk>
   24e51:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:306
    identifyCPUFeatures(&kCPUFeatures);
   24e54:	83 ec 0c             	sub    esp,0xc
   24e57:	68 84 98 12 00       	push   0x129884
   24e5c:	e8 7b 40 ff ff       	call   18edc <identifyCPUFeatures>
   24e61:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:307
    if (apicCheckFor())
   24e64:	e8 f9 3a ff ff       	call   18962 <apicCheckFor>
   24e69:	84 c0                	test   al,al
   24e6b:	0f 84 ad 00 00 00    	je     24f1e <kernel_main+0x40e>
/home/yogi/src/os/chrisOS/src/init/init.c:309
    {
        kCPU[0].apicID=apciGetAPICID(0);
   24e71:	83 ec 0c             	sub    esp,0xc
   24e74:	6a 00                	push   0x0
   24e76:	e8 40 3b ff ff       	call   189bb <apciGetAPICID>
   24e7b:	83 c4 10             	add    esp,0x10
   24e7e:	0f b6 c0             	movzx  eax,al
   24e81:	a3 a0 98 12 00       	mov    ds:0x1298a0,eax
/home/yogi/src/os/chrisOS/src/init/init.c:310
        kCPU[0].registerBase=apicGetAPICBase();
   24e86:	e8 45 3b ff ff       	call   189d0 <apicGetAPICBase>
   24e8b:	a3 a4 98 12 00       	mov    ds:0x1298a4,eax
/home/yogi/src/os/chrisOS/src/init/init.c:311
        kCPU[0].ticksPerSecond=apicGetHZ();
   24e90:	e8 80 3c ff ff       	call   18b15 <apicGetHZ>
   24e95:	ba 00 00 00 00       	mov    edx,0x0
   24e9a:	a3 a8 98 12 00       	mov    ds:0x1298a8,eax
   24e9f:	89 15 ac 98 12 00    	mov    DWORD PTR ds:0x1298ac,edx
/home/yogi/src/os/chrisOS/src/init/init.c:313
        //IRQ_set_mask(0);
        printk("APIC: %s APIC %u Found, address %08X, initializing ... ", acpiGetAPICVersion()==0?"Discrete":"Integrated", kCPU[0].apicID, kCPU[0].registerBase);
   24ea5:	8b 35 a4 98 12 00    	mov    esi,DWORD PTR ds:0x1298a4
   24eab:	8b 1d a0 98 12 00    	mov    ebx,DWORD PTR ds:0x1298a0
   24eb1:	e8 f0 3a ff ff       	call   189a6 <acpiGetAPICVersion>
   24eb6:	84 c0                	test   al,al
   24eb8:	75 07                	jne    24ec1 <kernel_main+0x3b1>
/home/yogi/src/os/chrisOS/src/init/init.c:313 (discriminator 1)
   24eba:	b8 d7 4e 08 00       	mov    eax,0x84ed7
   24ebf:	eb 05                	jmp    24ec6 <kernel_main+0x3b6>
/home/yogi/src/os/chrisOS/src/init/init.c:313 (discriminator 2)
   24ec1:	b8 e0 4e 08 00       	mov    eax,0x84ee0
/home/yogi/src/os/chrisOS/src/init/init.c:313 (discriminator 4)
   24ec6:	56                   	push   esi
   24ec7:	53                   	push   ebx
   24ec8:	50                   	push   eax
   24ec9:	68 ec 4e 08 00       	push   0x84eec
   24ece:	e8 d0 29 00 00       	call   278a3 <printk>
   24ed3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:314 (discriminator 4)
        if (apicIsEnabled())
   24ed6:	e8 a2 3b ff ff       	call   18a7d <apicIsEnabled>
   24edb:	84 c0                	test   al,al
   24edd:	74 10                	je     24eef <kernel_main+0x3df>
/home/yogi/src/os/chrisOS/src/init/init.c:315
            printk("enabled ... ");
   24edf:	83 ec 0c             	sub    esp,0xc
   24ee2:	68 24 4f 08 00       	push   0x84f24
   24ee7:	e8 b7 29 00 00       	call   278a3 <printk>
   24eec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:316
        printk("done\n");
   24eef:	83 ec 0c             	sub    esp,0xc
   24ef2:	68 b8 4d 08 00       	push   0x84db8
   24ef7:	e8 a7 29 00 00       	call   278a3 <printk>
   24efc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:317
        printk("APIC: Timer running at %u hz.\n",kCPU[0].ticksPerSecond);
   24eff:	a1 a8 98 12 00       	mov    eax,ds:0x1298a8
   24f04:	8b 15 ac 98 12 00    	mov    edx,DWORD PTR ds:0x1298ac
   24f0a:	83 ec 04             	sub    esp,0x4
   24f0d:	52                   	push   edx
   24f0e:	50                   	push   eax
   24f0f:	68 34 4f 08 00       	push   0x84f34
   24f14:	e8 8a 29 00 00       	call   278a3 <printk>
   24f19:	83 c4 10             	add    esp,0x10
   24f1c:	eb 10                	jmp    24f2e <kernel_main+0x41e>
/home/yogi/src/os/chrisOS/src/init/init.c:320
    }
    else
        printk("APIC: not found\n");
   24f1e:	83 ec 0c             	sub    esp,0xc
   24f21:	68 53 4f 08 00       	push   0x84f53
   24f26:	e8 78 29 00 00       	call   278a3 <printk>
   24f2b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:321
    printk("TSC: ticks per 10 = %u\n", tscGetTicksPerSecond());
   24f2e:	e8 d8 3c ff ff       	call   18c0b <tscGetTicksPerSecond>
   24f33:	83 ec 08             	sub    esp,0x8
   24f36:	50                   	push   eax
   24f37:	68 64 4f 08 00       	push   0x84f64
   24f3c:	e8 62 29 00 00       	call   278a3 <printk>
   24f41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:323
#ifndef DISABLE_PAGING
    kCPU[0].registerBase=apicGetAPICBase();
   24f44:	e8 87 3a ff ff       	call   189d0 <apicGetAPICBase>
   24f49:	a3 a4 98 12 00       	mov    ds:0x1298a4,eax
/home/yogi/src/os/chrisOS/src/init/init.c:324
    printk("PAGING: enabling 4k paging\n");
   24f4e:	83 ec 0c             	sub    esp,0xc
   24f51:	68 7c 4f 08 00       	push   0x84f7c
   24f56:	e8 48 29 00 00       	call   278a3 <printk>
   24f5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:325
    initializeKernelPaging();
   24f5e:	e8 fd 01 00 00       	call   25160 <initializeKernelPaging>
/home/yogi/src/os/chrisOS/src/init/init.c:326
    printk("PAGING: remapping APIC from 0x%08X to 0x%08X\n", kCPU[0].registerBase, kAPICRegisterRemapAddress);
   24f63:	8b 15 70 98 12 00    	mov    edx,DWORD PTR ds:0x129870
   24f69:	a1 a4 98 12 00       	mov    eax,ds:0x1298a4
   24f6e:	83 ec 04             	sub    esp,0x4
   24f71:	52                   	push   edx
   24f72:	50                   	push   eax
   24f73:	68 98 4f 08 00       	push   0x84f98
   24f78:	e8 26 29 00 00       	call   278a3 <printk>
   24f7d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:328
    //map APIC address 0xFEE00000 to 0x825000
    kMapPage(kAPICRegisterRemapAddress, kCPU[0].registerBase,0x13);  //0x63 + cache disabled
   24f80:	8b 15 a4 98 12 00    	mov    edx,DWORD PTR ds:0x1298a4
   24f86:	a1 70 98 12 00       	mov    eax,ds:0x129870
   24f8b:	83 ec 04             	sub    esp,0x4
   24f8e:	6a 13                	push   0x13
   24f90:	52                   	push   edx
   24f91:	50                   	push   eax
   24f92:	e8 19 c8 fe ff       	call   117b0 <kMapPage>
   24f97:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:329
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   24f9a:	83 ec 04             	sub    esp,0x4
   24f9d:	6a 01                	push   0x1
   24f9f:	68 ff 0f 00 00       	push   0xfff
   24fa4:	6a 00                	push   0x0
   24fa6:	e8 8e cb fe ff       	call   11b39 <kSetPhysicalRangeRO>
   24fab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:330
    testWPBit();
   24fae:	e8 a4 fa ff ff       	call   24a57 <testWPBit>
/home/yogi/src/os/chrisOS/src/init/init.c:331
    kPagingInitDone=true;
   24fb3:	c6 05 e1 97 12 00 01 	mov    BYTE PTR ds:0x1297e1,0x1
/home/yogi/src/os/chrisOS/src/init/init.c:333
#endif
    printk("CLOCK: tick frequency is %uhz\n",kTicksPerSecond);
   24fba:	a1 c0 97 12 00       	mov    eax,ds:0x1297c0
   24fbf:	83 ec 08             	sub    esp,0x8
   24fc2:	50                   	push   eax
   24fc3:	68 c8 4f 08 00       	push   0x84fc8
   24fc8:	e8 d6 28 00 00       	call   278a3 <printk>
   24fcd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:334
    printk("CLOCK: testing ... "); wait(100); printk("works\n");
   24fd0:	83 ec 0c             	sub    esp,0xc
   24fd3:	68 e7 4f 08 00       	push   0x84fe7
   24fd8:	e8 c6 28 00 00       	call   278a3 <printk>
   24fdd:	83 c4 10             	add    esp,0x10
   24fe0:	83 ec 0c             	sub    esp,0xc
   24fe3:	6a 64                	push   0x64
   24fe5:	e8 f8 3a 00 00       	call   28ae2 <wait>
   24fea:	83 c4 10             	add    esp,0x10
   24fed:	83 ec 0c             	sub    esp,0xc
   24ff0:	68 fb 4f 08 00       	push   0x84ffb
   24ff5:	e8 a9 28 00 00       	call   278a3 <printk>
   24ffa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:337

#ifdef __SMP__
    if (ParamExists(kBootParams,"nosmp",kBootParamCount))
   24ffd:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   25002:	83 ec 04             	sub    esp,0x4
   25005:	50                   	push   eax
   25006:	68 02 50 08 00       	push   0x85002
   2500b:	68 e0 8f 09 00       	push   0x98fe0
   25010:	e8 f6 f9 ff ff       	call   24a0b <ParamExists>
   25015:	83 c4 10             	add    esp,0x10
   25018:	84 c0                	test   al,al
   2501a:	74 12                	je     2502e <kernel_main+0x51e>
/home/yogi/src/os/chrisOS/src/init/init.c:338
        printk("SMP: No AP processor startup per 'nosmp' parameter\n");
   2501c:	83 ec 0c             	sub    esp,0xc
   2501f:	68 08 50 08 00       	push   0x85008
   25024:	e8 7a 28 00 00       	call   278a3 <printk>
   25029:	83 c4 10             	add    esp,0x10
   2502c:	eb 77                	jmp    250a5 <kernel_main+0x595>
/home/yogi/src/os/chrisOS/src/init/init.c:341
    else
    {
        printk("SMP: Initializing, ");
   2502e:	83 ec 0c             	sub    esp,0xc
   25031:	68 3c 50 08 00       	push   0x8503c
   25036:	e8 68 28 00 00       	call   278a3 <printk>
   2503b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:342
        printk("%u MP records parsed\n",mpInit());
   2503e:	e8 a8 54 ff ff       	call   1a4eb <mpInit>
   25043:	83 ec 08             	sub    esp,0x8
   25046:	50                   	push   eax
   25047:	68 50 50 08 00       	push   0x85050
   2504c:	e8 52 28 00 00       	call   278a3 <printk>
   25051:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:344
        //cursorUpdateBiosCursor();
        printk("SMP: Starting up AP processors\n");
   25054:	83 ec 0c             	sub    esp,0xc
   25057:	68 68 50 08 00       	push   0x85068
   2505c:	e8 42 28 00 00       	call   278a3 <printk>
   25061:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:345
        AP_startup();
   25064:	e8 55 c5 fd ff       	call   15be <AP_startup>
/home/yogi/src/os/chrisOS/src/init/init.c:346
        wait(500);
   25069:	83 ec 0c             	sub    esp,0xc
   2506c:	68 f4 01 00 00       	push   0x1f4
   25071:	e8 6c 3a 00 00       	call   28ae2 <wait>
   25076:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:347
        printk("SMP: CPUs 2 thru %u (of %u total) started... done\n",smpBootCPUsStarted+1, smpBootCPUCount+1);
   25079:	0f b6 05 a1 15 00 00 	movzx  eax,BYTE PTR ds:0x15a1
   25080:	0f b6 c0             	movzx  eax,al
   25083:	8d 50 01             	lea    edx,[eax+0x1]
   25086:	0f b6 05 a3 15 00 00 	movzx  eax,BYTE PTR ds:0x15a3
   2508d:	0f b6 c0             	movzx  eax,al
   25090:	83 c0 01             	add    eax,0x1
   25093:	83 ec 04             	sub    esp,0x4
   25096:	52                   	push   edx
   25097:	50                   	push   eax
   25098:	68 88 50 08 00       	push   0x85088
   2509d:	e8 01 28 00 00       	call   278a3 <printk>
   250a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:352
        //if (kIOAPICPtr)
        //    kMapPage(CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS, (uintptr_t)kIOAPICPtr, 0x13);
    }
#endif
    if (ParamExists(kBootParams,"nopci",kBootParamCount))
   250a5:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   250aa:	83 ec 04             	sub    esp,0x4
   250ad:	50                   	push   eax
   250ae:	68 bb 50 08 00       	push   0x850bb
   250b3:	68 e0 8f 09 00       	push   0x98fe0
   250b8:	e8 4e f9 ff ff       	call   24a0b <ParamExists>
   250bd:	83 c4 10             	add    esp,0x10
   250c0:	84 c0                	test   al,al
   250c2:	74 12                	je     250d6 <kernel_main+0x5c6>
/home/yogi/src/os/chrisOS/src/init/init.c:353
        printk("PCI: No scanning per parameter 'nopci'\n");
   250c4:	83 ec 0c             	sub    esp,0xc
   250c7:	68 c4 50 08 00       	push   0x850c4
   250cc:	e8 d2 27 00 00       	call   278a3 <printk>
   250d1:	83 c4 10             	add    esp,0x10
   250d4:	eb 6e                	jmp    25144 <kernel_main+0x634>
/home/yogi/src/os/chrisOS/src/init/init.c:356
    else
    {
        printk("PCI: initializing ...");
   250d6:	83 ec 0c             	sub    esp,0xc
   250d9:	68 ec 50 08 00       	push   0x850ec
   250de:	e8 c0 27 00 00       	call   278a3 <printk>
   250e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:357
        pciInitialize();
   250e6:	e8 1a 2b ff ff       	call   17c05 <pciInitialize>
/home/yogi/src/os/chrisOS/src/init/init.c:358
        printk(" found %u %s, %u devices (%u bridges)\n",kPCIBusCount, kPCIBusCount<=1?"bus":"busses", kPCIDeviceCount, kPCIBridgeCount);
   250eb:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
   250f2:	0f b6 c8             	movzx  ecx,al
   250f5:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   250fc:	0f b6 d0             	movzx  edx,al
   250ff:	0f b6 05 ef 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ef
   25106:	3c 01                	cmp    al,0x1
   25108:	77 07                	ja     25111 <kernel_main+0x601>
/home/yogi/src/os/chrisOS/src/init/init.c:358 (discriminator 1)
   2510a:	bb 02 51 08 00       	mov    ebx,0x85102
   2510f:	eb 05                	jmp    25116 <kernel_main+0x606>
/home/yogi/src/os/chrisOS/src/init/init.c:358 (discriminator 2)
   25111:	bb 06 51 08 00       	mov    ebx,0x85106
/home/yogi/src/os/chrisOS/src/init/init.c:358 (discriminator 4)
   25116:	0f b6 05 ef 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ef
   2511d:	0f b6 c0             	movzx  eax,al
   25120:	83 ec 0c             	sub    esp,0xc
   25123:	51                   	push   ecx
   25124:	52                   	push   edx
   25125:	53                   	push   ebx
   25126:	50                   	push   eax
   25127:	68 10 51 08 00       	push   0x85110
   2512c:	e8 72 27 00 00       	call   278a3 <printk>
   25131:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:359 (discriminator 4)
        printk("PCI: initialization complete ...\n");
   25134:	83 ec 0c             	sub    esp,0xc
   25137:	68 38 51 08 00       	push   0x85138
   2513c:	e8 62 27 00 00       	call   278a3 <printk>
   25141:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:361
    }
    doHDSetup();
   25144:	e8 33 f2 ff ff       	call   2437c <doHDSetup>
/home/yogi/src/os/chrisOS/src/init/init.c:362
    __asm__("mov eax,0x108\nmov ss,eax\n":::"eax");
   25149:	b8 08 01 00 00       	mov    eax,0x108
   2514e:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/src/init/init.c:363
kInitDone = true;
   25150:	c6 05 e0 97 12 00 01 	mov    BYTE PTR ds:0x1297e0,0x1
/home/yogi/src/os/chrisOS/src/init/init.c:364
    goto overStuff; /*******************************************/
   25157:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:419 (discriminator 1)
//        terminal_clear();
MAINLOOPv:
//    char a[255];
//    gets(a,255);
//    if (!strncmp(a,"debug",5))
        biShell();
   25158:	e8 05 e6 fe ff       	call   13762 <biShell>
/home/yogi/src/os/chrisOS/src/init/init.c:423 (discriminator 1)
//    if (a>0)
//        printk("%c",a);
//    __asm__("hlt\n");
    goto MAINLOOPv;
   2515d:	eb f9                	jmp    25158 <kernel_main+0x648>
   2515f:	90                   	nop

00025160 <initializeKernelPaging>:
initializeKernelPaging():
/home/yogi/src/os/chrisOS/src/init/initPaging.c:13
extern struct idt_entry kInitialIDT[0x30];
extern struct idt_ptr kInitialIDTReg;
extern struct gdt_ptr kernelGDT;

void initializeKernelPaging()
{
   25160:	55                   	push   ebp
   25161:	89 e5                	mov    ebp,esp
   25163:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/init/initPaging.c:18
        uint32_t *ptr;
        uint32_t *ptrT;
        uint32_t *ptr2;
        uint32_t *kKernelPageTables;
        uint16_t tempEntries = (0xFFFFFFFF/0x400000)+1;  //Map entire 4GB memory space 
   25166:	66 c7 45 e6 00 04    	mov    WORD PTR [ebp-0x1a],0x400
/home/yogi/src/os/chrisOS/src/init/initPaging.c:21

       
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
   2516c:	83 ec 08             	sub    esp,0x8
   2516f:	68 5c 51 08 00       	push   0x8515c
   25174:	6a 20                	push   0x20
   25176:	e8 48 27 00 00       	call   278c3 <printd>
   2517b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:22
        ptr=(uint32_t*)kKernelPageDir;
   2517e:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
   25183:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:23
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   25186:	c7 45 f4 00 c0 4c 00 	mov    DWORD PTR [ebp-0xc],0x4cc000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:24
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
   2518d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25190:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   25193:	68 90 51 08 00       	push   0x85190
   25198:	6a 20                	push   0x20
   2519a:	e8 24 27 00 00       	call   278c3 <printd>
   2519f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:25
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
   251a2:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   251a6:	83 ec 04             	sub    esp,0x4
   251a9:	50                   	push   eax
   251aa:	68 cc 51 08 00       	push   0x851cc
   251af:	6a 20                	push   0x20
   251b1:	e8 0d 27 00 00       	call   278c3 <printd>
   251b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   251b9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   251c0:	eb 65                	jmp    25227 <initializeKernelPaging+0xc7>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:28
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x7;
   251c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   251c5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   251cc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   251cf:	01 d0                	add    eax,edx
   251d1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   251d4:	81 c2 cc 04 00 00    	add    edx,0x4cc
   251da:	c1 e2 0c             	shl    edx,0xc
   251dd:	83 ca 07             	or     edx,0x7
   251e0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   251e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   251e9:	eb 28                	jmp    25213 <initializeKernelPaging+0xb3>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:32 (discriminator 3)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x7;
   251eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   251ee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   251f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   251f8:	01 d0                	add    eax,edx
   251fa:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   251fd:	89 d1                	mov    ecx,edx
   251ff:	c1 e1 16             	shl    ecx,0x16
   25202:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   25205:	c1 e2 0c             	shl    edx,0xc
   25208:	01 ca                	add    edx,ecx
   2520a:	83 ca 07             	or     edx,0x7
   2520d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30 (discriminator 3)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x7;
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   2520f:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30 (discriminator 1)
   25213:	81 7d ec ff 03 00 00 	cmp    DWORD PTR [ebp-0x14],0x3ff
   2521a:	7e cf                	jle    251eb <initializeKernelPaging+0x8b>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:34 (discriminator 2)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x7;
                }
                ptrT += 0x400;
   2521c:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26 (discriminator 2)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
        ptr=(uint32_t*)kKernelPageDir;
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   25223:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26 (discriminator 1)
   25227:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   2522b:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   2522e:	77 92                	ja     251c2 <initializeKernelPaging+0x62>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:36
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x7;
                }
                ptrT += 0x400;
        }
        uint32_t pageDirEntrySize = 0x400000;
   25230:	c7 45 dc 00 00 40 00 	mov    DWORD PTR [ebp-0x24],0x400000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:37
        ptr2=(void*)KERNEL_PAGE_DIR_ADDRESS + (KERNEL_PAGED_BASE_ADDRESS / 0x400000)*4; //(((uint32_t)KERNEL_PAGED_BASE_ADDRESS / (uint32_t)0x400000) * 4);
   25237:	c7 45 d8 00 ac 4b 00 	mov    DWORD PTR [ebp-0x28],0x4bac00
/home/yogi/src/os/chrisOS/src/init/initPaging.c:38
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   2523e:	c7 45 d4 00 c0 4c 00 	mov    DWORD PTR [ebp-0x2c],0x4cc000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:40
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
   25245:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   25248:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
   2524b:	68 fc 51 08 00       	push   0x851fc
   25250:	6a 20                	push   0x20
   25252:	e8 6c 26 00 00       	call   278c3 <printd>
   25257:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:41
        uint32_t pageDirEntryCount= 0x100;   //Map C0000000-FFFFFFFF=00000000-3FFFFFFF 
   2525a:	c7 45 d0 00 01 00 00 	mov    DWORD PTR [ebp-0x30],0x100
/home/yogi/src/os/chrisOS/src/init/initPaging.c:42
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
   25261:	83 ec 04             	sub    esp,0x4
   25264:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   25267:	68 38 52 08 00       	push   0x85238
   2526c:	6a 20                	push   0x20
   2526e:	e8 50 26 00 00       	call   278c3 <printd>
   25273:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   25276:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   2527d:	eb 24                	jmp    252a3 <initializeKernelPaging+0x143>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:45 (discriminator 3)
        {
                ptr2[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x7;
   2527f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25282:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   25289:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2528c:	01 d0                	add    eax,edx
   2528e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   25291:	81 c2 cc 04 00 00    	add    edx,0x4cc
   25297:	c1 e2 0c             	shl    edx,0xc
   2529a:	83 ca 07             	or     edx,0x7
   2529d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43 (discriminator 3)
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
        uint32_t pageDirEntryCount= 0x100;   //Map C0000000-FFFFFFFF=00000000-3FFFFFFF 
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   2529f:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43 (discriminator 1)
   252a3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   252a6:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
   252a9:	76 d4                	jbe    2527f <initializeKernelPaging+0x11f>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:64
            {
                ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
            }
            ptrT += 0x400;
*/
            __asm__("mov cr3,%0\n":: "a" (KERNEL_PAGE_DIR_ADDRESS));
   252ab:	b8 00 a0 4b 00       	mov    eax,0x4ba000
   252b0:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:65
       __asm__("mov eax,cr0\n or eax,0x80000000\n mov cr0,eax\n");
   252b3:	0f 20 c0             	mov    eax,cr0
   252b6:	0d 00 00 00 80       	or     eax,0x80000000
   252bb:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:74
/*BEFORE:
 0 - blank
 1 (0x08) - code @ 0x0
 2 (0x10) - data @ 0x0
*/
       gdtEntry(1, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   252be:	83 ec 08             	sub    esp,0x8
   252c1:	6a 01                	push   0x1
   252c3:	6a c0                	push   0xffffffc0
   252c5:	6a 88                	push   0xffffff88
   252c7:	68 ff ff 0f 00       	push   0xfffff
   252cc:	68 00 00 00 c0       	push   0xc0000000
   252d1:	6a 01                	push   0x1
   252d3:	e8 96 3a ff ff       	call   18d6e <gdtEntry>
   252d8:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/initPaging.c:76
                  GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(2, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   252db:	83 ec 08             	sub    esp,0x8
   252de:	6a 01                	push   0x1
   252e0:	6a c0                	push   0xffffffc0
   252e2:	6a 82                	push   0xffffff82
   252e4:	68 ff ff 0f 00       	push   0xfffff
   252e9:	68 00 00 00 c0       	push   0xc0000000
   252ee:	6a 02                	push   0x2
   252f0:	e8 79 3a ff ff       	call   18d6e <gdtEntry>
   252f5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/initPaging.c:84
 0 - blank
 1 (0x08) - code @ 0xC0000000
 2 (0x10) - data @ 0xC0000000
*/

        kernelGDT.limit = sizeof(sGDT) * (GDT_TABLE_SIZE/8) - 1;
   252f8:	66 c7 05 88 99 12 00 	mov    WORD PTR ds:0x129988,0x7ff
   252ff:	ff 07 
/home/yogi/src/os/chrisOS/src/init/initPaging.c:85
        kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   25301:	c7 05 8a 99 12 00 00 	mov    DWORD PTR ds:0x12998a,0x164800
   25308:	48 16 00 
/home/yogi/src/os/chrisOS/src/init/initPaging.c:86
        set_gdt(&kernelGDT);
   2530b:	83 ec 0c             	sub    esp,0xc
   2530e:	68 88 99 12 00       	push   0x129988
   25313:	e8 25 be fd ff       	call   113d <set_gdt>
   25318:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:87
        idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   2531b:	83 ec 08             	sub    esp,0x8
   2531e:	6a 20                	push   0x20
   25320:	68 e0 a3 09 00       	push   0x9a3e0
   25325:	e8 9b 3c ff ff       	call   18fc5 <idt_init>
   2532a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:88
        doPagingJump();
   2532d:	e8 f5 bf fd ff       	call   1327 <doPagingJump>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:92

    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   25332:	a1 78 98 12 00       	mov    eax,ds:0x129878
   25337:	83 e0 20             	and    eax,0x20
   2533a:	85 c0                	test   eax,eax
   2533c:	74 15                	je     25353 <initializeKernelPaging+0x1f3>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:93
            printk("Clearing up temporary low page entries at 0x%08X\n", KERNEL_TEMP_LOW_PAGE_TABLE_BASE_ADDRESS);
   2533e:	83 ec 08             	sub    esp,0x8
   25341:	68 00 00 09 05       	push   0x5090000
   25346:	68 58 52 08 00       	push   0x85258
   2534b:	e8 53 25 00 00       	call   278a3 <printk>
   25350:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:97
#endif
        //Now that we've fixed our IDT, lets restart interrupts!
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   25353:	a1 78 98 12 00       	mov    eax,ds:0x129878
   25358:	83 e0 20             	and    eax,0x20
   2535b:	85 c0                	test   eax,eax
   2535d:	74 10                	je     2536f <initializeKernelPaging+0x20f>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:98
            printk("Exiting setupKernelPaging module\n");
   2535f:	83 ec 0c             	sub    esp,0xc
   25362:	68 8c 52 08 00       	push   0x8528c
   25367:	e8 37 25 00 00       	call   278a3 <printk>
   2536c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:100
#endif
}
   2536f:	90                   	nop
   25370:	c9                   	leave  
   25371:	c3                   	ret    
   25372:	66 90                	xchg   ax,ax

00025374 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   25374:	55                   	push   ebp
   25375:	89 e5                	mov    ebp,esp
   25377:	83 ec 08             	sub    esp,0x8
   2537a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2537d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25380:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   25384:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   25387:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   2538b:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   2538f:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   25390:	90                   	nop
   25391:	c9                   	leave  
   25392:	c3                   	ret    

00025393 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   25393:	55                   	push   ebp
   25394:	89 e5                	mov    ebp,esp
   25396:	83 ec 14             	sub    esp,0x14
   25399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2539c:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   253a0:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   253a4:	89 c2                	mov    edx,eax
   253a6:	ec                   	in     al,dx
   253a7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   253aa:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   253ae:	c9                   	leave  
   253af:	c3                   	ret    

000253b0 <reverse>:
reverse():
/home/yogi/src/os/chrisOS/src/init/utility.c:31
//#include <string.h>

/* reverse:  reverse string s in place */
extern int strlen(char*);
 void reverse(char s[])
 {
   253b0:	55                   	push   ebp
   253b1:	89 e5                	mov    ebp,esp
   253b3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/utility.c:35
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   253b6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   253bd:	83 ec 0c             	sub    esp,0xc
   253c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   253c3:	e8 ac 26 00 00       	call   27a74 <strlen>
   253c8:	83 c4 10             	add    esp,0x10
   253cb:	83 e8 01             	sub    eax,0x1
   253ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   253d1:	eb 39                	jmp    2540c <reverse+0x5c>
/home/yogi/src/os/chrisOS/src/init/utility.c:36 (discriminator 3)
         c = s[i];
   253d3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   253d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253d9:	01 d0                	add    eax,edx
   253db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   253de:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/init/utility.c:37 (discriminator 3)
         s[i] = s[j];
   253e1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   253e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253e7:	01 c2                	add    edx,eax
   253e9:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   253ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253ef:	01 c8                	add    eax,ecx
   253f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   253f4:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:38 (discriminator 3)
         s[j] = c;
   253f6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   253f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253fc:	01 c2                	add    edx,eax
   253fe:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   25402:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:35 (discriminator 3)
 void reverse(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   25404:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
   25408:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:35 (discriminator 1)
   2540c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2540f:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   25412:	7c bf                	jl     253d3 <reverse+0x23>
/home/yogi/src/os/chrisOS/src/init/utility.c:40
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
   25414:	90                   	nop
   25415:	c9                   	leave  
   25416:	c3                   	ret    

00025417 <itoa>:
itoa():
/home/yogi/src/os/chrisOS/src/init/utility.c:42
 void itoa(int n, char s[])
 {
   25417:	55                   	push   ebp
   25418:	89 e5                	mov    ebp,esp
   2541a:	53                   	push   ebx
   2541b:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/utility.c:45
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
   2541e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25421:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   25424:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   25428:	79 03                	jns    2542d <itoa+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:46
         n = -n;          /* make n positive */
   2542a:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:47
     i = 0;
   2542d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:49 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
   25434:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25437:	8d 50 01             	lea    edx,[eax+0x1]
   2543a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   2543d:	89 c2                	mov    edx,eax
   2543f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25442:	8d 1c 02             	lea    ebx,[edx+eax*1]
   25445:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   25448:	ba 67 66 66 66       	mov    edx,0x66666667
   2544d:	89 c8                	mov    eax,ecx
   2544f:	f7 ea                	imul   edx
   25451:	c1 fa 02             	sar    edx,0x2
   25454:	89 c8                	mov    eax,ecx
   25456:	c1 f8 1f             	sar    eax,0x1f
   25459:	29 c2                	sub    edx,eax
   2545b:	89 d0                	mov    eax,edx
   2545d:	c1 e0 02             	shl    eax,0x2
   25460:	01 d0                	add    eax,edx
   25462:	01 c0                	add    eax,eax
   25464:	29 c1                	sub    ecx,eax
   25466:	89 ca                	mov    edx,ecx
   25468:	89 d0                	mov    eax,edx
   2546a:	83 c0 30             	add    eax,0x30
   2546d:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:50 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
   2546f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   25472:	ba 67 66 66 66       	mov    edx,0x66666667
   25477:	89 c8                	mov    eax,ecx
   25479:	f7 ea                	imul   edx
   2547b:	c1 fa 02             	sar    edx,0x2
   2547e:	89 c8                	mov    eax,ecx
   25480:	c1 f8 1f             	sar    eax,0x1f
   25483:	29 c2                	sub    edx,eax
   25485:	89 d0                	mov    eax,edx
   25487:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   2548a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2548e:	7f a4                	jg     25434 <itoa+0x1d>
/home/yogi/src/os/chrisOS/src/init/utility.c:51
     if (sign < 0)
   25490:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   25494:	79 13                	jns    254a9 <itoa+0x92>
/home/yogi/src/os/chrisOS/src/init/utility.c:52
         s[i++] = '-';
   25496:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25499:	8d 50 01             	lea    edx,[eax+0x1]
   2549c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   2549f:	89 c2                	mov    edx,eax
   254a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   254a4:	01 d0                	add    eax,edx
   254a6:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/chrisOS/src/init/utility.c:53
     s[i] = '\0';
   254a9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   254ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   254af:	01 d0                	add    eax,edx
   254b1:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:54
     reverse(s);
   254b4:	83 ec 0c             	sub    esp,0xc
   254b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   254ba:	e8 f1 fe ff ff       	call   253b0 <reverse>
   254bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:55
 }
   254c2:	90                   	nop
   254c3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   254c6:	c9                   	leave  
   254c7:	c3                   	ret    

000254c8 <itox>:
itox():
/home/yogi/src/os/chrisOS/src/init/utility.c:57
void itox(unsigned int i, char *s)
{
   254c8:	55                   	push   ebp
   254c9:	89 e5                	mov    ebp,esp
   254cb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:60
    unsigned char n;

    s += 4;
   254ce:	83 45 0c 04          	add    DWORD PTR [ebp+0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:61
    *s = '\0';
   254d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   254d5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:63

    for (n = 8; n != 0; --n) {
   254d8:	c6 45 ff 08          	mov    BYTE PTR [ebp-0x1],0x8
   254dc:	eb 1e                	jmp    254fc <itox+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:64 (discriminator 3)
        *--s = "0123456789ABCDEF"[i & 0x0F];
   254de:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
   254e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   254e5:	83 e0 0f             	and    eax,0xf
   254e8:	0f b6 90 c0 53 08 00 	movzx  edx,BYTE PTR [eax+0x853c0]
   254ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   254f2:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:65 (discriminator 3)
        i >>= 4;
   254f4:	c1 6d 08 04          	shr    DWORD PTR [ebp+0x8],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:63 (discriminator 3)
    unsigned char n;

    s += 4;
    *s = '\0';

    for (n = 8; n != 0; --n) {
   254f8:	80 6d ff 01          	sub    BYTE PTR [ebp-0x1],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:63 (discriminator 1)
   254fc:	80 7d ff 00          	cmp    BYTE PTR [ebp-0x1],0x0
   25500:	75 dc                	jne    254de <itox+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:67
        *--s = "0123456789ABCDEF"[i & 0x0F];
        i >>= 4;
    }
}
   25502:	90                   	nop
   25503:	c9                   	leave  
   25504:	c3                   	ret    

00025505 <atoi>:
atoi():
/home/yogi/src/os/chrisOS/src/init/utility.c:70
// A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoi(char *str)
{
   25505:	55                   	push   ebp
   25506:	89 e5                	mov    ebp,esp
   25508:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:71
    int res = 0; // Initialize result
   2550b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:75
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   25512:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   25519:	eb 28                	jmp    25543 <atoi+0x3e>
/home/yogi/src/os/chrisOS/src/init/utility.c:76 (discriminator 3)
        res = res*10 + str[i] - '0';
   2551b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   2551e:	89 d0                	mov    eax,edx
   25520:	c1 e0 02             	shl    eax,0x2
   25523:	01 d0                	add    eax,edx
   25525:	01 c0                	add    eax,eax
   25527:	89 c1                	mov    ecx,eax
   25529:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   2552c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2552f:	01 d0                	add    eax,edx
   25531:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25534:	0f be c0             	movsx  eax,al
   25537:	01 c8                	add    eax,ecx
   25539:	83 e8 30             	sub    eax,0x30
   2553c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:75 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   2553f:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:75 (discriminator 1)
   25543:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   25546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25549:	01 d0                	add    eax,edx
   2554b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2554e:	84 c0                	test   al,al
   25550:	75 c9                	jne    2551b <atoi+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:79
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
   25552:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:80
}
   25555:	c9                   	leave  
   25556:	c3                   	ret    

00025557 <convert>:
convert():
/home/yogi/src/os/chrisOS/src/init/utility.c:83

int convert(int s)
{
   25557:	55                   	push   ebp
   25558:	89 e5                	mov    ebp,esp
   2555a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:85
  int c;
  char hex[] = {'A', 'B', 'C', 'D', 'E', 'F'};
   2555d:	c6 45 f6 41          	mov    BYTE PTR [ebp-0xa],0x41
   25561:	c6 45 f7 42          	mov    BYTE PTR [ebp-0x9],0x42
   25565:	c6 45 f8 43          	mov    BYTE PTR [ebp-0x8],0x43
   25569:	c6 45 f9 44          	mov    BYTE PTR [ebp-0x7],0x44
   2556d:	c6 45 fa 45          	mov    BYTE PTR [ebp-0x6],0x45
   25571:	c6 45 fb 46          	mov    BYTE PTR [ebp-0x5],0x46
/home/yogi/src/os/chrisOS/src/init/utility.c:86
  c = (s >= 0 && s < 9) ? s + '0' : hex[s - 10];
   25575:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   25579:	78 0e                	js     25589 <convert+0x32>
/home/yogi/src/os/chrisOS/src/init/utility.c:86 (discriminator 1)
   2557b:	83 7d 08 08          	cmp    DWORD PTR [ebp+0x8],0x8
   2557f:	7f 08                	jg     25589 <convert+0x32>
/home/yogi/src/os/chrisOS/src/init/utility.c:86 (discriminator 3)
   25581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25584:	83 c0 30             	add    eax,0x30
   25587:	eb 0e                	jmp    25597 <convert+0x40>
/home/yogi/src/os/chrisOS/src/init/utility.c:86 (discriminator 4)
   25589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2558c:	83 e8 0a             	sub    eax,0xa
   2558f:	0f b6 44 05 f6       	movzx  eax,BYTE PTR [ebp+eax*1-0xa]
   25594:	0f be c0             	movsx  eax,al
/home/yogi/src/os/chrisOS/src/init/utility.c:86 (discriminator 6)
   25597:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:87 (discriminator 6)
  return c;
   2559a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:88 (discriminator 6)
}
   2559d:	c9                   	leave  
   2559e:	c3                   	ret    

0002559f <itoha>:
itoha():
/home/yogi/src/os/chrisOS/src/init/utility.c:91

void itoha(unsigned int n, char *buf)
{
   2559f:	55                   	push   ebp
   255a0:	89 e5                	mov    ebp,esp
   255a2:	53                   	push   ebx
   255a3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:92
  int i = 0, j =0;
   255a6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   255ad:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:93
  j=7;
   255b4:	c7 45 f8 07 00 00 00 	mov    DWORD PTR [ebp-0x8],0x7
/home/yogi/src/os/chrisOS/src/init/utility.c:94
  while(n != 0)
   255bb:	eb 37                	jmp    255f4 <itoha+0x55>
/home/yogi/src/os/chrisOS/src/init/utility.c:96
  {
    i = n % 16;
   255bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   255c0:	83 e0 0f             	and    eax,0xf
   255c3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:97
      buf[j--] = convert(i);
   255c6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   255c9:	8d 50 ff             	lea    edx,[eax-0x1]
   255cc:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   255cf:	89 c2                	mov    edx,eax
   255d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   255d4:	8d 1c 02             	lea    ebx,[edx+eax*1]
   255d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   255da:	e8 78 ff ff ff       	call   25557 <convert>
   255df:	83 c4 04             	add    esp,0x4
   255e2:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:98
      n = (n - i) / 16;
   255e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   255e7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   255ea:	29 c2                	sub    edx,eax
   255ec:	89 d0                	mov    eax,edx
   255ee:	c1 e8 04             	shr    eax,0x4
   255f1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:94

void itoha(unsigned int n, char *buf)
{
  int i = 0, j =0;
  j=7;
  while(n != 0)
   255f4:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   255f8:	75 c3                	jne    255bd <itoha+0x1e>
/home/yogi/src/os/chrisOS/src/init/utility.c:100
  {
    i = n % 16;
      buf[j--] = convert(i);
      n = (n - i) / 16;
  }
  buf[j] = '\0';
   255fa:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   255fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25600:	01 d0                	add    eax,edx
   25602:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:101
}
   25605:	90                   	nop
   25606:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   25609:	c9                   	leave  
   2560a:	c3                   	ret    

0002560b <identify_data_sizes>:
identify_data_sizes():
/home/yogi/src/os/chrisOS/src/init/utility.c:104

void identify_data_sizes(sizeof_t* sizes)
{
   2560b:	55                   	push   ebp
   2560c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/utility.c:105
    sizes->shortSize = sizeof(short);
   2560e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25611:	66 c7 00 02 00       	mov    WORD PTR [eax],0x2
/home/yogi/src/os/chrisOS/src/init/utility.c:106
    sizes->intSize = sizeof(int);
   25616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25619:	66 c7 40 02 04 00    	mov    WORD PTR [eax+0x2],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:107
    sizes->longSize = sizeof(long);
   2561f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25622:	66 c7 40 04 04 00    	mov    WORD PTR [eax+0x4],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:108
    sizes->longLongSize = sizeof(long long);
   25628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2562b:	66 c7 40 06 08 00    	mov    WORD PTR [eax+0x6],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:109
    sizes->longLongIntSize = sizeof(long long int);
   25631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25634:	66 c7 40 08 08 00    	mov    WORD PTR [eax+0x8],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:110
}
   2563a:	90                   	nop
   2563b:	5d                   	pop    ebp
   2563c:	c3                   	ret    

0002563d <memset>:
memset():
/home/yogi/src/os/chrisOS/src/init/utility.c:113

void *memset(void *d1, int val, size_t len)
{
   2563d:	55                   	push   ebp
   2563e:	89 e5                	mov    ebp,esp
   25640:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:114
    uint8_t *d = d1;
   25643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25646:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:115
    uint16_t*e = d1;
   25649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2564c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:116
    uint16_t eVal=(val << 16) | (val << 8) | val;
   2564f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25652:	c1 e0 10             	shl    eax,0x10
   25655:	89 c2                	mov    edx,eax
   25657:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2565a:	c1 e0 08             	shl    eax,0x8
   2565d:	09 c2                	or     edx,eax
   2565f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25662:	09 d0                	or     eax,edx
   25664:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/src/os/chrisOS/src/init/utility.c:117
    uint32_t*f = d1;
   25668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2566b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:118
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
   2566e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25671:	c1 e0 18             	shl    eax,0x18
   25674:	89 c2                	mov    edx,eax
   25676:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25679:	c1 e0 10             	shl    eax,0x10
   2567c:	09 c2                	or     edx,eax
   2567e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25681:	c1 e0 08             	shl    eax,0x8
   25684:	09 d0                	or     eax,edx
   25686:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   25689:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:120
    
    if ((len%4)==0)
   2568c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2568f:	83 e0 03             	and    eax,0x3
   25692:	85 c0                	test   eax,eax
   25694:	75 1c                	jne    256b2 <memset+0x75>
/home/yogi/src/os/chrisOS/src/init/utility.c:121
    while (len-=4) {
   25696:	eb 0e                	jmp    256a6 <memset+0x69>
/home/yogi/src/os/chrisOS/src/init/utility.c:122
        *d++ = fVal;
   25698:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   2569b:	8d 50 01             	lea    edx,[eax+0x1]
   2569e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   256a1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   256a4:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:121
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
   256a6:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
   256aa:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   256ae:	75 e8                	jne    25698 <memset+0x5b>
   256b0:	eb 42                	jmp    256f4 <memset+0xb7>
/home/yogi/src/os/chrisOS/src/init/utility.c:124
        *d++ = fVal;
    }
    else if (((len%2)==0))
   256b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   256b5:	83 e0 01             	and    eax,0x1
   256b8:	85 c0                	test   eax,eax
   256ba:	75 2b                	jne    256e7 <memset+0xaa>
/home/yogi/src/os/chrisOS/src/init/utility.c:125
    while (len-=2) {
   256bc:	eb 0f                	jmp    256cd <memset+0x90>
/home/yogi/src/os/chrisOS/src/init/utility.c:126
        *d++ = eVal;
   256be:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   256c1:	8d 50 01             	lea    edx,[eax+0x1]
   256c4:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   256c7:	0f b7 55 f6          	movzx  edx,WORD PTR [ebp-0xa]
   256cb:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:125
    if ((len%4)==0)
    while (len-=4) {
        *d++ = fVal;
    }
    else if (((len%2)==0))
    while (len-=2) {
   256cd:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
   256d1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   256d5:	75 e7                	jne    256be <memset+0x81>
   256d7:	eb 1b                	jmp    256f4 <memset+0xb7>
/home/yogi/src/os/chrisOS/src/init/utility.c:130
        *d++ = eVal;
    }
    else
    while (len--) {
        *d++ = val;
   256d9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   256dc:	8d 50 01             	lea    edx,[eax+0x1]
   256df:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   256e2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   256e5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:129
    else if (((len%2)==0))
    while (len-=2) {
        *d++ = eVal;
    }
    else
    while (len--) {
   256e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   256ea:	8d 50 ff             	lea    edx,[eax-0x1]
   256ed:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   256f0:	85 c0                	test   eax,eax
   256f2:	75 e5                	jne    256d9 <memset+0x9c>
/home/yogi/src/os/chrisOS/src/init/utility.c:132
        *d++ = val;
    }
    return d1;
   256f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:133
}
   256f7:	c9                   	leave  
   256f8:	c3                   	ret    

000256f9 <bcdToDec>:
bcdToDec():
/home/yogi/src/os/chrisOS/src/init/utility.c:136

uint8_t bcdToDec(uint8_t val)
{
   256f9:	55                   	push   ebp
   256fa:	89 e5                	mov    ebp,esp
   256fc:	83 ec 04             	sub    esp,0x4
   256ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25702:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/init/utility.c:137
  return ( (val/16*10) + (val%16) );
   25705:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   25709:	c0 e8 04             	shr    al,0x4
   2570c:	89 c2                	mov    edx,eax
   2570e:	89 d0                	mov    eax,edx
   25710:	c1 e0 02             	shl    eax,0x2
   25713:	01 d0                	add    eax,edx
   25715:	01 c0                	add    eax,eax
   25717:	89 c2                	mov    edx,eax
   25719:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   2571d:	83 e0 0f             	and    eax,0xf
   25720:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/init/utility.c:138
}
   25722:	c9                   	leave  
   25723:	c3                   	ret    

00025724 <decToBcd>:
decToBcd():
/home/yogi/src/os/chrisOS/src/init/utility.c:141

uint8_t decToBcd(uint8_t val)
{
   25724:	55                   	push   ebp
   25725:	89 e5                	mov    ebp,esp
   25727:	53                   	push   ebx
   25728:	83 ec 04             	sub    esp,0x4
   2572b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2572e:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/init/utility.c:142
  return ( (val/10*16) + (val%10) );
   25731:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   25735:	0f b6 d0             	movzx  edx,al
   25738:	89 d0                	mov    eax,edx
   2573a:	c1 e0 02             	shl    eax,0x2
   2573d:	01 d0                	add    eax,edx
   2573f:	c1 e0 03             	shl    eax,0x3
   25742:	01 d0                	add    eax,edx
   25744:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   2574b:	01 d0                	add    eax,edx
   2574d:	66 c1 e8 08          	shr    ax,0x8
   25751:	c0 e8 03             	shr    al,0x3
   25754:	c1 e0 04             	shl    eax,0x4
   25757:	89 c3                	mov    ebx,eax
   25759:	0f b6 4d f8          	movzx  ecx,BYTE PTR [ebp-0x8]
   2575d:	0f b6 d1             	movzx  edx,cl
   25760:	89 d0                	mov    eax,edx
   25762:	c1 e0 02             	shl    eax,0x2
   25765:	01 d0                	add    eax,edx
   25767:	c1 e0 03             	shl    eax,0x3
   2576a:	01 d0                	add    eax,edx
   2576c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   25773:	01 d0                	add    eax,edx
   25775:	66 c1 e8 08          	shr    ax,0x8
   25779:	89 c2                	mov    edx,eax
   2577b:	c0 ea 03             	shr    dl,0x3
   2577e:	89 d0                	mov    eax,edx
   25780:	c1 e0 02             	shl    eax,0x2
   25783:	01 d0                	add    eax,edx
   25785:	01 c0                	add    eax,eax
   25787:	29 c1                	sub    ecx,eax
   25789:	89 ca                	mov    edx,ecx
   2578b:	8d 04 13             	lea    eax,[ebx+edx*1]
/home/yogi/src/os/chrisOS/src/init/utility.c:143
}
   2578e:	83 c4 04             	add    esp,0x4
   25791:	5b                   	pop    ebx
   25792:	5d                   	pop    ebp
   25793:	c3                   	ret    

00025794 <initSystemDate>:
initSystemDate():
/home/yogi/src/os/chrisOS/src/init/utility.c:145
void initSystemDate()
{
   25794:	55                   	push   ebp
   25795:	89 e5                	mov    ebp,esp
   25797:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/init/utility.c:148
    struct tm tmbuf;

    outb(0x70, 0x00);
   2579a:	6a 00                	push   0x0
   2579c:	6a 70                	push   0x70
   2579e:	e8 d1 fb ff ff       	call   25374 <outb>
   257a3:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:149
    tmbuf.tm_sec = bcdToDec(inb(0x71));
   257a6:	6a 71                	push   0x71
   257a8:	e8 e6 fb ff ff       	call   25393 <inb>
   257ad:	83 c4 04             	add    esp,0x4
   257b0:	0f b6 c0             	movzx  eax,al
   257b3:	50                   	push   eax
   257b4:	e8 40 ff ff ff       	call   256f9 <bcdToDec>
   257b9:	83 c4 04             	add    esp,0x4
   257bc:	0f b6 c0             	movzx  eax,al
   257bf:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:150
    outb(0x70, 0x02);
   257c2:	6a 02                	push   0x2
   257c4:	6a 70                	push   0x70
   257c6:	e8 a9 fb ff ff       	call   25374 <outb>
   257cb:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:151
    tmbuf.tm_min = bcdToDec(inb(0x71));
   257ce:	6a 71                	push   0x71
   257d0:	e8 be fb ff ff       	call   25393 <inb>
   257d5:	83 c4 04             	add    esp,0x4
   257d8:	0f b6 c0             	movzx  eax,al
   257db:	50                   	push   eax
   257dc:	e8 18 ff ff ff       	call   256f9 <bcdToDec>
   257e1:	83 c4 04             	add    esp,0x4
   257e4:	0f b6 c0             	movzx  eax,al
   257e7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:152
    outb(0x70, 0x04);
   257ea:	6a 04                	push   0x4
   257ec:	6a 70                	push   0x70
   257ee:	e8 81 fb ff ff       	call   25374 <outb>
   257f3:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:153
    tmbuf.tm_hour = bcdToDec(inb(0x71));
   257f6:	6a 71                	push   0x71
   257f8:	e8 96 fb ff ff       	call   25393 <inb>
   257fd:	83 c4 04             	add    esp,0x4
   25800:	0f b6 c0             	movzx  eax,al
   25803:	50                   	push   eax
   25804:	e8 f0 fe ff ff       	call   256f9 <bcdToDec>
   25809:	83 c4 04             	add    esp,0x4
   2580c:	0f b6 c0             	movzx  eax,al
   2580f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:154
    outb(0x70, 0x07);
   25812:	6a 07                	push   0x7
   25814:	6a 70                	push   0x70
   25816:	e8 59 fb ff ff       	call   25374 <outb>
   2581b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:155
    tmbuf.tm_mday = bcdToDec(inb(0x71));
   2581e:	6a 71                	push   0x71
   25820:	e8 6e fb ff ff       	call   25393 <inb>
   25825:	83 c4 04             	add    esp,0x4
   25828:	0f b6 c0             	movzx  eax,al
   2582b:	50                   	push   eax
   2582c:	e8 c8 fe ff ff       	call   256f9 <bcdToDec>
   25831:	83 c4 04             	add    esp,0x4
   25834:	0f b6 c0             	movzx  eax,al
   25837:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:156
    outb(0x70, 0x08);
   2583a:	6a 08                	push   0x8
   2583c:	6a 70                	push   0x70
   2583e:	e8 31 fb ff ff       	call   25374 <outb>
   25843:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:157
    tmbuf.tm_mon = bcdToDec(inb(0x71));
   25846:	6a 71                	push   0x71
   25848:	e8 46 fb ff ff       	call   25393 <inb>
   2584d:	83 c4 04             	add    esp,0x4
   25850:	0f b6 c0             	movzx  eax,al
   25853:	50                   	push   eax
   25854:	e8 a0 fe ff ff       	call   256f9 <bcdToDec>
   25859:	83 c4 04             	add    esp,0x4
   2585c:	0f b6 c0             	movzx  eax,al
   2585f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:158
    outb(0x70, 0x09);
   25862:	6a 09                	push   0x9
   25864:	6a 70                	push   0x70
   25866:	e8 09 fb ff ff       	call   25374 <outb>
   2586b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:159
    tmbuf.tm_year = bcdToDec(inb(0x71));
   2586e:	6a 71                	push   0x71
   25870:	e8 1e fb ff ff       	call   25393 <inb>
   25875:	83 c4 04             	add    esp,0x4
   25878:	0f b6 c0             	movzx  eax,al
   2587b:	50                   	push   eax
   2587c:	e8 78 fe ff ff       	call   256f9 <bcdToDec>
   25881:	83 c4 04             	add    esp,0x4
   25884:	0f b6 c0             	movzx  eax,al
   25887:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:160
    tmbuf.tm_isdst = -1;
   2588a:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/init/utility.c:161
    tmbuf.tm_year += 2000;
   25891:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   25894:	05 d0 07 00 00       	add    eax,0x7d0
   25899:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:162
    tmbuf.tm_year = tmbuf.tm_year - 1900;
   2589c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2589f:	2d 6c 07 00 00       	sub    eax,0x76c
   258a4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:163
    kSystemStartTime = mktime(&tmbuf);
   258a7:	83 ec 0c             	sub    esp,0xc
   258aa:	8d 45 cc             	lea    eax,[ebp-0x34]
   258ad:	50                   	push   eax
   258ae:	e8 ac 29 00 00       	call   2825f <mktime>
   258b3:	83 c4 10             	add    esp,0x10
   258b6:	a3 c8 97 12 00       	mov    ds:0x1297c8,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:164
    kSystemCurrentTime = kSystemStartTime;
   258bb:	a1 c8 97 12 00       	mov    eax,ds:0x1297c8
   258c0:	a3 cc 97 12 00       	mov    ds:0x1297cc,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:166
//printf("System Date = %d/%d/%d %d:%d:%d\n", tmbuf.tm_mon, tmbuf.tm_mday, tmbuf.tm_year, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec);
}
   258c5:	90                   	nop
   258c6:	c9                   	leave  
   258c7:	c3                   	ret    

000258c8 <strtoupper>:
strtoupper():
/home/yogi/src/os/chrisOS/src/init/utility.c:168
char * strtoupper(char* pointerToString)
{
   258c8:	55                   	push   ebp
   258c9:	89 e5                	mov    ebp,esp
   258cb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/utility.c:169
    uint8_t start=0, length=strlen(pointerToString);
   258ce:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   258d2:	83 ec 0c             	sub    esp,0xc
   258d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   258d8:	e8 97 21 00 00       	call   27a74 <strlen>
   258dd:	83 c4 10             	add    esp,0x10
   258e0:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/init/utility.c:170
    char* myPtr=pointerToString;
   258e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   258e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:173
    
        // Trim.Start:
        while (start<length)
   258e9:	eb 44                	jmp    2592f <strtoupper+0x67>
/home/yogi/src/os/chrisOS/src/init/utility.c:175
        {
            if (myPtr[start]>='a' && myPtr[start]<='z')
   258eb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   258ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   258f2:	01 d0                	add    eax,edx
   258f4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   258f7:	3c 60                	cmp    al,0x60
   258f9:	7e 2a                	jle    25925 <strtoupper+0x5d>
/home/yogi/src/os/chrisOS/src/init/utility.c:175 (discriminator 1)
   258fb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   258ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25902:	01 d0                	add    eax,edx
   25904:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25907:	3c 7a                	cmp    al,0x7a
   25909:	7f 1a                	jg     25925 <strtoupper+0x5d>
/home/yogi/src/os/chrisOS/src/init/utility.c:176
                myPtr[start]-=32;
   2590b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2590f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25912:	01 d0                	add    eax,edx
   25914:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
   25918:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2591b:	01 ca                	add    edx,ecx
   2591d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   25920:	83 ea 20             	sub    edx,0x20
   25923:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:177
            start++;
   25925:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25929:	83 c0 01             	add    eax,0x1
   2592c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:173
{
    uint8_t start=0, length=strlen(pointerToString);
    char* myPtr=pointerToString;
    
        // Trim.Start:
        while (start<length)
   2592f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25933:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   25936:	72 b3                	jb     258eb <strtoupper+0x23>
/home/yogi/src/os/chrisOS/src/init/utility.c:180
            if (myPtr[start]>='a' && myPtr[start]<='z')
                myPtr[start]-=32;
            start++;
        }

    return pointerToString;
   25938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:181
}
   2593b:	c9                   	leave  
   2593c:	c3                   	ret    

0002593d <printDumpedRegs>:
printDumpedRegs():
/home/yogi/src/os/chrisOS/src/init/utility.c:184

void printDumpedRegs()
{
   2593d:	55                   	push   ebp
   2593e:	89 e5                	mov    ebp,esp
   25940:	56                   	push   esi
   25941:	53                   	push   ebx
   25942:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:185
    uint32_t esp = exceptionSavedESP;
   25945:	a1 2c 97 12 00       	mov    eax,ds:0x12972c
   2594a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:189
    uint8_t* lCSIPPtr;

    
    lCSIPPtr=(uint8_t*)(exceptionEIP);
   2594d:	a1 38 97 12 00       	mov    eax,ds:0x129738
   25952:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:190
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", exceptionAX, exceptionBX, exceptionCX, exceptionDX,exceptionFlags);
   25955:	8b 35 30 97 12 00    	mov    esi,DWORD PTR ds:0x129730
   2595b:	8b 1d fc 96 12 00    	mov    ebx,DWORD PTR ds:0x1296fc
   25961:	8b 0d f8 96 12 00    	mov    ecx,DWORD PTR ds:0x1296f8
   25967:	8b 15 f4 96 12 00    	mov    edx,DWORD PTR ds:0x1296f4
   2596d:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
   25972:	83 ec 08             	sub    esp,0x8
   25975:	56                   	push   esi
   25976:	53                   	push   ebx
   25977:	51                   	push   ecx
   25978:	52                   	push   edx
   25979:	50                   	push   eax
   2597a:	68 d4 53 08 00       	push   0x853d4
   2597f:	e8 1f 1f 00 00       	call   278a3 <printk>
   25984:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:191
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", exceptionBP, exceptionSI, exceptionDI, exceptionSavedESP);
   25987:	8b 1d 2c 97 12 00    	mov    ebx,DWORD PTR ds:0x12972c
   2598d:	8b 0d 04 97 12 00    	mov    ecx,DWORD PTR ds:0x129704
   25993:	8b 15 00 97 12 00    	mov    edx,DWORD PTR ds:0x129700
   25999:	a1 08 97 12 00       	mov    eax,ds:0x129708
   2599e:	83 ec 0c             	sub    esp,0xc
   259a1:	53                   	push   ebx
   259a2:	51                   	push   ecx
   259a3:	52                   	push   edx
   259a4:	50                   	push   eax
   259a5:	68 04 54 08 00       	push   0x85404
   259aa:	e8 f4 1e 00 00       	call   278a3 <printk>
   259af:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:192
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\tCR4=%08X\n", exceptionCR0, exceptionCR2, exceptionCR3, exceptionCR4);
   259b2:	8b 1d 14 97 12 00    	mov    ebx,DWORD PTR ds:0x129714
   259b8:	8b 0d 10 97 12 00    	mov    ecx,DWORD PTR ds:0x129710
   259be:	8b 15 40 97 12 00    	mov    edx,DWORD PTR ds:0x129740
   259c4:	a1 0c 97 12 00       	mov    eax,ds:0x12970c
   259c9:	83 ec 0c             	sub    esp,0xc
   259cc:	53                   	push   ebx
   259cd:	51                   	push   ecx
   259ce:	52                   	push   edx
   259cf:	50                   	push   eax
   259d0:	68 2c 54 08 00       	push   0x8542c
   259d5:	e8 c9 1e 00 00       	call   278a3 <printk>
   259da:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:193
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", exceptionDS, exceptionES, exceptionFS, exceptionGS);
   259dd:	8b 1d 24 97 12 00    	mov    ebx,DWORD PTR ds:0x129724
   259e3:	8b 0d 20 97 12 00    	mov    ecx,DWORD PTR ds:0x129720
   259e9:	8b 15 1c 97 12 00    	mov    edx,DWORD PTR ds:0x12971c
   259ef:	a1 18 97 12 00       	mov    eax,ds:0x129718
   259f4:	83 ec 0c             	sub    esp,0xc
   259f7:	53                   	push   ebx
   259f8:	51                   	push   ecx
   259f9:	52                   	push   edx
   259fa:	50                   	push   eax
   259fb:	68 54 54 08 00       	push   0x85454
   25a00:	e8 9e 1e 00 00       	call   278a3 <printk>
   25a05:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:194
    printk("GDT=%08X\t TR=0x%08X\n",kernelGDT.base,exceptionTR);
   25a08:	8b 15 44 97 12 00    	mov    edx,DWORD PTR ds:0x129744
   25a0e:	a1 8a 99 12 00       	mov    eax,ds:0x12998a
   25a13:	83 ec 04             	sub    esp,0x4
   25a16:	52                   	push   edx
   25a17:	50                   	push   eax
   25a18:	68 79 54 08 00       	push   0x85479
   25a1d:	e8 81 1e 00 00       	call   278a3 <printk>
   25a22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:195
    printk("CS:EIP = %04X:%08X, error code=%08X\n", exceptionCS, exceptionEIP, exceptionErrorCode);
   25a25:	8b 0d 34 97 12 00    	mov    ecx,DWORD PTR ds:0x129734
   25a2b:	8b 15 38 97 12 00    	mov    edx,DWORD PTR ds:0x129738
   25a31:	a1 3c 97 12 00       	mov    eax,ds:0x12973c
   25a36:	51                   	push   ecx
   25a37:	52                   	push   edx
   25a38:	50                   	push   eax
   25a39:	68 90 54 08 00       	push   0x85490
   25a3e:	e8 60 1e 00 00       	call   278a3 <printk>
   25a43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:196
          printk("Bytes at CS:EIP: ");
   25a46:	83 ec 0c             	sub    esp,0xc
   25a49:	68 b5 54 08 00       	push   0x854b5
   25a4e:	e8 50 1e 00 00       	call   278a3 <printk>
   25a53:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:199
/*          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
*/          printk("\n");
   25a56:	83 ec 0c             	sub    esp,0xc
   25a59:	68 c7 54 08 00       	push   0x854c7
   25a5e:	e8 40 1e 00 00       	call   278a3 <printk>
   25a63:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:200
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
   25a66:	a1 28 97 12 00       	mov    eax,ds:0x129728
   25a6b:	83 ec 04             	sub    esp,0x4
   25a6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25a71:	50                   	push   eax
   25a72:	68 c9 54 08 00       	push   0x854c9
   25a77:	e8 27 1e 00 00       	call   278a3 <printk>
   25a7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:201
          for (int cnt=0;cnt<10;cnt++)
   25a7f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25a86:	eb 2b                	jmp    25ab3 <printDumpedRegs+0x176>
/home/yogi/src/os/chrisOS/src/init/utility.c:203 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   25a88:	a1 e8 96 12 00       	mov    eax,ds:0x1296e8
   25a8d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   25a90:	c1 e2 02             	shl    edx,0x2
   25a93:	01 d0                	add    eax,edx
   25a95:	8b 00                	mov    eax,DWORD PTR [eax]
   25a97:	83 ec 04             	sub    esp,0x4
   25a9a:	50                   	push   eax
   25a9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25a9e:	68 e1 54 08 00       	push   0x854e1
   25aa3:	e8 fb 1d 00 00       	call   278a3 <printk>
   25aa8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:204 (discriminator 3)
              esp+=4;
   25aab:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:201 (discriminator 3)
          printk("Bytes at CS:EIP: ");
/*          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
*/          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   25aaf:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:201 (discriminator 1)
   25ab3:	83 7d f0 09          	cmp    DWORD PTR [ebp-0x10],0x9
   25ab7:	7e cf                	jle    25a88 <printDumpedRegs+0x14b>
/home/yogi/src/os/chrisOS/src/init/utility.c:208
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
              esp+=4;
          }


}
   25ab9:	90                   	nop
   25aba:	8d 65 f8             	lea    esp,[ebp-0x8]
   25abd:	5b                   	pop    ebx
   25abe:	5e                   	pop    esi
   25abf:	5d                   	pop    ebp
   25ac0:	c3                   	ret    

00025ac1 <printDebugRegs>:
printDebugRegs():
/home/yogi/src/os/chrisOS/src/init/utility.c:211

void printDebugRegs()
{
   25ac1:	55                   	push   ebp
   25ac2:	89 e5                	mov    ebp,esp
   25ac4:	56                   	push   esi
   25ac5:	53                   	push   ebx
   25ac6:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:212
    uint32_t esp = debugSavedESP;
   25ac9:	a1 84 97 12 00       	mov    eax,ds:0x129784
   25ace:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:215
    uint8_t* lCSIPPtr;

    lCSIPPtr=(uint8_t*)(debugEIP);
   25ad1:	a1 94 97 12 00       	mov    eax,ds:0x129794
   25ad6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:216
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", debugAX, debugBX, debugCX, debugDX,debugFlags);
   25ad9:	8b 35 88 97 12 00    	mov    esi,DWORD PTR ds:0x129788
   25adf:	8b 1d 54 97 12 00    	mov    ebx,DWORD PTR ds:0x129754
   25ae5:	8b 0d 50 97 12 00    	mov    ecx,DWORD PTR ds:0x129750
   25aeb:	8b 15 4c 97 12 00    	mov    edx,DWORD PTR ds:0x12974c
   25af1:	a1 48 97 12 00       	mov    eax,ds:0x129748
   25af6:	83 ec 08             	sub    esp,0x8
   25af9:	56                   	push   esi
   25afa:	53                   	push   ebx
   25afb:	51                   	push   ecx
   25afc:	52                   	push   edx
   25afd:	50                   	push   eax
   25afe:	68 d4 53 08 00       	push   0x853d4
   25b03:	e8 9b 1d 00 00       	call   278a3 <printk>
   25b08:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:217
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
   25b0b:	8b 1d 84 97 12 00    	mov    ebx,DWORD PTR ds:0x129784
   25b11:	8b 0d 5c 97 12 00    	mov    ecx,DWORD PTR ds:0x12975c
   25b17:	8b 15 58 97 12 00    	mov    edx,DWORD PTR ds:0x129758
   25b1d:	a1 60 97 12 00       	mov    eax,ds:0x129760
   25b22:	83 ec 0c             	sub    esp,0xc
   25b25:	53                   	push   ebx
   25b26:	51                   	push   ecx
   25b27:	52                   	push   edx
   25b28:	50                   	push   eax
   25b29:	68 04 54 08 00       	push   0x85404
   25b2e:	e8 70 1d 00 00       	call   278a3 <printk>
   25b33:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:218
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
   25b36:	8b 0d 6c 97 12 00    	mov    ecx,DWORD PTR ds:0x12976c
   25b3c:	8b 15 68 97 12 00    	mov    edx,DWORD PTR ds:0x129768
   25b42:	a1 64 97 12 00       	mov    eax,ds:0x129764
   25b47:	51                   	push   ecx
   25b48:	52                   	push   edx
   25b49:	50                   	push   eax
   25b4a:	68 f3 54 08 00       	push   0x854f3
   25b4f:	e8 4f 1d 00 00       	call   278a3 <printk>
   25b54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:219
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugFS, debugGS);
   25b57:	8b 1d 7c 97 12 00    	mov    ebx,DWORD PTR ds:0x12977c
   25b5d:	8b 0d 78 97 12 00    	mov    ecx,DWORD PTR ds:0x129778
   25b63:	8b 15 74 97 12 00    	mov    edx,DWORD PTR ds:0x129774
   25b69:	a1 70 97 12 00       	mov    eax,ds:0x129770
   25b6e:	83 ec 0c             	sub    esp,0xc
   25b71:	53                   	push   ebx
   25b72:	51                   	push   ecx
   25b73:	52                   	push   edx
   25b74:	50                   	push   eax
   25b75:	68 54 54 08 00       	push   0x85454
   25b7a:	e8 24 1d 00 00       	call   278a3 <printk>
   25b7f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:220
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
   25b82:	8b 0d 8c 97 12 00    	mov    ecx,DWORD PTR ds:0x12978c
   25b88:	8b 15 94 97 12 00    	mov    edx,DWORD PTR ds:0x129794
   25b8e:	a1 90 97 12 00       	mov    eax,ds:0x129790
   25b93:	51                   	push   ecx
   25b94:	52                   	push   edx
   25b95:	50                   	push   eax
   25b96:	68 90 54 08 00       	push   0x85490
   25b9b:	e8 03 1d 00 00       	call   278a3 <printk>
   25ba0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:221
          printk("Bytes at CS:EIP: ");
   25ba3:	83 ec 0c             	sub    esp,0xc
   25ba6:	68 b5 54 08 00       	push   0x854b5
   25bab:	e8 f3 1c 00 00       	call   278a3 <printk>
   25bb0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:222
          for (int cnt=0;cnt<19;cnt++)
   25bb3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25bba:	eb 23                	jmp    25bdf <printDebugRegs+0x11e>
/home/yogi/src/os/chrisOS/src/init/utility.c:223 (discriminator 3)
              printk("%02X ", lCSIPPtr[cnt]);
   25bbc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   25bbf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25bc2:	01 d0                	add    eax,edx
   25bc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25bc7:	0f b6 c0             	movzx  eax,al
   25bca:	83 ec 08             	sub    esp,0x8
   25bcd:	50                   	push   eax
   25bce:	68 0f 55 08 00       	push   0x8550f
   25bd3:	e8 cb 1c 00 00       	call   278a3 <printk>
   25bd8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:222 (discriminator 3)
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugFS, debugGS);
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
   25bdb:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:222 (discriminator 1)
   25bdf:	83 7d f0 12          	cmp    DWORD PTR [ebp-0x10],0x12
   25be3:	7e d7                	jle    25bbc <printDebugRegs+0xfb>
/home/yogi/src/os/chrisOS/src/init/utility.c:224
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
   25be5:	83 ec 0c             	sub    esp,0xc
   25be8:	68 c7 54 08 00       	push   0x854c7
   25bed:	e8 b1 1c 00 00       	call   278a3 <printk>
   25bf2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:225
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
   25bf5:	a1 80 97 12 00       	mov    eax,ds:0x129780
   25bfa:	83 ec 04             	sub    esp,0x4
   25bfd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25c00:	50                   	push   eax
   25c01:	68 c9 54 08 00       	push   0x854c9
   25c06:	e8 98 1c 00 00       	call   278a3 <printk>
   25c0b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:226
          for (int cnt=0;cnt<10;cnt++)
   25c0e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   25c15:	eb 2b                	jmp    25c42 <printDebugRegs+0x181>
/home/yogi/src/os/chrisOS/src/init/utility.c:228 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
   25c17:	a1 ec 96 12 00       	mov    eax,ds:0x1296ec
   25c1c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   25c1f:	c1 e2 02             	shl    edx,0x2
   25c22:	01 d0                	add    eax,edx
   25c24:	8b 00                	mov    eax,DWORD PTR [eax]
   25c26:	83 ec 04             	sub    esp,0x4
   25c29:	50                   	push   eax
   25c2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25c2d:	68 e1 54 08 00       	push   0x854e1
   25c32:	e8 6c 1c 00 00       	call   278a3 <printk>
   25c37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:229 (discriminator 3)
              esp+=4;
   25c3a:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:226 (discriminator 3)
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   25c3e:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:226 (discriminator 1)
   25c42:	83 7d ec 09          	cmp    DWORD PTR [ebp-0x14],0x9
   25c46:	7e cf                	jle    25c17 <printDebugRegs+0x156>
/home/yogi/src/os/chrisOS/src/init/utility.c:233
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
              esp+=4;
          }


}
   25c48:	90                   	nop
   25c49:	8d 65 f8             	lea    esp,[ebp-0x8]
   25c4c:	5b                   	pop    ebx
   25c4d:	5e                   	pop    esi
   25c4e:	5d                   	pop    ebp
   25c4f:	c3                   	ret    

00025c50 <reboot>:
reboot():
/home/yogi/src/os/chrisOS/src/init/utility.c:241
/* keyboard interface IO port: data and control
   READ:   status port
   WRITE:  control register */
 
void reboot(bool waitFirst)
{
   25c50:	55                   	push   ebp
   25c51:	89 e5                	mov    ebp,esp
   25c53:	83 ec 28             	sub    esp,0x28
   25c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c59:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/utility.c:244
    uint8_t temp;
 
    if (waitFirst)
   25c5c:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   25c60:	74 21                	je     25c83 <reboot+0x33>
/home/yogi/src/os/chrisOS/src/init/utility.c:246
    {
        puts("Rebooting ... ");
   25c62:	83 ec 0c             	sub    esp,0xc
   25c65:	68 15 55 08 00       	push   0x85515
   25c6a:	e8 f7 27 ff ff       	call   18466 <puts>
   25c6f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:247
        __asm__("sti\n");
   25c72:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/init/utility.c:248
        wait(3000);
   25c73:	83 ec 0c             	sub    esp,0xc
   25c76:	68 b8 0b 00 00       	push   0xbb8
   25c7b:	e8 62 2e 00 00       	call   28ae2 <wait>
   25c80:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:250
    }
    __asm__ volatile ("cli"); /* disable all interrupts */
   25c83:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/init/utility.c:255
 
    /* Clear all keyboard buffers (output and command buffers) */
    do
    {
        temp = inb(KBRD_INTRFC); /* empty user data */
   25c84:	83 ec 0c             	sub    esp,0xc
   25c87:	6a 64                	push   0x64
   25c89:	e8 05 f7 ff ff       	call   25393 <inb>
   25c8e:	83 c4 10             	add    esp,0x10
   25c91:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:256
        if (check_flag(temp, KBRD_BIT_KDATA) != 0)
   25c94:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25c98:	83 e0 01             	and    eax,0x1
   25c9b:	85 c0                	test   eax,eax
   25c9d:	74 0d                	je     25cac <reboot+0x5c>
/home/yogi/src/os/chrisOS/src/init/utility.c:257
            inb(KBRD_IO); /* empty keyboard data */
   25c9f:	83 ec 0c             	sub    esp,0xc
   25ca2:	6a 60                	push   0x60
   25ca4:	e8 ea f6 ff ff       	call   25393 <inb>
   25ca9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:258
    } while (check_flag(temp, KBRD_BIT_UDATA) != 0);
   25cac:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25cb0:	83 e0 02             	and    eax,0x2
   25cb3:	85 c0                	test   eax,eax
   25cb5:	75 cd                	jne    25c84 <reboot+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:260
 
    outb(KBRD_INTRFC, KBRD_RESET); /* pulse CPU reset line */
   25cb7:	83 ec 08             	sub    esp,0x8
   25cba:	68 fe 00 00 00       	push   0xfe
   25cbf:	6a 64                	push   0x64
   25cc1:	e8 ae f6 ff ff       	call   25374 <outb>
   25cc6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:262 (discriminator 1)
loop:
    __asm__ volatile ("hlt"); /* if that didn't work, halt the CPU */
   25cc9:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/utility.c:263 (discriminator 1)
    goto loop; /* if a NMI is received, halt again */
   25cca:	eb fd                	jmp    25cc9 <reboot+0x79>

00025ccc <dumpKernelAddresses>:
dumpKernelAddresses():
/home/yogi/src/os/chrisOS/src/init/utility.c:267
}

void dumpKernelAddresses()
{
   25ccc:	55                   	push   ebp
   25ccd:	89 e5                	mov    ebp,esp
   25ccf:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:268
printk("Kernel Variable List:\n");
   25cd2:	83 ec 0c             	sub    esp,0xc
   25cd5:	68 24 55 08 00       	push   0x85524
   25cda:	e8 c4 1b 00 00       	call   278a3 <printk>
   25cdf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:269
printk("\tKERNEL_OBJECT_BASE_ADDRESS=0x%08x\n",KERNEL_OBJECT_BASE_ADDRESS);
   25ce2:	83 ec 08             	sub    esp,0x8
   25ce5:	68 00 00 16 00       	push   0x160000
   25cea:	68 3c 55 08 00       	push   0x8553c
   25cef:	e8 af 1b 00 00       	call   278a3 <printk>
   25cf4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:270
printk("\tE820_TABLE_ADDRESS=0x%08x (0x%08X)\n",E820_TABLE_ADDRESS);
   25cf7:	83 ec 08             	sub    esp,0x8
   25cfa:	68 00 00 16 00       	push   0x160000
   25cff:	68 60 55 08 00       	push   0x85560
   25d04:	e8 9a 1b 00 00       	call   278a3 <printk>
   25d09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:271
printk("\tMP_CONFIG_TABLE_ADDRESS=0x%08x\n",MP_CONFIG_TABLE_ADDRESS);
   25d0c:	83 ec 08             	sub    esp,0x8
   25d0f:	68 b0 04 16 00       	push   0x1604b0
   25d14:	68 88 55 08 00       	push   0x85588
   25d19:	e8 85 1b 00 00       	call   278a3 <printk>
   25d1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:272
printk("\tKEYBOARD_BUFFER_ADDRESS=0x%08x\n",KEYBOARD_BUFFER_ADDRESS);
   25d21:	83 ec 08             	sub    esp,0x8
   25d24:	68 b0 24 16 00       	push   0x1624b0
   25d29:	68 ac 55 08 00       	push   0x855ac
   25d2e:	e8 70 1b 00 00       	call   278a3 <printk>
   25d33:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:273
printk("\tIDT_TABLE_ADDRESS=0x%08x\n",IDT_TABLE_ADDRESS);
   25d36:	83 ec 08             	sub    esp,0x8
   25d39:	68 00 30 16 00       	push   0x163000
   25d3e:	68 cd 55 08 00       	push   0x855cd
   25d43:	e8 5b 1b 00 00       	call   278a3 <printk>
   25d48:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:274
printk("\tINIT_GDT_TABLE_ADDRESS=0x%08x\n",INIT_GDT_TABLE_ADDRESS);
   25d4b:	83 ec 08             	sub    esp,0x8
   25d4e:	68 00 48 16 00       	push   0x164800
   25d53:	68 e8 55 08 00       	push   0x855e8
   25d58:	e8 46 1b 00 00       	call   278a3 <printk>
   25d5d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:275
printk("\tTASK_TABLE_ADDRESS=0x%08x\n",TASK_TABLE_ADDRESS);
   25d60:	83 ec 08             	sub    esp,0x8
   25d63:	68 00 60 16 00       	push   0x166000
   25d68:	68 08 56 08 00       	push   0x85608
   25d6d:	e8 31 1b 00 00       	call   278a3 <printk>
   25d72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:276
printk("\tTSS_TABLE_ADDRESS=0x%08x\n",TSS_TABLE_ADDRESS);
   25d75:	83 ec 08             	sub    esp,0x8
   25d78:	68 00 70 2f 00       	push   0x2f7000
   25d7d:	68 24 56 08 00       	push   0x85624
   25d82:	e8 1c 1b 00 00       	call   278a3 <printk>
   25d87:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:277
printk("\tATA_MBR_ARRAY_ADDRESS=0x%08x\n",ATA_MBR_ARRAY_ADDRESS);
   25d8a:	83 ec 08             	sub    esp,0x8
   25d8d:	68 00 70 49 00       	push   0x497000
   25d92:	68 40 56 08 00       	push   0x85640
   25d97:	e8 07 1b 00 00       	call   278a3 <printk>
   25d9c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:278
printk("\tPCI_DEVICE_LIST_ADDRESS=0x%08x\n",PCI_DEVICE_LIST_ADDRESS);
   25d9f:	83 ec 08             	sub    esp,0x8
   25da2:	68 00 80 49 00       	push   0x498000
   25da7:	68 60 56 08 00       	push   0x85660
   25dac:	e8 f2 1a 00 00       	call   278a3 <printk>
   25db1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:279
printk("\tPCI_BRIDGE_LIST_ADDRESS=0x%08x\n",PCI_BRIDGE_LIST_ADDRESS);
   25db4:	83 ec 08             	sub    esp,0x8
   25db7:	68 00 80 4a 00       	push   0x4a8000
   25dbc:	68 84 56 08 00       	push   0x85684
   25dc1:	e8 dd 1a 00 00       	call   278a3 <printk>
   25dc6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:280
printk("\tPCI_FUNCTION_LIST_ADDRESS=0x%08x\n",PCI_FUNCTION_LIST_ADDRESS);
   25dc9:	83 ec 08             	sub    esp,0x8
   25dcc:	68 00 80 4b 00       	push   0x4b8000
   25dd1:	68 a8 56 08 00       	push   0x856a8
   25dd6:	e8 c8 1a 00 00       	call   278a3 <printk>
   25ddb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:281
printk("\tGDT_PMODE_16BIT_TABLE_ADDRESS=0x%08x\n",GDT_PMODE_16BIT_TABLE_ADDRESS);
   25dde:	83 ec 08             	sub    esp,0x8
   25de1:	68 00 90 4b 00       	push   0x4b9000
   25de6:	68 cc 56 08 00       	push   0x856cc
   25deb:	e8 b3 1a 00 00       	call   278a3 <printk>
   25df0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:282
printk("\tKERNEL_PAGE_DIR_ADDRESS=0x%08x\n",KERNEL_PAGE_DIR_ADDRESS);
   25df3:	83 ec 08             	sub    esp,0x8
   25df6:	68 00 a0 4b 00       	push   0x4ba000
   25dfb:	68 f4 56 08 00       	push   0x856f4
   25e00:	e8 9e 1a 00 00       	call   278a3 <printk>
   25e05:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:283
printk("\tKERNEL_PAGE_TABLE_BASE_ADDRESS=0x%08x\n",KERNEL_PAGE_TABLE_BASE_ADDRESS);
   25e08:	83 ec 08             	sub    esp,0x8
   25e0b:	68 00 c0 4c 00       	push   0x4cc000
   25e10:	68 18 57 08 00       	push   0x85718
   25e15:	e8 89 1a 00 00       	call   278a3 <printk>
   25e1a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:284
printk("\tSAVED_STACK_FOR_EXCEPTIONS_ADDRESS=0x%08x\n",SAVED_STACK_FOR_EXCEPTIONS_ADDRESS);
   25e1d:	83 ec 08             	sub    esp,0x8
   25e20:	68 00 d0 ac 00       	push   0xacd000
   25e25:	68 40 57 08 00       	push   0x85740
   25e2a:	e8 74 1a 00 00       	call   278a3 <printk>
   25e2f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:285
printk("\tSAVED_STACK_FOR_DEBUGGING_ADDRESS=0x%08x\n",SAVED_STACK_FOR_DEBUGGING_ADDRESS);
   25e32:	83 ec 08             	sub    esp,0x8
   25e35:	68 00 f0 ac 00       	push   0xacf000
   25e3a:	68 6c 57 08 00       	push   0x8576c
   25e3f:	e8 5f 1a 00 00       	call   278a3 <printk>
   25e44:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:286
printk("\tCPU_APIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_APIC_REGISTER_REMAP_BASE_ADDRESS);
   25e47:	83 ec 08             	sub    esp,0x8
   25e4a:	68 00 10 ad 00       	push   0xad1000
   25e4f:	68 98 57 08 00       	push   0x85798
   25e54:	e8 4a 1a 00 00       	call   278a3 <printk>
   25e59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:287
printk("\tCPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS);
   25e5c:	83 ec 08             	sub    esp,0x8
   25e5f:	68 00 20 ad 00       	push   0xad2000
   25e64:	68 c8 57 08 00       	push   0x857c8
   25e69:	e8 35 1a 00 00       	call   278a3 <printk>
   25e6e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:288
printk("\tKERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS=0x%08x\n",KERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS);
   25e71:	83 ec 08             	sub    esp,0x8
   25e74:	68 04 20 ad 00       	push   0xad2004
   25e79:	68 f8 57 08 00       	push   0x857f8
   25e7e:	e8 20 1a 00 00       	call   278a3 <printk>
   25e83:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:289
printk("\tAHCI_ABAR_REMAPPED_ADDRESS=0x%08x\n",AHCI_ABAR_REMAPPED_ADDRESS);
   25e86:	83 ec 08             	sub    esp,0x8
   25e89:	68 00 30 ad 00       	push   0xad3000
   25e8e:	68 2c 58 08 00       	push   0x8582c
   25e93:	e8 0b 1a 00 00       	call   278a3 <printk>
   25e98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:290
printk("\tAHCI_PORT_BASE_REMAP_ADDRESS=0x%08x\n",AHCI_PORT_BASE_REMAP_ADDRESS);
   25e9b:	83 ec 08             	sub    esp,0x8
   25e9e:	68 00 30 b1 00       	push   0xb13000
   25ea3:	68 50 58 08 00       	push   0x85850
   25ea8:	e8 f6 19 00 00       	call   278a3 <printk>
   25ead:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:291
printk("\tAHCI_DISK_BUFFER_ADDRESS=0x%08x\n",AHCI_DISK_BUFFER_ADDRESS);
   25eb0:	83 ec 08             	sub    esp,0x8
   25eb3:	68 00 30 c5 00       	push   0xc53000
   25eb8:	68 78 58 08 00       	push   0x85878
   25ebd:	e8 e1 19 00 00       	call   278a3 <printk>
   25ec2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:292
printk("\tATA_DEVICE_INFO_ADDRESS=0x%08x\n",ATA_DEVICE_INFO_ADDRESS);
   25ec5:	83 ec 08             	sub    esp,0x8
   25ec8:	68 00 30 d9 00       	push   0xd93000
   25ecd:	68 9c 58 08 00       	push   0x8589c
   25ed2:	e8 cc 19 00 00       	call   278a3 <printk>
   25ed7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:293
printk("\tAHCI_CAPS_ADDRESS=0x%08x\n",AHCI_CAPS_ADDRESS);
   25eda:	83 ec 08             	sub    esp,0x8
   25edd:	68 20 7e d9 00       	push   0xd97e20
   25ee2:	68 bd 58 08 00       	push   0x858bd
   25ee7:	e8 b7 19 00 00       	call   278a3 <printk>
   25eec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:294
printk("\tTSS_AVAILABLE_ADDRESS=0x%08x\n",TASK_AVAILABLE_ADDRESS);
   25eef:	83 ec 08             	sub    esp,0x8
   25ef2:	68 40 cc d9 00       	push   0xd9cc40
   25ef7:	68 d8 58 08 00       	push   0x858d8
   25efc:	e8 a2 19 00 00       	call   278a3 <printk>
   25f01:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:295
printk("\tGDT_AVAILABLE_ADDRESS=0x%08x\n",GDT_AVAILABLE_ADDRESS);
   25f04:	83 ec 08             	sub    esp,0x8
   25f07:	68 40 d4 d9 00       	push   0xd9d440
   25f0c:	68 f8 58 08 00       	push   0x858f8
   25f11:	e8 8d 19 00 00       	call   278a3 <printk>
   25f16:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:296
printk("\tEXEC_FILE_LOAD_INFO=0x%08x\n",EXEC_FILE_LOAD_INFO);
   25f19:	83 ec 08             	sub    esp,0x8
   25f1c:	68 40 dc d9 00       	push   0xd9dc40
   25f21:	68 17 59 08 00       	push   0x85917
   25f26:	e8 78 19 00 00       	call   278a3 <printk>
   25f2b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:297
printk("\tAHCI_ABAR_ADDRESS=0x%08x\n",AHCI_ABAR_ADDRESS);
   25f2e:	83 ec 08             	sub    esp,0x8
   25f31:	68 e0 62 db 00       	push   0xdb62e0
   25f36:	68 34 59 08 00       	push   0x85934
   25f3b:	e8 63 19 00 00       	call   278a3 <printk>
   25f40:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:298
printk("\tEND_OF_KERNEL_OBJECTS_ADDRESS=0x%08x\n",END_OF_KERNEL_OBJECTS_ADDRESS);
   25f43:	83 ec 08             	sub    esp,0x8
   25f46:	68 e0 62 eb 00       	push   0xeb62e0
   25f4b:	68 50 59 08 00       	push   0x85950
   25f50:	e8 4e 19 00 00       	call   278a3 <printk>
   25f55:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:299
}
   25f58:	90                   	nop
   25f59:	c9                   	leave  
   25f5a:	c3                   	ret    

00025f5b <pauseDisplay>:
pauseDisplay():
/home/yogi/src/os/chrisOS/src/init/utility.c:302

bool pauseDisplay(bool offerToQuit)
{
   25f5b:	55                   	push   ebp
   25f5c:	89 e5                	mov    ebp,esp
   25f5e:	83 ec 28             	sub    esp,0x28
   25f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f64:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/utility.c:303
    if (offerToQuit)
   25f67:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   25f6b:	74 12                	je     25f7f <pauseDisplay+0x24>
/home/yogi/src/os/chrisOS/src/init/utility.c:304
        printk("Press q to quit, any other key to continue ...");
   25f6d:	83 ec 0c             	sub    esp,0xc
   25f70:	68 78 59 08 00       	push   0x85978
   25f75:	e8 29 19 00 00       	call   278a3 <printk>
   25f7a:	83 c4 10             	add    esp,0x10
   25f7d:	eb 10                	jmp    25f8f <pauseDisplay+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:306
    else
        printk("Press a key to continue ... ");
   25f7f:	83 ec 0c             	sub    esp,0xc
   25f82:	68 a7 59 08 00       	push   0x859a7
   25f87:	e8 17 19 00 00       	call   278a3 <printk>
   25f8c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:307
    char lPressedKey=waitForKeyboardKey();
   25f8f:	e8 c3 b2 fe ff       	call   11257 <waitForKeyboardKey>
   25f94:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:308
    cursorMoveToX(0);
   25f97:	83 ec 0c             	sub    esp,0xc
   25f9a:	6a 00                	push   0x0
   25f9c:	e8 c2 23 ff ff       	call   18363 <cursorMoveToX>
   25fa1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:309
    printk("                                           ");
   25fa4:	83 ec 0c             	sub    esp,0xc
   25fa7:	68 c4 59 08 00       	push   0x859c4
   25fac:	e8 f2 18 00 00       	call   278a3 <printk>
   25fb1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:310
    cursorMoveToX(0);
   25fb4:	83 ec 0c             	sub    esp,0xc
   25fb7:	6a 00                	push   0x0
   25fb9:	e8 a5 23 ff ff       	call   18363 <cursorMoveToX>
   25fbe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:311
    if (lPressedKey=='q' && offerToQuit)
   25fc1:	80 7d f7 71          	cmp    BYTE PTR [ebp-0x9],0x71
   25fc5:	75 0d                	jne    25fd4 <pauseDisplay+0x79>
/home/yogi/src/os/chrisOS/src/init/utility.c:311 (discriminator 1)
   25fc7:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   25fcb:	74 07                	je     25fd4 <pauseDisplay+0x79>
/home/yogi/src/os/chrisOS/src/init/utility.c:312
        return true;
   25fcd:	b8 01 00 00 00       	mov    eax,0x1
   25fd2:	eb 05                	jmp    25fd9 <pauseDisplay+0x7e>
/home/yogi/src/os/chrisOS/src/init/utility.c:313
    return false;
   25fd4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:314
}
   25fd9:	c9                   	leave  
   25fda:	c3                   	ret    

00025fdb <mallocTemp>:
mallocTemp():
/home/yogi/src/os/chrisOS/src/init/utility.c:318

int memPtr=0xe00000;
uintptr_t* mallocTemp(int size)
{
   25fdb:	55                   	push   ebp
   25fdc:	89 e5                	mov    ebp,esp
   25fde:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:319
    uintptr_t lRetVal = memPtr;
   25fe1:	a1 c0 e2 02 00       	mov    eax,ds:0x2e2c0
   25fe6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:320
    memPtr+=size;
   25fe9:	8b 15 c0 e2 02 00    	mov    edx,DWORD PTR ds:0x2e2c0
   25fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ff2:	01 d0                	add    eax,edx
   25ff4:	a3 c0 e2 02 00       	mov    ds:0x2e2c0,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:321
    return (uintptr_t*)lRetVal;
   25ff9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:322
}
   25ffc:	c9                   	leave  
   25ffd:	c3                   	ret    

00025ffe <dumpGDTTable>:
dumpGDTTable():
/home/yogi/src/os/chrisOS/src/init/utility.c:325

void dumpGDTTable()
{
   25ffe:	55                   	push   ebp
   25fff:	89 e5                	mov    ebp,esp
   26001:	56                   	push   esi
   26002:	53                   	push   ebx
   26003:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:326
    sGDT* theGDT=bootGdt;
   26006:	a1 84 99 12 00       	mov    eax,ds:0x129984
   2600b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:328
    
    printk("Listing GDT Table\n");
   2600e:	83 ec 0c             	sub    esp,0xc
   26011:	68 f0 59 08 00       	push   0x859f0
   26016:	e8 88 18 00 00       	call   278a3 <printk>
   2601b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:329
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
   2601e:	83 ec 0c             	sub    esp,0xc
   26021:	68 04 5a 08 00       	push   0x85a04
   26026:	e8 78 18 00 00       	call   278a3 <printk>
   2602b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:330
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
   2602e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   26035:	e9 94 00 00 00       	jmp    260ce <dumpGDTTable+0xd0>
/home/yogi/src/os/chrisOS/src/init/utility.c:332
    {
        if (theGDT->access!=0 || cnt==0)
   2603a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2603d:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   26041:	84 c0                	test   al,al
   26043:	75 06                	jne    2604b <dumpGDTTable+0x4d>
/home/yogi/src/os/chrisOS/src/init/utility.c:332 (discriminator 1)
   26045:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   26049:	75 7b                	jne    260c6 <dumpGDTTable+0xc8>
/home/yogi/src/os/chrisOS/src/init/utility.c:343
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
   2604b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2604e:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   26052:	0f be c0             	movsx  eax,al
   26055:	25 f0 00 00 00       	and    eax,0xf0
   2605a:	c1 f8 04             	sar    eax,0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:334
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   2605d:	0f b6 d0             	movzx  edx,al
/home/yogi/src/os/chrisOS/src/init/utility.c:342
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
   26060:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26063:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/init/utility.c:334
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   26067:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/init/utility.c:341
                    "0x%08X\t"  /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
   2606a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   2606d:	0f b7 09             	movzx  ecx,WORD PTR [ecx]
/home/yogi/src/os/chrisOS/src/init/utility.c:334
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   26070:	0f b7 d9             	movzx  ebx,cx
/home/yogi/src/os/chrisOS/src/init/utility.c:341
                    "0x%08X\t"  /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
   26073:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   26076:	0f b6 49 06          	movzx  ecx,BYTE PTR [ecx+0x6]
   2607a:	0f be c9             	movsx  ecx,cl
   2607d:	83 e1 0f             	and    ecx,0xf
   26080:	c1 e1 10             	shl    ecx,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:334
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   26083:	09 cb                	or     ebx,ecx
/home/yogi/src/os/chrisOS/src/init/utility.c:340
                    "0x%08X\t"  /*base*/
                    "0x%08X\t"  /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
   26085:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   26088:	0f b6 49 07          	movzx  ecx,BYTE PTR [ecx+0x7]
   2608c:	0f be c9             	movsx  ecx,cl
   2608f:	89 ce                	mov    esi,ecx
   26091:	c1 e6 18             	shl    esi,0x18
   26094:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   26097:	0f b6 49 04          	movzx  ecx,BYTE PTR [ecx+0x4]
   2609b:	0f be c9             	movsx  ecx,cl
   2609e:	c1 e1 10             	shl    ecx,0x10
   260a1:	09 ce                	or     esi,ecx
   260a3:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   260a6:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
/home/yogi/src/os/chrisOS/src/init/utility.c:334
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   260aa:	0f b7 c9             	movzx  ecx,cx
   260ad:	09 f1                	or     ecx,esi
   260af:	83 ec 08             	sub    esp,0x8
   260b2:	52                   	push   edx
   260b3:	50                   	push   eax
   260b4:	53                   	push   ebx
   260b5:	51                   	push   ecx
   260b6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   260b9:	68 28 5a 08 00       	push   0x85a28
   260be:	e8 e0 17 00 00       	call   278a3 <printk>
   260c3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:345 (discriminator 2)
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
   260c6:	83 45 f4 08          	add    DWORD PTR [ebp-0xc],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:330 (discriminator 2)
{
    sGDT* theGDT=bootGdt;
    
    printk("Listing GDT Table\n");
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
   260ca:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:330 (discriminator 1)
   260ce:	0f b7 05 88 99 12 00 	movzx  eax,WORD PTR ds:0x129988
   260d5:	66 c1 e8 03          	shr    ax,0x3
   260d9:	0f b7 c0             	movzx  eax,ax
   260dc:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   260df:	0f 8f 55 ff ff ff    	jg     2603a <dumpGDTTable+0x3c>
/home/yogi/src/os/chrisOS/src/init/utility.c:347
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
    }
}
   260e5:	90                   	nop
   260e6:	8d 65 f8             	lea    esp,[ebp-0x8]
   260e9:	5b                   	pop    ebx
   260ea:	5e                   	pop    esi
   260eb:	5d                   	pop    ebp
   260ec:	c3                   	ret    

000260ed <displayTSS>:
displayTSS():
/home/yogi/src/os/chrisOS/src/init/utility.c:350

void displayTSS(int tssAddress)
{
   260ed:	55                   	push   ebp
   260ee:	89 e5                	mov    ebp,esp
   260f0:	56                   	push   esi
   260f1:	53                   	push   ebx
   260f2:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:351
    tss_t* tss=(tss_t*)tssAddress;
   260f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:352
    printk("TSS Entry at 0x%08X:\n",tssAddress);
   260fb:	83 ec 08             	sub    esp,0x8
   260fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26101:	68 4a 5a 08 00       	push   0x85a4a
   26106:	e8 98 17 00 00       	call   278a3 <printk>
   2610b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:353
    printk("\tEAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", tss->EAX, tss->EBX, tss->ECX, tss->EDX,tss->EFLAGS);
   2610e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26111:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
   26114:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26117:	8b 58 30             	mov    ebx,DWORD PTR [eax+0x30]
   2611a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2611d:	8b 48 2c             	mov    ecx,DWORD PTR [eax+0x2c]
   26120:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26123:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
   26126:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26129:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   2612c:	83 ec 08             	sub    esp,0x8
   2612f:	56                   	push   esi
   26130:	53                   	push   ebx
   26131:	51                   	push   ecx
   26132:	52                   	push   edx
   26133:	50                   	push   eax
   26134:	68 60 5a 08 00       	push   0x85a60
   26139:	e8 65 17 00 00       	call   278a3 <printk>
   2613e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:354
    printk("\tEBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\tCR3=%08X\n", tss->EBP, tss->ESI, tss->EDI, tss->ESP,tss->CR3);
   26141:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26144:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
   26147:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2614a:	8b 58 38             	mov    ebx,DWORD PTR [eax+0x38]
   2614d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26150:	8b 48 44             	mov    ecx,DWORD PTR [eax+0x44]
   26153:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26156:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
   26159:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2615c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
   2615f:	83 ec 08             	sub    esp,0x8
   26162:	56                   	push   esi
   26163:	53                   	push   ebx
   26164:	51                   	push   ecx
   26165:	52                   	push   edx
   26166:	50                   	push   eax
   26167:	68 90 5a 08 00       	push   0x85a90
   2616c:	e8 32 17 00 00       	call   278a3 <printk>
   26171:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:355
    printk("\t DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\tLDT=%08X\n", tss->DS, tss->ES, tss->FS, tss->GS,tss->LDTR);
   26174:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26177:	8b 70 60             	mov    esi,DWORD PTR [eax+0x60]
   2617a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2617d:	8b 58 5c             	mov    ebx,DWORD PTR [eax+0x5c]
   26180:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26183:	8b 48 58             	mov    ecx,DWORD PTR [eax+0x58]
   26186:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26189:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
   2618c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2618f:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
   26192:	83 ec 08             	sub    esp,0x8
   26195:	56                   	push   esi
   26196:	53                   	push   ebx
   26197:	51                   	push   ecx
   26198:	52                   	push   edx
   26199:	50                   	push   eax
   2619a:	68 c0 5a 08 00       	push   0x85ac0
   2619f:	e8 ff 16 00 00       	call   278a3 <printk>
   261a4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:356
    printk("\t SS=%08X\tSS0=%08X\tESP0=%08X\tLINK=%08X\tIOP=%08X\n",tss->SS,tss->SS0,tss->ESP0,tss->LINK,tss->IOPB);
   261a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261aa:	0f b7 40 66          	movzx  eax,WORD PTR [eax+0x66]
   261ae:	0f b7 f0             	movzx  esi,ax
   261b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261b4:	8b 18                	mov    ebx,DWORD PTR [eax]
   261b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261b9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   261bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261bf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   261c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261c5:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
   261c8:	83 ec 08             	sub    esp,0x8
   261cb:	56                   	push   esi
   261cc:	53                   	push   ebx
   261cd:	51                   	push   ecx
   261ce:	52                   	push   edx
   261cf:	50                   	push   eax
   261d0:	68 f0 5a 08 00       	push   0x85af0
   261d5:	e8 c9 16 00 00       	call   278a3 <printk>
   261da:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:357
    printk("\tCS:EIP = %04X:%08X\n", tss->CS, tss->EIP);
   261dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   261e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261e6:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
   261e9:	83 ec 04             	sub    esp,0x4
   261ec:	52                   	push   edx
   261ed:	50                   	push   eax
   261ee:	68 21 5b 08 00       	push   0x85b21
   261f3:	e8 ab 16 00 00       	call   278a3 <printk>
   261f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:358
}
   261fb:	90                   	nop
   261fc:	8d 65 f8             	lea    esp,[ebp-0x8]
   261ff:	5b                   	pop    ebx
   26200:	5e                   	pop    esi
   26201:	5d                   	pop    ebp
   26202:	c3                   	ret    
   26203:	90                   	nop

00026204 <memcpy>:
memcpy():
/home/yogi/src/os/chrisOS/src/memcpy.c:12
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
void * memcpy(void *dest, const void *src, size_t n)
{
   26204:	55                   	push   ebp
   26205:	89 e5                	mov    ebp,esp
   26207:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
   2620a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2620d:	83 e0 03             	and    eax,0x3
   26210:	85 c0                	test   eax,eax
   26212:	0f 94 c0             	sete   al
   26215:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/chrisOS/src/memcpy.c:16
    dw=n%2==0;
   26218:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2621b:	83 e0 01             	and    eax,0x1
   2621e:	85 c0                	test   eax,eax
   26220:	0f 94 c0             	sete   al
   26223:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/chrisOS/src/memcpy.c:17
    if (dd)
   26226:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   2622a:	74 7d                	je     262a9 <memcpy+0xa5>
/home/yogi/src/os/chrisOS/src/memcpy.c:19
    {
        n /=4;
   2622c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2622f:	c1 e8 02             	shr    eax,0x2
   26232:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:20
        const uint32_t *f = src;
   26235:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26238:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:21
        uint32_t *t = dest;
   2623b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2623e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:23

        if (f < t) {
   26241:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   26244:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   26247:	73 4b                	jae    26294 <memcpy+0x90>
/home/yogi/src/os/chrisOS/src/memcpy.c:24
                f += n;
   26249:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2624c:	c1 e0 02             	shl    eax,0x2
   2624f:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:25
                t += n;
   26252:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26255:	c1 e0 02             	shl    eax,0x2
   26258:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
   2625b:	eb 12                	jmp    2626f <memcpy+0x6b>
/home/yogi/src/os/chrisOS/src/memcpy.c:27
                        *--t = *--f;
   2625d:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
   26261:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
   26265:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   26268:	8b 10                	mov    edx,DWORD PTR [eax]
   2626a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   2626d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   2626f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26272:	8d 50 ff             	lea    edx,[eax-0x1]
   26275:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26278:	85 c0                	test   eax,eax
   2627a:	75 e1                	jne    2625d <memcpy+0x59>
   2627c:	eb 23                	jmp    262a1 <memcpy+0x9d>
/home/yogi/src/os/chrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   2627e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   26281:	8d 50 04             	lea    edx,[eax+0x4]
   26284:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   26287:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   2628a:	8d 4a 04             	lea    ecx,[edx+0x4]
   2628d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
   26290:	8b 12                	mov    edx,DWORD PTR [edx]
   26292:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   26294:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26297:	8d 50 ff             	lea    edx,[eax-0x1]
   2629a:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2629d:	85 c0                	test   eax,eax
   2629f:	75 dd                	jne    2627e <memcpy+0x7a>
/home/yogi/src/os/chrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
   262a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262a4:	e9 ea 00 00 00       	jmp    26393 <memcpy+0x18f>
/home/yogi/src/os/chrisOS/src/memcpy.c:33
    }
    else if (dw)
   262a9:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
   262ad:	74 79                	je     26328 <memcpy+0x124>
/home/yogi/src/os/chrisOS/src/memcpy.c:35
    {
        n /=2;
   262af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   262b2:	d1 e8                	shr    eax,1
   262b4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:36
        const uint32_t *f = src;
   262b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262ba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:37
        uint32_t *t = dest;
   262bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262c0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:39

        if (f < t) {
   262c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   262c6:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   262c9:	73 4b                	jae    26316 <memcpy+0x112>
/home/yogi/src/os/chrisOS/src/memcpy.c:40
                f += n;
   262cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   262ce:	c1 e0 02             	shl    eax,0x2
   262d1:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:41
                t += n;
   262d4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   262d7:	c1 e0 02             	shl    eax,0x2
   262da:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
   262dd:	eb 12                	jmp    262f1 <memcpy+0xed>
/home/yogi/src/os/chrisOS/src/memcpy.c:43
                        *--t = *--f;
   262df:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
   262e3:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
   262e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   262ea:	8b 10                	mov    edx,DWORD PTR [eax]
   262ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   262ef:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   262f1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   262f4:	8d 50 ff             	lea    edx,[eax-0x1]
   262f7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   262fa:	85 c0                	test   eax,eax
   262fc:	75 e1                	jne    262df <memcpy+0xdb>
   262fe:	eb 23                	jmp    26323 <memcpy+0x11f>
/home/yogi/src/os/chrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   26300:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26303:	8d 50 04             	lea    edx,[eax+0x4]
   26306:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   26309:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2630c:	8d 4a 04             	lea    ecx,[edx+0x4]
   2630f:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
   26312:	8b 12                	mov    edx,DWORD PTR [edx]
   26314:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   26316:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26319:	8d 50 ff             	lea    edx,[eax-0x1]
   2631c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2631f:	85 c0                	test   eax,eax
   26321:	75 dd                	jne    26300 <memcpy+0xfc>
/home/yogi/src/os/chrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
   26323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26326:	eb 6b                	jmp    26393 <memcpy+0x18f>
/home/yogi/src/os/chrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
   26328:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2632b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:52
        char *t = dest;
   2632e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26331:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:54

        if (f < t) {
   26334:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26337:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   2633a:	73 47                	jae    26383 <memcpy+0x17f>
/home/yogi/src/os/chrisOS/src/memcpy.c:55
                f += n;
   2633c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2633f:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:56
                t += n;
   26342:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26345:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:57
                while (n-- > 0)
   26348:	eb 13                	jmp    2635d <memcpy+0x159>
/home/yogi/src/os/chrisOS/src/memcpy.c:58
                        *--t = *--f;
   2634a:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   2634e:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
   26352:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26355:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   26358:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2635b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
   2635d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26360:	8d 50 ff             	lea    edx,[eax-0x1]
   26363:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26366:	85 c0                	test   eax,eax
   26368:	75 e0                	jne    2634a <memcpy+0x146>
   2636a:	eb 24                	jmp    26390 <memcpy+0x18c>
/home/yogi/src/os/chrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
   2636c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2636f:	8d 50 01             	lea    edx,[eax+0x1]
   26372:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   26375:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   26378:	8d 4a 01             	lea    ecx,[edx+0x1]
   2637b:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
   2637e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   26381:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
   26383:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26386:	8d 50 ff             	lea    edx,[eax-0x1]
   26389:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2638c:	85 c0                	test   eax,eax
   2638e:	75 dc                	jne    2636c <memcpy+0x168>
/home/yogi/src/os/chrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
   26390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/memcpy.c:64
    }
   26393:	c9                   	leave  
   26394:	c3                   	ret    
   26395:	66 90                	xchg   ax,ax
   26397:	90                   	nop

00026398 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   26398:	55                   	push   ebp
   26399:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   2639b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2639e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   263a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   263a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   263ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   263ae:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   263b0:	90                   	nop
   263b1:	5d                   	pop    ebp
   263b2:	c3                   	ret    

000263b3 <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   263b3:	55                   	push   ebp
   263b4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   263b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263b9:	8b 00                	mov    eax,DWORD PTR [eax]
   263bb:	85 c0                	test   eax,eax
   263bd:	75 0d                	jne    263cc <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   263bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263c2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   263c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   263c8:	89 10                	mov    DWORD PTR [eax],edx
   263ca:	eb 0e                	jmp    263da <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   263cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263cf:	8b 00                	mov    eax,DWORD PTR [eax]
   263d1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   263d4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   263d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   263da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   263e0:	85 c0                	test   eax,eax
   263e2:	75 0d                	jne    263f1 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   263e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263e7:	8b 10                	mov    edx,DWORD PTR [eax]
   263e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   263ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   263ef:	eb 0d                	jmp    263fe <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   263f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   263f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   263fa:	8b 12                	mov    edx,DWORD PTR [edx]
   263fc:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   263fe:	90                   	nop
   263ff:	5d                   	pop    ebp
   26400:	c3                   	ret    

00026401 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   26401:	55                   	push   ebp
   26402:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   26404:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26407:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2640a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   2640c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2640f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26412:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26415:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   26418:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2641b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2641e:	85 c0                	test   eax,eax
   26420:	75 0b                	jne    2642d <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   26422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26425:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   26428:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   2642b:	eb 0b                	jmp    26438 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   2642d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26430:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26433:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   26436:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   26438:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2643b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   2643e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   26441:	90                   	nop
   26442:	5d                   	pop    ebp
   26443:	c3                   	ret    

00026444 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   26444:	55                   	push   ebp
   26445:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   26447:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2644a:	8b 10                	mov    edx,DWORD PTR [eax]
   2644c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2644f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   26451:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26454:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26457:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   2645a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2645d:	8b 00                	mov    eax,DWORD PTR [eax]
   2645f:	85 c0                	test   eax,eax
   26461:	75 0a                	jne    2646d <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   26463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26466:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   26469:	89 10                	mov    DWORD PTR [eax],edx
   2646b:	eb 0b                	jmp    26478 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   2646d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26470:	8b 00                	mov    eax,DWORD PTR [eax]
   26472:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   26475:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   26478:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2647b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   2647e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   26480:	90                   	nop
   26481:	5d                   	pop    ebp
   26482:	c3                   	ret    

00026483 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   26483:	55                   	push   ebp
   26484:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   26486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26489:	8b 00                	mov    eax,DWORD PTR [eax]
   2648b:	85 c0                	test   eax,eax
   2648d:	75 26                	jne    264b5 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   2648f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26492:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26495:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   26497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2649a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2649d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   264a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   264a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   264b3:	eb 14                	jmp    264c9 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   264b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   264b8:	8b 00                	mov    eax,DWORD PTR [eax]
   264ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   264bd:	50                   	push   eax
   264be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   264c1:	e8 7e ff ff ff       	call   26444 <fat_list_insert_before>
   264c6:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   264c9:	90                   	nop
   264ca:	c9                   	leave  
   264cb:	c3                   	ret    

000264cc <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   264cc:	55                   	push   ebp
   264cd:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   264cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   264d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   264d5:	85 c0                	test   eax,eax
   264d7:	75 10                	jne    264e9 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   264d9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   264dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   264df:	e8 9f ff ff ff       	call   26483 <fat_list_insert_first>
   264e4:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   264e7:	eb 15                	jmp    264fe <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   264e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   264ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   264ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   264f2:	50                   	push   eax
   264f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   264f6:	e8 06 ff ff ff       	call   26401 <fat_list_insert_after>
   264fb:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   264fe:	90                   	nop
   264ff:	c9                   	leave  
   26500:	c3                   	ret    

00026501 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   26501:	55                   	push   ebp
   26502:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   26504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26507:	8b 00                	mov    eax,DWORD PTR [eax]
   26509:	85 c0                	test   eax,eax
   2650b:	0f 94 c0             	sete   al
   2650e:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   26511:	5d                   	pop    ebp
   26512:	c3                   	ret    

00026513 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   26513:	55                   	push   ebp
   26514:	89 e5                	mov    ebp,esp
   26516:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   26519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2651c:	8b 00                	mov    eax,DWORD PTR [eax]
   2651e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   26521:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   26525:	74 0e                	je     26535 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   26527:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   2652a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2652d:	e8 81 fe ff ff       	call   263b3 <fat_list_remove>
   26532:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   26535:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   26538:	c9                   	leave  
   26539:	c3                   	ret    

0002653a <processELFDynamicSection>:
processELFDynamicSection():
/home/yogi/src/os/chrisOS/src/newloader.c:19
uint32_t libLoadOffset=LIBRARY_BASE_LOAD_ADDRESS;
extern int kExecLoadCount;
extern elfInfo_t* KERNEL_DATA_SECTION kExecLoadInfo;

void processELFDynamicSection(elfInfo_t* elfInfo)
{
   2653a:	55                   	push   ebp
   2653b:	89 e5                	mov    ebp,esp
   2653d:	57                   	push   edi
   2653e:	53                   	push   ebx
   2653f:	83 c4 80             	add    esp,0xffffff80
/home/yogi/src/os/chrisOS/src/newloader.c:20
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   26542:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26545:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   2654b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/newloader.c:23

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
   2654e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26551:	c7 80 a0 18 00 00 00 	mov    DWORD PTR [eax+0x18a0],0x0
   26558:	00 00 00 
/home/yogi/src/os/chrisOS/src/newloader.c:24
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   2655b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   26562:	e9 66 04 00 00       	jmp    269cd <processELFDynamicSection+0x493>
/home/yogi/src/os/chrisOS/src/newloader.c:26
    {
        switch (dyn[cnt].d_tag)
   26567:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2656a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26571:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26574:	01 d0                	add    eax,edx
   26576:	8b 00                	mov    eax,DWORD PTR [eax]
   26578:	83 f8 1e             	cmp    eax,0x1e
   2657b:	0f 87 44 04 00 00    	ja     269c5 <processELFDynamicSection+0x48b>
   26581:	8b 04 85 5c 5d 08 00 	mov    eax,DWORD PTR [eax*4+0x85d5c]
   26588:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/newloader.c:30
        {
            //DT_NEEDED is a library which we need to load
            case DT_NEEDED:
                printk("ELF at: 0x%08X, copy to: 0x%08X, neededCount=0x%08X\n",elfInfo, elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount],elfInfo->dynamicInfo.neededCount);
   2658a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2658d:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   26593:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   26596:	8b 92 a0 18 00 00    	mov    edx,DWORD PTR [edx+0x18a0]
   2659c:	c1 e2 08             	shl    edx,0x8
   2659f:	8d 8a 50 0e 00 00    	lea    ecx,[edx+0xe50]
   265a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   265a8:	01 ca                	add    edx,ecx
   265aa:	83 c2 04             	add    edx,0x4
   265ad:	50                   	push   eax
   265ae:	52                   	push   edx
   265af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   265b2:	68 40 5c 08 00       	push   0x85c40
   265b7:	e8 e7 12 00 00       	call   278a3 <printk>
   265bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:31
                strcpy(elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount++],(char*)(elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr));
   265bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   265c2:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   265c8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   265cb:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
   265d2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   265d5:	01 ca                	add    edx,ecx
   265d7:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   265da:	c1 e2 02             	shl    edx,0x2
   265dd:	8d 1c 10             	lea    ebx,[eax+edx*1]
   265e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   265e3:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   265e9:	8d 48 01             	lea    ecx,[eax+0x1]
   265ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   265ef:	89 8a a0 18 00 00    	mov    DWORD PTR [edx+0x18a0],ecx
   265f5:	c1 e0 08             	shl    eax,0x8
   265f8:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   265fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26601:	01 d0                	add    eax,edx
   26603:	83 c0 04             	add    eax,0x4
   26606:	83 ec 08             	sub    esp,0x8
   26609:	53                   	push   ebx
   2660a:	50                   	push   eax
   2660b:	e8 f4 13 00 00       	call   27a04 <strcpy>
   26610:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:32
                char fileName[100]="/";
   26613:	c7 45 84 2f 00 00 00 	mov    DWORD PTR [ebp-0x7c],0x2f
   2661a:	8d 55 88             	lea    edx,[ebp-0x78]
   2661d:	b8 00 00 00 00       	mov    eax,0x0
   26622:	b9 18 00 00 00       	mov    ecx,0x18
   26627:	89 d7                	mov    edi,edx
   26629:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/src/os/chrisOS/src/newloader.c:33
                strcat(fileName,elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount-1]);
   2662b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2662e:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   26634:	83 e8 01             	sub    eax,0x1
   26637:	c1 e0 08             	shl    eax,0x8
   2663a:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   26640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26643:	01 d0                	add    eax,edx
   26645:	83 c0 04             	add    eax,0x4
   26648:	83 ec 08             	sub    esp,0x8
   2664b:	50                   	push   eax
   2664c:	8d 45 84             	lea    eax,[ebp-0x7c]
   2664f:	50                   	push   eax
   26650:	e8 c7 12 00 00       	call   2791c <strcat>
   26655:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:34
                printd(DEBUG_ELF_LOADER,"Found NEEDED, library name='%s', orig name='%s'\n",fileName,elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr);
   26658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2665b:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   26661:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   26664:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
   2666b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2666e:	01 ca                	add    edx,ecx
   26670:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   26673:	c1 e2 02             	shl    edx,0x2
   26676:	01 d0                	add    eax,edx
   26678:	50                   	push   eax
   26679:	8d 45 84             	lea    eax,[ebp-0x7c]
   2667c:	50                   	push   eax
   2667d:	68 78 5c 08 00       	push   0x85c78
   26682:	68 00 02 00 00       	push   0x200
   26687:	e8 37 12 00 00       	call   278c3 <printd>
   2668c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:35
                if (kDebugLevel&DEBUG_ELF_LOADER)
   2668f:	a1 78 98 12 00       	mov    eax,ds:0x129878
   26694:	25 00 02 00 00       	and    eax,0x200
   26699:	85 c0                	test   eax,eax
   2669b:	74 1e                	je     266bb <processELFDynamicSection+0x181>
/home/yogi/src/os/chrisOS/src/newloader.c:37
                {
                    printd(DEBUG_ELF_LOADER,"loadElf: Calling loadElf again to load '%s' ... press a key to continue\n",&fileName);
   2669d:	83 ec 04             	sub    esp,0x4
   266a0:	8d 45 84             	lea    eax,[ebp-0x7c]
   266a3:	50                   	push   eax
   266a4:	68 ac 5c 08 00       	push   0x85cac
   266a9:	68 00 02 00 00       	push   0x200
   266ae:	e8 10 12 00 00       	call   278c3 <printd>
   266b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:38
                    waitForKeyboardKey();
   266b6:	e8 9c ab fe ff       	call   11257 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/newloader.c:40
                }
                void* fPtr=fopen(fileName, "r");
   266bb:	83 ec 08             	sub    esp,0x8
   266be:	68 f5 5c 08 00       	push   0x85cf5
   266c3:	8d 45 84             	lea    eax,[ebp-0x7c]
   266c6:	50                   	push   eax
   266c7:	e8 a1 72 ff ff       	call   1d96d <fl_fopen>
   266cc:	83 c4 10             	add    esp,0x10
   266cf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/newloader.c:41
                if (fPtr==0)
   266d2:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   266d6:	75 23                	jne    266fb <processELFDynamicSection+0x1c1>
/home/yogi/src/os/chrisOS/src/newloader.c:43
                {
                    printk("Error opening file '%s', cannot exec\n",fileName);
   266d8:	83 ec 08             	sub    esp,0x8
   266db:	8d 45 84             	lea    eax,[ebp-0x7c]
   266de:	50                   	push   eax
   266df:	68 f8 5c 08 00       	push   0x85cf8
   266e4:	e8 ba 11 00 00       	call   278a3 <printk>
   266e9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:44
                    elfInfo->loadCompleted=false;
   266ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   266ef:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:45
                    return;
   266f6:	e9 e4 02 00 00       	jmp    269df <processELFDynamicSection+0x4a5>
/home/yogi/src/os/chrisOS/src/newloader.c:47
                }   
                elfInfo->dynamicInfo.neededExecLoadNum[elfInfo->dynamicInfo.neededPtr++]=kExecLoadCount;
   266fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   266fe:	8b 80 54 18 00 00    	mov    eax,DWORD PTR [eax+0x1854]
   26704:	8d 48 01             	lea    ecx,[eax+0x1]
   26707:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2670a:	89 8a 54 18 00 00    	mov    DWORD PTR [edx+0x1854],ecx
   26710:	8b 0d 40 99 12 00    	mov    ecx,DWORD PTR ds:0x129940
   26716:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   26719:	05 14 06 00 00       	add    eax,0x614
   2671e:	89 4c 82 08          	mov    DWORD PTR [edx+eax*4+0x8],ecx
/home/yogi/src/os/chrisOS/src/newloader.c:48
                elfInfo_t* elfLibPtr=&kExecLoadInfo[kExecLoadCount++];
   26722:	8b 0d 3c 99 12 00    	mov    ecx,DWORD PTR ds:0x12993c
   26728:	a1 40 99 12 00       	mov    eax,ds:0x129940
   2672d:	8d 50 01             	lea    edx,[eax+0x1]
   26730:	89 15 40 99 12 00    	mov    DWORD PTR ds:0x129940,edx
   26736:	69 c0 dc 18 00 00    	imul   eax,eax,0x18dc
   2673c:	01 c8                	add    eax,ecx
   2673e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/newloader.c:49
                loadElf(fPtr,elfLibPtr,true);
   26741:	83 ec 04             	sub    esp,0x4
   26744:	6a 01                	push   0x1
   26746:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   26749:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2674c:	e8 5f 08 00 00       	call   26fb0 <loadElf>
   26751:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:50
                fclose(fPtr);
   26754:	83 ec 0c             	sub    esp,0xc
   26757:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2675a:	e8 3f 76 ff ff       	call   1dd9e <fl_fclose>
   2675f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:51
                if (!elfLibPtr->loadCompleted)
   26762:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   26765:	0f b6 80 d8 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d8]
   2676c:	83 f0 01             	xor    eax,0x1
   2676f:	84 c0                	test   al,al
   26771:	0f 84 51 02 00 00    	je     269c8 <processELFDynamicSection+0x48e>
/home/yogi/src/os/chrisOS/src/newloader.c:53
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
   26777:	83 ec 08             	sub    esp,0x8
   2677a:	68 20 5d 08 00       	push   0x85d20
   2677f:	68 00 02 00 00       	push   0x200
   26784:	e8 3a 11 00 00       	call   278c3 <printd>
   26789:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:54
                    elfInfo->loadCompleted=false;
   2678c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2678f:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:55
                    return;
   26796:	90                   	nop
   26797:	e9 43 02 00 00       	jmp    269df <processELFDynamicSection+0x4a5>
/home/yogi/src/os/chrisOS/src/newloader.c:59
                }
                break;
            case DT_PLTRELSZ:
                elfInfo->dynamicInfo.pltGOTTableTableSize=dyn[cnt].d_un.d_val;
   2679c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2679f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   267a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   267a9:	01 d0                	add    eax,edx
   267ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   267ae:	89 c2                	mov    edx,eax
   267b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   267b3:	89 90 98 18 00 00    	mov    DWORD PTR [eax+0x1898],edx
/home/yogi/src/os/chrisOS/src/newloader.c:60
                break;
   267b9:	e9 0b 02 00 00       	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:62
            case DT_PLTGOT:
                elfInfo->dynamicInfo.pltGOTTableAddress=dyn[cnt].d_un.d_ptr;
   267be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   267c1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   267c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   267cb:	01 d0                	add    eax,edx
   267cd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   267d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   267d3:	89 90 b0 18 00 00    	mov    DWORD PTR [eax+0x18b0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:63
                break;
   267d9:	e9 eb 01 00 00       	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:65
            case DT_HASH:
                elfInfo->dynamicInfo.hashTableAddress=dyn[cnt].d_un.d_ptr;
   267de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   267e1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   267e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   267eb:	01 d0                	add    eax,edx
   267ed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   267f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   267f3:	89 90 b4 18 00 00    	mov    DWORD PTR [eax+0x18b4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:66
                break;
   267f9:	e9 cb 01 00 00       	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:74
                break;
            case DT_SYMTAB:
                //Already found it above
                break;
            case DT_RELA:
                elfInfo->dynamicInfo.relATableAddress=dyn[cnt].d_un.d_ptr;
   267fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26801:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26808:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2680b:	01 d0                	add    eax,edx
   2680d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26813:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:75
                break;
   26819:	e9 ab 01 00 00       	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:77
            case DT_RELASZ:
                elfInfo->dynamicInfo.relATableSize=dyn[cnt].d_un.d_val;
   2681e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26821:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26828:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2682b:	01 d0                	add    eax,edx
   2682d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26830:	89 c2                	mov    edx,eax
   26832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26835:	89 90 84 18 00 00    	mov    DWORD PTR [eax+0x1884],edx
/home/yogi/src/os/chrisOS/src/newloader.c:78
                break;
   2683b:	e9 89 01 00 00       	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:80
            case DT_RELAENT:
                elfInfo->dynamicInfo.relAEntrySize=dyn[cnt].d_un.d_val;
   26840:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26843:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2684a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2684d:	01 d0                	add    eax,edx
   2684f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26852:	89 c2                	mov    edx,eax
   26854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26857:	89 90 88 18 00 00    	mov    DWORD PTR [eax+0x1888],edx
/home/yogi/src/os/chrisOS/src/newloader.c:81
                break;
   2685d:	e9 67 01 00 00       	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:83
            case DT_STRSZ:
                elfInfo->dynamicInfo.strTableSize=dyn[cnt].d_un.d_val;
   26862:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26865:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2686c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2686f:	01 d0                	add    eax,edx
   26871:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26874:	89 c2                	mov    edx,eax
   26876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26879:	89 90 8c 18 00 00    	mov    DWORD PTR [eax+0x188c],edx
/home/yogi/src/os/chrisOS/src/newloader.c:84
                break;
   2687f:	e9 45 01 00 00       	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:86
            case DT_SYMENT:
                elfInfo->dynamicInfo.symEntrySize=dyn[cnt].d_un.d_val;
   26884:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26887:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2688e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26891:	01 d0                	add    eax,edx
   26893:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26896:	89 c2                	mov    edx,eax
   26898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2689b:	89 90 90 18 00 00    	mov    DWORD PTR [eax+0x1890],edx
/home/yogi/src/os/chrisOS/src/newloader.c:87
                break;
   268a1:	e9 23 01 00 00       	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:89
            case DT_INIT:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   268a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   268a9:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   268b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   268b3:	01 d0                	add    eax,edx
   268b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   268b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   268bb:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:90
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   268c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   268c4:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   268ca:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   268cf:	01 c2                	add    edx,eax
   268d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   268d4:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:91
                break;
   268da:	e9 ea 00 00 00       	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:93
            case DT_FINI:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   268df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   268e2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   268e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   268ec:	01 d0                	add    eax,edx
   268ee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   268f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   268f4:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:94
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   268fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   268fd:	8b 90 cc 18 00 00    	mov    edx,DWORD PTR [eax+0x18cc]
   26903:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   26908:	01 c2                	add    edx,eax
   2690a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2690d:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:95
                break;
   26913:	e9 b1 00 00 00       	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:105
                //Can't find the relocation section this way, using section headers
                //elfInfo->dynamicInfo.relTableAddress=dyn[cnt].d_un.d_ptr;
                //printk("%s: Found DT_REL, address=0x%08X (0x%08X)\n",isLibrary?"library":"executable",dyn[cnt].d_un.d_ptr,elfInfo->dynamicInfo.relTableAddress);
                break;
            case DT_RELSZ:
                elfInfo->dynamicInfo.relTableSize=dyn[cnt].d_un.d_val;
   26918:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2691b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26922:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26925:	01 d0                	add    eax,edx
   26927:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2692a:	89 c2                	mov    edx,eax
   2692c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2692f:	89 90 94 18 00 00    	mov    DWORD PTR [eax+0x1894],edx
/home/yogi/src/os/chrisOS/src/newloader.c:106
                break;
   26935:	e9 8f 00 00 00       	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:108
            case DT_RELENT:
                elfInfo->dynamicInfo.relEntrySize=dyn[cnt].d_un.d_val;
   2693a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2693d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26944:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26947:	01 d0                	add    eax,edx
   26949:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2694c:	89 c2                	mov    edx,eax
   2694e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26951:	89 90 9c 18 00 00    	mov    DWORD PTR [eax+0x189c],edx
/home/yogi/src/os/chrisOS/src/newloader.c:109
                break;
   26957:	eb 70                	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:121
            case DT_JMPREL:
                break;
            case DT_BIND_NOW:
                break;
            case DT_INIT_ARRAY:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   26959:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2695c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26963:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26966:	01 d0                	add    eax,edx
   26968:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2696b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2696e:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:122
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   26974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26977:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   2697d:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   26982:	01 c2                	add    edx,eax
   26984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26987:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:123
                break;
   2698d:	eb 3a                	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:125
            case DT_FINI_ARRAY:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   2698f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26992:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26999:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2699c:	01 d0                	add    eax,edx
   2699e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   269a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   269a4:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:126
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   269aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   269ad:	8b 90 cc 18 00 00    	mov    edx,DWORD PTR [eax+0x18cc]
   269b3:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   269b8:	01 c2                	add    edx,eax
   269ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   269bd:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:127
                break;
   269c3:	eb 04                	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:135
            case DT_FINI_ARRAYSZ:
                break;
            case DT_FLAGS:
                break;
            default:
                break;
   269c5:	90                   	nop
   269c6:	eb 01                	jmp    269c9 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:57
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
                    elfInfo->loadCompleted=false;
                    return;
                }
                break;
   269c8:	90                   	nop
/home/yogi/src/os/chrisOS/src/newloader.c:24
{
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   269c9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:24 (discriminator 1)
   269cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   269d0:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   269d6:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   269d9:	0f 8f 88 fb ff ff    	jg     26567 <processELFDynamicSection+0x2d>
/home/yogi/src/os/chrisOS/src/newloader.c:139
            default:
                break;
        }
    }

}
   269df:	8d 65 f8             	lea    esp,[ebp-0x8]
   269e2:	5b                   	pop    ebx
   269e3:	5f                   	pop    edi
   269e4:	5d                   	pop    ebp
   269e5:	c3                   	ret    

000269e6 <loadSections>:
loadSections():
/home/yogi/src/os/chrisOS/src/newloader.c:142

void loadSections(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   269e6:	55                   	push   ebp
   269e7:	89 e5                	mov    ebp,esp
   269e9:	53                   	push   ebx
   269ea:	83 ec 24             	sub    esp,0x24
   269ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   269f0:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/newloader.c:146
    uint8_t* loadAddress;

    //Go to the beginning of the file and get the elf header
    fl_fseek(file, 0, SEEK_SET);
   269f3:	83 ec 04             	sub    esp,0x4
   269f6:	6a 00                	push   0x0
   269f8:	6a 00                	push   0x0
   269fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   269fd:	e8 57 77 ff ff       	call   1e159 <fl_fseek>
   26a02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:147
    fl_fread(&elfInfo->hdr, sizeof(elfInfo->hdr),1,file);
   26a05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26a0b:	6a 01                	push   0x1
   26a0d:	6a 34                	push   0x34
   26a0f:	50                   	push   eax
   26a10:	e8 25 75 ff ff       	call   1df3a <fl_fread>
   26a15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:148
    if (elfInfo->hdr.e_ident[0] != 0x7F) 
   26a18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a1b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26a1e:	3c 7f                	cmp    al,0x7f
   26a20:	74 66                	je     26a88 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:149
        if (elfInfo->hdr.e_ident[1] != 'E') 
   26a22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a25:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   26a29:	3c 45                	cmp    al,0x45
   26a2b:	74 5b                	je     26a88 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:150
            if (elfInfo->hdr.e_ident[1] != 'L') 
   26a2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a30:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   26a34:	3c 4c                	cmp    al,0x4c
   26a36:	74 50                	je     26a88 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:151
                if (elfInfo->hdr.e_ident[2] != 'F')
   26a38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a3b:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   26a3f:	3c 46                	cmp    al,0x46
   26a41:	74 45                	je     26a88 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:153
                {
                    printd(DEBUG_ELF_LOADER,"Invalid ELF magic '%c' '%c' '%c', cannot load", elfInfo->hdr.e_ident[1], elfInfo->hdr.e_ident[2], elfInfo->hdr.e_ident[3]);
   26a43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a46:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   26a4a:	0f b6 c8             	movzx  ecx,al
   26a4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a50:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   26a54:	0f b6 d0             	movzx  edx,al
   26a57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a5a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   26a5e:	0f b6 c0             	movzx  eax,al
   26a61:	83 ec 0c             	sub    esp,0xc
   26a64:	51                   	push   ecx
   26a65:	52                   	push   edx
   26a66:	50                   	push   eax
   26a67:	68 d8 5d 08 00       	push   0x85dd8
   26a6c:	68 00 02 00 00       	push   0x200
   26a71:	e8 4d 0e 00 00       	call   278c3 <printd>
   26a76:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:154
                    elfInfo->loadCompleted=false;
   26a79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a7c:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:155
                    return;
   26a83:	e9 23 05 00 00       	jmp    26fab <loadSections+0x5c5>
/home/yogi/src/os/chrisOS/src/newloader.c:159
                }
    
    //Make sure the file is viable
    if (elfInfo->hdr.e_type!=ET_EXEC && elfInfo->hdr.e_type!=ET_DYN)
   26a88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a8b:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26a8f:	66 83 f8 02          	cmp    ax,0x2
   26a93:	74 3c                	je     26ad1 <loadSections+0xeb>
/home/yogi/src/os/chrisOS/src/newloader.c:159 (discriminator 1)
   26a95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a98:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26a9c:	66 83 f8 03          	cmp    ax,0x3
   26aa0:	74 2f                	je     26ad1 <loadSections+0xeb>
/home/yogi/src/os/chrisOS/src/newloader.c:161
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF type 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   26aa2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26aa5:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26aa9:	0f b7 c0             	movzx  eax,ax
   26aac:	83 ec 04             	sub    esp,0x4
   26aaf:	50                   	push   eax
   26ab0:	68 08 5e 08 00       	push   0x85e08
   26ab5:	68 00 02 00 00       	push   0x200
   26aba:	e8 04 0e 00 00       	call   278c3 <printd>
   26abf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:162
        elfInfo->loadCompleted=false;
   26ac2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ac5:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:163
        return;
   26acc:	e9 da 04 00 00       	jmp    26fab <loadSections+0x5c5>
/home/yogi/src/os/chrisOS/src/newloader.c:165
    }
    if (elfInfo->hdr.e_machine!=EM_386)
   26ad1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ad4:	0f b7 40 12          	movzx  eax,WORD PTR [eax+0x12]
   26ad8:	66 83 f8 03          	cmp    ax,0x3
   26adc:	74 2f                	je     26b0d <loadSections+0x127>
/home/yogi/src/os/chrisOS/src/newloader.c:167
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF architecture 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   26ade:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ae1:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26ae5:	0f b7 c0             	movzx  eax,ax
   26ae8:	83 ec 04             	sub    esp,0x4
   26aeb:	50                   	push   eax
   26aec:	68 2c 5e 08 00       	push   0x85e2c
   26af1:	68 00 02 00 00       	push   0x200
   26af6:	e8 c8 0d 00 00       	call   278c3 <printd>
   26afb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:168
        elfInfo->loadCompleted=false;
   26afe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b01:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:169
        return;
   26b08:	e9 9e 04 00 00       	jmp    26fab <loadSections+0x5c5>
/home/yogi/src/os/chrisOS/src/newloader.c:173
    }
    
    //Get the section header table
    printd(DEBUG_ELF_LOADER,"section header record count= %u\n", elfInfo->hdr.e_shnum);
   26b0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b10:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   26b14:	0f b7 c0             	movzx  eax,ax
   26b17:	83 ec 04             	sub    esp,0x4
   26b1a:	50                   	push   eax
   26b1b:	68 58 5e 08 00       	push   0x85e58
   26b20:	68 00 02 00 00       	push   0x200
   26b25:	e8 99 0d 00 00       	call   278c3 <printd>
   26b2a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:174
    printd(DEBUG_ELF_LOADER,"e_shentsize=%u, oursize=%u\n", elfInfo->hdr.e_shentsize, sizeof(Elf32_Shdr) );
   26b2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b30:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   26b34:	0f b7 c0             	movzx  eax,ax
   26b37:	6a 28                	push   0x28
   26b39:	50                   	push   eax
   26b3a:	68 79 5e 08 00       	push   0x85e79
   26b3f:	68 00 02 00 00       	push   0x200
   26b44:	e8 7a 0d 00 00       	call   278c3 <printd>
   26b49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:175
    fl_fseek(file, elfInfo->hdr.e_shoff,SEEK_SET);
   26b4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   26b52:	83 ec 04             	sub    esp,0x4
   26b55:	6a 00                	push   0x0
   26b57:	50                   	push   eax
   26b58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26b5b:	e8 f9 75 ff ff       	call   1e159 <fl_fseek>
   26b60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:176
    printd(DEBUG_ELF_LOADER,"reading SHOFF\n",elfInfo->hdr.e_shoff);
   26b63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b66:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   26b69:	83 ec 04             	sub    esp,0x4
   26b6c:	50                   	push   eax
   26b6d:	68 95 5e 08 00       	push   0x85e95
   26b72:	68 00 02 00 00       	push   0x200
   26b77:	e8 47 0d 00 00       	call   278c3 <printd>
   26b7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:177
    fl_fread(elfInfo->secHdrTable, sizeof(Elf32_Shdr),elfInfo->hdr.e_shnum,file);
   26b7f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b82:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   26b86:	0f b7 c0             	movzx  eax,ax
   26b89:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26b8c:	83 c2 34             	add    edx,0x34
   26b8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26b92:	50                   	push   eax
   26b93:	6a 28                	push   0x28
   26b95:	52                   	push   edx
   26b96:	e8 9f 73 ff ff       	call   1df3a <fl_fread>
   26b9b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:180
    
    //Get the program header table
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_phoff);
   26b9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ba1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26ba4:	83 ec 04             	sub    esp,0x4
   26ba7:	50                   	push   eax
   26ba8:	68 a4 5e 08 00       	push   0x85ea4
   26bad:	68 00 02 00 00       	push   0x200
   26bb2:	e8 0c 0d 00 00       	call   278c3 <printd>
   26bb7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:181
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
   26bba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26bbd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26bc0:	83 ec 04             	sub    esp,0x4
   26bc3:	50                   	push   eax
   26bc4:	68 ba 5e 08 00       	push   0x85eba
   26bc9:	68 00 02 00 00       	push   0x200
   26bce:	e8 f0 0c 00 00       	call   278c3 <printd>
   26bd3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:182
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
   26bd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26bd9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26bdc:	83 ec 04             	sub    esp,0x4
   26bdf:	6a 00                	push   0x0
   26be1:	50                   	push   eax
   26be2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26be5:	e8 6f 75 ff ff       	call   1e159 <fl_fseek>
   26bea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:183
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
   26bed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26bf0:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   26bf4:	0f b7 c0             	movzx  eax,ax
   26bf7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26bfa:	81 c2 04 08 00 00    	add    edx,0x804
   26c00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26c03:	50                   	push   eax
   26c04:	6a 20                	push   0x20
   26c06:	52                   	push   edx
   26c07:	e8 2e 73 ff ff       	call   1df3a <fl_fread>
   26c0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:186
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   26c0f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   26c16:	e9 68 03 00 00       	jmp    26f83 <loadSections+0x59d>
/home/yogi/src/os/chrisOS/src/newloader.c:188
    {
        loadAddress = (uint8_t*)elfInfo->pgmHdrTable[cnt].p_vaddr;
   26c1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c1e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26c21:	83 c2 40             	add    edx,0x40
   26c24:	c1 e2 05             	shl    edx,0x5
   26c27:	01 d0                	add    eax,edx
   26c29:	83 c0 0c             	add    eax,0xc
   26c2c:	8b 00                	mov    eax,DWORD PTR [eax]
   26c2e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:189
        if (isLibrary)
   26c31:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   26c35:	74 1e                	je     26c55 <loadSections+0x26f>
/home/yogi/src/os/chrisOS/src/newloader.c:191
        {
            loadAddress+=libLoadOffset;
   26c37:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   26c3c:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:192
            elfInfo->pgmHdrTable[cnt].p_vaddr=loadAddress;
   26c3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26c42:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26c45:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26c48:	83 c1 40             	add    ecx,0x40
   26c4b:	c1 e1 05             	shl    ecx,0x5
   26c4e:	01 ca                	add    edx,ecx
   26c50:	83 c2 0c             	add    edx,0xc
   26c53:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/newloader.c:195
        }

        if (elfInfo->pgmHdrTable[cnt].p_vaddr==KERNEL_DATA_LOAD_ADDRESS)
   26c55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c58:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26c5b:	83 c2 40             	add    edx,0x40
   26c5e:	c1 e2 05             	shl    edx,0x5
   26c61:	01 d0                	add    eax,edx
   26c63:	83 c0 0c             	add    eax,0xc
   26c66:	8b 00                	mov    eax,DWORD PTR [eax]
   26c68:	89 c2                	mov    edx,eax
   26c6a:	a1 00 00 12 00       	mov    eax,ds:0x120000
   26c6f:	39 c2                	cmp    edx,eax
   26c71:	75 1d                	jne    26c90 <loadSections+0x2aa>
/home/yogi/src/os/chrisOS/src/newloader.c:197
        {
            printd(DEBUG_ELF_LOADER,"Section %u load address is kernel data base address (0x%08X), skipping load\n",cnt,loadAddress);
   26c73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26c76:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26c79:	68 cc 5e 08 00       	push   0x85ecc
   26c7e:	68 00 02 00 00       	push   0x200
   26c83:	e8 3b 0c 00 00       	call   278c3 <printd>
   26c88:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:198
            continue;
   26c8b:	e9 ef 02 00 00       	jmp    26f7f <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:200
        }
        else if (elfInfo->pgmHdrTable[cnt].p_offset==elfInfo->hdr.e_phoff)
   26c90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c93:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26c96:	83 c2 40             	add    edx,0x40
   26c99:	c1 e2 05             	shl    edx,0x5
   26c9c:	01 d0                	add    eax,edx
   26c9e:	83 c0 08             	add    eax,0x8
   26ca1:	8b 10                	mov    edx,DWORD PTR [eax]
   26ca3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ca6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26ca9:	39 c2                	cmp    edx,eax
   26cab:	75 2e                	jne    26cdb <loadSections+0x2f5>
/home/yogi/src/os/chrisOS/src/newloader.c:202
        {
            printd(DEBUG_ELF_LOADER,"Section %u file offset is program header address (0x%08X),skipping load\n",cnt,elfInfo->pgmHdrTable[cnt].p_offset);
   26cad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26cb0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26cb3:	83 c2 40             	add    edx,0x40
   26cb6:	c1 e2 05             	shl    edx,0x5
   26cb9:	01 d0                	add    eax,edx
   26cbb:	83 c0 08             	add    eax,0x8
   26cbe:	8b 00                	mov    eax,DWORD PTR [eax]
   26cc0:	50                   	push   eax
   26cc1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26cc4:	68 1c 5f 08 00       	push   0x85f1c
   26cc9:	68 00 02 00 00       	push   0x200
   26cce:	e8 f0 0b 00 00       	call   278c3 <printd>
   26cd3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:203
            continue;
   26cd6:	e9 a4 02 00 00       	jmp    26f7f <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:205
        }
        if (loadAddress!=0 && elfInfo->libLoadAddress==0 && (elfInfo->hdr.e_type!=ET_REL && elfInfo->hdr.e_type!=ET_DYN))
   26cdb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   26cdf:	74 4b                	je     26d2c <loadSections+0x346>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 1)
   26ce1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ce4:	8b 80 d4 18 00 00    	mov    eax,DWORD PTR [eax+0x18d4]
   26cea:	85 c0                	test   eax,eax
   26cec:	75 3e                	jne    26d2c <loadSections+0x346>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 2)
   26cee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26cf1:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26cf5:	66 83 f8 01          	cmp    ax,0x1
   26cf9:	74 31                	je     26d2c <loadSections+0x346>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 3)
   26cfb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26cfe:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26d02:	66 83 f8 03          	cmp    ax,0x3
   26d06:	74 24                	je     26d2c <loadSections+0x346>
/home/yogi/src/os/chrisOS/src/newloader.c:207
        {
            elfInfo->libLoadAddress=(uintptr_t)loadAddress;
   26d08:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   26d0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d0e:	89 90 d4 18 00 00    	mov    DWORD PTR [eax+0x18d4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:208
            printd(DEBUG_ELF_LOADER,"Setting main load address to 0x%08X\n",loadAddress);
   26d14:	83 ec 04             	sub    esp,0x4
   26d17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26d1a:	68 68 5f 08 00       	push   0x85f68
   26d1f:	68 00 02 00 00       	push   0x200
   26d24:	e8 9a 0b 00 00       	call   278c3 <printd>
   26d29:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:212
            
        }
        //printd(DEBUG_ELF_LOADER,"Next load address is 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_vaddr);
        if (elfInfo->pgmHdrTable[cnt].p_filesz>0)
   26d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d2f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26d32:	c1 e2 05             	shl    edx,0x5
   26d35:	01 d0                	add    eax,edx
   26d37:	05 14 08 00 00       	add    eax,0x814
   26d3c:	8b 00                	mov    eax,DWORD PTR [eax]
   26d3e:	85 c0                	test   eax,eax
   26d40:	0f 84 9f 01 00 00    	je     26ee5 <loadSections+0x4ff>
/home/yogi/src/os/chrisOS/src/newloader.c:214
        {
            printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->pgmHdrTable[cnt].p_offset);
   26d46:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d49:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26d4c:	83 c2 40             	add    edx,0x40
   26d4f:	c1 e2 05             	shl    edx,0x5
   26d52:	01 d0                	add    eax,edx
   26d54:	83 c0 08             	add    eax,0x8
   26d57:	8b 00                	mov    eax,DWORD PTR [eax]
   26d59:	83 ec 04             	sub    esp,0x4
   26d5c:	50                   	push   eax
   26d5d:	68 a4 5e 08 00       	push   0x85ea4
   26d62:	68 00 02 00 00       	push   0x200
   26d67:	e8 57 0b 00 00       	call   278c3 <printd>
   26d6c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:215
            fl_fseek(file, elfInfo->pgmHdrTable[cnt].p_offset, SEEK_SET);
   26d6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d72:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26d75:	83 c2 40             	add    edx,0x40
   26d78:	c1 e2 05             	shl    edx,0x5
   26d7b:	01 d0                	add    eax,edx
   26d7d:	83 c0 08             	add    eax,0x8
   26d80:	8b 00                	mov    eax,DWORD PTR [eax]
   26d82:	83 ec 04             	sub    esp,0x4
   26d85:	6a 00                	push   0x0
   26d87:	50                   	push   eax
   26d88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26d8b:	e8 c9 73 ff ff       	call   1e159 <fl_fseek>
   26d90:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:216
            printd(DEBUG_ELF_LOADER,"reading %u bytes to 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_memsz,loadAddress);
   26d93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d96:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26d99:	c1 e2 05             	shl    edx,0x5
   26d9c:	01 d0                	add    eax,edx
   26d9e:	05 18 08 00 00       	add    eax,0x818
   26da3:	8b 00                	mov    eax,DWORD PTR [eax]
   26da5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26da8:	50                   	push   eax
   26da9:	68 8d 5f 08 00       	push   0x85f8d
   26dae:	68 00 02 00 00       	push   0x200
   26db3:	e8 0b 0b 00 00       	call   278c3 <printd>
   26db8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:217
            fl_fread(loadAddress, 1, elfInfo->pgmHdrTable[cnt].p_memsz, file);
   26dbb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26dbe:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26dc1:	c1 e2 05             	shl    edx,0x5
   26dc4:	01 d0                	add    eax,edx
   26dc6:	05 18 08 00 00       	add    eax,0x818
   26dcb:	8b 00                	mov    eax,DWORD PTR [eax]
   26dcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26dd0:	50                   	push   eax
   26dd1:	6a 01                	push   0x1
   26dd3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26dd6:	e8 5f 71 ff ff       	call   1df3a <fl_fread>
   26ddb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:218
            printd(DEBUG_ELF_LOADER,"Section %u loaded 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   26dde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26de1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26de4:	c1 e2 05             	shl    edx,0x5
   26de7:	01 d0                	add    eax,edx
   26de9:	05 18 08 00 00       	add    eax,0x818
   26dee:	8b 00                	mov    eax,DWORD PTR [eax]
   26df0:	83 ec 0c             	sub    esp,0xc
   26df3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26df6:	50                   	push   eax
   26df7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26dfa:	68 ac 5f 08 00       	push   0x85fac
   26dff:	68 00 02 00 00       	push   0x200
   26e04:	e8 ba 0a 00 00       	call   278c3 <printd>
   26e09:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:219
            if (elfInfo->pgmHdrTable[cnt].p_filesz<elfInfo->pgmHdrTable[cnt].p_memsz)
   26e0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e0f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26e12:	c1 e2 05             	shl    edx,0x5
   26e15:	01 d0                	add    eax,edx
   26e17:	05 14 08 00 00       	add    eax,0x814
   26e1c:	8b 10                	mov    edx,DWORD PTR [eax]
   26e1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e21:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26e24:	c1 e1 05             	shl    ecx,0x5
   26e27:	01 c8                	add    eax,ecx
   26e29:	05 18 08 00 00       	add    eax,0x818
   26e2e:	8b 00                	mov    eax,DWORD PTR [eax]
   26e30:	39 c2                	cmp    edx,eax
   26e32:	0f 83 47 01 00 00    	jae    26f7f <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:221
            {
                printd(DEBUG_ELF_LOADER,"Section %u has uninitialized data, zeroed 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz, loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz);
   26e38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e3b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26e3e:	c1 e2 05             	shl    edx,0x5
   26e41:	01 d0                	add    eax,edx
   26e43:	05 14 08 00 00       	add    eax,0x814
   26e48:	8b 10                	mov    edx,DWORD PTR [eax]
   26e4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26e4d:	01 c2                	add    edx,eax
   26e4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e52:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26e55:	c1 e1 05             	shl    ecx,0x5
   26e58:	01 c8                	add    eax,ecx
   26e5a:	05 18 08 00 00       	add    eax,0x818
   26e5f:	8b 08                	mov    ecx,DWORD PTR [eax]
   26e61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e64:	8b 5d f0             	mov    ebx,DWORD PTR [ebp-0x10]
   26e67:	c1 e3 05             	shl    ebx,0x5
   26e6a:	01 d8                	add    eax,ebx
   26e6c:	05 14 08 00 00       	add    eax,0x814
   26e71:	8b 00                	mov    eax,DWORD PTR [eax]
   26e73:	29 c1                	sub    ecx,eax
   26e75:	89 c8                	mov    eax,ecx
   26e77:	83 ec 0c             	sub    esp,0xc
   26e7a:	52                   	push   edx
   26e7b:	50                   	push   eax
   26e7c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26e7f:	68 d8 5f 08 00       	push   0x85fd8
   26e84:	68 00 02 00 00       	push   0x200
   26e89:	e8 35 0a 00 00       	call   278c3 <printd>
   26e8e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:222
                memset(loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz+1,0,elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz);
   26e91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e94:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26e97:	c1 e2 05             	shl    edx,0x5
   26e9a:	01 d0                	add    eax,edx
   26e9c:	05 18 08 00 00       	add    eax,0x818
   26ea1:	8b 10                	mov    edx,DWORD PTR [eax]
   26ea3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ea6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26ea9:	c1 e1 05             	shl    ecx,0x5
   26eac:	01 c8                	add    eax,ecx
   26eae:	05 14 08 00 00       	add    eax,0x814
   26eb3:	8b 00                	mov    eax,DWORD PTR [eax]
   26eb5:	29 c2                	sub    edx,eax
   26eb7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26eba:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26ebd:	c1 e1 05             	shl    ecx,0x5
   26ec0:	01 c8                	add    eax,ecx
   26ec2:	05 14 08 00 00       	add    eax,0x814
   26ec7:	8b 00                	mov    eax,DWORD PTR [eax]
   26ec9:	8d 48 01             	lea    ecx,[eax+0x1]
   26ecc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26ecf:	01 c8                	add    eax,ecx
   26ed1:	83 ec 04             	sub    esp,0x4
   26ed4:	52                   	push   edx
   26ed5:	6a 00                	push   0x0
   26ed7:	50                   	push   eax
   26ed8:	e8 60 e7 ff ff       	call   2563d <memset>
   26edd:	83 c4 10             	add    esp,0x10
   26ee0:	e9 9a 00 00 00       	jmp    26f7f <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:225
            }
        }
        else if (elfInfo->pgmHdrTable[cnt].p_memsz>0)
   26ee5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ee8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26eeb:	c1 e2 05             	shl    edx,0x5
   26eee:	01 d0                	add    eax,edx
   26ef0:	05 18 08 00 00       	add    eax,0x818
   26ef5:	8b 00                	mov    eax,DWORD PTR [eax]
   26ef7:	85 c0                	test   eax,eax
   26ef9:	74 30                	je     26f2b <loadSections+0x545>
/home/yogi/src/os/chrisOS/src/newloader.c:227
        {
            printd(DEBUG_ELF_LOADER,"Section %u not loadable, zeroed 0x%08X bytes at 0x%08X\n",cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   26efb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26efe:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26f01:	c1 e2 05             	shl    edx,0x5
   26f04:	01 d0                	add    eax,edx
   26f06:	05 18 08 00 00       	add    eax,0x818
   26f0b:	8b 00                	mov    eax,DWORD PTR [eax]
   26f0d:	83 ec 0c             	sub    esp,0xc
   26f10:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26f13:	50                   	push   eax
   26f14:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26f17:	68 1c 60 08 00       	push   0x8601c
   26f1c:	68 00 02 00 00       	push   0x200
   26f21:	e8 9d 09 00 00       	call   278c3 <printd>
   26f26:	83 c4 20             	add    esp,0x20
   26f29:	eb 54                	jmp    26f7f <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:231
        }
#ifndef DEBUG_NONE
        else
            if ((kDebugLevel & DEBUG_ELF_LOADER) == DEBUG_ELF_LOADER)
   26f2b:	a1 78 98 12 00       	mov    eax,ds:0x129878
   26f30:	25 00 02 00 00       	and    eax,0x200
   26f35:	85 c0                	test   eax,eax
   26f37:	74 46                	je     26f7f <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:232
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
   26f39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f3c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26f3f:	c1 e2 05             	shl    edx,0x5
   26f42:	01 d0                	add    eax,edx
   26f44:	05 18 08 00 00       	add    eax,0x818
   26f49:	8b 10                	mov    edx,DWORD PTR [eax]
   26f4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f4e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26f51:	c1 e1 05             	shl    ecx,0x5
   26f54:	01 c8                	add    eax,ecx
   26f56:	05 14 08 00 00       	add    eax,0x814
   26f5b:	8b 00                	mov    eax,DWORD PTR [eax]
   26f5d:	85 c0                	test   eax,eax
   26f5f:	0f 95 c0             	setne  al
   26f62:	0f b6 c0             	movzx  eax,al
   26f65:	83 ec 0c             	sub    esp,0xc
   26f68:	52                   	push   edx
   26f69:	50                   	push   eax
   26f6a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26f6d:	68 54 60 08 00       	push   0x86054
   26f72:	68 00 02 00 00       	push   0x200
   26f77:	e8 47 09 00 00       	call   278c3 <printd>
   26f7c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:186 (discriminator 2)
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   26f7f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:186 (discriminator 1)
   26f83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f86:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   26f8a:	0f b7 c0             	movzx  eax,ax
   26f8d:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   26f90:	0f 8f 85 fc ff ff    	jg     26c1b <loadSections+0x235>
/home/yogi/src/os/chrisOS/src/newloader.c:237
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
#endif

    }
    //Done processing the program header table
    printd(DEBUG_ELF_LOADER,"LoadElf: done loading file\n");
   26f96:	83 ec 08             	sub    esp,0x8
   26f99:	68 87 60 08 00       	push   0x86087
   26f9e:	68 00 02 00 00       	push   0x200
   26fa3:	e8 1b 09 00 00       	call   278c3 <printd>
   26fa8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:239
    
}
   26fab:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   26fae:	c9                   	leave  
   26faf:	c3                   	ret    

00026fb0 <loadElf>:
loadElf():
/home/yogi/src/os/chrisOS/src/newloader.c:242

void loadElf(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   26fb0:	55                   	push   ebp
   26fb1:	89 e5                	mov    ebp,esp
   26fb3:	57                   	push   edi
   26fb4:	56                   	push   esi
   26fb5:	53                   	push   ebx
   26fb6:	83 ec 2c             	sub    esp,0x2c
   26fb9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26fbc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
/home/yogi/src/os/chrisOS/src/newloader.c:243
    char* sectStringTable=(char*)0x1900000;  //TODO: Fix this!!!
   26fbf:	c7 45 dc 00 00 90 01 	mov    DWORD PTR [ebp-0x24],0x1900000
/home/yogi/src/os/chrisOS/src/newloader.c:246

    //Initialize the structs we will be using
    memset(elfInfo,0,sizeof(elfInfo_t));
   26fc6:	83 ec 04             	sub    esp,0x4
   26fc9:	68 dc 18 00 00       	push   0x18dc
   26fce:	6a 00                	push   0x0
   26fd0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26fd3:	e8 65 e6 ff ff       	call   2563d <memset>
   26fd8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:247
    memset(&elfInfo->dynamicInfo,0,sizeof(elfDynamic_t));
   26fdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26fde:	05 54 0e 00 00       	add    eax,0xe54
   26fe3:	83 ec 04             	sub    esp,0x4
   26fe6:	68 80 0a 00 00       	push   0xa80
   26feb:	6a 00                	push   0x0
   26fed:	50                   	push   eax
   26fee:	e8 4a e6 ff ff       	call   2563d <memset>
   26ff3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:249

    elfInfo->loadCompleted=true;
   26ff6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ff9:	c6 80 d8 18 00 00 01 	mov    BYTE PTR [eax+0x18d8],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:251
    //Load all of the sections in the file to memory
    loadSections(file,elfInfo,isLibrary);
   27000:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   27004:	83 ec 04             	sub    esp,0x4
   27007:	50                   	push   eax
   27008:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2700b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2700e:	e8 d3 f9 ff ff       	call   269e6 <loadSections>
   27013:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:255
    

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
   27016:	a1 78 98 12 00       	mov    eax,ds:0x129878
   2701b:	25 00 02 00 00       	and    eax,0x200
   27020:	85 c0                	test   eax,eax
   27022:	0f 84 0d 01 00 00    	je     27135 <loadElf+0x185>
/home/yogi/src/os/chrisOS/src/newloader.c:257
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
   27028:	83 ec 08             	sub    esp,0x8
   2702b:	68 a4 60 08 00       	push   0x860a4
   27030:	68 00 02 00 00       	push   0x200
   27035:	e8 89 08 00 00       	call   278c3 <printd>
   2703a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:258
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   2703d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   27044:	e9 c4 00 00 00       	jmp    2710d <loadElf+0x15d>
/home/yogi/src/os/chrisOS/src/newloader.c:260
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
   27049:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   2704c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2704f:	89 d0                	mov    eax,edx
   27051:	c1 e0 02             	shl    eax,0x2
   27054:	01 d0                	add    eax,edx
   27056:	c1 e0 03             	shl    eax,0x3
   27059:	01 c8                	add    eax,ecx
   2705b:	83 c0 34             	add    eax,0x34
   2705e:	8b 10                	mov    edx,DWORD PTR [eax]
   27060:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   27063:	01 d0                	add    eax,edx
   27065:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27068:	0f be c0             	movsx  eax,al
   2706b:	85 c0                	test   eax,eax
   2706d:	0f 84 96 00 00 00    	je     27109 <loadElf+0x159>
/home/yogi/src/os/chrisOS/src/newloader.c:261
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   27073:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   27076:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   27079:	89 d0                	mov    eax,edx
   2707b:	c1 e0 02             	shl    eax,0x2
   2707e:	01 d0                	add    eax,edx
   27080:	c1 e0 03             	shl    eax,0x3
   27083:	01 c8                	add    eax,ecx
   27085:	83 c0 38             	add    eax,0x38
   27088:	8b 38                	mov    edi,DWORD PTR [eax]
   2708a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   2708d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   27090:	89 d0                	mov    eax,edx
   27092:	c1 e0 02             	shl    eax,0x2
   27095:	01 d0                	add    eax,edx
   27097:	c1 e0 03             	shl    eax,0x3
   2709a:	01 c8                	add    eax,ecx
   2709c:	83 c0 48             	add    eax,0x48
   2709f:	8b 30                	mov    esi,DWORD PTR [eax]
   270a1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   270a4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   270a7:	89 d0                	mov    eax,edx
   270a9:	c1 e0 02             	shl    eax,0x2
   270ac:	01 d0                	add    eax,edx
   270ae:	c1 e0 03             	shl    eax,0x3
   270b1:	01 c8                	add    eax,ecx
   270b3:	83 c0 44             	add    eax,0x44
   270b6:	8b 18                	mov    ebx,DWORD PTR [eax]
   270b8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   270bb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   270be:	89 d0                	mov    eax,edx
   270c0:	c1 e0 02             	shl    eax,0x2
   270c3:	01 d0                	add    eax,edx
   270c5:	c1 e0 03             	shl    eax,0x3
   270c8:	01 c8                	add    eax,ecx
   270ca:	83 c0 40             	add    eax,0x40
   270cd:	8b 08                	mov    ecx,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/newloader.c:262
                        sectStringTable+elfInfo->secHdrTable[cnt].sh_name,
   270cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   270d2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
   270d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   270d8:	89 d0                	mov    eax,edx
   270da:	c1 e0 02             	shl    eax,0x2
   270dd:	01 d0                	add    eax,edx
   270df:	c1 e0 03             	shl    eax,0x3
   270e2:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
   270e5:	83 c0 34             	add    eax,0x34
   270e8:	8b 10                	mov    edx,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/newloader.c:261
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   270ea:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   270ed:	01 d0                	add    eax,edx
   270ef:	83 ec 04             	sub    esp,0x4
   270f2:	57                   	push   edi
   270f3:	56                   	push   esi
   270f4:	53                   	push   ebx
   270f5:	51                   	push   ecx
   270f6:	50                   	push   eax
   270f7:	68 d0 60 08 00       	push   0x860d0
   270fc:	68 00 02 00 00       	push   0x200
   27101:	e8 bd 07 00 00       	call   278c3 <printd>
   27106:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:258 (discriminator 2)

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   27109:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:258 (discriminator 1)
   2710d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27110:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   27114:	0f b7 c0             	movzx  eax,ax
   27117:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   2711a:	0f 8f 29 ff ff ff    	jg     27049 <loadElf+0x99>
/home/yogi/src/os/chrisOS/src/newloader.c:268
                        elfInfo->secHdrTable[cnt].sh_addr,
                        elfInfo->secHdrTable[cnt].sh_offset,
                        elfInfo->secHdrTable[cnt].sh_size, 
                        elfInfo->secHdrTable[cnt].sh_type);
        }
        printd(DEBUG_ELF_LOADER,"End of section table... press a key to continue\n");
   27120:	83 ec 08             	sub    esp,0x8
   27123:	68 f4 60 08 00       	push   0x860f4
   27128:	68 00 02 00 00       	push   0x200
   2712d:	e8 91 07 00 00       	call   278c3 <printd>
   27132:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:272
    }
    
    //Find the symbol and string tables in the dynamic section
    if (elfInfo->dynamicSectionAddress>0)
   27135:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27138:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   2713e:	85 c0                	test   eax,eax
   27140:	0f 84 9a 01 00 00    	je     272e0 <loadElf+0x330>
/home/yogi/src/os/chrisOS/src/newloader.c:274
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
   27146:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27149:	8b 90 4c 0e 00 00    	mov    edx,DWORD PTR [eax+0xe4c]
   2714f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27152:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   27158:	52                   	push   edx
   27159:	50                   	push   eax
   2715a:	68 28 61 08 00       	push   0x86128
   2715f:	68 00 02 00 00       	push   0x200
   27164:	e8 5a 07 00 00       	call   278c3 <printd>
   27169:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:275
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   2716c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2716f:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   27175:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/newloader.c:278

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   27178:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   2717f:	e9 ea 00 00 00       	jmp    2726e <loadElf+0x2be>
/home/yogi/src/os/chrisOS/src/newloader.c:280
        {
            if (dyn[cnt].d_tag==DT_STRTAB)
   27184:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   27187:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2718e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27191:	01 d0                	add    eax,edx
   27193:	8b 00                	mov    eax,DWORD PTR [eax]
   27195:	83 f8 05             	cmp    eax,0x5
   27198:	75 61                	jne    271fb <loadElf+0x24b>
/home/yogi/src/os/chrisOS/src/newloader.c:282
            {
                elfInfo->dynamicInfo.strTableAddress=dyn[cnt].d_un.d_ptr;
   2719a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2719d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   271a4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   271a7:	01 d0                	add    eax,edx
   271a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   271ac:	89 c2                	mov    edx,eax
   271ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   271b1:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:283
                if (isLibrary)
   271b7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   271bb:	74 1d                	je     271da <loadElf+0x22a>
/home/yogi/src/os/chrisOS/src/newloader.c:284
                    elfInfo->dynamicInfo.strTableAddress+=libLoadOffset;
   271bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   271c0:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   271c6:	8b 15 ec a5 09 00    	mov    edx,DWORD PTR ds:0x9a5ec
   271cc:	c1 e2 02             	shl    edx,0x2
   271cf:	01 c2                	add    edx,eax
   271d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   271d4:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:285
                printd(DEBUG_ELF_LOADER,"Found dynamic string table address 0x%08X\n",elfInfo->dynamicInfo.strTableAddress);
   271da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   271dd:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   271e3:	83 ec 04             	sub    esp,0x4
   271e6:	50                   	push   eax
   271e7:	68 64 61 08 00       	push   0x86164
   271ec:	68 00 02 00 00       	push   0x200
   271f1:	e8 cd 06 00 00       	call   278c3 <printd>
   271f6:	83 c4 10             	add    esp,0x10
   271f9:	eb 6f                	jmp    2726a <loadElf+0x2ba>
/home/yogi/src/os/chrisOS/src/newloader.c:287
            }
            else if (dyn[cnt].d_tag==DT_SYMTAB)
   271fb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   271fe:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   27205:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27208:	01 d0                	add    eax,edx
   2720a:	8b 00                	mov    eax,DWORD PTR [eax]
   2720c:	83 f8 06             	cmp    eax,0x6
   2720f:	75 59                	jne    2726a <loadElf+0x2ba>
/home/yogi/src/os/chrisOS/src/newloader.c:289
            {
                elfInfo->dynamicInfo.symTableAddress=dyn[cnt].d_un.d_ptr;
   27211:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   27214:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2721b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2721e:	01 d0                	add    eax,edx
   27220:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   27223:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27226:	89 90 c0 18 00 00    	mov    DWORD PTR [eax+0x18c0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:290
                if (isLibrary)
   2722c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   27230:	74 19                	je     2724b <loadElf+0x29b>
/home/yogi/src/os/chrisOS/src/newloader.c:291
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
   27232:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27235:	8b 90 c0 18 00 00    	mov    edx,DWORD PTR [eax+0x18c0]
   2723b:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   27240:	01 c2                	add    edx,eax
   27242:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27245:	89 90 c0 18 00 00    	mov    DWORD PTR [eax+0x18c0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:292
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
   2724b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2724e:	8b 80 c0 18 00 00    	mov    eax,DWORD PTR [eax+0x18c0]
   27254:	83 ec 04             	sub    esp,0x4
   27257:	50                   	push   eax
   27258:	68 90 61 08 00       	push   0x86190
   2725d:	68 00 02 00 00       	push   0x200
   27262:	e8 5c 06 00 00       	call   278c3 <printd>
   27267:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:278 (discriminator 2)
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   2726a:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:278 (discriminator 1)
   2726e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27271:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   27277:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   2727a:	0f 8f 04 ff ff ff    	jg     27184 <loadElf+0x1d4>
/home/yogi/src/os/chrisOS/src/newloader.c:295
                if (isLibrary)
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
            }
        }
        if (!elfInfo->dynamicInfo.strTableAddress)
   27280:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27283:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   27289:	85 c0                	test   eax,eax
   2728b:	75 1c                	jne    272a9 <loadElf+0x2f9>
/home/yogi/src/os/chrisOS/src/newloader.c:297
        {
            printk("EXEC: Dynamic loading, unable to find dynamic string table address, cannot execute.\n");
   2728d:	83 ec 0c             	sub    esp,0xc
   27290:	68 bc 61 08 00       	push   0x861bc
   27295:	e8 09 06 00 00       	call   278a3 <printk>
   2729a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:298
            elfInfo->loadCompleted=false;
   2729d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   272a0:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:299
            return;
   272a7:	eb 37                	jmp    272e0 <loadElf+0x330>
/home/yogi/src/os/chrisOS/src/newloader.c:301
        }
        else if (!elfInfo->dynamicInfo.symTableAddress)
   272a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   272ac:	8b 80 c0 18 00 00    	mov    eax,DWORD PTR [eax+0x18c0]
   272b2:	85 c0                	test   eax,eax
   272b4:	75 1c                	jne    272d2 <loadElf+0x322>
/home/yogi/src/os/chrisOS/src/newloader.c:303
        {
            printk("EXEC: Dynamic loading, unable to find dynamic symbol table address, cannot execute.\n");
   272b6:	83 ec 0c             	sub    esp,0xc
   272b9:	68 14 62 08 00       	push   0x86214
   272be:	e8 e0 05 00 00       	call   278a3 <printk>
   272c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:304
            elfInfo->loadCompleted=false;
   272c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   272c9:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:305
            return;
   272d0:	eb 0e                	jmp    272e0 <loadElf+0x330>
/home/yogi/src/os/chrisOS/src/newloader.c:308
        }

     processELFDynamicSection(elfInfo);   
   272d2:	83 ec 0c             	sub    esp,0xc
   272d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   272d8:	e8 5d f2 ff ff       	call   2653a <processELFDynamicSection>
   272dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:311
    
    }
}
   272e0:	8d 65 f4             	lea    esp,[ebp-0xc]
   272e3:	5b                   	pop    ebx
   272e4:	5e                   	pop    esi
   272e5:	5f                   	pop    edi
   272e6:	5d                   	pop    ebp
   272e7:	c3                   	ret    

000272e8 <exec>:
exec():
/home/yogi/src/os/chrisOS/src/newloader.c:314

int exec(char* fileName,int argc,char** argv)
{
   272e8:	55                   	push   ebp
   272e9:	89 e5                	mov    ebp,esp
   272eb:	53                   	push   ebx
   272ec:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/newloader.c:315
    int lRetVal=-1;
   272ef:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/newloader.c:319
    register int *eax __asm__("eax");
    
    //Open the executable
    void* fPtr=fopen(fileName, "r");
   272f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   272f9:	83 ec 08             	sub    esp,0x8
   272fc:	68 f5 5c 08 00       	push   0x85cf5
   27301:	50                   	push   eax
   27302:	e8 66 66 ff ff       	call   1d96d <fl_fopen>
   27307:	83 c4 10             	add    esp,0x10
   2730a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/newloader.c:320
    if (fPtr==0)
   2730d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27311:	75 21                	jne    27334 <exec+0x4c>
/home/yogi/src/os/chrisOS/src/newloader.c:322
    {
        printk("Error opening file '%s' (0x%08X), cannot exec\n",fileName,fPtr);
   27313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27316:	83 ec 04             	sub    esp,0x4
   27319:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2731c:	50                   	push   eax
   2731d:	68 6c 62 08 00       	push   0x8626c
   27322:	e8 7c 05 00 00       	call   278a3 <printk>
   27327:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:323
        return -1;
   2732a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2732f:	e9 ea 00 00 00       	jmp    2741e <exec+0x136>
/home/yogi/src/os/chrisOS/src/newloader.c:327
    } 
    
    //Get a slot in the load info
    elfInfo_t* elf=&kExecLoadInfo[kExecLoadCount++];
   27334:	8b 0d 3c 99 12 00    	mov    ecx,DWORD PTR ds:0x12993c
   2733a:	a1 40 99 12 00       	mov    eax,ds:0x129940
   2733f:	8d 50 01             	lea    edx,[eax+0x1]
   27342:	89 15 40 99 12 00    	mov    DWORD PTR ds:0x129940,edx
   27348:	69 c0 dc 18 00 00    	imul   eax,eax,0x18dc
   2734e:	01 c8                	add    eax,ecx
   27350:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/newloader.c:330
    
    //Load the executable
    loadElf(fPtr,elf,false);
   27353:	83 ec 04             	sub    esp,0x4
   27356:	6a 00                	push   0x0
   27358:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2735b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2735e:	e8 4d fc ff ff       	call   26fb0 <loadElf>
   27363:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:331
    printd(DEBUG_ELF_LOADER,"exec: back from loading ELF file, result=%s\n",elf->loadCompleted?"Success":"Failure");;
   27366:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   27369:	0f b6 80 d8 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d8]
   27370:	84 c0                	test   al,al
   27372:	74 07                	je     2737b <exec+0x93>
/home/yogi/src/os/chrisOS/src/newloader.c:331 (discriminator 1)
   27374:	b8 9b 62 08 00       	mov    eax,0x8629b
   27379:	eb 05                	jmp    27380 <exec+0x98>
/home/yogi/src/os/chrisOS/src/newloader.c:331 (discriminator 2)
   2737b:	b8 a3 62 08 00       	mov    eax,0x862a3
/home/yogi/src/os/chrisOS/src/newloader.c:331 (discriminator 4)
   27380:	83 ec 04             	sub    esp,0x4
   27383:	50                   	push   eax
   27384:	68 ac 62 08 00       	push   0x862ac
   27389:	68 00 02 00 00       	push   0x200
   2738e:	e8 30 05 00 00       	call   278c3 <printd>
   27393:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:332 (discriminator 4)
    fclose(fPtr);
   27396:	83 ec 0c             	sub    esp,0xc
   27399:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2739c:	e8 fd 69 ff ff       	call   1dd9e <fl_fclose>
   273a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:335 (discriminator 4)
    
    //If loaded successfully then execute
    if (elf->loadCompleted)
   273a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   273a7:	0f b6 80 d8 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d8]
   273ae:	84 c0                	test   al,al
   273b0:	74 69                	je     2741b <exec+0x133>
/home/yogi/src/os/chrisOS/src/newloader.c:337
    {
        printd(DEBUG_ELF_LOADER,"exec: Executing %s at 0x%08X, return address is =0x%08X\n", fileName, elf->hdr.e_entry, __builtin_return_address(0));
   273b2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   273b5:	89 c1                	mov    ecx,eax
   273b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   273ba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   273bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   273c0:	83 ec 0c             	sub    esp,0xc
   273c3:	51                   	push   ecx
   273c4:	52                   	push   edx
   273c5:	50                   	push   eax
   273c6:	68 dc 62 08 00       	push   0x862dc
   273cb:	68 00 02 00 00       	push   0x200
   273d0:	e8 ee 04 00 00       	call   278c3 <printd>
   273d5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:338
        __asm__("push ebx\npush ecx\n"::[argvp] "b" (argv), [argcv] "c" (argc));
   273d8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   273db:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   273de:	89 d3                	mov    ebx,edx
   273e0:	53                   	push   ebx
   273e1:	51                   	push   ecx
/home/yogi/src/os/chrisOS/src/newloader.c:339
        __asm__("mov edx,%[pgmptr]\n"::[pgmptr] "d" (elf->hdr.e_entry));
   273e2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   273e5:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   273e8:	89 d2                	mov    edx,edx
/home/yogi/src/os/chrisOS/src/newloader.c:340
        __asm__("call edx\n"::[pgmptr] "d" (elf->hdr.e_entry));
   273ea:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   273ed:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   273f0:	ff d2                	call   edx
/home/yogi/src/os/chrisOS/src/newloader.c:341
        lRetVal=(uint32_t)eax;
   273f2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:342
        printd(DEBUG_ELF_LOADER,"exec: Back from executing %s, return value is 0x%08X, 0x%08X, __bra=0x%08X\n", fileName, lRetVal, &fileName, __builtin_return_address(0));
   273f5:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   273f8:	89 c2                	mov    edx,eax
   273fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   273fd:	83 ec 08             	sub    esp,0x8
   27400:	52                   	push   edx
   27401:	8d 55 08             	lea    edx,[ebp+0x8]
   27404:	52                   	push   edx
   27405:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   27408:	50                   	push   eax
   27409:	68 18 63 08 00       	push   0x86318
   2740e:	68 00 02 00 00       	push   0x200
   27413:	e8 ab 04 00 00       	call   278c3 <printd>
   27418:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:344
    }
    return lRetVal;
   2741b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/newloader.c:345
}
   2741e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   27421:	c9                   	leave  
   27422:	c3                   	ret    
   27423:	90                   	nop

00027424 <panic>:
panic():
/home/yogi/src/os/chrisOS/src/panic.c:8
#include <stdarg.h>
#include <time.h>
#include "printf.h"

void __attribute__((noinline))panic(const char *format, ...)
{
   27424:	55                   	push   ebp
   27425:	89 e5                	mov    ebp,esp
   27427:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/panic.c:10
    va_list args;
    va_start( args, format );
   2742a:	8d 45 0c             	lea    eax,[ebp+0xc]
   2742d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/panic.c:11
    printk("\n>>>panic at instruction prior to address 0x%08X<<<\n", __builtin_return_address(0));
   27430:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   27433:	83 ec 08             	sub    esp,0x8
   27436:	50                   	push   eax
   27437:	68 64 63 08 00       	push   0x86364
   2743c:	e8 62 04 00 00       	call   278a3 <printk>
   27441:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:12
    printk("  >>>");
   27444:	83 ec 0c             	sub    esp,0xc
   27447:	68 99 63 08 00       	push   0x86399
   2744c:	e8 52 04 00 00       	call   278a3 <printk>
   27451:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:13
    printk_valist( format,args);
   27454:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27457:	83 ec 08             	sub    esp,0x8
   2745a:	50                   	push   eax
   2745b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2745e:	e8 25 04 00 00       	call   27888 <printk_valist>
   27463:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:15 (discriminator 1)
    panicLoop: 
    __asm__("cli\nhlt\n");
   27466:	fa                   	cli    
   27467:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/panic.c:16 (discriminator 1)
    goto panicLoop;
   27468:	eb fc                	jmp    27466 <panic+0x42>
   2746a:	66 90                	xchg   ax,ax

0002746c <printchar>:
printchar():
/home/yogi/src/os/chrisOS/src/printf.c:41
//extern bool pauseDisplay(bool offerToQuit);
extern uint32_t kDebugLevel;
uint8_t printDLineCount;

static void printchar(char **str, int c)
{
   2746c:	55                   	push   ebp
   2746d:	89 e5                	mov    ebp,esp
   2746f:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/printf.c:43
	
	if (str) {
   27472:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   27476:	74 19                	je     27491 <printchar+0x25>
/home/yogi/src/os/chrisOS/src/printf.c:44
		**str = c;
   27478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2747b:	8b 00                	mov    eax,DWORD PTR [eax]
   2747d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27480:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/printf.c:45
		++(*str);
   27482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27485:	8b 00                	mov    eax,DWORD PTR [eax]
   27487:	8d 50 01             	lea    edx,[eax+0x1]
   2748a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2748d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/printf.c:48
	}
	else terminal_putchar((unsigned char)c);
}
   2748f:	eb 12                	jmp    274a3 <printchar+0x37>
/home/yogi/src/os/chrisOS/src/printf.c:47
	
	if (str) {
		**str = c;
		++(*str);
	}
	else terminal_putchar((unsigned char)c);
   27491:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27494:	0f b6 c0             	movzx  eax,al
   27497:	83 ec 0c             	sub    esp,0xc
   2749a:	50                   	push   eax
   2749b:	e8 be 0c ff ff       	call   1815e <terminal_putchar>
   274a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:48
}
   274a3:	90                   	nop
   274a4:	c9                   	leave  
   274a5:	c3                   	ret    

000274a6 <prints>:
prints():
/home/yogi/src/os/chrisOS/src/printf.c:54

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   274a6:	55                   	push   ebp
   274a7:	89 e5                	mov    ebp,esp
   274a9:	57                   	push   edi
   274aa:	56                   	push   esi
   274ab:	53                   	push   ebx
   274ac:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/printf.c:55
	register int pc = 0, padchar = ' ';
   274af:	bb 00 00 00 00       	mov    ebx,0x0
   274b4:	c7 45 e4 20 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/chrisOS/src/printf.c:57

	if (width > 0) {
   274bb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   274bf:	7e 39                	jle    274fa <prints+0x54>
/home/yogi/src/os/chrisOS/src/printf.c:58
		register int len = 0;
   274c1:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOS/src/printf.c:60
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   274c6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
   274c9:	eb 06                	jmp    274d1 <prints+0x2b>
/home/yogi/src/os/chrisOS/src/printf.c:60 (discriminator 3)
   274cb:	83 c6 01             	add    esi,0x1
   274ce:	83 c7 01             	add    edi,0x1
/home/yogi/src/os/chrisOS/src/printf.c:60 (discriminator 1)
   274d1:	0f b6 07             	movzx  eax,BYTE PTR [edi]
   274d4:	84 c0                	test   al,al
   274d6:	75 f3                	jne    274cb <prints+0x25>
/home/yogi/src/os/chrisOS/src/printf.c:61
		if (len >= width) width = 0;
   274d8:	3b 75 10             	cmp    esi,DWORD PTR [ebp+0x10]
   274db:	7c 09                	jl     274e6 <prints+0x40>
/home/yogi/src/os/chrisOS/src/printf.c:61 (discriminator 1)
   274dd:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
   274e4:	eb 03                	jmp    274e9 <prints+0x43>
/home/yogi/src/os/chrisOS/src/printf.c:62
		else width -= len;
   274e6:	29 75 10             	sub    DWORD PTR [ebp+0x10],esi
/home/yogi/src/os/chrisOS/src/printf.c:63
		if (pad & PAD_ZERO) padchar = '0';
   274e9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   274ec:	83 e0 02             	and    eax,0x2
   274ef:	85 c0                	test   eax,eax
   274f1:	74 07                	je     274fa <prints+0x54>
/home/yogi/src/os/chrisOS/src/printf.c:63 (discriminator 1)
   274f3:	c7 45 e4 30 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x30
/home/yogi/src/os/chrisOS/src/printf.c:65
	}
	if (!(pad & PAD_RIGHT)) {
   274fa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   274fd:	83 e0 01             	and    eax,0x1
   27500:	85 c0                	test   eax,eax
   27502:	75 41                	jne    27545 <prints+0x9f>
/home/yogi/src/os/chrisOS/src/printf.c:66
		for ( ; width > 0; --width) {
   27504:	eb 18                	jmp    2751e <prints+0x78>
/home/yogi/src/os/chrisOS/src/printf.c:67 (discriminator 2)
			printchar (out, padchar);
   27506:	83 ec 08             	sub    esp,0x8
   27509:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   2750c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2750f:	e8 58 ff ff ff       	call   2746c <printchar>
   27514:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:68 (discriminator 2)
			++pc;
   27517:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:66 (discriminator 2)
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
   2751a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/chrisOS/src/printf.c:66 (discriminator 1)
   2751e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27522:	7f e2                	jg     27506 <prints+0x60>
/home/yogi/src/os/chrisOS/src/printf.c:71
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   27524:	eb 1f                	jmp    27545 <prints+0x9f>
/home/yogi/src/os/chrisOS/src/printf.c:72 (discriminator 2)
		printchar (out, *string);
   27526:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27529:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2752c:	0f be c0             	movsx  eax,al
   2752f:	83 ec 08             	sub    esp,0x8
   27532:	50                   	push   eax
   27533:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27536:	e8 31 ff ff ff       	call   2746c <printchar>
   2753b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:73 (discriminator 2)
		++pc;
   2753e:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:71 (discriminator 2)
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   27541:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:71 (discriminator 1)
   27545:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27548:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2754b:	84 c0                	test   al,al
   2754d:	75 d7                	jne    27526 <prints+0x80>
/home/yogi/src/os/chrisOS/src/printf.c:75
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   2754f:	eb 18                	jmp    27569 <prints+0xc3>
/home/yogi/src/os/chrisOS/src/printf.c:76 (discriminator 2)
		printchar (out, padchar);
   27551:	83 ec 08             	sub    esp,0x8
   27554:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   27557:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2755a:	e8 0d ff ff ff       	call   2746c <printchar>
   2755f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:77 (discriminator 2)
		++pc;
   27562:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:75 (discriminator 2)
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   27565:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/chrisOS/src/printf.c:75 (discriminator 1)
   27569:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2756d:	7f e2                	jg     27551 <prints+0xab>
/home/yogi/src/os/chrisOS/src/printf.c:80
		printchar (out, padchar);
		++pc;
	}

	return pc;
   2756f:	89 d8                	mov    eax,ebx
/home/yogi/src/os/chrisOS/src/printf.c:81
}
   27571:	8d 65 f4             	lea    esp,[ebp-0xc]
   27574:	5b                   	pop    ebx
   27575:	5e                   	pop    esi
   27576:	5f                   	pop    edi
   27577:	5d                   	pop    ebp
   27578:	c3                   	ret    

00027579 <printi>:
printi():
/home/yogi/src/os/chrisOS/src/printf.c:87

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   27579:	55                   	push   ebp
   2757a:	89 e5                	mov    ebp,esp
   2757c:	57                   	push   edi
   2757d:	56                   	push   esi
   2757e:	53                   	push   ebx
   2757f:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOS/src/printf.c:90
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
   27582:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
   27589:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
/home/yogi/src/os/chrisOS/src/printf.c:91
	register unsigned int u = i;
   27590:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/printf.c:93

	if (i == 0) {
   27593:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   27597:	75 22                	jne    275bb <printi+0x42>
/home/yogi/src/os/chrisOS/src/printf.c:94
		print_buf[0] = '0';
   27599:	c6 45 dc 30          	mov    BYTE PTR [ebp-0x24],0x30
/home/yogi/src/os/chrisOS/src/printf.c:95
		print_buf[1] = '\0';
   2759d:	c6 45 dd 00          	mov    BYTE PTR [ebp-0x23],0x0
/home/yogi/src/os/chrisOS/src/printf.c:96
		return prints (out, print_buf, width, pad);
   275a1:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   275a4:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   275a7:	8d 45 dc             	lea    eax,[ebp-0x24]
   275aa:	50                   	push   eax
   275ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   275ae:	e8 f3 fe ff ff       	call   274a6 <prints>
   275b3:	83 c4 10             	add    esp,0x10
   275b6:	e9 af 00 00 00       	jmp    2766a <printi+0xf1>
/home/yogi/src/os/chrisOS/src/printf.c:99
	}

	if (sg && b == 10 && i < 0) {
   275bb:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   275bf:	74 1a                	je     275db <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:99 (discriminator 1)
   275c1:	83 7d 10 0a          	cmp    DWORD PTR [ebp+0x10],0xa
   275c5:	75 14                	jne    275db <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:99 (discriminator 2)
   275c7:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   275cb:	79 0e                	jns    275db <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:100
		neg = 1;
   275cd:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x1
/home/yogi/src/os/chrisOS/src/printf.c:101
		u = -i;
   275d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   275d7:	f7 d8                	neg    eax
   275d9:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:104
	}

	s = print_buf + PRINT_BUF_LEN-1;
   275db:	8d 5d dc             	lea    ebx,[ebp-0x24]
   275de:	83 c3 0b             	add    ebx,0xb
/home/yogi/src/os/chrisOS/src/printf.c:105
	*s = '\0';
   275e1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
/home/yogi/src/os/chrisOS/src/printf.c:107

	while (u) {
   275e4:	eb 35                	jmp    2761b <printi+0xa2>
/home/yogi/src/os/chrisOS/src/printf.c:108
		t = u % b;
   275e6:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   275e9:	89 f0                	mov    eax,esi
   275eb:	ba 00 00 00 00       	mov    edx,0x0
   275f0:	f7 f1                	div    ecx
   275f2:	89 d0                	mov    eax,edx
   275f4:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOS/src/printf.c:109
		if( t >= 10 )
   275f6:	83 ff 09             	cmp    edi,0x9
   275f9:	7e 08                	jle    27603 <printi+0x8a>
/home/yogi/src/os/chrisOS/src/printf.c:110
			t += letbase - '0' - 10;
   275fb:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
   275fe:	83 e8 3a             	sub    eax,0x3a
   27601:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/printf.c:111
		*--s = t + '0';
   27603:	83 eb 01             	sub    ebx,0x1
   27606:	89 f8                	mov    eax,edi
   27608:	83 c0 30             	add    eax,0x30
   2760b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/printf.c:112
		u /= b;
   2760d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27610:	89 f0                	mov    eax,esi
   27612:	ba 00 00 00 00       	mov    edx,0x0
   27617:	f7 f1                	div    ecx
   27619:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:107
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
   2761b:	85 f6                	test   esi,esi
   2761d:	75 c7                	jne    275e6 <printi+0x6d>
/home/yogi/src/os/chrisOS/src/printf.c:115
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
   2761f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   27623:	74 30                	je     27655 <printi+0xdc>
/home/yogi/src/os/chrisOS/src/printf.c:116
		if( width && (pad & PAD_ZERO) ) {
   27625:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   27629:	74 24                	je     2764f <printi+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:116 (discriminator 1)
   2762b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   2762e:	83 e0 02             	and    eax,0x2
   27631:	85 c0                	test   eax,eax
   27633:	74 1a                	je     2764f <printi+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:117
			printchar (out, '-');
   27635:	83 ec 08             	sub    esp,0x8
   27638:	6a 2d                	push   0x2d
   2763a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2763d:	e8 2a fe ff ff       	call   2746c <printchar>
   27642:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:118
			++pc;
   27645:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/src/os/chrisOS/src/printf.c:119
			--width;
   27649:	83 6d 18 01          	sub    DWORD PTR [ebp+0x18],0x1
   2764d:	eb 06                	jmp    27655 <printi+0xdc>
/home/yogi/src/os/chrisOS/src/printf.c:122
		}
		else {
			*--s = '-';
   2764f:	83 eb 01             	sub    ebx,0x1
   27652:	c6 03 2d             	mov    BYTE PTR [ebx],0x2d
/home/yogi/src/os/chrisOS/src/printf.c:126
		}
	}

	return pc + prints (out, s, width, pad);
   27655:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   27658:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   2765b:	53                   	push   ebx
   2765c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2765f:	e8 42 fe ff ff       	call   274a6 <prints>
   27664:	83 c4 10             	add    esp,0x10
   27667:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
/home/yogi/src/os/chrisOS/src/printf.c:127 (discriminator 1)
}
   2766a:	8d 65 f4             	lea    esp,[ebp-0xc]
   2766d:	5b                   	pop    ebx
   2766e:	5e                   	pop    esi
   2766f:	5f                   	pop    edi
   27670:	5d                   	pop    ebp
   27671:	c3                   	ret    

00027672 <print>:
print():
/home/yogi/src/os/chrisOS/src/printf.c:130

static int print(char **out, const char *format, va_list args )
{
   27672:	55                   	push   ebp
   27673:	89 e5                	mov    ebp,esp
   27675:	57                   	push   edi
   27676:	56                   	push   esi
   27677:	53                   	push   ebx
   27678:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/printf.c:132
	register int width, pad;
	register int pc = 0;
   2767b:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOS/src/printf.c:135
	char scr[2];

	for (; *format != 0; ++format) {
   27680:	e9 da 01 00 00       	jmp    2785f <print+0x1ed>
/home/yogi/src/os/chrisOS/src/printf.c:136
		if (*format == '%') {
   27685:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27688:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2768b:	3c 25                	cmp    al,0x25
   2768d:	0f 85 ad 01 00 00    	jne    27840 <print+0x1ce>
/home/yogi/src/os/chrisOS/src/printf.c:137
			++format;
   27693:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:138
			width = pad = 0;
   27697:	bf 00 00 00 00       	mov    edi,0x0
   2769c:	89 fe                	mov    esi,edi
/home/yogi/src/os/chrisOS/src/printf.c:139
			if (*format == '\0') break;
   2769e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   276a1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276a4:	84 c0                	test   al,al
   276a6:	0f 84 c3 01 00 00    	je     2786f <print+0x1fd>
/home/yogi/src/os/chrisOS/src/printf.c:140
			if (*format == '%') goto out;
   276ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   276af:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276b2:	3c 25                	cmp    al,0x25
   276b4:	0f 84 85 01 00 00    	je     2783f <print+0x1cd>
/home/yogi/src/os/chrisOS/src/printf.c:141
			if (*format == '-') {
   276ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   276bd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276c0:	3c 2d                	cmp    al,0x2d
   276c2:	75 12                	jne    276d6 <print+0x64>
/home/yogi/src/os/chrisOS/src/printf.c:142
				++format;
   276c4:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:143
				pad = PAD_RIGHT;
   276c8:	bf 01 00 00 00       	mov    edi,0x1
/home/yogi/src/os/chrisOS/src/printf.c:145
			}
			while (*format == '0') {
   276cd:	eb 07                	jmp    276d6 <print+0x64>
/home/yogi/src/os/chrisOS/src/printf.c:146
				++format;
   276cf:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:147
				pad |= PAD_ZERO;
   276d3:	83 cf 02             	or     edi,0x2
/home/yogi/src/os/chrisOS/src/printf.c:145
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
   276d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   276d9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276dc:	3c 30                	cmp    al,0x30
   276de:	74 ef                	je     276cf <print+0x5d>
/home/yogi/src/os/chrisOS/src/printf.c:149
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   276e0:	eb 1d                	jmp    276ff <print+0x8d>
/home/yogi/src/os/chrisOS/src/printf.c:150 (discriminator 3)
				width *= 10;
   276e2:	89 f0                	mov    eax,esi
   276e4:	c1 e0 02             	shl    eax,0x2
   276e7:	01 f0                	add    eax,esi
   276e9:	01 c0                	add    eax,eax
   276eb:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:151 (discriminator 3)
				width += *format - '0';
   276ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   276f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276f3:	0f be c0             	movsx  eax,al
   276f6:	83 e8 30             	sub    eax,0x30
   276f9:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 3)
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   276fb:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 1)
   276ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27702:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27705:	3c 2f                	cmp    al,0x2f
   27707:	7e 0a                	jle    27713 <print+0xa1>
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 2)
   27709:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2770c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2770f:	3c 39                	cmp    al,0x39
   27711:	7e cf                	jle    276e2 <print+0x70>
/home/yogi/src/os/chrisOS/src/printf.c:153
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
   27713:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27716:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27719:	3c 73                	cmp    al,0x73
   2771b:	75 2b                	jne    27748 <print+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:154
				register char *s = (char *)va_arg( args, int );
   2771d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27720:	8d 50 04             	lea    edx,[eax+0x4]
   27723:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27726:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/printf.c:155
				pc += prints (out, s?s:"(null)", width, pad);
   27728:	85 c0                	test   eax,eax
   2772a:	74 02                	je     2772e <print+0xbc>
   2772c:	eb 05                	jmp    27733 <print+0xc1>
/home/yogi/src/os/chrisOS/src/printf.c:155 (discriminator 2)
   2772e:	b8 9f 63 08 00       	mov    eax,0x8639f
/home/yogi/src/os/chrisOS/src/printf.c:155 (discriminator 4)
   27733:	57                   	push   edi
   27734:	56                   	push   esi
   27735:	50                   	push   eax
   27736:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27739:	e8 68 fd ff ff       	call   274a6 <prints>
   2773e:	83 c4 10             	add    esp,0x10
   27741:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:156 (discriminator 4)
				continue;
   27743:	e9 13 01 00 00       	jmp    2785b <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:158
			}
			if( *format == 'd' ) {
   27748:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2774b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2774e:	3c 64                	cmp    al,0x64
   27750:	75 29                	jne    2777b <print+0x109>
/home/yogi/src/os/chrisOS/src/printf.c:159
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   27752:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27755:	8d 50 04             	lea    edx,[eax+0x4]
   27758:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2775b:	8b 00                	mov    eax,DWORD PTR [eax]
   2775d:	83 ec 04             	sub    esp,0x4
   27760:	6a 61                	push   0x61
   27762:	57                   	push   edi
   27763:	56                   	push   esi
   27764:	6a 01                	push   0x1
   27766:	6a 0a                	push   0xa
   27768:	50                   	push   eax
   27769:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2776c:	e8 08 fe ff ff       	call   27579 <printi>
   27771:	83 c4 20             	add    esp,0x20
   27774:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:160
				continue;
   27776:	e9 e0 00 00 00       	jmp    2785b <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:162
			}
			if( *format == 'x' ) {
   2777b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2777e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27781:	3c 78                	cmp    al,0x78
   27783:	75 29                	jne    277ae <print+0x13c>
/home/yogi/src/os/chrisOS/src/printf.c:163
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   27785:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27788:	8d 50 04             	lea    edx,[eax+0x4]
   2778b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2778e:	8b 00                	mov    eax,DWORD PTR [eax]
   27790:	83 ec 04             	sub    esp,0x4
   27793:	6a 61                	push   0x61
   27795:	57                   	push   edi
   27796:	56                   	push   esi
   27797:	6a 00                	push   0x0
   27799:	6a 10                	push   0x10
   2779b:	50                   	push   eax
   2779c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2779f:	e8 d5 fd ff ff       	call   27579 <printi>
   277a4:	83 c4 20             	add    esp,0x20
   277a7:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:164
				continue;
   277a9:	e9 ad 00 00 00       	jmp    2785b <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:166
			}
			if( *format == 'X' ) {
   277ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   277b1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   277b4:	3c 58                	cmp    al,0x58
   277b6:	75 26                	jne    277de <print+0x16c>
/home/yogi/src/os/chrisOS/src/printf.c:167
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   277b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   277bb:	8d 50 04             	lea    edx,[eax+0x4]
   277be:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   277c1:	8b 00                	mov    eax,DWORD PTR [eax]
   277c3:	83 ec 04             	sub    esp,0x4
   277c6:	6a 41                	push   0x41
   277c8:	57                   	push   edi
   277c9:	56                   	push   esi
   277ca:	6a 00                	push   0x0
   277cc:	6a 10                	push   0x10
   277ce:	50                   	push   eax
   277cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   277d2:	e8 a2 fd ff ff       	call   27579 <printi>
   277d7:	83 c4 20             	add    esp,0x20
   277da:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:168
				continue;
   277dc:	eb 7d                	jmp    2785b <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:170
			}
			if( *format == 'u' ) {
   277de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   277e1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   277e4:	3c 75                	cmp    al,0x75
   277e6:	75 26                	jne    2780e <print+0x19c>
/home/yogi/src/os/chrisOS/src/printf.c:171
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   277e8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   277eb:	8d 50 04             	lea    edx,[eax+0x4]
   277ee:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   277f1:	8b 00                	mov    eax,DWORD PTR [eax]
   277f3:	83 ec 04             	sub    esp,0x4
   277f6:	6a 61                	push   0x61
   277f8:	57                   	push   edi
   277f9:	56                   	push   esi
   277fa:	6a 00                	push   0x0
   277fc:	6a 0a                	push   0xa
   277fe:	50                   	push   eax
   277ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27802:	e8 72 fd ff ff       	call   27579 <printi>
   27807:	83 c4 20             	add    esp,0x20
   2780a:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:172
				continue;
   2780c:	eb 4d                	jmp    2785b <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:174
			}
			if( *format == 'c' ) {
   2780e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27811:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27814:	3c 63                	cmp    al,0x63
   27816:	75 43                	jne    2785b <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:176
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   27818:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2781b:	8d 50 04             	lea    edx,[eax+0x4]
   2781e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27821:	8b 00                	mov    eax,DWORD PTR [eax]
   27823:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/chrisOS/src/printf.c:177
				scr[1] = '\0';
   27826:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/src/os/chrisOS/src/printf.c:178
				pc += prints (out, scr, width, pad);
   2782a:	57                   	push   edi
   2782b:	56                   	push   esi
   2782c:	8d 45 e6             	lea    eax,[ebp-0x1a]
   2782f:	50                   	push   eax
   27830:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27833:	e8 6e fc ff ff       	call   274a6 <prints>
   27838:	83 c4 10             	add    esp,0x10
   2783b:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:179
				continue;
   2783d:	eb 1c                	jmp    2785b <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:140
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
   2783f:	90                   	nop
/home/yogi/src/os/chrisOS/src/printf.c:184
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
   27840:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27843:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27846:	0f be c0             	movsx  eax,al
   27849:	83 ec 08             	sub    esp,0x8
   2784c:	50                   	push   eax
   2784d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27850:	e8 17 fc ff ff       	call   2746c <printchar>
   27855:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:185
			++pc;
   27858:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:135
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   2785b:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:135 (discriminator 1)
   2785f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27862:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27865:	84 c0                	test   al,al
   27867:	0f 85 18 fe ff ff    	jne    27685 <print+0x13>
   2786d:	eb 01                	jmp    27870 <print+0x1fe>
/home/yogi/src/os/chrisOS/src/printf.c:139
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
   2786f:	90                   	nop
/home/yogi/src/os/chrisOS/src/printf.c:188
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
   27870:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   27874:	74 08                	je     2787e <print+0x20c>
/home/yogi/src/os/chrisOS/src/printf.c:188 (discriminator 1)
   27876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27879:	8b 00                	mov    eax,DWORD PTR [eax]
   2787b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/printf.c:190
	va_end( args );
	return pc;
   2787e:	89 d8                	mov    eax,ebx
/home/yogi/src/os/chrisOS/src/printf.c:191
}
   27880:	8d 65 f4             	lea    esp,[ebp-0xc]
   27883:	5b                   	pop    ebx
   27884:	5e                   	pop    esi
   27885:	5f                   	pop    edi
   27886:	5d                   	pop    ebp
   27887:	c3                   	ret    

00027888 <printk_valist>:
printk_valist():
/home/yogi/src/os/chrisOS/src/printf.c:194

int printk_valist(const char *format, va_list args)
{
   27888:	55                   	push   ebp
   27889:	89 e5                	mov    ebp,esp
   2788b:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/printf.c:195
    return print(0, format, args);
   2788e:	83 ec 04             	sub    esp,0x4
   27891:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   27894:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27897:	6a 00                	push   0x0
   27899:	e8 d4 fd ff ff       	call   27672 <print>
   2789e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:196
}
   278a1:	c9                   	leave  
   278a2:	c3                   	ret    

000278a3 <printk>:
printk():
/home/yogi/src/os/chrisOS/src/printf.c:199

int printk(const char *format, ...)
{
   278a3:	55                   	push   ebp
   278a4:	89 e5                	mov    ebp,esp
   278a6:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:201
        va_list args;
        va_start( args, format );
   278a9:	8d 45 0c             	lea    eax,[ebp+0xc]
   278ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:202
        return printk_valist(format, args);
   278af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   278b2:	83 ec 08             	sub    esp,0x8
   278b5:	50                   	push   eax
   278b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   278b9:	e8 ca ff ff ff       	call   27888 <printk_valist>
   278be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:203
}
   278c1:	c9                   	leave  
   278c2:	c3                   	ret    

000278c3 <printd>:
printd():
/home/yogi/src/os/chrisOS/src/printf.c:209

#ifdef DEBUG_NONE
int printd() {}
#else
int printd(uint32_t DebugLevel, const char *format, ...)
{
   278c3:	55                   	push   ebp
   278c4:	89 e5                	mov    ebp,esp
   278c6:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:210
    if ((kDebugLevel & DebugLevel) == DebugLevel)    
   278c9:	a1 78 98 12 00       	mov    eax,ds:0x129878
   278ce:	23 45 08             	and    eax,DWORD PTR [ebp+0x8]
   278d1:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   278d4:	75 1a                	jne    278f0 <printd+0x2d>
/home/yogi/src/os/chrisOS/src/printf.c:214
    {
        va_list args;

        va_start( args, format );
   278d6:	8d 45 10             	lea    eax,[ebp+0x10]
   278d9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:220
//        if (++printDLineCount==SYS_VGA_HEIGHT-1)
//        {
//            pauseDisplay(false);
//            printDLineCount=0;
//        }
        return printk_valist(format, args);
   278dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   278df:	83 ec 08             	sub    esp,0x8
   278e2:	50                   	push   eax
   278e3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   278e6:	e8 9d ff ff ff       	call   27888 <printk_valist>
   278eb:	83 c4 10             	add    esp,0x10
   278ee:	eb 05                	jmp    278f5 <printd+0x32>
/home/yogi/src/os/chrisOS/src/printf.c:222
    }
    return 0;
   278f0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/printf.c:223 (discriminator 1)
}
   278f5:	c9                   	leave  
   278f6:	c3                   	ret    

000278f7 <sprintf>:
sprintf():
/home/yogi/src/os/chrisOS/src/printf.c:227
#endif

int sprintf(char *out, const char *format, ...)
{
   278f7:	55                   	push   ebp
   278f8:	89 e5                	mov    ebp,esp
   278fa:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:230
        va_list args;
        
        va_start( args, format );
   278fd:	8d 45 10             	lea    eax,[ebp+0x10]
   27900:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:231
        return print( &out, format, args );
   27903:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27906:	83 ec 04             	sub    esp,0x4
   27909:	50                   	push   eax
   2790a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2790d:	8d 45 08             	lea    eax,[ebp+0x8]
   27910:	50                   	push   eax
   27911:	e8 5c fd ff ff       	call   27672 <print>
   27916:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:232
}
   27919:	c9                   	leave  
   2791a:	c3                   	ret    
   2791b:	90                   	nop

0002791c <strcat>:
strcat():
/home/yogi/src/os/chrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   char *
   STRCAT (char *dest, const char *src)
   {
   2791c:	55                   	push   ebp
   2791d:	89 e5                	mov    ebp,esp
   2791f:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/strings/strcat.c:31
     strcpy (dest + strlen (dest), src);
   27922:	83 ec 0c             	sub    esp,0xc
   27925:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27928:	e8 47 01 00 00       	call   27a74 <strlen>
   2792d:	83 c4 10             	add    esp,0x10
   27930:	89 c2                	mov    edx,eax
   27932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27935:	01 d0                	add    eax,edx
   27937:	83 ec 08             	sub    esp,0x8
   2793a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2793d:	50                   	push   eax
   2793e:	e8 c1 00 00 00       	call   27a04 <strcpy>
   27943:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcat.c:32
     return dest;
   27946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcat.c:33
   }
   27949:	c9                   	leave  
   2794a:	c3                   	ret    

0002794b <concatenate>:
concatenate():
/home/yogi/src/os/chrisOS/src/strings/strcat.c:35

   void concatenate(char p[], char q[]) {
   2794b:	55                   	push   ebp
   2794c:	89 e5                	mov    ebp,esp
   2794e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcat.c:38
   int c, d;
 
   c = 0;
   27951:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:40
 
   while (p[c] != '\0') {
   27958:	eb 04                	jmp    2795e <concatenate+0x13>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:41
      c++;  	
   2795a:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:40
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
   2795e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27964:	01 d0                	add    eax,edx
   27966:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27969:	84 c0                	test   al,al
   2796b:	75 ed                	jne    2795a <concatenate+0xf>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:44
      c++;  	
   }
 
   d = 0;
   2796d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:46
 
   while (q[d] != '\0') {
   27974:	eb 1d                	jmp    27993 <concatenate+0x48>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:47
      p[c] = q[d];
   27976:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27979:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2797c:	01 c2                	add    edx,eax
   2797e:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27981:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27984:	01 c8                	add    eax,ecx
   27986:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27989:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/strings/strcat.c:48
      d++;
   2798b:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:49
      c++;	
   2798f:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:46
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
   27993:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   27996:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27999:	01 d0                	add    eax,edx
   2799b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2799e:	84 c0                	test   al,al
   279a0:	75 d4                	jne    27976 <concatenate+0x2b>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:52
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
   279a2:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   279a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   279a8:	01 d0                	add    eax,edx
   279aa:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:53
   279ad:	90                   	nop
   279ae:	c9                   	leave  
   279af:	c3                   	ret    

000279b0 <strcmp>:
strcmp():
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
int strcmp (const char *p1, const char *p2)
{
   279b0:	55                   	push   ebp
   279b1:	89 e5                	mov    ebp,esp
   279b3:	56                   	push   esi
   279b4:	53                   	push   ebx
   279b5:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
   279b8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
   279bb:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
   279be:	89 d8                	mov    eax,ebx
   279c0:	8d 58 01             	lea    ebx,[eax+0x1]
   279c3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   279c6:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
   279c9:	89 f0                	mov    eax,esi
   279cb:	8d 70 01             	lea    esi,[eax+0x1]
   279ce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   279d1:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
   279d4:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
   279d8:	75 0e                	jne    279e8 <strcmp+0x38>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:35
	return c1 - c2;
   279da:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   279de:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   279e2:	29 c2                	sub    edx,eax
   279e4:	89 d0                	mov    eax,edx
   279e6:	eb 15                	jmp    279fd <strcmp+0x4d>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
   279e8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   279ec:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   279ef:	74 cd                	je     279be <strcmp+0xe>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:39

  return c1 - c2;
   279f1:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   279f5:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   279f9:	29 c2                	sub    edx,eax
   279fb:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:40
}
   279fd:	83 c4 10             	add    esp,0x10
   27a00:	5b                   	pop    ebx
   27a01:	5e                   	pop    esi
   27a02:	5d                   	pop    ebp
   27a03:	c3                   	ret    

00027a04 <strcpy>:
strcpy():
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:5
#include "strings.h"

char *
strcpy(char *s1, const char *s2)
{
   27a04:	55                   	push   ebp
   27a05:	89 e5                	mov    ebp,esp
   27a07:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:6
    char *s = s1;
   27a0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a0d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
   27a10:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:7 (discriminator 1)
   27a11:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27a14:	8d 50 01             	lea    edx,[eax+0x1]
   27a17:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   27a1a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27a1d:	8d 4a 01             	lea    ecx,[edx+0x1]
   27a20:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   27a23:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   27a26:	88 10                	mov    BYTE PTR [eax],dl
   27a28:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27a2b:	84 c0                	test   al,al
   27a2d:	75 e2                	jne    27a11 <strcpy+0xd>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:9
	;
    return (s1);
   27a2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:10
}
   27a32:	c9                   	leave  
   27a33:	c3                   	ret    

00027a34 <strcpyc>:
strcpyc():
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:14

char *
strcpyc(char *s1, const char *s2, unsigned count)
{
   27a34:	55                   	push   ebp
   27a35:	89 e5                	mov    ebp,esp
   27a37:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:15
    char *s = s1;
   27a3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a3d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16
    while ((*s++ = *s2++) != 0 && count-->0)
   27a40:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16 (discriminator 2)
   27a41:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27a44:	8d 50 01             	lea    edx,[eax+0x1]
   27a47:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   27a4a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27a4d:	8d 4a 01             	lea    ecx,[edx+0x1]
   27a50:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   27a53:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   27a56:	88 10                	mov    BYTE PTR [eax],dl
   27a58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27a5b:	84 c0                	test   al,al
   27a5d:	74 0d                	je     27a6c <strcpyc+0x38>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16 (discriminator 1)
   27a5f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27a62:	8d 50 ff             	lea    edx,[eax-0x1]
   27a65:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27a68:	85 c0                	test   eax,eax
   27a6a:	75 d5                	jne    27a41 <strcpyc+0xd>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:18
	;
    return (s1);
   27a6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:19
}
   27a6f:	c9                   	leave  
   27a70:	c3                   	ret    
   27a71:	66 90                	xchg   ax,ax
   27a73:	90                   	nop

00027a74 <strlen>:
strlen():
/home/yogi/src/os/chrisOS/src/strings/strlen.c:3
#include <stddef.h>

size_t strlen(const char* str) {
   27a74:	55                   	push   ebp
   27a75:	89 e5                	mov    ebp,esp
   27a77:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strlen.c:4
          size_t ret = 0;
   27a7a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
   27a81:	eb 04                	jmp    27a87 <strlen+0x13>
/home/yogi/src/os/chrisOS/src/strings/strlen.c:6
                ret++;
   27a83:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strlen.c:5
#include <stddef.h>

size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
   27a87:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   27a8a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27a8d:	01 d0                	add    eax,edx
   27a8f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27a92:	84 c0                	test   al,al
   27a94:	75 ed                	jne    27a83 <strlen+0xf>
/home/yogi/src/os/chrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
   27a96:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/strings/strlen.c:8
}
   27a99:	c9                   	leave  
   27a9a:	c3                   	ret    
   27a9b:	90                   	nop

00027a9c <strtoul>:
strtoul():
/home/yogi/src/os/chrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
strtoul(const char *nptr, char **endptr, register int base)
{
   27a9c:	55                   	push   ebp
   27a9d:	89 e5                	mov    ebp,esp
   27a9f:	57                   	push   edi
   27aa0:	56                   	push   esi
   27aa1:	53                   	push   ebx
   27aa2:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
   27aa5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   27aa8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   27aaf:	89 f0                	mov    eax,esi
   27ab1:	8d 70 01             	lea    esi,[eax+0x1]
   27ab4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27ab7:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
   27aba:	83 fb 20             	cmp    ebx,0x20
   27abd:	74 f0                	je     27aaf <strtoul+0x13>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:73
	if (c == '-') {
   27abf:	83 fb 2d             	cmp    ebx,0x2d
   27ac2:	75 14                	jne    27ad8 <strtoul+0x3c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:74
		neg = 1;
   27ac4:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/strings/stroul.c:75
		c = *s++;
   27acb:	89 f0                	mov    eax,esi
   27acd:	8d 70 01             	lea    esi,[eax+0x1]
   27ad0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27ad3:	0f be d8             	movsx  ebx,al
   27ad6:	eb 10                	jmp    27ae8 <strtoul+0x4c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:76
	} else if (c == '+')
   27ad8:	83 fb 2b             	cmp    ebx,0x2b
   27adb:	75 0b                	jne    27ae8 <strtoul+0x4c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:77
		c = *s++;
   27add:	89 f0                	mov    eax,esi
   27adf:	8d 70 01             	lea    esi,[eax+0x1]
   27ae2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27ae5:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
   27ae8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27aec:	74 06                	je     27af4 <strtoul+0x58>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78 (discriminator 2)
   27aee:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   27af2:	75 26                	jne    27b1a <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78 (discriminator 3)
   27af4:	83 fb 30             	cmp    ebx,0x30
   27af7:	75 21                	jne    27b1a <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
   27af9:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27afc:	3c 78                	cmp    al,0x78
   27afe:	74 07                	je     27b07 <strtoul+0x6b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:79 (discriminator 1)
   27b00:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27b03:	3c 58                	cmp    al,0x58
   27b05:	75 13                	jne    27b1a <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:80
		c = s[1];
   27b07:	8d 46 01             	lea    eax,[esi+0x1]
   27b0a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27b0d:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:81
		s += 2;
   27b10:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOS/src/strings/stroul.c:82
		base = 16;
   27b13:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
   27b1a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27b1e:	75 14                	jne    27b34 <strtoul+0x98>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
   27b20:	83 fb 30             	cmp    ebx,0x30
   27b23:	75 07                	jne    27b2c <strtoul+0x90>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 1)
   27b25:	b8 08 00 00 00       	mov    eax,0x8
   27b2a:	eb 05                	jmp    27b31 <strtoul+0x95>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 2)
   27b2c:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 4)
   27b31:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   27b34:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27b37:	b8 ff ff ff ff       	mov    eax,0xffffffff
   27b3c:	ba 00 00 00 00       	mov    edx,0x0
   27b41:	f7 f1                	div    ecx
   27b43:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   27b46:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27b49:	b8 ff ff ff ff       	mov    eax,0xffffffff
   27b4e:	ba 00 00 00 00       	mov    edx,0x0
   27b53:	f7 f1                	div    ecx
   27b55:	89 d0                	mov    eax,edx
   27b57:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
   27b59:	bf 00 00 00 00       	mov    edi,0x0
   27b5e:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
   27b63:	8d 43 d0             	lea    eax,[ebx-0x30]
   27b66:	83 f8 09             	cmp    eax,0x9
   27b69:	77 05                	ja     27b70 <strtoul+0xd4>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:90
			c -= '0';
   27b6b:	83 eb 30             	sub    ebx,0x30
   27b6e:	eb 25                	jmp    27b95 <strtoul+0xf9>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
   27b70:	89 d8                	mov    eax,ebx
   27b72:	83 c8 20             	or     eax,0x20
   27b75:	83 e8 61             	sub    eax,0x61
   27b78:	83 f8 19             	cmp    eax,0x19
   27b7b:	77 56                	ja     27bd3 <strtoul+0x137>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   27b7d:	83 fb 40             	cmp    ebx,0x40
   27b80:	7e 0c                	jle    27b8e <strtoul+0xf2>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 1)
   27b82:	83 fb 5a             	cmp    ebx,0x5a
   27b85:	7f 07                	jg     27b8e <strtoul+0xf2>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 3)
   27b87:	b8 37 00 00 00       	mov    eax,0x37
   27b8c:	eb 05                	jmp    27b93 <strtoul+0xf7>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 4)
   27b8e:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 6)
   27b93:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
   27b95:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   27b98:	7d 3c                	jge    27bd6 <strtoul+0x13a>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   27b9a:	89 c8                	mov    eax,ecx
   27b9c:	85 c0                	test   eax,eax
   27b9e:	78 10                	js     27bb0 <strtoul+0x114>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 1)
   27ba0:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27ba3:	77 0b                	ja     27bb0 <strtoul+0x114>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 2)
   27ba5:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27ba8:	75 0d                	jne    27bb7 <strtoul+0x11b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 3)
   27baa:	89 d0                	mov    eax,edx
   27bac:	39 c3                	cmp    ebx,eax
   27bae:	7e 07                	jle    27bb7 <strtoul+0x11b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:98
			any = -1;
   27bb0:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   27bb5:	eb 0f                	jmp    27bc6 <strtoul+0x12a>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:100
		else {
			any = 1;
   27bb7:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/chrisOS/src/strings/stroul.c:101
			acc *= base;
   27bbc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27bbf:	0f af f8             	imul   edi,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:102
			acc += c;
   27bc2:	89 d8                	mov    eax,ebx
   27bc4:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   27bc6:	89 f0                	mov    eax,esi
   27bc8:	8d 70 01             	lea    esi,[eax+0x1]
   27bcb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27bce:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   27bd1:	eb 90                	jmp    27b63 <strtoul+0xc7>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   27bd3:	90                   	nop
   27bd4:	eb 01                	jmp    27bd7 <strtoul+0x13b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
   27bd6:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   27bd7:	89 c8                	mov    eax,ecx
   27bd9:	85 c0                	test   eax,eax
   27bdb:	79 07                	jns    27be4 <strtoul+0x148>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
   27bdd:	bf ff ff ff ff       	mov    edi,0xffffffff
   27be2:	eb 08                	jmp    27bec <strtoul+0x150>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:107
	} else if (neg)
   27be4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27be8:	74 02                	je     27bec <strtoul+0x150>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:108
		acc = -acc;
   27bea:	f7 df                	neg    edi
/home/yogi/src/os/chrisOS/src/strings/stroul.c:109
	if (endptr != 0)
   27bec:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   27bf0:	74 13                	je     27c05 <strtoul+0x169>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
   27bf2:	89 c8                	mov    eax,ecx
   27bf4:	85 c0                	test   eax,eax
   27bf6:	74 05                	je     27bfd <strtoul+0x161>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 1)
   27bf8:	8d 46 ff             	lea    eax,[esi-0x1]
   27bfb:	eb 03                	jmp    27c00 <strtoul+0x164>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 2)
   27bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 4)
   27c00:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27c03:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:111
	return (acc);
   27c05:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOS/src/strings/stroul.c:112
}
   27c07:	83 c4 08             	add    esp,0x8
   27c0a:	5b                   	pop    ebx
   27c0b:	5e                   	pop    esi
   27c0c:	5f                   	pop    edi
   27c0d:	5d                   	pop    ebp
   27c0e:	c3                   	ret    
   27c0f:	90                   	nop

00027c10 <strleft>:
strleft():
/home/yogi/src/os/chrisOS/src/strings/strparts.c:2
char* strleft(char* val, int cnt)
{
   27c10:	55                   	push   ebp
   27c11:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
   27c13:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27c16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c19:	01 d0                	add    eax,edx
   27c1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strparts.c:4
    return val;
   27c1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strparts.c:5
}
   27c21:	5d                   	pop    ebp
   27c22:	c3                   	ret    
   27c23:	90                   	nop

00027c24 <strtol>:
strtol():
/home/yogi/src/os/chrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long
strtol(const char *nptr, char **endptr, register int base)
{
   27c24:	55                   	push   ebp
   27c25:	89 e5                	mov    ebp,esp
   27c27:	57                   	push   edi
   27c28:	56                   	push   esi
   27c29:	53                   	push   ebx
   27c2a:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
   27c2d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   27c30:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   27c37:	89 f0                	mov    eax,esi
   27c39:	8d 70 01             	lea    esi,[eax+0x1]
   27c3c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27c3f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
   27c42:	83 fb 20             	cmp    ebx,0x20
   27c45:	74 f0                	je     27c37 <strtol+0x13>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:103
	if (c == '-') {
   27c47:	83 fb 2d             	cmp    ebx,0x2d
   27c4a:	75 14                	jne    27c60 <strtol+0x3c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:104
		neg = 1;
   27c4c:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/strings/strtol.c:105
		c = *s++;
   27c53:	89 f0                	mov    eax,esi
   27c55:	8d 70 01             	lea    esi,[eax+0x1]
   27c58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27c5b:	0f be d8             	movsx  ebx,al
   27c5e:	eb 10                	jmp    27c70 <strtol+0x4c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:106
	} else if (c == '+')
   27c60:	83 fb 2b             	cmp    ebx,0x2b
   27c63:	75 0b                	jne    27c70 <strtol+0x4c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:107
		c = *s++;
   27c65:	89 f0                	mov    eax,esi
   27c67:	8d 70 01             	lea    esi,[eax+0x1]
   27c6a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27c6d:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
   27c70:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27c74:	74 06                	je     27c7c <strtol+0x58>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108 (discriminator 2)
   27c76:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   27c7a:	75 26                	jne    27ca2 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108 (discriminator 3)
   27c7c:	83 fb 30             	cmp    ebx,0x30
   27c7f:	75 21                	jne    27ca2 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
   27c81:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27c84:	3c 78                	cmp    al,0x78
   27c86:	74 07                	je     27c8f <strtol+0x6b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:109 (discriminator 1)
   27c88:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27c8b:	3c 58                	cmp    al,0x58
   27c8d:	75 13                	jne    27ca2 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:110
		c = s[1];
   27c8f:	8d 46 01             	lea    eax,[esi+0x1]
   27c92:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27c95:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:111
		s += 2;
   27c98:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOS/src/strings/strtol.c:112
		base = 16;
   27c9b:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
   27ca2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27ca6:	75 14                	jne    27cbc <strtol+0x98>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
   27ca8:	83 fb 30             	cmp    ebx,0x30
   27cab:	75 07                	jne    27cb4 <strtol+0x90>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 1)
   27cad:	b8 08 00 00 00       	mov    eax,0x8
   27cb2:	eb 05                	jmp    27cb9 <strtol+0x95>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 2)
   27cb4:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 4)
   27cb9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   27cbc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27cc0:	74 07                	je     27cc9 <strtol+0xa5>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134 (discriminator 1)
   27cc2:	b8 00 00 00 80       	mov    eax,0x80000000
   27cc7:	eb 05                	jmp    27cce <strtol+0xaa>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134 (discriminator 2)
   27cc9:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/chrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
   27cce:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27cd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   27cd4:	ba 00 00 00 00       	mov    edx,0x0
   27cd9:	f7 f1                	div    ecx
   27cdb:	89 d1                	mov    ecx,edx
   27cdd:	89 c8                	mov    eax,ecx
   27cdf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
   27ce2:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
   27ce5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   27ce8:	ba 00 00 00 00       	mov    edx,0x0
   27ced:	f7 f7                	div    edi
   27cef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
   27cf2:	bf 00 00 00 00       	mov    edi,0x0
   27cf7:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
   27cfc:	8d 43 d0             	lea    eax,[ebx-0x30]
   27cff:	83 f8 09             	cmp    eax,0x9
   27d02:	77 05                	ja     27d09 <strtol+0xe5>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:139
			c -= '0';
   27d04:	83 eb 30             	sub    ebx,0x30
   27d07:	eb 25                	jmp    27d2e <strtol+0x10a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
   27d09:	89 d8                	mov    eax,ebx
   27d0b:	83 c8 20             	or     eax,0x20
   27d0e:	83 e8 61             	sub    eax,0x61
   27d11:	83 f8 19             	cmp    eax,0x19
   27d14:	77 55                	ja     27d6b <strtol+0x147>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   27d16:	83 fb 40             	cmp    ebx,0x40
   27d19:	7e 0c                	jle    27d27 <strtol+0x103>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 1)
   27d1b:	83 fb 5a             	cmp    ebx,0x5a
   27d1e:	7f 07                	jg     27d27 <strtol+0x103>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 3)
   27d20:	b8 37 00 00 00       	mov    eax,0x37
   27d25:	eb 05                	jmp    27d2c <strtol+0x108>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 4)
   27d27:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 6)
   27d2c:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
   27d2e:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   27d31:	7d 3b                	jge    27d6e <strtol+0x14a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   27d33:	89 c8                	mov    eax,ecx
   27d35:	85 c0                	test   eax,eax
   27d37:	78 0f                	js     27d48 <strtol+0x124>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 1)
   27d39:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27d3c:	77 0a                	ja     27d48 <strtol+0x124>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 2)
   27d3e:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27d41:	75 0c                	jne    27d4f <strtol+0x12b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 3)
   27d43:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
   27d46:	7e 07                	jle    27d4f <strtol+0x12b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:147
			any = -1;
   27d48:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   27d4d:	eb 0f                	jmp    27d5e <strtol+0x13a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:149
		else {
			any = 1;
   27d4f:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/chrisOS/src/strings/strtol.c:150
			acc *= base;
   27d54:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27d57:	0f af f8             	imul   edi,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:151
			acc += c;
   27d5a:	89 d8                	mov    eax,ebx
   27d5c:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   27d5e:	89 f0                	mov    eax,esi
   27d60:	8d 70 01             	lea    esi,[eax+0x1]
   27d63:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27d66:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   27d69:	eb 91                	jmp    27cfc <strtol+0xd8>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   27d6b:	90                   	nop
   27d6c:	eb 01                	jmp    27d6f <strtol+0x14b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
   27d6e:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   27d6f:	89 c8                	mov    eax,ecx
   27d71:	85 c0                	test   eax,eax
   27d73:	79 16                	jns    27d8b <strtol+0x167>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
   27d75:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27d79:	74 07                	je     27d82 <strtol+0x15e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 1)
   27d7b:	b8 00 00 00 80       	mov    eax,0x80000000
   27d80:	eb 05                	jmp    27d87 <strtol+0x163>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 2)
   27d82:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 4)
   27d87:	89 c7                	mov    edi,eax
   27d89:	eb 08                	jmp    27d93 <strtol+0x16f>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:156
	} else if (neg)
   27d8b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27d8f:	74 02                	je     27d93 <strtol+0x16f>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:157
		acc = -acc;
   27d91:	f7 df                	neg    edi
/home/yogi/src/os/chrisOS/src/strings/strtol.c:158
	if (endptr != 0)
   27d93:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   27d97:	74 13                	je     27dac <strtol+0x188>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
   27d99:	89 c8                	mov    eax,ecx
   27d9b:	85 c0                	test   eax,eax
   27d9d:	74 05                	je     27da4 <strtol+0x180>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 1)
   27d9f:	8d 46 ff             	lea    eax,[esi-0x1]
   27da2:	eb 03                	jmp    27da7 <strtol+0x183>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 2)
   27da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 4)
   27da7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27daa:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:160
	return (acc);
   27dac:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOS/src/strings/strtol.c:161
}
   27dae:	83 c4 0c             	add    esp,0xc
   27db1:	5b                   	pop    ebx
   27db2:	5e                   	pop    esi
   27db3:	5f                   	pop    edi
   27db4:	5d                   	pop    ebp
   27db5:	c3                   	ret    
   27db6:	66 90                	xchg   ax,ax

00027db8 <strtrim>:
strtrim():
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:5
#include "strings.h"

/*FROM: http://codereview.stackexchange.com/questions/20897/trim-function-in-c*/
char * strtrim(char * *pointerToString)
{
   27db8:	55                   	push   ebp
   27db9:	89 e5                	mov    ebp,esp
   27dbb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:6
    uint8_t start=0, length=0;
   27dbe:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   27dc2:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:9

        // Trim.Start:
        length = strlen(*pointerToString);
   27dc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27dc9:	8b 00                	mov    eax,DWORD PTR [eax]
   27dcb:	83 ec 0c             	sub    esp,0xc
   27dce:	50                   	push   eax
   27dcf:	e8 a0 fc ff ff       	call   27a74 <strlen>
   27dd4:	83 c4 10             	add    esp,0x10
   27dd7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10
        while ((*pointerToString)[start]==' ') start++;
   27dda:	eb 0a                	jmp    27de6 <strtrim+0x2e>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10 (discriminator 2)
   27ddc:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27de0:	83 c0 01             	add    eax,0x1
   27de3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10 (discriminator 1)
   27de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27de9:	8b 10                	mov    edx,DWORD PTR [eax]
   27deb:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27def:	01 d0                	add    eax,edx
   27df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27df4:	3c 20                	cmp    al,0x20
   27df6:	74 e4                	je     27ddc <strtrim+0x24>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:11
        (*pointerToString) += start;
   27df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27dfb:	8b 10                	mov    edx,DWORD PTR [eax]
   27dfd:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27e01:	01 c2                	add    edx,eax
   27e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e06:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:13

        if (start < length) // Required for empty (ex. "    ") input
   27e08:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27e0c:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   27e0f:	73 46                	jae    27e57 <strtrim+0x9f>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:16
        {
            // Trim.End:
            uint8_t end = strlen(*pointerToString)-1; // Get string length again (after Trim.Start)
   27e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e14:	8b 00                	mov    eax,DWORD PTR [eax]
   27e16:	83 ec 0c             	sub    esp,0xc
   27e19:	50                   	push   eax
   27e1a:	e8 55 fc ff ff       	call   27a74 <strlen>
   27e1f:	83 c4 10             	add    esp,0x10
   27e22:	83 e8 01             	sub    eax,0x1
   27e25:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17
            while ((*pointerToString)[end]==' ') end--;
   27e28:	eb 0a                	jmp    27e34 <strtrim+0x7c>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17 (discriminator 2)
   27e2a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27e2e:	83 e8 01             	sub    eax,0x1
   27e31:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17 (discriminator 1)
   27e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e37:	8b 10                	mov    edx,DWORD PTR [eax]
   27e39:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27e3d:	01 d0                	add    eax,edx
   27e3f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27e42:	3c 20                	cmp    al,0x20
   27e44:	74 e4                	je     27e2a <strtrim+0x72>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:18
            (*pointerToString)[end+1] = 0;
   27e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e49:	8b 00                	mov    eax,DWORD PTR [eax]
   27e4b:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   27e4f:	83 c2 01             	add    edx,0x1
   27e52:	01 d0                	add    eax,edx
   27e54:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:21
        }

    return *pointerToString;
   27e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e5a:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:22
}
   27e5c:	c9                   	leave  
   27e5d:	c3                   	ret    

00027e5e <strtrim2>:
strtrim2():
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:25

char * strtrim2(char* pointerToString)
{
   27e5e:	55                   	push   ebp
   27e5f:	89 e5                	mov    ebp,esp
   27e61:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:26
    uint8_t start=0, length=0;
   27e64:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   27e68:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:29

        // Trim.Start:
        length = strlen(pointerToString);
   27e6c:	83 ec 0c             	sub    esp,0xc
   27e6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27e72:	e8 fd fb ff ff       	call   27a74 <strlen>
   27e77:	83 c4 10             	add    esp,0x10
   27e7a:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30
        while ((pointerToString)[start]==' ') start++;
   27e7d:	eb 0a                	jmp    27e89 <strtrim2+0x2b>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30 (discriminator 2)
   27e7f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27e83:	83 c0 01             	add    eax,0x1
   27e86:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30 (discriminator 1)
   27e89:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   27e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e90:	01 d0                	add    eax,edx
   27e92:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27e95:	3c 20                	cmp    al,0x20
   27e97:	74 e6                	je     27e7f <strtrim2+0x21>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:31
        (pointerToString) += start;
   27e99:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27e9d:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:33

        if (start < length) // Required for empty (ex. "    ") input
   27ea0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27ea4:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   27ea7:	73 3f                	jae    27ee8 <strtrim2+0x8a>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:36
        {
            // Trim.End:
            uint8_t end = strlen(pointerToString)-1; // Get string length again (after Trim.Start)
   27ea9:	83 ec 0c             	sub    esp,0xc
   27eac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27eaf:	e8 c0 fb ff ff       	call   27a74 <strlen>
   27eb4:	83 c4 10             	add    esp,0x10
   27eb7:	83 e8 01             	sub    eax,0x1
   27eba:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37
            while ((pointerToString)[end]==' ') end--;
   27ebd:	eb 0a                	jmp    27ec9 <strtrim2+0x6b>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37 (discriminator 2)
   27ebf:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27ec3:	83 e8 01             	sub    eax,0x1
   27ec6:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37 (discriminator 1)
   27ec9:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   27ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ed0:	01 d0                	add    eax,edx
   27ed2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27ed5:	3c 20                	cmp    al,0x20
   27ed7:	74 e6                	je     27ebf <strtrim2+0x61>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:38
            (pointerToString)[end+1] = 0;
   27ed9:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27edd:	8d 50 01             	lea    edx,[eax+0x1]
   27ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ee3:	01 d0                	add    eax,edx
   27ee5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:41
        }

    return pointerToString;
   27ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:42
}
   27eeb:	c9                   	leave  
   27eec:	c3                   	ret    
   27eed:	66 90                	xchg   ax,ax
   27eef:	90                   	nop

00027ef0 <time>:
time():
/home/yogi/src/os/chrisOS/src/time.c:83
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

extern time_t kSystemCurrentTime;
time_t time(time_t* arg)
{
   27ef0:	55                   	push   ebp
   27ef1:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:84
    *arg = kSystemCurrentTime;
   27ef3:	8b 15 cc 97 12 00    	mov    edx,DWORD PTR ds:0x1297cc
   27ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27efc:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:85
    return kSystemCurrentTime;
   27efe:	a1 cc 97 12 00       	mov    eax,ds:0x1297cc
/home/yogi/src/os/chrisOS/src/time.c:86
}
   27f03:	5d                   	pop    ebp
   27f04:	c3                   	ret    

00027f05 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/chrisOS/src/time.c:88

struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
   27f05:	55                   	push   ebp
   27f06:	89 e5                	mov    ebp,esp
   27f08:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:89
  time_t time = *timer;
   27f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f0e:	8b 00                	mov    eax,DWORD PTR [eax]
   27f10:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:91
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
   27f13:	c7 45 f8 b2 07 00 00 	mov    DWORD PTR [ebp-0x8],0x7b2
/home/yogi/src/os/chrisOS/src/time.c:93

  dayclock = (unsigned long) time % SECS_DAY;
   27f1a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   27f1d:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   27f22:	89 c8                	mov    eax,ecx
   27f24:	f7 e2                	mul    edx
   27f26:	89 d0                	mov    eax,edx
   27f28:	c1 e8 10             	shr    eax,0x10
   27f2b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   27f2e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   27f31:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   27f37:	29 c1                	sub    ecx,eax
   27f39:	89 c8                	mov    eax,ecx
   27f3b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:94
  dayno = (unsigned long) time / SECS_DAY;
   27f3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27f41:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   27f46:	f7 e2                	mul    edx
   27f48:	89 d0                	mov    eax,edx
   27f4a:	c1 e8 10             	shr    eax,0x10
   27f4d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:96

  tmbuf->tm_sec = dayclock % 60;
   27f50:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   27f53:	ba 89 88 88 88       	mov    edx,0x88888889
   27f58:	89 c8                	mov    eax,ecx
   27f5a:	f7 e2                	mul    edx
   27f5c:	89 d0                	mov    eax,edx
   27f5e:	c1 e8 05             	shr    eax,0x5
   27f61:	89 c2                	mov    edx,eax
   27f63:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   27f6a:	89 c2                	mov    edx,eax
   27f6c:	89 d0                	mov    eax,edx
   27f6e:	c1 e0 04             	shl    eax,0x4
   27f71:	29 d0                	sub    eax,edx
   27f73:	29 c1                	sub    ecx,eax
   27f75:	89 c8                	mov    eax,ecx
   27f77:	89 c2                	mov    edx,eax
   27f79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27f7c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:97
  tmbuf->tm_min = (dayclock % 3600) / 60;
   27f7e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   27f81:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   27f86:	89 c8                	mov    eax,ecx
   27f88:	f7 e2                	mul    edx
   27f8a:	89 d0                	mov    eax,edx
   27f8c:	c1 e8 0b             	shr    eax,0xb
   27f8f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
   27f95:	29 c1                	sub    ecx,eax
   27f97:	89 c8                	mov    eax,ecx
   27f99:	ba 89 88 88 88       	mov    edx,0x88888889
   27f9e:	f7 e2                	mul    edx
   27fa0:	89 d0                	mov    eax,edx
   27fa2:	c1 e8 05             	shr    eax,0x5
   27fa5:	89 c2                	mov    edx,eax
   27fa7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27faa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:98
  tmbuf->tm_hour = dayclock / 3600;
   27fad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   27fb0:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   27fb5:	f7 e2                	mul    edx
   27fb7:	89 d0                	mov    eax,edx
   27fb9:	c1 e8 0b             	shr    eax,0xb
   27fbc:	89 c2                	mov    edx,eax
   27fbe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27fc1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:99
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
   27fc4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27fc7:	8d 48 04             	lea    ecx,[eax+0x4]
   27fca:	ba 25 49 92 24       	mov    edx,0x24924925
   27fcf:	89 c8                	mov    eax,ecx
   27fd1:	f7 e2                	mul    edx
   27fd3:	89 c8                	mov    eax,ecx
   27fd5:	29 d0                	sub    eax,edx
   27fd7:	d1 e8                	shr    eax,1
   27fd9:	01 d0                	add    eax,edx
   27fdb:	c1 e8 02             	shr    eax,0x2
   27fde:	89 c2                	mov    edx,eax
   27fe0:	c1 e2 03             	shl    edx,0x3
   27fe3:	29 c2                	sub    edx,eax
   27fe5:	89 c8                	mov    eax,ecx
   27fe7:	29 d0                	sub    eax,edx
   27fe9:	89 c2                	mov    edx,eax
   27feb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27fee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/time.c:100
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   27ff1:	eb 66                	jmp    28059 <gmtime_r+0x154>
/home/yogi/src/os/chrisOS/src/time.c:101
    dayno -= YEARSIZE(year);
   27ff3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27ff6:	83 e0 03             	and    eax,0x3
   27ff9:	85 c0                	test   eax,eax
   27ffb:	75 50                	jne    2804d <gmtime_r+0x148>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 1)
   27ffd:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   28000:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28005:	89 c8                	mov    eax,ecx
   28007:	f7 ea                	imul   edx
   28009:	c1 fa 05             	sar    edx,0x5
   2800c:	89 c8                	mov    eax,ecx
   2800e:	c1 f8 1f             	sar    eax,0x1f
   28011:	29 c2                	sub    edx,eax
   28013:	89 d0                	mov    eax,edx
   28015:	6b c0 64             	imul   eax,eax,0x64
   28018:	29 c1                	sub    ecx,eax
   2801a:	89 c8                	mov    eax,ecx
   2801c:	85 c0                	test   eax,eax
   2801e:	75 26                	jne    28046 <gmtime_r+0x141>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 4)
   28020:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   28023:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28028:	89 c8                	mov    eax,ecx
   2802a:	f7 ea                	imul   edx
   2802c:	c1 fa 07             	sar    edx,0x7
   2802f:	89 c8                	mov    eax,ecx
   28031:	c1 f8 1f             	sar    eax,0x1f
   28034:	29 c2                	sub    edx,eax
   28036:	89 d0                	mov    eax,edx
   28038:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   2803e:	29 c1                	sub    ecx,eax
   28040:	89 c8                	mov    eax,ecx
   28042:	85 c0                	test   eax,eax
   28044:	75 07                	jne    2804d <gmtime_r+0x148>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 5)
   28046:	b8 6e 01 00 00       	mov    eax,0x16e
   2804b:	eb 05                	jmp    28052 <gmtime_r+0x14d>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 6)
   2804d:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 8)
   28052:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:102 (discriminator 8)
    year++;
   28055:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   28059:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   2805c:	83 e0 03             	and    eax,0x3
   2805f:	85 c0                	test   eax,eax
   28061:	75 50                	jne    280b3 <gmtime_r+0x1ae>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 1)
   28063:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   28066:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2806b:	89 c8                	mov    eax,ecx
   2806d:	f7 ea                	imul   edx
   2806f:	c1 fa 05             	sar    edx,0x5
   28072:	89 c8                	mov    eax,ecx
   28074:	c1 f8 1f             	sar    eax,0x1f
   28077:	29 c2                	sub    edx,eax
   28079:	89 d0                	mov    eax,edx
   2807b:	6b c0 64             	imul   eax,eax,0x64
   2807e:	29 c1                	sub    ecx,eax
   28080:	89 c8                	mov    eax,ecx
   28082:	85 c0                	test   eax,eax
   28084:	75 26                	jne    280ac <gmtime_r+0x1a7>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 4)
   28086:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   28089:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2808e:	89 c8                	mov    eax,ecx
   28090:	f7 ea                	imul   edx
   28092:	c1 fa 07             	sar    edx,0x7
   28095:	89 c8                	mov    eax,ecx
   28097:	c1 f8 1f             	sar    eax,0x1f
   2809a:	29 c2                	sub    edx,eax
   2809c:	89 d0                	mov    eax,edx
   2809e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   280a4:	29 c1                	sub    ecx,eax
   280a6:	89 c8                	mov    eax,ecx
   280a8:	85 c0                	test   eax,eax
   280aa:	75 07                	jne    280b3 <gmtime_r+0x1ae>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 5)
   280ac:	b8 6e 01 00 00       	mov    eax,0x16e
   280b1:	eb 05                	jmp    280b8 <gmtime_r+0x1b3>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 6)
   280b3:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 8)
   280b8:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   280bb:	0f 86 32 ff ff ff    	jbe    27ff3 <gmtime_r+0xee>
/home/yogi/src/os/chrisOS/src/time.c:104
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
   280c1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   280c4:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
   280ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   280cd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:105
  tmbuf->tm_yday = dayno;
   280d0:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   280d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   280d6:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/time.c:106
  tmbuf->tm_mon = 0;
   280d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   280dc:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/time.c:107
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   280e3:	e9 89 00 00 00       	jmp    28171 <gmtime_r+0x26c>
/home/yogi/src/os/chrisOS/src/time.c:108
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
   280e8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   280eb:	83 e0 03             	and    eax,0x3
   280ee:	85 c0                	test   eax,eax
   280f0:	75 50                	jne    28142 <gmtime_r+0x23d>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 1)
   280f2:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   280f5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   280fa:	89 c8                	mov    eax,ecx
   280fc:	f7 ea                	imul   edx
   280fe:	c1 fa 05             	sar    edx,0x5
   28101:	89 c8                	mov    eax,ecx
   28103:	c1 f8 1f             	sar    eax,0x1f
   28106:	29 c2                	sub    edx,eax
   28108:	89 d0                	mov    eax,edx
   2810a:	6b c0 64             	imul   eax,eax,0x64
   2810d:	29 c1                	sub    ecx,eax
   2810f:	89 c8                	mov    eax,ecx
   28111:	85 c0                	test   eax,eax
   28113:	75 26                	jne    2813b <gmtime_r+0x236>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 4)
   28115:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   28118:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2811d:	89 c8                	mov    eax,ecx
   2811f:	f7 ea                	imul   edx
   28121:	c1 fa 07             	sar    edx,0x7
   28124:	89 c8                	mov    eax,ecx
   28126:	c1 f8 1f             	sar    eax,0x1f
   28129:	29 c2                	sub    edx,eax
   2812b:	89 d0                	mov    eax,edx
   2812d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   28133:	29 c1                	sub    ecx,eax
   28135:	89 c8                	mov    eax,ecx
   28137:	85 c0                	test   eax,eax
   28139:	75 07                	jne    28142 <gmtime_r+0x23d>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 5)
   2813b:	ba 01 00 00 00       	mov    edx,0x1
   28140:	eb 05                	jmp    28147 <gmtime_r+0x242>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 6)
   28142:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 8)
   28147:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2814a:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   2814d:	89 d0                	mov    eax,edx
   2814f:	01 c0                	add    eax,eax
   28151:	01 d0                	add    eax,edx
   28153:	c1 e0 02             	shl    eax,0x2
   28156:	01 c8                	add    eax,ecx
   28158:	8b 04 85 c0 63 08 00 	mov    eax,DWORD PTR [eax*4+0x863c0]
   2815f:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:109 (discriminator 8)
    tmbuf->tm_mon++;
   28162:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   28165:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28168:	8d 50 01             	lea    edx,[eax+0x1]
   2816b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2816e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   28171:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   28174:	83 e0 03             	and    eax,0x3
   28177:	85 c0                	test   eax,eax
   28179:	75 50                	jne    281cb <gmtime_r+0x2c6>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 1)
   2817b:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   2817e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28183:	89 c8                	mov    eax,ecx
   28185:	f7 ea                	imul   edx
   28187:	c1 fa 05             	sar    edx,0x5
   2818a:	89 c8                	mov    eax,ecx
   2818c:	c1 f8 1f             	sar    eax,0x1f
   2818f:	29 c2                	sub    edx,eax
   28191:	89 d0                	mov    eax,edx
   28193:	6b c0 64             	imul   eax,eax,0x64
   28196:	29 c1                	sub    ecx,eax
   28198:	89 c8                	mov    eax,ecx
   2819a:	85 c0                	test   eax,eax
   2819c:	75 26                	jne    281c4 <gmtime_r+0x2bf>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 4)
   2819e:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   281a1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   281a6:	89 c8                	mov    eax,ecx
   281a8:	f7 ea                	imul   edx
   281aa:	c1 fa 07             	sar    edx,0x7
   281ad:	89 c8                	mov    eax,ecx
   281af:	c1 f8 1f             	sar    eax,0x1f
   281b2:	29 c2                	sub    edx,eax
   281b4:	89 d0                	mov    eax,edx
   281b6:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   281bc:	29 c1                	sub    ecx,eax
   281be:	89 c8                	mov    eax,ecx
   281c0:	85 c0                	test   eax,eax
   281c2:	75 07                	jne    281cb <gmtime_r+0x2c6>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 5)
   281c4:	ba 01 00 00 00       	mov    edx,0x1
   281c9:	eb 05                	jmp    281d0 <gmtime_r+0x2cb>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 6)
   281cb:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 8)
   281d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   281d3:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   281d6:	89 d0                	mov    eax,edx
   281d8:	01 c0                	add    eax,eax
   281da:	01 d0                	add    eax,edx
   281dc:	c1 e0 02             	shl    eax,0x2
   281df:	01 c8                	add    eax,ecx
   281e1:	8b 04 85 c0 63 08 00 	mov    eax,DWORD PTR [eax*4+0x863c0]
   281e8:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   281eb:	0f 86 f7 fe ff ff    	jbe    280e8 <gmtime_r+0x1e3>
/home/yogi/src/os/chrisOS/src/time.c:111
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
   281f1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   281f4:	83 c0 01             	add    eax,0x1
   281f7:	89 c2                	mov    edx,eax
   281f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   281fc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/time.c:112
  tmbuf->tm_isdst = 0;
   281ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   28202:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/chrisOS/src/time.c:113
  return tmbuf;
   28209:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/time.c:114
}
   2820c:	c9                   	leave  
   2820d:	c3                   	ret    

0002820e <localtime>:
localtime():
/home/yogi/src/os/chrisOS/src/time.c:116

struct tm *localtime(const time_t *timer) {
   2820e:	55                   	push   ebp
   2820f:	89 e5                	mov    ebp,esp
   28211:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOS/src/time.c:120
  time_t t;
  struct tm tmbuf;
  
  t = *timer - kTimeZone;
   28214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28217:	8b 10                	mov    edx,DWORD PTR [eax]
   28219:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   2821e:	29 c2                	sub    edx,eax
   28220:	89 d0                	mov    eax,edx
   28222:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:121
  return gmtime_r(&t, &tmbuf);
   28225:	8d 45 d0             	lea    eax,[ebp-0x30]
   28228:	50                   	push   eax
   28229:	8d 45 fc             	lea    eax,[ebp-0x4]
   2822c:	50                   	push   eax
   2822d:	e8 d3 fc ff ff       	call   27f05 <gmtime_r>
   28232:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/time.c:122
}
   28235:	c9                   	leave  
   28236:	c3                   	ret    

00028237 <localtime_r>:
localtime_r():
/home/yogi/src/os/chrisOS/src/time.c:124

struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
   28237:	55                   	push   ebp
   28238:	89 e5                	mov    ebp,esp
   2823a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:127
  time_t t;

  t = *timer - kTimeZone;
   2823d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28240:	8b 10                	mov    edx,DWORD PTR [eax]
   28242:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   28247:	29 c2                	sub    edx,eax
   28249:	89 d0                	mov    eax,edx
   2824b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:128
  return gmtime_r(&t, tmbuf);
   2824e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   28251:	8d 45 fc             	lea    eax,[ebp-0x4]
   28254:	50                   	push   eax
   28255:	e8 ab fc ff ff       	call   27f05 <gmtime_r>
   2825a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/time.c:129
}
   2825d:	c9                   	leave  
   2825e:	c3                   	ret    

0002825f <mktime>:
mktime():
/home/yogi/src/os/chrisOS/src/time.c:131

time_t mktime(struct tm *tmbuf) {
   2825f:	55                   	push   ebp
   28260:	89 e5                	mov    ebp,esp
   28262:	56                   	push   esi
   28263:	53                   	push   ebx
   28264:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/time.c:139
  int yday, month;
  /*unsigned*/ long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
   28267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2826a:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
   2826d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28270:	8b 08                	mov    ecx,DWORD PTR [eax]
   28272:	ba 89 88 88 88       	mov    edx,0x88888889
   28277:	89 c8                	mov    eax,ecx
   28279:	f7 ea                	imul   edx
   2827b:	8d 04 0a             	lea    eax,[edx+ecx*1]
   2827e:	c1 f8 05             	sar    eax,0x5
   28281:	89 c2                	mov    edx,eax
   28283:	89 c8                	mov    eax,ecx
   28285:	c1 f8 1f             	sar    eax,0x1f
   28288:	29 c2                	sub    edx,eax
   2828a:	89 d0                	mov    eax,edx
   2828c:	8d 14 03             	lea    edx,[ebx+eax*1]
   2828f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28292:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:140
  tmbuf->tm_sec %= 60;
   28295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28298:	8b 08                	mov    ecx,DWORD PTR [eax]
   2829a:	ba 89 88 88 88       	mov    edx,0x88888889
   2829f:	89 c8                	mov    eax,ecx
   282a1:	f7 ea                	imul   edx
   282a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
   282a6:	c1 f8 05             	sar    eax,0x5
   282a9:	89 c2                	mov    edx,eax
   282ab:	89 c8                	mov    eax,ecx
   282ad:	c1 f8 1f             	sar    eax,0x1f
   282b0:	29 c2                	sub    edx,eax
   282b2:	89 d0                	mov    eax,edx
   282b4:	89 c2                	mov    edx,eax
   282b6:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   282bd:	89 c2                	mov    edx,eax
   282bf:	89 d0                	mov    eax,edx
   282c1:	c1 e0 04             	shl    eax,0x4
   282c4:	29 d0                	sub    eax,edx
   282c6:	29 c1                	sub    ecx,eax
   282c8:	89 c8                	mov    eax,ecx
   282ca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   282cd:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/time.c:141
  if (tmbuf->tm_sec < 0) {
   282cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282d2:	8b 00                	mov    eax,DWORD PTR [eax]
   282d4:	85 c0                	test   eax,eax
   282d6:	79 1c                	jns    282f4 <mktime+0x95>
/home/yogi/src/os/chrisOS/src/time.c:142
    tmbuf->tm_sec += 60;
   282d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282db:	8b 00                	mov    eax,DWORD PTR [eax]
   282dd:	8d 50 3c             	lea    edx,[eax+0x3c]
   282e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282e3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:143
    tmbuf->tm_min--;
   282e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   282eb:	8d 50 ff             	lea    edx,[eax-0x1]
   282ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:145
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
   282f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282f7:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
   282fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282fd:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   28300:	ba 89 88 88 88       	mov    edx,0x88888889
   28305:	89 c8                	mov    eax,ecx
   28307:	f7 ea                	imul   edx
   28309:	8d 04 0a             	lea    eax,[edx+ecx*1]
   2830c:	c1 f8 05             	sar    eax,0x5
   2830f:	89 c2                	mov    edx,eax
   28311:	89 c8                	mov    eax,ecx
   28313:	c1 f8 1f             	sar    eax,0x1f
   28316:	29 c2                	sub    edx,eax
   28318:	89 d0                	mov    eax,edx
   2831a:	8d 14 03             	lea    edx,[ebx+eax*1]
   2831d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28320:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:146
  tmbuf->tm_min = tmbuf->tm_min % 60;
   28323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28326:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   28329:	ba 89 88 88 88       	mov    edx,0x88888889
   2832e:	89 c8                	mov    eax,ecx
   28330:	f7 ea                	imul   edx
   28332:	8d 04 0a             	lea    eax,[edx+ecx*1]
   28335:	c1 f8 05             	sar    eax,0x5
   28338:	89 c2                	mov    edx,eax
   2833a:	89 c8                	mov    eax,ecx
   2833c:	c1 f8 1f             	sar    eax,0x1f
   2833f:	29 c2                	sub    edx,eax
   28341:	89 d0                	mov    eax,edx
   28343:	89 c2                	mov    edx,eax
   28345:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   2834c:	89 c2                	mov    edx,eax
   2834e:	89 d0                	mov    eax,edx
   28350:	c1 e0 04             	shl    eax,0x4
   28353:	29 d0                	sub    eax,edx
   28355:	29 c1                	sub    ecx,eax
   28357:	89 c8                	mov    eax,ecx
   28359:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2835c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:147
  if (tmbuf->tm_min < 0) {
   2835f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28362:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   28365:	85 c0                	test   eax,eax
   28367:	79 1e                	jns    28387 <mktime+0x128>
/home/yogi/src/os/chrisOS/src/time.c:148
    tmbuf->tm_min += 60;
   28369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2836c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2836f:	8d 50 3c             	lea    edx,[eax+0x3c]
   28372:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28375:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:149
    tmbuf->tm_hour--;
   28378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2837b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   2837e:	8d 50 ff             	lea    edx,[eax-0x1]
   28381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28384:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:151
  }
  day = tmbuf->tm_hour / 24;
   28387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2838a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   2838d:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   28392:	89 c8                	mov    eax,ecx
   28394:	f7 ea                	imul   edx
   28396:	c1 fa 02             	sar    edx,0x2
   28399:	89 c8                	mov    eax,ecx
   2839b:	c1 f8 1f             	sar    eax,0x1f
   2839e:	29 c2                	sub    edx,eax
   283a0:	89 d0                	mov    eax,edx
   283a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:152
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
   283a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   283a8:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   283ab:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   283b0:	89 c8                	mov    eax,ecx
   283b2:	f7 ea                	imul   edx
   283b4:	c1 fa 02             	sar    edx,0x2
   283b7:	89 c8                	mov    eax,ecx
   283b9:	c1 f8 1f             	sar    eax,0x1f
   283bc:	29 c2                	sub    edx,eax
   283be:	89 d0                	mov    eax,edx
   283c0:	01 c0                	add    eax,eax
   283c2:	01 d0                	add    eax,edx
   283c4:	c1 e0 03             	shl    eax,0x3
   283c7:	29 c1                	sub    ecx,eax
   283c9:	89 ca                	mov    edx,ecx
   283cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   283ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:153
  if (tmbuf->tm_hour < 0) {
   283d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   283d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   283d7:	85 c0                	test   eax,eax
   283d9:	79 13                	jns    283ee <mktime+0x18f>
/home/yogi/src/os/chrisOS/src/time.c:154
    tmbuf->tm_hour += 24;
   283db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   283de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   283e1:	8d 50 18             	lea    edx,[eax+0x18]
   283e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   283e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:155
    day--;
   283ea:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/time.c:157
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
   283ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   283f1:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   283f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   283f7:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   283fa:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   283ff:	89 c8                	mov    eax,ecx
   28401:	f7 ea                	imul   edx
   28403:	d1 fa                	sar    edx,1
   28405:	89 c8                	mov    eax,ecx
   28407:	c1 f8 1f             	sar    eax,0x1f
   2840a:	29 c2                	sub    edx,eax
   2840c:	89 d0                	mov    eax,edx
   2840e:	8d 14 03             	lea    edx,[ebx+eax*1]
   28411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28414:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:158
  tmbuf->tm_mon %= 12;
   28417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2841a:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   2841d:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   28422:	89 c8                	mov    eax,ecx
   28424:	f7 ea                	imul   edx
   28426:	d1 fa                	sar    edx,1
   28428:	89 c8                	mov    eax,ecx
   2842a:	c1 f8 1f             	sar    eax,0x1f
   2842d:	29 c2                	sub    edx,eax
   2842f:	89 d0                	mov    eax,edx
   28431:	01 c0                	add    eax,eax
   28433:	01 d0                	add    eax,edx
   28435:	c1 e0 02             	shl    eax,0x2
   28438:	29 c1                	sub    ecx,eax
   2843a:	89 ca                	mov    edx,ecx
   2843c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2843f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:159
  if (tmbuf->tm_mon < 0) {
   28442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28445:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28448:	85 c0                	test   eax,eax
   2844a:	79 1e                	jns    2846a <mktime+0x20b>
/home/yogi/src/os/chrisOS/src/time.c:160
    tmbuf->tm_mon += 12;
   2844c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2844f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28452:	8d 50 0c             	lea    edx,[eax+0xc]
   28455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28458:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:161
    tmbuf->tm_year--;
   2845b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2845e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28461:	8d 50 ff             	lea    edx,[eax-0x1]
   28464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28467:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:163
  }
  day += (tmbuf->tm_mday - 1);
   2846a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2846d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   28470:	83 e8 01             	sub    eax,0x1
   28473:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:164
  while (day < 0) {
   28476:	e9 c1 00 00 00       	jmp    2853c <mktime+0x2dd>
/home/yogi/src/os/chrisOS/src/time.c:165
    if(--tmbuf->tm_mon < 0) {
   2847b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2847e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28481:	8d 50 ff             	lea    edx,[eax-0x1]
   28484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28487:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   2848a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2848d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28490:	85 c0                	test   eax,eax
   28492:	79 19                	jns    284ad <mktime+0x24e>
/home/yogi/src/os/chrisOS/src/time.c:166
      tmbuf->tm_year--;
   28494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28497:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   2849a:	8d 50 ff             	lea    edx,[eax-0x1]
   2849d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   284a0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:167
      tmbuf->tm_mon = 11;
   284a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   284a6:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/chrisOS/src/time.c:169
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   284ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   284b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   284b3:	83 e0 03             	and    eax,0x3
   284b6:	85 c0                	test   eax,eax
   284b8:	75 62                	jne    2851c <mktime+0x2bd>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 1)
   284ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   284bd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   284c0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   284c6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   284cb:	89 c8                	mov    eax,ecx
   284cd:	f7 ea                	imul   edx
   284cf:	c1 fa 05             	sar    edx,0x5
   284d2:	89 c8                	mov    eax,ecx
   284d4:	c1 f8 1f             	sar    eax,0x1f
   284d7:	29 c2                	sub    edx,eax
   284d9:	89 d0                	mov    eax,edx
   284db:	6b c0 64             	imul   eax,eax,0x64
   284de:	29 c1                	sub    ecx,eax
   284e0:	89 c8                	mov    eax,ecx
   284e2:	85 c0                	test   eax,eax
   284e4:	75 2f                	jne    28515 <mktime+0x2b6>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 4)
   284e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   284e9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   284ec:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   284f2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   284f7:	89 c8                	mov    eax,ecx
   284f9:	f7 ea                	imul   edx
   284fb:	c1 fa 07             	sar    edx,0x7
   284fe:	89 c8                	mov    eax,ecx
   28500:	c1 f8 1f             	sar    eax,0x1f
   28503:	29 c2                	sub    edx,eax
   28505:	89 d0                	mov    eax,edx
   28507:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   2850d:	29 c1                	sub    ecx,eax
   2850f:	89 c8                	mov    eax,ecx
   28511:	85 c0                	test   eax,eax
   28513:	75 07                	jne    2851c <mktime+0x2bd>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 5)
   28515:	ba 01 00 00 00       	mov    edx,0x1
   2851a:	eb 05                	jmp    28521 <mktime+0x2c2>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 6)
   2851c:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 8)
   28521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28524:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   28527:	89 d0                	mov    eax,edx
   28529:	01 c0                	add    eax,eax
   2852b:	01 d0                	add    eax,edx
   2852d:	c1 e0 02             	shl    eax,0x2
   28530:	01 c8                	add    eax,ecx
   28532:	8b 04 85 c0 63 08 00 	mov    eax,DWORD PTR [eax*4+0x863c0]
   28539:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:164
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
   2853c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   28540:	0f 88 35 ff ff ff    	js     2847b <mktime+0x21c>
/home/yogi/src/os/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   28546:	e9 c2 00 00 00       	jmp    2860d <mktime+0x3ae>
/home/yogi/src/os/chrisOS/src/time.c:172
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   2854b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2854e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28551:	83 e0 03             	and    eax,0x3
   28554:	85 c0                	test   eax,eax
   28556:	75 62                	jne    285ba <mktime+0x35b>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 1)
   28558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2855b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   2855e:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   28564:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28569:	89 c8                	mov    eax,ecx
   2856b:	f7 ea                	imul   edx
   2856d:	c1 fa 05             	sar    edx,0x5
   28570:	89 c8                	mov    eax,ecx
   28572:	c1 f8 1f             	sar    eax,0x1f
   28575:	29 c2                	sub    edx,eax
   28577:	89 d0                	mov    eax,edx
   28579:	6b c0 64             	imul   eax,eax,0x64
   2857c:	29 c1                	sub    ecx,eax
   2857e:	89 c8                	mov    eax,ecx
   28580:	85 c0                	test   eax,eax
   28582:	75 2f                	jne    285b3 <mktime+0x354>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 4)
   28584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28587:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   2858a:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   28590:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28595:	89 c8                	mov    eax,ecx
   28597:	f7 ea                	imul   edx
   28599:	c1 fa 07             	sar    edx,0x7
   2859c:	89 c8                	mov    eax,ecx
   2859e:	c1 f8 1f             	sar    eax,0x1f
   285a1:	29 c2                	sub    edx,eax
   285a3:	89 d0                	mov    eax,edx
   285a5:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   285ab:	29 c1                	sub    ecx,eax
   285ad:	89 c8                	mov    eax,ecx
   285af:	85 c0                	test   eax,eax
   285b1:	75 07                	jne    285ba <mktime+0x35b>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 5)
   285b3:	ba 01 00 00 00       	mov    edx,0x1
   285b8:	eb 05                	jmp    285bf <mktime+0x360>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 6)
   285ba:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 8)
   285bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   285c2:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   285c5:	89 d0                	mov    eax,edx
   285c7:	01 c0                	add    eax,eax
   285c9:	01 d0                	add    eax,edx
   285cb:	c1 e0 02             	shl    eax,0x2
   285ce:	01 c8                	add    eax,ecx
   285d0:	8b 04 85 c0 63 08 00 	mov    eax,DWORD PTR [eax*4+0x863c0]
   285d7:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:173 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
   285da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   285dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   285e0:	8d 50 01             	lea    edx,[eax+0x1]
   285e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   285e6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   285e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   285ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   285ef:	83 f8 0c             	cmp    eax,0xc
   285f2:	75 19                	jne    2860d <mktime+0x3ae>
/home/yogi/src/os/chrisOS/src/time.c:174
      tmbuf->tm_mon = 0;
   285f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   285f7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/time.c:175
      tmbuf->tm_year++;
   285fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28601:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28604:	8d 50 01             	lea    edx,[eax+0x1]
   28607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2860a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   2860d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28610:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28613:	83 e0 03             	and    eax,0x3
   28616:	85 c0                	test   eax,eax
   28618:	75 62                	jne    2867c <mktime+0x41d>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 1)
   2861a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2861d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28620:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   28626:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2862b:	89 c8                	mov    eax,ecx
   2862d:	f7 ea                	imul   edx
   2862f:	c1 fa 05             	sar    edx,0x5
   28632:	89 c8                	mov    eax,ecx
   28634:	c1 f8 1f             	sar    eax,0x1f
   28637:	29 c2                	sub    edx,eax
   28639:	89 d0                	mov    eax,edx
   2863b:	6b c0 64             	imul   eax,eax,0x64
   2863e:	29 c1                	sub    ecx,eax
   28640:	89 c8                	mov    eax,ecx
   28642:	85 c0                	test   eax,eax
   28644:	75 2f                	jne    28675 <mktime+0x416>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 4)
   28646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28649:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   2864c:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   28652:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28657:	89 c8                	mov    eax,ecx
   28659:	f7 ea                	imul   edx
   2865b:	c1 fa 07             	sar    edx,0x7
   2865e:	89 c8                	mov    eax,ecx
   28660:	c1 f8 1f             	sar    eax,0x1f
   28663:	29 c2                	sub    edx,eax
   28665:	89 d0                	mov    eax,edx
   28667:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   2866d:	29 c1                	sub    ecx,eax
   2866f:	89 c8                	mov    eax,ecx
   28671:	85 c0                	test   eax,eax
   28673:	75 07                	jne    2867c <mktime+0x41d>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 5)
   28675:	ba 01 00 00 00       	mov    edx,0x1
   2867a:	eb 05                	jmp    28681 <mktime+0x422>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 6)
   2867c:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 8)
   28681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28684:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   28687:	89 d0                	mov    eax,edx
   28689:	01 c0                	add    eax,eax
   2868b:	01 d0                	add    eax,edx
   2868d:	c1 e0 02             	shl    eax,0x2
   28690:	01 c8                	add    eax,ecx
   28692:	8b 04 85 c0 63 08 00 	mov    eax,DWORD PTR [eax*4+0x863c0]
   28699:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   2869c:	0f 8e a9 fe ff ff    	jle    2854b <mktime+0x2ec>
/home/yogi/src/os/chrisOS/src/time.c:178
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
   286a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   286a5:	8d 50 01             	lea    edx,[eax+0x1]
   286a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   286ab:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/time.c:179
  year = EPOCH_YR;
   286ae:	c7 45 e0 b2 07 00 00 	mov    DWORD PTR [ebp-0x20],0x7b2
/home/yogi/src/os/chrisOS/src/time.c:180
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
   286b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   286b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   286bb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   286be:	81 ea 6c 07 00 00    	sub    edx,0x76c
   286c4:	39 d0                	cmp    eax,edx
   286c6:	7d 0a                	jge    286d2 <mktime+0x473>
/home/yogi/src/os/chrisOS/src/time.c:180 (discriminator 1)
   286c8:	b8 19 fc ff ff       	mov    eax,0xfffffc19
   286cd:	e9 c0 03 00 00       	jmp    28a92 <mktime+0x833>
/home/yogi/src/os/chrisOS/src/time.c:181
  seconds = 0;
   286d2:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/time.c:182
  day = 0;                      // Means days since day 0 now
   286d9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/time.c:183
  overflow = 0;
   286e0:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/time.c:190
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
   286e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   286ea:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   286ed:	05 6c 07 00 00       	add    eax,0x76c
   286f2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/time.c:192

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
   286f5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   286f8:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   286fb:	3d 7c c6 59 00       	cmp    eax,0x59c67c
   28700:	7e 07                	jle    28709 <mktime+0x4aa>
/home/yogi/src/os/chrisOS/src/time.c:192 (discriminator 1)
   28702:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/time.c:193
  day = (tm_year - year) * 365;
   28709:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2870c:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   2870f:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
   28715:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:194
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
   28718:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   2871d:	2b 45 f4             	sub    eax,DWORD PTR [ebp-0xc]
   28720:	89 c2                	mov    edx,eax
   28722:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28725:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   28728:	8d 48 03             	lea    ecx,[eax+0x3]
   2872b:	85 c0                	test   eax,eax
   2872d:	0f 48 c1             	cmovs  eax,ecx
   28730:	c1 f8 02             	sar    eax,0x2
   28733:	83 c0 01             	add    eax,0x1
   28736:	39 c2                	cmp    edx,eax
   28738:	7d 04                	jge    2873e <mktime+0x4df>
/home/yogi/src/os/chrisOS/src/time.c:194 (discriminator 1)
   2873a:	83 4d e8 02          	or     DWORD PTR [ebp-0x18],0x2
/home/yogi/src/os/chrisOS/src/time.c:195
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
   2873e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28741:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   28744:	8d 50 03             	lea    edx,[eax+0x3]
   28747:	85 c0                	test   eax,eax
   28749:	0f 48 c2             	cmovs  eax,edx
   2874c:	c1 f8 02             	sar    eax,0x2
   2874f:	89 c1                	mov    ecx,eax
   28751:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28754:	83 e0 03             	and    eax,0x3
   28757:	85 c0                	test   eax,eax
   28759:	74 29                	je     28784 <mktime+0x525>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 1)
   2875b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2875e:	99                   	cdq    
   2875f:	c1 ea 1e             	shr    edx,0x1e
   28762:	01 d0                	add    eax,edx
   28764:	83 e0 03             	and    eax,0x3
   28767:	29 d0                	sub    eax,edx
   28769:	89 c3                	mov    ebx,eax
   2876b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2876e:	99                   	cdq    
   2876f:	c1 ea 1e             	shr    edx,0x1e
   28772:	01 d0                	add    eax,edx
   28774:	83 e0 03             	and    eax,0x3
   28777:	29 d0                	sub    eax,edx
   28779:	39 c3                	cmp    ebx,eax
   2877b:	7d 07                	jge    28784 <mktime+0x525>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 3)
   2877d:	b8 01 00 00 00       	mov    eax,0x1
   28782:	eb 05                	jmp    28789 <mktime+0x52a>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 4)
   28784:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 6)
   28789:	01 c8                	add    eax,ecx
   2878b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
   2878e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28791:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   28794:	89 c1                	mov    ecx,eax
   28796:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2879b:	89 c8                	mov    eax,ecx
   2879d:	f7 ea                	imul   edx
   2879f:	c1 fa 05             	sar    edx,0x5
   287a2:	89 c8                	mov    eax,ecx
   287a4:	c1 f8 1f             	sar    eax,0x1f
   287a7:	89 d6                	mov    esi,edx
   287a9:	29 c6                	sub    esi,eax
   287ab:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   287ae:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   287b3:	89 c8                	mov    eax,ecx
   287b5:	f7 ea                	imul   edx
   287b7:	c1 fa 05             	sar    edx,0x5
   287ba:	89 c8                	mov    eax,ecx
   287bc:	c1 f8 1f             	sar    eax,0x1f
   287bf:	29 c2                	sub    edx,eax
   287c1:	89 d0                	mov    eax,edx
   287c3:	6b c0 64             	imul   eax,eax,0x64
   287c6:	29 c1                	sub    ecx,eax
   287c8:	89 c8                	mov    eax,ecx
   287ca:	85 c0                	test   eax,eax
   287cc:	74 49                	je     28817 <mktime+0x5b8>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 1)
   287ce:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   287d1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   287d6:	89 c8                	mov    eax,ecx
   287d8:	f7 ea                	imul   edx
   287da:	c1 fa 05             	sar    edx,0x5
   287dd:	89 c8                	mov    eax,ecx
   287df:	c1 f8 1f             	sar    eax,0x1f
   287e2:	89 d3                	mov    ebx,edx
   287e4:	29 c3                	sub    ebx,eax
   287e6:	6b c3 64             	imul   eax,ebx,0x64
   287e9:	89 cb                	mov    ebx,ecx
   287eb:	29 c3                	sub    ebx,eax
   287ed:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   287f0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   287f5:	89 c8                	mov    eax,ecx
   287f7:	f7 ea                	imul   edx
   287f9:	c1 fa 05             	sar    edx,0x5
   287fc:	89 c8                	mov    eax,ecx
   287fe:	c1 f8 1f             	sar    eax,0x1f
   28801:	29 c2                	sub    edx,eax
   28803:	89 d0                	mov    eax,edx
   28805:	6b c0 64             	imul   eax,eax,0x64
   28808:	29 c1                	sub    ecx,eax
   2880a:	89 c8                	mov    eax,ecx
   2880c:	39 c3                	cmp    ebx,eax
   2880e:	7d 07                	jge    28817 <mktime+0x5b8>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 3)
   28810:	b8 01 00 00 00       	mov    eax,0x1
   28815:	eb 05                	jmp    2881c <mktime+0x5bd>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 4)
   28817:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 6)
   2881c:	01 f0                	add    eax,esi
   2881e:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
   28821:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28824:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   28827:	89 c1                	mov    ecx,eax
   28829:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2882e:	89 c8                	mov    eax,ecx
   28830:	f7 ea                	imul   edx
   28832:	c1 fa 07             	sar    edx,0x7
   28835:	89 c8                	mov    eax,ecx
   28837:	c1 f8 1f             	sar    eax,0x1f
   2883a:	89 d6                	mov    esi,edx
   2883c:	29 c6                	sub    esi,eax
   2883e:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28841:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28846:	89 c8                	mov    eax,ecx
   28848:	f7 ea                	imul   edx
   2884a:	c1 fa 07             	sar    edx,0x7
   2884d:	89 c8                	mov    eax,ecx
   2884f:	c1 f8 1f             	sar    eax,0x1f
   28852:	29 c2                	sub    edx,eax
   28854:	89 d0                	mov    eax,edx
   28856:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   2885c:	29 c1                	sub    ecx,eax
   2885e:	89 c8                	mov    eax,ecx
   28860:	85 c0                	test   eax,eax
   28862:	74 4f                	je     288b3 <mktime+0x654>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 1)
   28864:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28867:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2886c:	89 c8                	mov    eax,ecx
   2886e:	f7 ea                	imul   edx
   28870:	c1 fa 07             	sar    edx,0x7
   28873:	89 c8                	mov    eax,ecx
   28875:	c1 f8 1f             	sar    eax,0x1f
   28878:	89 d3                	mov    ebx,edx
   2887a:	29 c3                	sub    ebx,eax
   2887c:	69 c3 90 01 00 00    	imul   eax,ebx,0x190
   28882:	89 cb                	mov    ebx,ecx
   28884:	29 c3                	sub    ebx,eax
   28886:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   28889:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2888e:	89 c8                	mov    eax,ecx
   28890:	f7 ea                	imul   edx
   28892:	c1 fa 07             	sar    edx,0x7
   28895:	89 c8                	mov    eax,ecx
   28897:	c1 f8 1f             	sar    eax,0x1f
   2889a:	29 c2                	sub    edx,eax
   2889c:	89 d0                	mov    eax,edx
   2889e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   288a4:	29 c1                	sub    ecx,eax
   288a6:	89 c8                	mov    eax,ecx
   288a8:	39 c3                	cmp    ebx,eax
   288aa:	7d 07                	jge    288b3 <mktime+0x654>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 3)
   288ac:	b8 01 00 00 00       	mov    eax,0x1
   288b1:	eb 05                	jmp    288b8 <mktime+0x659>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 4)
   288b3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 6)
   288b8:	01 f0                	add    eax,esi
   288ba:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:199 (discriminator 6)

  yday = month = 0;
   288bd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   288c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   288c7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:200 (discriminator 6)
  while (month < tmbuf->tm_mon) {
   288ca:	eb 7b                	jmp    28947 <mktime+0x6e8>
/home/yogi/src/os/chrisOS/src/time.c:201
    yday += _ytab[LEAPYEAR(tm_year)][month];
   288cc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   288cf:	83 e0 03             	and    eax,0x3
   288d2:	85 c0                	test   eax,eax
   288d4:	75 50                	jne    28926 <mktime+0x6c7>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 1)
   288d6:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   288d9:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   288de:	89 c8                	mov    eax,ecx
   288e0:	f7 ea                	imul   edx
   288e2:	c1 fa 05             	sar    edx,0x5
   288e5:	89 c8                	mov    eax,ecx
   288e7:	c1 f8 1f             	sar    eax,0x1f
   288ea:	29 c2                	sub    edx,eax
   288ec:	89 d0                	mov    eax,edx
   288ee:	6b c0 64             	imul   eax,eax,0x64
   288f1:	29 c1                	sub    ecx,eax
   288f3:	89 c8                	mov    eax,ecx
   288f5:	85 c0                	test   eax,eax
   288f7:	75 26                	jne    2891f <mktime+0x6c0>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 4)
   288f9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   288fc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28901:	89 c8                	mov    eax,ecx
   28903:	f7 ea                	imul   edx
   28905:	c1 fa 07             	sar    edx,0x7
   28908:	89 c8                	mov    eax,ecx
   2890a:	c1 f8 1f             	sar    eax,0x1f
   2890d:	29 c2                	sub    edx,eax
   2890f:	89 d0                	mov    eax,edx
   28911:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   28917:	29 c1                	sub    ecx,eax
   28919:	89 c8                	mov    eax,ecx
   2891b:	85 c0                	test   eax,eax
   2891d:	75 07                	jne    28926 <mktime+0x6c7>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 5)
   2891f:	ba 01 00 00 00       	mov    edx,0x1
   28924:	eb 05                	jmp    2892b <mktime+0x6cc>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 6)
   28926:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 8)
   2892b:	89 d0                	mov    eax,edx
   2892d:	01 c0                	add    eax,eax
   2892f:	01 d0                	add    eax,edx
   28931:	c1 e0 02             	shl    eax,0x2
   28934:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   28937:	01 d0                	add    eax,edx
   28939:	8b 04 85 c0 63 08 00 	mov    eax,DWORD PTR [eax*4+0x863c0]
   28940:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:202 (discriminator 8)
    month++;
   28943:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/time.c:200
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
   28947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2894a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   2894d:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   28950:	0f 8f 76 ff ff ff    	jg     288cc <mktime+0x66d>
/home/yogi/src/os/chrisOS/src/time.c:204
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
   28956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28959:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   2895c:	83 e8 01             	sub    eax,0x1
   2895f:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:205
  if (day + yday < 0) overflow|=4;
   28962:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   28965:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   28968:	01 d0                	add    eax,edx
   2896a:	85 c0                	test   eax,eax
   2896c:	79 04                	jns    28972 <mktime+0x713>
/home/yogi/src/os/chrisOS/src/time.c:205 (discriminator 1)
   2896e:	83 4d e8 04          	or     DWORD PTR [ebp-0x18],0x4
/home/yogi/src/os/chrisOS/src/time.c:206
  day += yday;
   28972:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   28975:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:208

  tmbuf->tm_yday = yday;
   28978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2897b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2897e:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/time.c:209
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
   28981:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   28984:	8d 48 04             	lea    ecx,[eax+0x4]
   28987:	ba 93 24 49 92       	mov    edx,0x92492493
   2898c:	89 c8                	mov    eax,ecx
   2898e:	f7 ea                	imul   edx
   28990:	8d 04 0a             	lea    eax,[edx+ecx*1]
   28993:	c1 f8 02             	sar    eax,0x2
   28996:	89 c2                	mov    edx,eax
   28998:	89 c8                	mov    eax,ecx
   2899a:	c1 f8 1f             	sar    eax,0x1f
   2899d:	29 c2                	sub    edx,eax
   2899f:	89 d0                	mov    eax,edx
   289a1:	89 c2                	mov    edx,eax
   289a3:	c1 e2 03             	shl    edx,0x3
   289a6:	29 c2                	sub    edx,eax
   289a8:	89 c8                	mov    eax,ecx
   289aa:	29 d0                	sub    eax,edx
   289ac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   289af:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/chrisOS/src/time.c:211

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
   289b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   289b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   289b8:	c1 e0 02             	shl    eax,0x2
   289bb:	89 c2                	mov    edx,eax
   289bd:	c1 e2 04             	shl    edx,0x4
   289c0:	29 c2                	sub    edx,eax
   289c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   289c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   289c8:	01 d0                	add    eax,edx
   289ca:	c1 e0 02             	shl    eax,0x2
   289cd:	89 c2                	mov    edx,eax
   289cf:	c1 e2 04             	shl    edx,0x4
   289d2:	29 c2                	sub    edx,eax
   289d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   289d7:	8b 00                	mov    eax,DWORD PTR [eax]
   289d9:	01 d0                	add    eax,edx
   289db:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:213

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
   289de:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   289e3:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   289e6:	89 c1                	mov    ecx,eax
   289e8:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   289ed:	89 c8                	mov    eax,ecx
   289ef:	f7 ea                	imul   edx
   289f1:	8d 04 0a             	lea    eax,[edx+ecx*1]
   289f4:	c1 f8 10             	sar    eax,0x10
   289f7:	89 c2                	mov    edx,eax
   289f9:	89 c8                	mov    eax,ecx
   289fb:	c1 f8 1f             	sar    eax,0x1f
   289fe:	29 c2                	sub    edx,eax
   28a00:	89 d0                	mov    eax,edx
   28a02:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   28a05:	7d 04                	jge    28a0b <mktime+0x7ac>
/home/yogi/src/os/chrisOS/src/time.c:213 (discriminator 1)
   28a07:	83 4d e8 08          	or     DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/time.c:214
  seconds += day * SECS_DAY;
   28a0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   28a0e:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   28a14:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:217

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   28a17:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   28a1c:	85 c0                	test   eax,eax
   28a1e:	7e 13                	jle    28a33 <mktime+0x7d4>
/home/yogi/src/os/chrisOS/src/time.c:217 (discriminator 1)
   28a20:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   28a25:	ba ff ff ff 7f       	mov    edx,0x7fffffff
   28a2a:	29 c2                	sub    edx,eax
   28a2c:	89 d0                	mov    eax,edx
   28a2e:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   28a31:	7c 15                	jl     28a48 <mktime+0x7e9>
/home/yogi/src/os/chrisOS/src/time.c:218 (discriminator 3)
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   28a33:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
/home/yogi/src/os/chrisOS/src/time.c:217 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   28a38:	85 c0                	test   eax,eax
   28a3a:	79 10                	jns    28a4c <mktime+0x7ed>
/home/yogi/src/os/chrisOS/src/time.c:218
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   28a3c:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   28a41:	f7 d8                	neg    eax
   28a43:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   28a46:	7e 04                	jle    28a4c <mktime+0x7ed>
/home/yogi/src/os/chrisOS/src/time.c:219
          overflow|=16;
   28a48:	83 4d e8 10          	or     DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/chrisOS/src/time.c:221
  }
  seconds += kTimeZone;
   28a4c:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   28a51:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:223

  if (tmbuf->tm_isdst) {
   28a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28a57:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   28a5a:	85 c0                	test   eax,eax
   28a5c:	74 0a                	je     28a68 <mktime+0x809>
/home/yogi/src/os/chrisOS/src/time.c:224
    dst = _dstbias;
   28a5e:	a1 68 99 12 00       	mov    eax,ds:0x129968
   28a63:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   28a66:	eb 07                	jmp    28a6f <mktime+0x810>
/home/yogi/src/os/chrisOS/src/time.c:226
  } else {
    dst = 0;
   28a68:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/time.c:229
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
   28a6f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   28a72:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   28a75:	7e 04                	jle    28a7b <mktime+0x81c>
/home/yogi/src/os/chrisOS/src/time.c:229 (discriminator 1)
   28a77:	83 4d e8 20          	or     DWORD PTR [ebp-0x18],0x20
/home/yogi/src/os/chrisOS/src/time.c:230
  seconds -= dst;
   28a7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   28a7e:	29 45 dc             	sub    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:232

  if (overflow) return (time_t) overflow-2;
   28a81:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   28a85:	74 08                	je     28a8f <mktime+0x830>
/home/yogi/src/os/chrisOS/src/time.c:232 (discriminator 1)
   28a87:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   28a8a:	83 e8 02             	sub    eax,0x2
   28a8d:	eb 03                	jmp    28a92 <mktime+0x833>
/home/yogi/src/os/chrisOS/src/time.c:235

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
   28a8f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/chrisOS/src/time.c:236
}
   28a92:	83 c4 20             	add    esp,0x20
   28a95:	5b                   	pop    ebx
   28a96:	5e                   	pop    esi
   28a97:	5d                   	pop    ebp
   28a98:	c3                   	ret    

00028a99 <_strdate>:
_strdate():
/home/yogi/src/os/chrisOS/src/time.c:241

#if !defined(KERNEL) && !defined(OS_LIB)


char *_strdate(char *s) {
   28a99:	55                   	push   ebp
   28a9a:	89 e5                	mov    ebp,esp
   28a9c:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:244
  time_t now;

  time(&now);
   28a9f:	8d 45 fc             	lea    eax,[ebp-0x4]
   28aa2:	50                   	push   eax
   28aa3:	e8 48 f4 ff ff       	call   27ef0 <time>
   28aa8:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:247
  //fix me!
  //  strftime(s, 9, "%D", localtime(&now));
  return s;
   28aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/time.c:248
}
   28aae:	c9                   	leave  
   28aaf:	c3                   	ret    

00028ab0 <_strtime>:
_strtime():
/home/yogi/src/os/chrisOS/src/time.c:250

char *_strtime(char *s) {
   28ab0:	55                   	push   ebp
   28ab1:	89 e5                	mov    ebp,esp
   28ab3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:253
  time_t now;

  time(&now);
   28ab6:	8d 45 fc             	lea    eax,[ebp-0x4]
   28ab9:	50                   	push   eax
   28aba:	e8 31 f4 ff ff       	call   27ef0 <time>
   28abf:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:256
  //fix me
  //  strftime(s, 9, "%T", localtime(&now));
  return s;
   28ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/time.c:257
}
   28ac5:	c9                   	leave  
   28ac6:	c3                   	ret    

00028ac7 <waitTicks>:
waitTicks():
/home/yogi/src/os/chrisOS/src/time.c:260

void __attribute__((noinline))waitTicks(int TicksToWait)
{
   28ac7:	55                   	push   ebp
   28ac8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:262
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
   28aca:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   28ace:	74 0f                	je     28adf <waitTicks+0x18>
/home/yogi/src/os/chrisOS/src/time.c:267 (discriminator 1)
        return;
    //printd(DEBUG_TIMER,"ttw=%08X", TicksToWait);
    do
    {
        __asm("sti\nhlt\n");
   28ad0:	fb                   	sti    
   28ad1:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:268 (discriminator 1)
        TicksToWait--;
   28ad2:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/time.c:269 (discriminator 1)
    } while (TicksToWait>0);
   28ad6:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   28ada:	7f f4                	jg     28ad0 <waitTicks+0x9>
/home/yogi/src/os/chrisOS/src/time.c:270 (discriminator 2)
    return;
   28adc:	90                   	nop
   28add:	eb 01                	jmp    28ae0 <waitTicks+0x19>
/home/yogi/src/os/chrisOS/src/time.c:263

void __attribute__((noinline))waitTicks(int TicksToWait)
{
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
        return;
   28adf:	90                   	nop
/home/yogi/src/os/chrisOS/src/time.c:271
    {
        __asm("sti\nhlt\n");
        TicksToWait--;
    } while (TicksToWait>0);
    return;
}
   28ae0:	5d                   	pop    ebp
   28ae1:	c3                   	ret    

00028ae2 <wait>:
wait():
/home/yogi/src/os/chrisOS/src/time.c:274

void /*__attribute__((noinline))*/wait(int msToWait)
{
   28ae2:	55                   	push   ebp
   28ae3:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:277
    //printk("msToWait=%u, ticksperms=%u, ticksToWait=%u",msToWait, kTicksPerMS, msToWait*kTicksPerMS);
    //STOPHERE2
    waitTicks(msToWait/kTicksPerMS);
   28ae5:	8b 0d c4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297c4
   28aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28aee:	99                   	cdq    
   28aef:	f7 f9                	idiv   ecx
   28af1:	50                   	push   eax
   28af2:	e8 d0 ff ff ff       	call   28ac7 <waitTicks>
   28af7:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:278
}
   28afa:	90                   	nop
   28afb:	c9                   	leave  
   28afc:	c3                   	ret    

00028afd <wait3>:
wait3():
/home/yogi/src/os/chrisOS/src/time.c:281

void wait3(double msToWait)
{
   28afd:	55                   	push   ebp
   28afe:	89 e5                	mov    ebp,esp
   28b00:	83 ec 28             	sub    esp,0x28
   28b03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28b06:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   28b09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   28b0c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/time.c:282
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);
   28b0f:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   28b14:	8b 00                	mov    eax,DWORD PTR [eax]
   28b16:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   28b19:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   28b20:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   28b23:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   28b26:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   28b29:	dd 45 e8             	fld    QWORD PTR [ebp-0x18]
   28b2c:	8b 0d c0 97 12 00    	mov    ecx,DWORD PTR ds:0x1297c0
   28b32:	b8 e8 03 00 00       	mov    eax,0x3e8
   28b37:	ba 00 00 00 00       	mov    edx,0x0
   28b3c:	f7 f1                	div    ecx
   28b3e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   28b41:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   28b48:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   28b4b:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   28b4e:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   28b51:	de f9                	fdivp  st(1),st
   28b53:	de c1                	faddp  st(1),st
   28b55:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   28b58:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   28b5b:	dd 5d f8             	fstp   QWORD PTR [ebp-0x8]
/home/yogi/src/os/chrisOS/src/time.c:284

while (endTicks > (double)*kTicksSinceStart)
   28b5e:	eb 02                	jmp    28b62 <wait3+0x65>
/home/yogi/src/os/chrisOS/src/time.c:285
    {__asm__("sti\n hlt\n");}
   28b60:	fb                   	sti    
   28b61:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:284

void wait3(double msToWait)
{
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);

while (endTicks > (double)*kTicksSinceStart)
   28b62:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   28b67:	8b 00                	mov    eax,DWORD PTR [eax]
   28b69:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   28b6c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   28b73:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   28b76:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   28b79:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   28b7c:	dd 45 f8             	fld    QWORD PTR [ebp-0x8]
   28b7f:	df e9                	fucomip st,st(1)
   28b81:	dd d8                	fstp   st(0)
   28b83:	77 db                	ja     28b60 <wait3+0x63>
/home/yogi/src/os/chrisOS/src/time.c:287
    {__asm__("sti\n hlt\n");}
    
}
   28b85:	90                   	nop
   28b86:	c9                   	leave  
   28b87:	c3                   	ret    

00028b88 <wait2>:
wait2():
/home/yogi/src/os/chrisOS/src/time.c:290

void wait2(unsigned msToWait)
{
   28b88:	55                   	push   ebp
   28b89:	89 e5                	mov    ebp,esp
   28b8b:	53                   	push   ebx
   28b8c:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/time.c:291
    uint64_t startTicks = *kTicksSinceStart;             //25
   28b8f:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   28b94:	8b 00                	mov    eax,DWORD PTR [eax]
   28b96:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   28b99:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/time.c:292
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
   28ba0:	8b 1d c0 97 12 00    	mov    ebx,DWORD PTR ds:0x1297c0
   28ba6:	b8 e8 03 00 00       	mov    eax,0x3e8
   28bab:	ba 00 00 00 00       	mov    edx,0x0
   28bb0:	f7 f3                	div    ebx
   28bb2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/time.c:293
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
   28bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28bb8:	ba 00 00 00 00       	mov    edx,0x0
   28bbd:	f7 75 ec             	div    DWORD PTR [ebp-0x14]
   28bc0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   28bc3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/time.c:294
    uint64_t endTicks = startTicks + totalTicksToWait;
   28bca:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   28bcd:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   28bd0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   28bd3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   28bd6:	01 c8                	add    eax,ecx
   28bd8:	11 da                	adc    edx,ebx
   28bda:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   28bdd:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
/home/yogi/src/os/chrisOS/src/time.c:296

    if (endTicks < *kTicksSinceStart)
   28be0:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   28be5:	8b 00                	mov    eax,DWORD PTR [eax]
   28be7:	ba 00 00 00 00       	mov    edx,0x0
   28bec:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28bef:	72 0d                	jb     28bfe <wait2+0x76>
   28bf1:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28bf4:	77 25                	ja     28c1b <wait2+0x93>
   28bf6:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   28bf9:	77 20                	ja     28c1b <wait2+0x93>
/home/yogi/src/os/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   28bfb:	eb 01                	jmp    28bfe <wait2+0x76>
/home/yogi/src/os/chrisOS/src/time.c:305
    {__asm__("hlt\n");}
   28bfd:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   28bfe:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   28c03:	8b 00                	mov    eax,DWORD PTR [eax]
   28c05:	ba 00 00 00 00       	mov    edx,0x0
   28c0a:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28c0d:	72 ee                	jb     28bfd <wait2+0x75>
   28c0f:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28c12:	77 08                	ja     28c1c <wait2+0x94>
   28c14:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   28c17:	72 e4                	jb     28bfd <wait2+0x75>
   28c19:	eb 01                	jmp    28c1c <wait2+0x94>
/home/yogi/src/os/chrisOS/src/time.c:297
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
    uint64_t endTicks = startTicks + totalTicksToWait;

    if (endTicks < *kTicksSinceStart)
        return;
   28c1b:	90                   	nop
/home/yogi/src/os/chrisOS/src/time.c:307
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
    {__asm__("hlt\n");}
    //printf("done waiting!\n");
}
   28c1c:	83 c4 24             	add    esp,0x24
   28c1f:	5b                   	pop    ebx
   28c20:	5d                   	pop    ebp
   28c21:	c3                   	ret    
   28c22:	66 90                	xchg   ax,ax
   28c24:	66 90                	xchg   ax,ax
   28c26:	66 90                	xchg   ax,ax
   28c28:	66 90                	xchg   ax,ax
   28c2a:	66 90                	xchg   ax,ax
   28c2c:	66 90                	xchg   ax,ax
   28c2e:	66 90                	xchg   ax,ax

00028c30 <__udivdi3>:
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   28c30:	55                   	push   ebp
   28c31:	57                   	push   edi
   28c32:	56                   	push   esi
   28c33:	53                   	push   ebx
   28c34:	83 ec 1c             	sub    esp,0x1c
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
  const DWunion dd = {.ll = d};
   28c37:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   28c3b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
   28c3f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
   28c43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   28c47:	85 f6                	test   esi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1013
static inline __attribute__ ((__always_inline__))
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
   28c49:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
   28c4d:	89 ca                	mov    edx,ecx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
  const DWunion dd = {.ll = d};
   28c4f:	89 f8                	mov    eax,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   28c51:	75 3d                	jne    28c90 <__udivdi3+0x60>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1028
    {
      if (d0 > n1)
   28c53:	39 cf                	cmp    edi,ecx
   28c55:	0f 87 c5 00 00 00    	ja     28d20 <__udivdi3+0xf0>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1041
	}
      else
	{
	  /* qq = NN / 0d */

	  if (d0 == 0)
   28c5b:	85 ff                	test   edi,edi
   28c5d:	89 fd                	mov    ebp,edi
   28c5f:	75 0b                	jne    28c6c <__udivdi3+0x3c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1042
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
   28c61:	b8 01 00 00 00       	mov    eax,0x1
   28c66:	31 d2                	xor    edx,edx
   28c68:	f7 f7                	div    edi
   28c6a:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1044

	  udiv_qrnnd (q1, n1, 0, n1, d0);
   28c6c:	89 c8                	mov    eax,ecx
   28c6e:	31 d2                	xor    edx,edx
   28c70:	f7 f5                	div    ebp
   28c72:	89 c1                	mov    ecx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1045
	  udiv_qrnnd (q0, n0, n1, n0, d0);
   28c74:	89 d8                	mov    eax,ebx
   28c76:	89 cf                	mov    edi,ecx
   28c78:	f7 f5                	div    ebp
   28c7a:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28c7c:	89 d8                	mov    eax,ebx
   28c7e:	89 fa                	mov    edx,edi
   28c80:	83 c4 1c             	add    esp,0x1c
   28c83:	5b                   	pop    ebx
   28c84:	5e                   	pop    esi
   28c85:	5f                   	pop    edi
   28c86:	5d                   	pop    ebp
   28c87:	c3                   	ret    
   28c88:	90                   	nop
   28c89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   28c90:	39 ce                	cmp    esi,ecx
   28c92:	77 74                	ja     28d08 <__udivdi3+0xd8>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1155
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
   28c94:	0f bd fe             	bsr    edi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1156
	  if (bm == 0)
   28c97:	83 f7 1f             	xor    edi,0x1f
   28c9a:	0f 84 98 00 00 00    	je     28d38 <__udivdi3+0x108>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   28ca0:	bb 20 00 00 00       	mov    ebx,0x20
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   28ca5:	89 f9                	mov    ecx,edi
   28ca7:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   28ca9:	29 fb                	sub    ebx,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   28cab:	d3 e6                	shl    esi,cl
   28cad:	89 d9                	mov    ecx,ebx
   28caf:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      d0 = d0 << bm;
   28cb1:	89 f9                	mov    ecx,edi
   28cb3:	d3 e0                	shl    eax,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
   28cb5:	09 ee                	or     esi,ebp
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   28cb7:	89 d9                	mov    ecx,ebx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
   28cb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      n2 = n1 >> b;
   28cbd:	89 d5                	mov    ebp,edx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   28cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   28cc3:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   28cc5:	89 f9                	mov    ecx,edi
   28cc7:	d3 e2                	shl    edx,cl
   28cc9:	89 d9                	mov    ecx,ebx
   28ccb:	d3 e8                	shr    eax,cl
   28ccd:	09 c2                	or     edx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1196
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   28ccf:	89 d0                	mov    eax,edx
   28cd1:	89 ea                	mov    edx,ebp
   28cd3:	f7 f6                	div    esi
   28cd5:	89 d5                	mov    ebp,edx
   28cd7:	89 c3                	mov    ebx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1197
	      umul_ppmm (m1, m0, q0, d0);
   28cd9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1199

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
   28cdd:	39 d5                	cmp    ebp,edx
   28cdf:	72 10                	jb     28cf1 <__udivdi3+0xc1>
   28ce1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
   28ce5:	89 f9                	mov    ecx,edi
   28ce7:	d3 e6                	shl    esi,cl
   28ce9:	39 c6                	cmp    esi,eax
   28ceb:	73 07                	jae    28cf4 <__udivdi3+0xc4>
   28ced:	39 d5                	cmp    ebp,edx
   28cef:	75 03                	jne    28cf4 <__udivdi3+0xc4>
   28cf1:	83 eb 01             	sub    ebx,0x1
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1202
		{
		  q0--;
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
   28cf4:	31 ff                	xor    edi,edi
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28cf6:	89 d8                	mov    eax,ebx
   28cf8:	89 fa                	mov    edx,edi
   28cfa:	83 c4 1c             	add    esp,0x1c
   28cfd:	5b                   	pop    ebx
   28cfe:	5e                   	pop    esi
   28cff:	5f                   	pop    edi
   28d00:	5d                   	pop    ebp
   28d01:	c3                   	ret    
   28d02:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   28d08:	31 ff                	xor    edi,edi
   28d0a:	31 db                	xor    ebx,ebx
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28d0c:	89 d8                	mov    eax,ebx
   28d0e:	89 fa                	mov    edx,edi
   28d10:	83 c4 1c             	add    esp,0x1c
   28d13:	5b                   	pop    ebx
   28d14:	5e                   	pop    esi
   28d15:	5f                   	pop    edi
   28d16:	5d                   	pop    ebp
   28d17:	c3                   	ret    
   28d18:	90                   	nop
   28d19:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1032
    {
      if (d0 > n1)
	{
	  /* 0q = nn / 0D */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   28d20:	89 d8                	mov    eax,ebx
   28d22:	f7 f7                	div    edi
   28d24:	31 ff                	xor    edi,edi
   28d26:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28d28:	89 d8                	mov    eax,ebx
   28d2a:	89 fa                	mov    edx,edi
   28d2c:	83 c4 1c             	add    esp,0x1c
   28d2f:	5b                   	pop    ebx
   28d30:	5e                   	pop    esi
   28d31:	5f                   	pop    edi
   28d32:	5d                   	pop    ebp
   28d33:	c3                   	ret    
   28d34:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1166

		 This special case is necessary, not an optimization.  */

	      /* The condition on the next line takes advantage of that
		 n1 >= d1 (true due to program flow).  */
	      if (n1 > d1 || n0 >= d0)
   28d38:	39 ce                	cmp    esi,ecx
   28d3a:	72 0c                	jb     28d48 <__udivdi3+0x118>
   28d3c:	31 db                	xor    ebx,ebx
   28d3e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
   28d42:	0f 87 34 ff ff ff    	ja     28c7c <__udivdi3+0x4c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1169
		{
		  q0 = 1;
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
   28d48:	bb 01 00 00 00       	mov    ebx,0x1
   28d4d:	e9 2a ff ff ff       	jmp    28c7c <__udivdi3+0x4c>
