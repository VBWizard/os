/* 
 * File:   chrisos.h
 * Author: yogi
 *
 * Created on May 6, 2016, 6:57 AM
 */

#ifndef CHRISOS_H
#define	CHRISOS_H
#include <stdint.h>
#include "i386/cpu.h"
#define TICKS_PER_SECOND 100
#define KERNEL_DATA_LOAD_ADDRESS 0x00200000
#define KERNEL_PHYSICAL_EXEC_ADDRESS 0x01000000
#define KERNEL_VIRTUAL_EXEC_ADDRESS 0xD0000000
#define KERNEL_DATA_NAME "kernelData"
//#define KERNEL_DATA_NAME ".data"
#define KERNEL_DATA_SECTION __attribute__ ((section(KERNEL_DATA_NAME)))
#define HIGH_CODE_NAME ".text"
//#define HIGH_CODE_NAME "hiCode"
#define HIGH_CODE_SECTION __attribute__ ((section(HIGH_CODE_NAME)))
///Base address for library loading
#define LIBRARY_BASE_LOAD_ADDRESS 0x07f00000
/***************************************** CONFIG ****************************************/
//#define DISABLE_PAGING 1
#define __SMP__
/*ADDRESSES*/
#define INIT_DATA_BASE_ADDRESS 0x200000 
#define E820_TABLE_SIZE 0X960*2                                          /*ROOM FOR 200 RECORDS*/
#define MP_CONFIG_TABLE_SIZE 8192
#define IDT_TABLE_SIZE 256*8
#define KEYBOARD_BUFFER_SIZE 128
#define GDT_TABLE_SIZE 256*8
#define ATA_MBR_ARRAY_SIZE 0x1000
#define GDT_PMODE_16BIT_TABLE_SIZE 256*8
#define RAM_AMT_TO_PAGE_INITIALLY 0x1000000
#define KERNEL_PAGE_DIR_SIZE 0x10000                //64GB max memory (0x1000000000) max
#define KERNEL_PAGE_TABLE_INITIAL_SIZE 0x400000     //4GB (100000000) max visible initially
#define SAVED_STACK_FOR_EXCEPTIONS_SIZE 0x1000
#define TSS_TABLE_RECORD_COUNT 1024
#define TSS_TABLE_SIZE (0x68*TSS_TABLE_RECORD_COUNT)
#define TASK_TABLE_SIZE (TSS_TABLE_RECORD_COUNT*(100))          //need task_t size

#define KERNEL_OBJECT_BASE_ADDRESS 0x280000
#define E820_TABLE_ADDRESS KERNEL_OBJECT_BASE_ADDRESS
#define MP_CONFIG_TABLE_ADDRESS (E820_TABLE_ADDRESS + E820_TABLE_SIZE)
#define KEYBOARD_BUFFER_ADDRESS (MP_CONFIG_TABLE_ADDRESS + MP_CONFIG_TABLE_SIZE)                                      //2852C0
#define IDT_TABLE_ADDRESS ((KEYBOARD_BUFFER_ADDRESS + KEYBOARD_BUFFER_SIZE + 4096) & 0xFFFFF000)                    //284000
#define INIT_GDT_TABLE_ADDRESS ((IDT_TABLE_ADDRESS + IDT_TABLE_SIZE + 4096) & 0xFFFFF000)                           //285000
#define TASK_TABLE_ADDRESS ((INIT_GDT_TABLE_ADDRESS + GDT_TABLE_SIZE + 4096) & 0xFFFFF000)
#define TSS_TABLE_ADDRESS ((TASK_TABLE_ADDRESS + TASK_TABLE_SIZE+4096) & 0xFFFFF000)
#define ATA_MBR_ARRAY_ADDRESS (TSS_TABLE_ADDRESS + TSS_TABLE_SIZE)
#define PCI_DEVICE_LIST_ADDRESS (ATA_MBR_ARRAY_ADDRESS + ATA_MBR_ARRAY_SIZE)
#define PCI_BRIDGE_LIST_ADDRESS (PCI_DEVICE_LIST_ADDRESS+0x10000)
#define PCI_FUNCTION_LIST_ADDRESS (PCI_BRIDGE_LIST_ADDRESS+0x10000)
#define GDT_PMODE_16BIT_TABLE_ADDRESS (PCI_FUNCTION_LIST_ADDRESS + 0x1000)
#define KERNEL_PAGE_DIR_ADDRESS ((GDT_PMODE_16BIT_TABLE_ADDRESS + GDT_PMODE_16BIT_TABLE_SIZE + 4096) & 0xFFFFF000)  //28a000
#define KERNEL_PAGE_TABLE_BASE_ADDRESS (KERNEL_PAGE_DIR_ADDRESS + KERNEL_PAGE_DIR_SIZE + 0x2000)                      //29B000
#define SAVED_STACK_FOR_EXCEPTIONS_ADDRESS (KERNEL_PAGE_TABLE_BASE_ADDRESS + KERNEL_PAGE_TABLE_INITIAL_SIZE + 4096)
#define SAVED_STACK_FOR_DEBUGGING_ADDRESS (SAVED_STACK_FOR_EXCEPTIONS_ADDRESS + SAVED_STACK_FOR_EXCEPTIONS_SIZE + 4096)
#define CPU_APIC_REGISTER_REMAP_BASE_ADDRESS (SAVED_STACK_FOR_DEBUGGING_ADDRESS + SAVED_STACK_FOR_EXCEPTIONS_SIZE + 4096)       //this number is no longer static in the asm code
#define CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS (CPU_APIC_REGISTER_REMAP_BASE_ADDRESS + 0x1000)
#define KERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS (CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS+4)
#define AHCI_ABAR_REMAPPED_ADDRESS ((KERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS+0x1000)&0xFFFFF000)
#define AHCI_PORT_BASE_REMAP_ADDRESS ((AHCI_ABAR_REMAPPED_ADDRESS+0x40000)&0xFFFFF000)                        //command list base starts here - possibly 10 controllers (each is A000-10000 bytes))
#define AHCI_DISK_BUFFER_ADDRESS (AHCI_PORT_BASE_REMAP_ADDRESS+((0x10000*20)&0xFFFF0000))
#define ATA_DEVICE_INFO_ADDRESS (AHCI_DISK_BUFFER_ADDRESS+(0x10000*20))
#define AHCI_CAPS_ADDRESS (ATA_DEVICE_INFO_ADDRESS + 20*1000)
#define TSS_AVAILABLE_ADDRESS (AHCI_CAPS_ADDRESS + (20*1000))
#define GDT_AVAILABLE_ADDRESS (TSS_AVAILABLE_ADDRESS + (1024/4))
#define EXEC_FILE_LOAD_INFO (GDT_AVAILABLE_ADDRESS + ((1024/4)))
#define AHCI_ABAR_ADDRESS (EXEC_FILE_LOAD_INFO + 100000) //(sizeof(elfInfo_t)*100))
#define END_OF_KERNEL_OBJECTS_ADDRESS (AHCI_ABAR_ADDRESS+0x100000)

//#define KERNEL_CODE_BASE_ADDRESS
#define STACK_BASE_ADDRESS 0x99ffe0
#define KERNEL_PAGED_BASE_ADDRESS 0xC0000000
#define KERNEL_TEMP_LOW_PAGE_TABLE_BASE_ADDRESS 0x5090000


#define SYS_VGA_WIDTH 80
#define SYS_VGA_HEIGHT 50
#define MINIMUM_USABLE_MEMORY (256 * 1024 * 1024)
#define SMAP_TABLE_MAX_ENTRIES 50
#define TIMEZONE -4

#define PIC_REMAP_OFFSET 32

/* ***NOTE: If DEBUG_NONE is defined then there will be no debugging*** */
//#define DEBUG_NONE 0
#define DEBUG_TICK 1 << 1
#define DEBUG_EXPANDED_TICK 1 << 2
#define DEBUG_HARDDRIVE 1 << 3
#define DEBUG_KEYBOARD 1 << 4
#define DEBUG_PAGING_CONFIG 1 << 5
#define DEBUG_PAGING 1 << 6
#define DEBUG_TIMER 1 << 7
#define DEBUG_PCI_DISCOVERY 1 << 8
#define DEBUG_ELF_LOADER 1 << 9
#define DEBUG_ACPI 1<<10
#define DEBUG_MP 1<<11
#define DEBUG_EXCEPTIONS 1<<12
#define DEBUG_AHCI 1<<13
#define DEBUG_TASK 1<<14
#define DEBUG_KERNEL_PAGING 1<<15
#define DEBUG_MEMORY_MANAGEMENT 1<<16
#define DEBUG_LOADER 1<<17
#define DEBUG_MAX 0XFFFF            //0XFFFF TO TURN ON
#define KDEBUGLEVEL DEBUG_EXCEPTIONS | DEBUG_PAGING_CONFIG | DEBUG_MEMORY_MANAGEMENT | DEBUG_KERNEL_PAGING //| DEBUG_AHCI // | DEBUG_ELF_LOADER
//DEBUG_TICK | 
#define SCREEN_SPACES_PER_TAB 5

#define MAX_PARAM_COUNT 10
#define MAX_PARAM_WIDTH 512

#define PAGING_IN_USE_FLAG_MASK 0x800

#define STOPHERE(val) \
        __asm__("push eax\n mov eax,%0\n cli\n hlt\n pop eax\n" \
: \
: "r" (val) );

#define STOPHERE2 \
        __asm__("cli\n hlt\n");
#define BREAKPOINT __asm__("int 0x3\n");

#define CLI \
__asm__("cli\n");

#define STI \
__asm__("sti\n");
#endif	/* CHRISOS_H */

